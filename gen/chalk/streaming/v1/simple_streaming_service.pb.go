// We expect to remove this file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/streaming/v1/simple_streaming_service.proto

package streamingv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleStreamingUnaryInvokeRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	StreamingResolverFqn string                 `protobuf:"bytes,1,opt,name=streaming_resolver_fqn,json=streamingResolverFqn,proto3" json:"streaming_resolver_fqn,omitempty"`
	// Expected to contain an arrow table in apache arrow ipc format
	// that contains the raw streaming message data to be processed.
	// We need the (message_id, message_key, message_data, publish_timestamp) columns.
	InputData     []byte  `protobuf:"bytes,2,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	OperationId   *string `protobuf:"bytes,3,opt,name=operation_id,json=operationId,proto3,oneof" json:"operation_id,omitempty"` // An optional operation ID to track the request
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleStreamingUnaryInvokeRequest) Reset() {
	*x = SimpleStreamingUnaryInvokeRequest{}
	mi := &file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleStreamingUnaryInvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleStreamingUnaryInvokeRequest) ProtoMessage() {}

func (x *SimpleStreamingUnaryInvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleStreamingUnaryInvokeRequest.ProtoReflect.Descriptor instead.
func (*SimpleStreamingUnaryInvokeRequest) Descriptor() ([]byte, []int) {
	return file_chalk_streaming_v1_simple_streaming_service_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleStreamingUnaryInvokeRequest) GetStreamingResolverFqn() string {
	if x != nil {
		return x.StreamingResolverFqn
	}
	return ""
}

func (x *SimpleStreamingUnaryInvokeRequest) GetInputData() []byte {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *SimpleStreamingUnaryInvokeRequest) GetOperationId() string {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return ""
}

type SimpleStreamingUnaryInvokeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NumRowsSucceed int64                  `protobuf:"varint,1,opt,name=num_rows_succeed,json=numRowsSucceed,proto3" json:"num_rows_succeed,omitempty"` // The number of rows persisted
	NumRowsFailed  int64                  `protobuf:"varint,2,opt,name=num_rows_failed,json=numRowsFailed,proto3" json:"num_rows_failed,omitempty"`    // The number of rows persisted
	NumRowsSkipped int64                  `protobuf:"varint,3,opt,name=num_rows_skipped,json=numRowsSkipped,proto3" json:"num_rows_skipped,omitempty"` // The number of rows persisted
	// Optional error if the invocation failed.
	Error         *v1.ChalkError `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleStreamingUnaryInvokeResponse) Reset() {
	*x = SimpleStreamingUnaryInvokeResponse{}
	mi := &file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleStreamingUnaryInvokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleStreamingUnaryInvokeResponse) ProtoMessage() {}

func (x *SimpleStreamingUnaryInvokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleStreamingUnaryInvokeResponse.ProtoReflect.Descriptor instead.
func (*SimpleStreamingUnaryInvokeResponse) Descriptor() ([]byte, []int) {
	return file_chalk_streaming_v1_simple_streaming_service_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleStreamingUnaryInvokeResponse) GetNumRowsSucceed() int64 {
	if x != nil {
		return x.NumRowsSucceed
	}
	return 0
}

func (x *SimpleStreamingUnaryInvokeResponse) GetNumRowsFailed() int64 {
	if x != nil {
		return x.NumRowsFailed
	}
	return 0
}

func (x *SimpleStreamingUnaryInvokeResponse) GetNumRowsSkipped() int64 {
	if x != nil {
		return x.NumRowsSkipped
	}
	return 0
}

func (x *SimpleStreamingUnaryInvokeResponse) GetError() *v1.ChalkError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_chalk_streaming_v1_simple_streaming_service_proto protoreflect.FileDescriptor

const file_chalk_streaming_v1_simple_streaming_service_proto_rawDesc = "" +
	"\n" +
	"1chalk/streaming/v1/simple_streaming_service.proto\x12\x12chalk.streaming.v1\x1a\x1fchalk/auth/v1/permissions.proto\x1a!chalk/common/v1/chalk_error.proto\"\xb1\x01\n" +
	"!SimpleStreamingUnaryInvokeRequest\x124\n" +
	"\x16streaming_resolver_fqn\x18\x01 \x01(\tR\x14streamingResolverFqn\x12\x1d\n" +
	"\n" +
	"input_data\x18\x02 \x01(\fR\tinputData\x12&\n" +
	"\foperation_id\x18\x03 \x01(\tH\x00R\voperationId\x88\x01\x01B\x0f\n" +
	"\r_operation_id\"\xe2\x01\n" +
	"\"SimpleStreamingUnaryInvokeResponse\x12(\n" +
	"\x10num_rows_succeed\x18\x01 \x01(\x03R\x0enumRowsSucceed\x12&\n" +
	"\x0fnum_rows_failed\x18\x02 \x01(\x03R\rnumRowsFailed\x12(\n" +
	"\x10num_rows_skipped\x18\x03 \x01(\x03R\x0enumRowsSkipped\x126\n" +
	"\x05error\x18\x04 \x01(\v2\x1b.chalk.common.v1.ChalkErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error2\xab\x01\n" +
	"\x16SimpleStreamingService\x12\x90\x01\n" +
	"\x1aSimpleStreamingUnaryInvoke\x125.chalk.streaming.v1.SimpleStreamingUnaryInvokeRequest\x1a6.chalk.streaming.v1.SimpleStreamingUnaryInvokeResponse\"\x03\x80}\x02B\xe0\x01\n" +
	"\x16com.chalk.streaming.v1B\x1bSimpleStreamingServiceProtoP\x01Z?github.com/chalk-ai/chalk-go/gen/chalk/streaming/v1;streamingv1\xa2\x02\x03CSX\xaa\x02\x12Chalk.Streaming.V1\xca\x02\x12Chalk\\Streaming\\V1\xe2\x02\x1eChalk\\Streaming\\V1\\GPBMetadata\xea\x02\x14Chalk::Streaming::V1b\x06proto3"

var (
	file_chalk_streaming_v1_simple_streaming_service_proto_rawDescOnce sync.Once
	file_chalk_streaming_v1_simple_streaming_service_proto_rawDescData []byte
)

func file_chalk_streaming_v1_simple_streaming_service_proto_rawDescGZIP() []byte {
	file_chalk_streaming_v1_simple_streaming_service_proto_rawDescOnce.Do(func() {
		file_chalk_streaming_v1_simple_streaming_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_streaming_v1_simple_streaming_service_proto_rawDesc), len(file_chalk_streaming_v1_simple_streaming_service_proto_rawDesc)))
	})
	return file_chalk_streaming_v1_simple_streaming_service_proto_rawDescData
}

var file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chalk_streaming_v1_simple_streaming_service_proto_goTypes = []any{
	(*SimpleStreamingUnaryInvokeRequest)(nil),  // 0: chalk.streaming.v1.SimpleStreamingUnaryInvokeRequest
	(*SimpleStreamingUnaryInvokeResponse)(nil), // 1: chalk.streaming.v1.SimpleStreamingUnaryInvokeResponse
	(*v1.ChalkError)(nil),                      // 2: chalk.common.v1.ChalkError
}
var file_chalk_streaming_v1_simple_streaming_service_proto_depIdxs = []int32{
	2, // 0: chalk.streaming.v1.SimpleStreamingUnaryInvokeResponse.error:type_name -> chalk.common.v1.ChalkError
	0, // 1: chalk.streaming.v1.SimpleStreamingService.SimpleStreamingUnaryInvoke:input_type -> chalk.streaming.v1.SimpleStreamingUnaryInvokeRequest
	1, // 2: chalk.streaming.v1.SimpleStreamingService.SimpleStreamingUnaryInvoke:output_type -> chalk.streaming.v1.SimpleStreamingUnaryInvokeResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_chalk_streaming_v1_simple_streaming_service_proto_init() }
func file_chalk_streaming_v1_simple_streaming_service_proto_init() {
	if File_chalk_streaming_v1_simple_streaming_service_proto != nil {
		return
	}
	file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_streaming_v1_simple_streaming_service_proto_rawDesc), len(file_chalk_streaming_v1_simple_streaming_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_streaming_v1_simple_streaming_service_proto_goTypes,
		DependencyIndexes: file_chalk_streaming_v1_simple_streaming_service_proto_depIdxs,
		MessageInfos:      file_chalk_streaming_v1_simple_streaming_service_proto_msgTypes,
	}.Build()
	File_chalk_streaming_v1_simple_streaming_service_proto = out.File
	file_chalk_streaming_v1_simple_streaming_service_proto_goTypes = nil
	file_chalk_streaming_v1_simple_streaming_service_proto_depIdxs = nil
}
