// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/kubernetes/v1/resourcequota.proto

package kubernetesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KubernetesResourceQuotaStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hard is the set of enforced hard limits for each named resource.
	// More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	// +optional
	HardLimits *KubernetesResourceQuantities `protobuf:"bytes,1,opt,name=hard_limits,json=hardLimits,proto3" json:"hard_limits,omitempty"`
	// Used is the current observed total usage of the resource in the namespace.
	// +optional
	Used *KubernetesResourceQuantities `protobuf:"bytes,2,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *KubernetesResourceQuotaStatus) Reset() {
	*x = KubernetesResourceQuotaStatus{}
	mi := &file_chalk_kubernetes_v1_resourcequota_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesResourceQuotaStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesResourceQuotaStatus) ProtoMessage() {}

func (x *KubernetesResourceQuotaStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_resourcequota_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesResourceQuotaStatus.ProtoReflect.Descriptor instead.
func (*KubernetesResourceQuotaStatus) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_resourcequota_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesResourceQuotaStatus) GetHardLimits() *KubernetesResourceQuantities {
	if x != nil {
		return x.HardLimits
	}
	return nil
}

func (x *KubernetesResourceQuotaStatus) GetUsed() *KubernetesResourceQuantities {
	if x != nil {
		return x.Used
	}
	return nil
}

type KubernetesResourceQuotaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardLimits *KubernetesResourceQuantities `protobuf:"bytes,1,opt,name=hard_limits,json=hardLimits,proto3" json:"hard_limits,omitempty"`
}

func (x *KubernetesResourceQuotaSpec) Reset() {
	*x = KubernetesResourceQuotaSpec{}
	mi := &file_chalk_kubernetes_v1_resourcequota_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesResourceQuotaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesResourceQuotaSpec) ProtoMessage() {}

func (x *KubernetesResourceQuotaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_resourcequota_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesResourceQuotaSpec.ProtoReflect.Descriptor instead.
func (*KubernetesResourceQuotaSpec) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_resourcequota_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesResourceQuotaSpec) GetHardLimits() *KubernetesResourceQuantities {
	if x != nil {
		return x.HardLimits
	}
	return nil
}

type KubernetesResourceQuotaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec defines the desired quota.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *KubernetesResourceQuotaSpec `protobuf:"bytes,2,opt,name=spec,proto3,oneof" json:"spec,omitempty"`
	// Status defines the actual enforced quota and its current usage.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status *KubernetesResourceQuotaStatus `protobuf:"bytes,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *KubernetesResourceQuotaData) Reset() {
	*x = KubernetesResourceQuotaData{}
	mi := &file_chalk_kubernetes_v1_resourcequota_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesResourceQuotaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesResourceQuotaData) ProtoMessage() {}

func (x *KubernetesResourceQuotaData) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_resourcequota_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesResourceQuotaData.ProtoReflect.Descriptor instead.
func (*KubernetesResourceQuotaData) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_resourcequota_proto_rawDescGZIP(), []int{2}
}

func (x *KubernetesResourceQuotaData) GetSpec() *KubernetesResourceQuotaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *KubernetesResourceQuotaData) GetStatus() *KubernetesResourceQuotaStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_chalk_kubernetes_v1_resourcequota_proto protoreflect.FileDescriptor

var file_chalk_kubernetes_v1_resourcequota_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x2c,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a,
	0x1d, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52,
	0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x1b, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a,
	0x1b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xde, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x4b, 0x58, 0xaa, 0x02, 0x13, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_kubernetes_v1_resourcequota_proto_rawDescOnce sync.Once
	file_chalk_kubernetes_v1_resourcequota_proto_rawDescData = file_chalk_kubernetes_v1_resourcequota_proto_rawDesc
)

func file_chalk_kubernetes_v1_resourcequota_proto_rawDescGZIP() []byte {
	file_chalk_kubernetes_v1_resourcequota_proto_rawDescOnce.Do(func() {
		file_chalk_kubernetes_v1_resourcequota_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_kubernetes_v1_resourcequota_proto_rawDescData)
	})
	return file_chalk_kubernetes_v1_resourcequota_proto_rawDescData
}

var file_chalk_kubernetes_v1_resourcequota_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_kubernetes_v1_resourcequota_proto_goTypes = []any{
	(*KubernetesResourceQuotaStatus)(nil), // 0: chalk.kubernetes.v1.KubernetesResourceQuotaStatus
	(*KubernetesResourceQuotaSpec)(nil),   // 1: chalk.kubernetes.v1.KubernetesResourceQuotaSpec
	(*KubernetesResourceQuotaData)(nil),   // 2: chalk.kubernetes.v1.KubernetesResourceQuotaData
	(*KubernetesResourceQuantities)(nil),  // 3: chalk.kubernetes.v1.KubernetesResourceQuantities
}
var file_chalk_kubernetes_v1_resourcequota_proto_depIdxs = []int32{
	3, // 0: chalk.kubernetes.v1.KubernetesResourceQuotaStatus.hard_limits:type_name -> chalk.kubernetes.v1.KubernetesResourceQuantities
	3, // 1: chalk.kubernetes.v1.KubernetesResourceQuotaStatus.used:type_name -> chalk.kubernetes.v1.KubernetesResourceQuantities
	3, // 2: chalk.kubernetes.v1.KubernetesResourceQuotaSpec.hard_limits:type_name -> chalk.kubernetes.v1.KubernetesResourceQuantities
	1, // 3: chalk.kubernetes.v1.KubernetesResourceQuotaData.spec:type_name -> chalk.kubernetes.v1.KubernetesResourceQuotaSpec
	0, // 4: chalk.kubernetes.v1.KubernetesResourceQuotaData.status:type_name -> chalk.kubernetes.v1.KubernetesResourceQuotaStatus
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_chalk_kubernetes_v1_resourcequota_proto_init() }
func file_chalk_kubernetes_v1_resourcequota_proto_init() {
	if File_chalk_kubernetes_v1_resourcequota_proto != nil {
		return
	}
	file_chalk_kubernetes_v1_resourcequantities_proto_init()
	file_chalk_kubernetes_v1_resourcequota_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_kubernetes_v1_resourcequota_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_kubernetes_v1_resourcequota_proto_goTypes,
		DependencyIndexes: file_chalk_kubernetes_v1_resourcequota_proto_depIdxs,
		MessageInfos:      file_chalk_kubernetes_v1_resourcequota_proto_msgTypes,
	}.Build()
	File_chalk_kubernetes_v1_resourcequota_proto = out.File
	file_chalk_kubernetes_v1_resourcequota_proto_rawDesc = nil
	file_chalk_kubernetes_v1_resourcequota_proto_goTypes = nil
	file_chalk_kubernetes_v1_resourcequota_proto_depIdxs = nil
}
