// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/kubernetes/v1/persistentvolume.proto

package kubernetesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChalkKubernetesPersistentVolume struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Spec          *ChalkKubernetesPersistentVolumeSpec    `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Metrics       *ChalkKubernetesPersistentVolumeMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChalkKubernetesPersistentVolume) Reset() {
	*x = ChalkKubernetesPersistentVolume{}
	mi := &file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkKubernetesPersistentVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkKubernetesPersistentVolume) ProtoMessage() {}

func (x *ChalkKubernetesPersistentVolume) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkKubernetesPersistentVolume.ProtoReflect.Descriptor instead.
func (*ChalkKubernetesPersistentVolume) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_persistentvolume_proto_rawDescGZIP(), []int{0}
}

func (x *ChalkKubernetesPersistentVolume) GetSpec() *ChalkKubernetesPersistentVolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ChalkKubernetesPersistentVolume) GetMetrics() *ChalkKubernetesPersistentVolumeMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type ChalkKubernetesPersistentVolumeSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageClass  string                 `protobuf:"bytes,1,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AccessModes   []string               `protobuf:"bytes,3,rep,name=access_modes,json=accessModes,proto3" json:"access_modes,omitempty"`
	Capacity      string                 `protobuf:"bytes,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ReclaimPolicy string                 `protobuf:"bytes,6,opt,name=reclaim_policy,json=reclaimPolicy,proto3" json:"reclaim_policy,omitempty"`
	Claim         string                 `protobuf:"bytes,7,opt,name=claim,proto3" json:"claim,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChalkKubernetesPersistentVolumeSpec) Reset() {
	*x = ChalkKubernetesPersistentVolumeSpec{}
	mi := &file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkKubernetesPersistentVolumeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkKubernetesPersistentVolumeSpec) ProtoMessage() {}

func (x *ChalkKubernetesPersistentVolumeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkKubernetesPersistentVolumeSpec.ProtoReflect.Descriptor instead.
func (*ChalkKubernetesPersistentVolumeSpec) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_persistentvolume_proto_rawDescGZIP(), []int{1}
}

func (x *ChalkKubernetesPersistentVolumeSpec) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *ChalkKubernetesPersistentVolumeSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChalkKubernetesPersistentVolumeSpec) GetAccessModes() []string {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *ChalkKubernetesPersistentVolumeSpec) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *ChalkKubernetesPersistentVolumeSpec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChalkKubernetesPersistentVolumeSpec) GetReclaimPolicy() string {
	if x != nil {
		return x.ReclaimPolicy
	}
	return ""
}

func (x *ChalkKubernetesPersistentVolumeSpec) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

type ChalkKubernetesPersistentVolumeMetrics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CapacityBytes  float64                `protobuf:"fixed64,1,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"` // Double to match prometheus type
	UsedBytes      float64                `protobuf:"fixed64,2,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	AvailableBytes float64                `protobuf:"fixed64,3,opt,name=available_bytes,json=availableBytes,proto3" json:"available_bytes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChalkKubernetesPersistentVolumeMetrics) Reset() {
	*x = ChalkKubernetesPersistentVolumeMetrics{}
	mi := &file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkKubernetesPersistentVolumeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkKubernetesPersistentVolumeMetrics) ProtoMessage() {}

func (x *ChalkKubernetesPersistentVolumeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkKubernetesPersistentVolumeMetrics.ProtoReflect.Descriptor instead.
func (*ChalkKubernetesPersistentVolumeMetrics) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_persistentvolume_proto_rawDescGZIP(), []int{2}
}

func (x *ChalkKubernetesPersistentVolumeMetrics) GetCapacityBytes() float64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *ChalkKubernetesPersistentVolumeMetrics) GetUsedBytes() float64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *ChalkKubernetesPersistentVolumeMetrics) GetAvailableBytes() float64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

var File_chalk_kubernetes_v1_persistentvolume_proto protoreflect.FileDescriptor

const file_chalk_kubernetes_v1_persistentvolume_proto_rawDesc = "" +
	"\n" +
	"*chalk/kubernetes/v1/persistentvolume.proto\x12\x13chalk.kubernetes.v1\"\xc6\x01\n" +
	"\x1fChalkKubernetesPersistentVolume\x12L\n" +
	"\x04spec\x18\x01 \x01(\v28.chalk.kubernetes.v1.ChalkKubernetesPersistentVolumeSpecR\x04spec\x12U\n" +
	"\ametrics\x18\x02 \x01(\v2;.chalk.kubernetes.v1.ChalkKubernetesPersistentVolumeMetricsR\ametrics\"\xf2\x01\n" +
	"#ChalkKubernetesPersistentVolumeSpec\x12#\n" +
	"\rstorage_class\x18\x01 \x01(\tR\fstorageClass\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\faccess_modes\x18\x03 \x03(\tR\vaccessModes\x12\x1a\n" +
	"\bcapacity\x18\x04 \x01(\tR\bcapacity\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12%\n" +
	"\x0ereclaim_policy\x18\x06 \x01(\tR\rreclaimPolicy\x12\x14\n" +
	"\x05claim\x18\a \x01(\tR\x05claim\"\x97\x01\n" +
	"&ChalkKubernetesPersistentVolumeMetrics\x12%\n" +
	"\x0ecapacity_bytes\x18\x01 \x01(\x01R\rcapacityBytes\x12\x1d\n" +
	"\n" +
	"used_bytes\x18\x02 \x01(\x01R\tusedBytes\x12'\n" +
	"\x0favailable_bytes\x18\x03 \x01(\x01R\x0eavailableBytesB\xe1\x01\n" +
	"\x17com.chalk.kubernetes.v1B\x15PersistentvolumeProtoP\x01ZAgithub.com/chalk-ai/chalk-go/gen/chalk/kubernetes/v1;kubernetesv1\xa2\x02\x03CKX\xaa\x02\x13Chalk.Kubernetes.V1\xca\x02\x13Chalk\\Kubernetes\\V1\xe2\x02\x1fChalk\\Kubernetes\\V1\\GPBMetadata\xea\x02\x15Chalk::Kubernetes::V1b\x06proto3"

var (
	file_chalk_kubernetes_v1_persistentvolume_proto_rawDescOnce sync.Once
	file_chalk_kubernetes_v1_persistentvolume_proto_rawDescData []byte
)

func file_chalk_kubernetes_v1_persistentvolume_proto_rawDescGZIP() []byte {
	file_chalk_kubernetes_v1_persistentvolume_proto_rawDescOnce.Do(func() {
		file_chalk_kubernetes_v1_persistentvolume_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_kubernetes_v1_persistentvolume_proto_rawDesc), len(file_chalk_kubernetes_v1_persistentvolume_proto_rawDesc)))
	})
	return file_chalk_kubernetes_v1_persistentvolume_proto_rawDescData
}

var file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_kubernetes_v1_persistentvolume_proto_goTypes = []any{
	(*ChalkKubernetesPersistentVolume)(nil),        // 0: chalk.kubernetes.v1.ChalkKubernetesPersistentVolume
	(*ChalkKubernetesPersistentVolumeSpec)(nil),    // 1: chalk.kubernetes.v1.ChalkKubernetesPersistentVolumeSpec
	(*ChalkKubernetesPersistentVolumeMetrics)(nil), // 2: chalk.kubernetes.v1.ChalkKubernetesPersistentVolumeMetrics
}
var file_chalk_kubernetes_v1_persistentvolume_proto_depIdxs = []int32{
	1, // 0: chalk.kubernetes.v1.ChalkKubernetesPersistentVolume.spec:type_name -> chalk.kubernetes.v1.ChalkKubernetesPersistentVolumeSpec
	2, // 1: chalk.kubernetes.v1.ChalkKubernetesPersistentVolume.metrics:type_name -> chalk.kubernetes.v1.ChalkKubernetesPersistentVolumeMetrics
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_kubernetes_v1_persistentvolume_proto_init() }
func file_chalk_kubernetes_v1_persistentvolume_proto_init() {
	if File_chalk_kubernetes_v1_persistentvolume_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_kubernetes_v1_persistentvolume_proto_rawDesc), len(file_chalk_kubernetes_v1_persistentvolume_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_kubernetes_v1_persistentvolume_proto_goTypes,
		DependencyIndexes: file_chalk_kubernetes_v1_persistentvolume_proto_depIdxs,
		MessageInfos:      file_chalk_kubernetes_v1_persistentvolume_proto_msgTypes,
	}.Build()
	File_chalk_kubernetes_v1_persistentvolume_proto = out.File
	file_chalk_kubernetes_v1_persistentvolume_proto_goTypes = nil
	file_chalk_kubernetes_v1_persistentvolume_proto_depIdxs = nil
}
