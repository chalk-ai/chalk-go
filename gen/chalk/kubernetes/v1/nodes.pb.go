// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/kubernetes/v1/nodes.proto

//

package kubernetesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KubernetesNodeTaint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Effect        string                 `protobuf:"bytes,3,opt,name=effect,proto3" json:"effect,omitempty"`
	TimeAdded     *int64                 `protobuf:"varint,4,opt,name=time_added,json=timeAdded,proto3,oneof" json:"time_added,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesNodeTaint) Reset() {
	*x = KubernetesNodeTaint{}
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesNodeTaint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeTaint) ProtoMessage() {}

func (x *KubernetesNodeTaint) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeTaint.ProtoReflect.Descriptor instead.
func (*KubernetesNodeTaint) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_nodes_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesNodeTaint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KubernetesNodeTaint) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *KubernetesNodeTaint) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *KubernetesNodeTaint) GetTimeAdded() int64 {
	if x != nil && x.TimeAdded != nil {
		return *x.TimeAdded
	}
	return 0
}

type KubernetesNodeSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PodCidr       *string                `protobuf:"bytes,1,opt,name=pod_cidr,json=podCidr,proto3,oneof" json:"pod_cidr,omitempty"`
	Taints        []*KubernetesNodeTaint `protobuf:"bytes,2,rep,name=taints,proto3" json:"taints,omitempty"`
	PodCidrs      []string               `protobuf:"bytes,3,rep,name=pod_cidrs,json=podCidrs,proto3" json:"pod_cidrs,omitempty"`
	ProviderId    *string                `protobuf:"bytes,4,opt,name=provider_id,json=providerId,proto3,oneof" json:"provider_id,omitempty"`
	Unschedulable *bool                  `protobuf:"varint,5,opt,name=unschedulable,proto3,oneof" json:"unschedulable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesNodeSpec) Reset() {
	*x = KubernetesNodeSpec{}
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesNodeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeSpec) ProtoMessage() {}

func (x *KubernetesNodeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeSpec.ProtoReflect.Descriptor instead.
func (*KubernetesNodeSpec) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_nodes_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesNodeSpec) GetPodCidr() string {
	if x != nil && x.PodCidr != nil {
		return *x.PodCidr
	}
	return ""
}

func (x *KubernetesNodeSpec) GetTaints() []*KubernetesNodeTaint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *KubernetesNodeSpec) GetPodCidrs() []string {
	if x != nil {
		return x.PodCidrs
	}
	return nil
}

func (x *KubernetesNodeSpec) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *KubernetesNodeSpec) GetUnschedulable() bool {
	if x != nil && x.Unschedulable != nil {
		return *x.Unschedulable
	}
	return false
}

type KubernetesNodeCondition struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Type               string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LastHeartbeatTime  int64                  `protobuf:"varint,3,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
	LastTransitionTime int64                  `protobuf:"varint,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	Reason             *string                `protobuf:"bytes,5,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Message            *string                `protobuf:"bytes,6,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KubernetesNodeCondition) Reset() {
	*x = KubernetesNodeCondition{}
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesNodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeCondition) ProtoMessage() {}

func (x *KubernetesNodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeCondition.ProtoReflect.Descriptor instead.
func (*KubernetesNodeCondition) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_nodes_proto_rawDescGZIP(), []int{2}
}

func (x *KubernetesNodeCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KubernetesNodeCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KubernetesNodeCondition) GetLastHeartbeatTime() int64 {
	if x != nil {
		return x.LastHeartbeatTime
	}
	return 0
}

func (x *KubernetesNodeCondition) GetLastTransitionTime() int64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *KubernetesNodeCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *KubernetesNodeCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type KubernetesAttachedVolume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DevicePath    string                 `protobuf:"bytes,2,opt,name=device_path,json=devicePath,proto3" json:"device_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesAttachedVolume) Reset() {
	*x = KubernetesAttachedVolume{}
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesAttachedVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAttachedVolume) ProtoMessage() {}

func (x *KubernetesAttachedVolume) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAttachedVolume.ProtoReflect.Descriptor instead.
func (*KubernetesAttachedVolume) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_nodes_proto_rawDescGZIP(), []int{3}
}

func (x *KubernetesAttachedVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesAttachedVolume) GetDevicePath() string {
	if x != nil {
		return x.DevicePath
	}
	return ""
}

type KubernetesNodeStatus struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	Conditions      []*KubernetesNodeCondition  `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	VolumesInUse    []string                    `protobuf:"bytes,2,rep,name=volumes_in_use,json=volumesInUse,proto3" json:"volumes_in_use,omitempty"`
	VolumesAttached []*KubernetesAttachedVolume `protobuf:"bytes,3,rep,name=volumes_attached,json=volumesAttached,proto3" json:"volumes_attached,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *KubernetesNodeStatus) Reset() {
	*x = KubernetesNodeStatus{}
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeStatus) ProtoMessage() {}

func (x *KubernetesNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeStatus.ProtoReflect.Descriptor instead.
func (*KubernetesNodeStatus) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_nodes_proto_rawDescGZIP(), []int{4}
}

func (x *KubernetesNodeStatus) GetConditions() []*KubernetesNodeCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *KubernetesNodeStatus) GetVolumesInUse() []string {
	if x != nil {
		return x.VolumesInUse
	}
	return nil
}

func (x *KubernetesNodeStatus) GetVolumesAttached() []*KubernetesAttachedVolume {
	if x != nil {
		return x.VolumesAttached
	}
	return nil
}

// InstanceUsage is a message that represents the usage of a single instance.
type KubernetesNodeData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Chalk team name that incurred the usage.
	Team string `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	// node.Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// node.UID
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// node.kubernetes.io/instance-type
	InstanceType string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// topology.kubernetes.io/region
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// topology.kubernetes.io/zone
	Zone string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
	// The time that the instance was created.
	// node.CreationTimestamp.Unix()
	CreationTimestamp int64 `protobuf:"varint,8,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// node.DeletionTimestamp.Unix()
	// The time that the instance was deleted. May be 0 if the instance is still running.
	DeletionTimestamp int64 `protobuf:"varint,9,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	// The time that we polled the instance for usage.
	ObservedTimestamp int64 `protobuf:"varint,10,opt,name=observed_timestamp,json=observedTimestamp,proto3" json:"observed_timestamp,omitempty"`
	// node.Labels
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// node.Annotations
	Annotations   map[string]string `protobuf:"bytes,12,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MachineId     string            `protobuf:"bytes,13,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	SystemUuid    string            `protobuf:"bytes,14,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"`
	BootId        string            `protobuf:"bytes,15,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	Unschedulable bool              `protobuf:"varint,16,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`
	Namespace     string            `protobuf:"bytes,17,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// container.googleapis.com/instance_id
	InstanceId        string                `protobuf:"bytes,18,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Cluster           string                `protobuf:"bytes,19,opt,name=cluster,proto3" json:"cluster,omitempty"`
	TotalCpu          string                `protobuf:"bytes,20,opt,name=total_cpu,json=totalCpu,proto3" json:"total_cpu,omitempty"`
	TotalMemory       string                `protobuf:"bytes,21,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	AllocatableCpu    string                `protobuf:"bytes,22,opt,name=allocatable_cpu,json=allocatableCpu,proto3" json:"allocatable_cpu,omitempty"`
	AllocatableMemory string                `protobuf:"bytes,23,opt,name=allocatable_memory,json=allocatableMemory,proto3" json:"allocatable_memory,omitempty"`
	Spec              *KubernetesNodeSpec   `protobuf:"bytes,24,opt,name=spec,proto3,oneof" json:"spec,omitempty"`
	Status            *KubernetesNodeStatus `protobuf:"bytes,25,opt,name=status,proto3,oneof" json:"status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KubernetesNodeData) Reset() {
	*x = KubernetesNodeData{}
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesNodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeData) ProtoMessage() {}

func (x *KubernetesNodeData) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_kubernetes_v1_nodes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeData.ProtoReflect.Descriptor instead.
func (*KubernetesNodeData) Descriptor() ([]byte, []int) {
	return file_chalk_kubernetes_v1_nodes_proto_rawDescGZIP(), []int{5}
}

func (x *KubernetesNodeData) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *KubernetesNodeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesNodeData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *KubernetesNodeData) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *KubernetesNodeData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *KubernetesNodeData) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *KubernetesNodeData) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *KubernetesNodeData) GetDeletionTimestamp() int64 {
	if x != nil {
		return x.DeletionTimestamp
	}
	return 0
}

func (x *KubernetesNodeData) GetObservedTimestamp() int64 {
	if x != nil {
		return x.ObservedTimestamp
	}
	return 0
}

func (x *KubernetesNodeData) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KubernetesNodeData) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *KubernetesNodeData) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *KubernetesNodeData) GetSystemUuid() string {
	if x != nil {
		return x.SystemUuid
	}
	return ""
}

func (x *KubernetesNodeData) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

func (x *KubernetesNodeData) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *KubernetesNodeData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesNodeData) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *KubernetesNodeData) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *KubernetesNodeData) GetTotalCpu() string {
	if x != nil {
		return x.TotalCpu
	}
	return ""
}

func (x *KubernetesNodeData) GetTotalMemory() string {
	if x != nil {
		return x.TotalMemory
	}
	return ""
}

func (x *KubernetesNodeData) GetAllocatableCpu() string {
	if x != nil {
		return x.AllocatableCpu
	}
	return ""
}

func (x *KubernetesNodeData) GetAllocatableMemory() string {
	if x != nil {
		return x.AllocatableMemory
	}
	return ""
}

func (x *KubernetesNodeData) GetSpec() *KubernetesNodeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *KubernetesNodeData) GetStatus() *KubernetesNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_chalk_kubernetes_v1_nodes_proto protoreflect.FileDescriptor

const file_chalk_kubernetes_v1_nodes_proto_rawDesc = "" +
	"\n" +
	"\x1fchalk/kubernetes/v1/nodes.proto\x12\x13chalk.kubernetes.v1\"\x97\x01\n" +
	"\x13KubernetesNodeTaint\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x19\n" +
	"\x05value\x18\x02 \x01(\tH\x00R\x05value\x88\x01\x01\x12\x16\n" +
	"\x06effect\x18\x03 \x01(\tR\x06effect\x12\"\n" +
	"\n" +
	"time_added\x18\x04 \x01(\x03H\x01R\ttimeAdded\x88\x01\x01B\b\n" +
	"\x06_valueB\r\n" +
	"\v_time_added\"\x93\x02\n" +
	"\x12KubernetesNodeSpec\x12\x1e\n" +
	"\bpod_cidr\x18\x01 \x01(\tH\x00R\apodCidr\x88\x01\x01\x12@\n" +
	"\x06taints\x18\x02 \x03(\v2(.chalk.kubernetes.v1.KubernetesNodeTaintR\x06taints\x12\x1b\n" +
	"\tpod_cidrs\x18\x03 \x03(\tR\bpodCidrs\x12$\n" +
	"\vprovider_id\x18\x04 \x01(\tH\x01R\n" +
	"providerId\x88\x01\x01\x12)\n" +
	"\runschedulable\x18\x05 \x01(\bH\x02R\runschedulable\x88\x01\x01B\v\n" +
	"\t_pod_cidrB\x0e\n" +
	"\f_provider_idB\x10\n" +
	"\x0e_unschedulable\"\xfa\x01\n" +
	"\x17KubernetesNodeCondition\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12.\n" +
	"\x13last_heartbeat_time\x18\x03 \x01(\x03R\x11lastHeartbeatTime\x120\n" +
	"\x14last_transition_time\x18\x04 \x01(\x03R\x12lastTransitionTime\x12\x1b\n" +
	"\x06reason\x18\x05 \x01(\tH\x00R\x06reason\x88\x01\x01\x12\x1d\n" +
	"\amessage\x18\x06 \x01(\tH\x01R\amessage\x88\x01\x01B\t\n" +
	"\a_reasonB\n" +
	"\n" +
	"\b_message\"O\n" +
	"\x18KubernetesAttachedVolume\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vdevice_path\x18\x02 \x01(\tR\n" +
	"devicePath\"\xe4\x01\n" +
	"\x14KubernetesNodeStatus\x12L\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2,.chalk.kubernetes.v1.KubernetesNodeConditionR\n" +
	"conditions\x12$\n" +
	"\x0evolumes_in_use\x18\x02 \x03(\tR\fvolumesInUse\x12X\n" +
	"\x10volumes_attached\x18\x03 \x03(\v2-.chalk.kubernetes.v1.KubernetesAttachedVolumeR\x0fvolumesAttached\"\xde\b\n" +
	"\x12KubernetesNodeData\x12\x12\n" +
	"\x04team\x18\x01 \x01(\tR\x04team\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\tR\x03uid\x12#\n" +
	"\rinstance_type\x18\x04 \x01(\tR\finstanceType\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x12\n" +
	"\x04zone\x18\x06 \x01(\tR\x04zone\x12-\n" +
	"\x12creation_timestamp\x18\b \x01(\x03R\x11creationTimestamp\x12-\n" +
	"\x12deletion_timestamp\x18\t \x01(\x03R\x11deletionTimestamp\x12-\n" +
	"\x12observed_timestamp\x18\n" +
	" \x01(\x03R\x11observedTimestamp\x12K\n" +
	"\x06labels\x18\v \x03(\v23.chalk.kubernetes.v1.KubernetesNodeData.LabelsEntryR\x06labels\x12Z\n" +
	"\vannotations\x18\f \x03(\v28.chalk.kubernetes.v1.KubernetesNodeData.AnnotationsEntryR\vannotations\x12\x1d\n" +
	"\n" +
	"machine_id\x18\r \x01(\tR\tmachineId\x12\x1f\n" +
	"\vsystem_uuid\x18\x0e \x01(\tR\n" +
	"systemUuid\x12\x17\n" +
	"\aboot_id\x18\x0f \x01(\tR\x06bootId\x12$\n" +
	"\runschedulable\x18\x10 \x01(\bR\runschedulable\x12\x1c\n" +
	"\tnamespace\x18\x11 \x01(\tR\tnamespace\x12\x1f\n" +
	"\vinstance_id\x18\x12 \x01(\tR\n" +
	"instanceId\x12\x18\n" +
	"\acluster\x18\x13 \x01(\tR\acluster\x12\x1b\n" +
	"\ttotal_cpu\x18\x14 \x01(\tR\btotalCpu\x12!\n" +
	"\ftotal_memory\x18\x15 \x01(\tR\vtotalMemory\x12'\n" +
	"\x0fallocatable_cpu\x18\x16 \x01(\tR\x0eallocatableCpu\x12-\n" +
	"\x12allocatable_memory\x18\x17 \x01(\tR\x11allocatableMemory\x12@\n" +
	"\x04spec\x18\x18 \x01(\v2'.chalk.kubernetes.v1.KubernetesNodeSpecH\x00R\x04spec\x88\x01\x01\x12F\n" +
	"\x06status\x18\x19 \x01(\v2).chalk.kubernetes.v1.KubernetesNodeStatusH\x01R\x06status\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\a\n" +
	"\x05_specB\t\n" +
	"\a_statusB\xd6\x01\n" +
	"\x17com.chalk.kubernetes.v1B\n" +
	"NodesProtoP\x01ZAgithub.com/chalk-ai/chalk-go/gen/chalk/kubernetes/v1;kubernetesv1\xa2\x02\x03CKX\xaa\x02\x13Chalk.Kubernetes.V1\xca\x02\x13Chalk\\Kubernetes\\V1\xe2\x02\x1fChalk\\Kubernetes\\V1\\GPBMetadata\xea\x02\x15Chalk::Kubernetes::V1b\x06proto3"

var (
	file_chalk_kubernetes_v1_nodes_proto_rawDescOnce sync.Once
	file_chalk_kubernetes_v1_nodes_proto_rawDescData []byte
)

func file_chalk_kubernetes_v1_nodes_proto_rawDescGZIP() []byte {
	file_chalk_kubernetes_v1_nodes_proto_rawDescOnce.Do(func() {
		file_chalk_kubernetes_v1_nodes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_kubernetes_v1_nodes_proto_rawDesc), len(file_chalk_kubernetes_v1_nodes_proto_rawDesc)))
	})
	return file_chalk_kubernetes_v1_nodes_proto_rawDescData
}

var file_chalk_kubernetes_v1_nodes_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chalk_kubernetes_v1_nodes_proto_goTypes = []any{
	(*KubernetesNodeTaint)(nil),      // 0: chalk.kubernetes.v1.KubernetesNodeTaint
	(*KubernetesNodeSpec)(nil),       // 1: chalk.kubernetes.v1.KubernetesNodeSpec
	(*KubernetesNodeCondition)(nil),  // 2: chalk.kubernetes.v1.KubernetesNodeCondition
	(*KubernetesAttachedVolume)(nil), // 3: chalk.kubernetes.v1.KubernetesAttachedVolume
	(*KubernetesNodeStatus)(nil),     // 4: chalk.kubernetes.v1.KubernetesNodeStatus
	(*KubernetesNodeData)(nil),       // 5: chalk.kubernetes.v1.KubernetesNodeData
	nil,                              // 6: chalk.kubernetes.v1.KubernetesNodeData.LabelsEntry
	nil,                              // 7: chalk.kubernetes.v1.KubernetesNodeData.AnnotationsEntry
}
var file_chalk_kubernetes_v1_nodes_proto_depIdxs = []int32{
	0, // 0: chalk.kubernetes.v1.KubernetesNodeSpec.taints:type_name -> chalk.kubernetes.v1.KubernetesNodeTaint
	2, // 1: chalk.kubernetes.v1.KubernetesNodeStatus.conditions:type_name -> chalk.kubernetes.v1.KubernetesNodeCondition
	3, // 2: chalk.kubernetes.v1.KubernetesNodeStatus.volumes_attached:type_name -> chalk.kubernetes.v1.KubernetesAttachedVolume
	6, // 3: chalk.kubernetes.v1.KubernetesNodeData.labels:type_name -> chalk.kubernetes.v1.KubernetesNodeData.LabelsEntry
	7, // 4: chalk.kubernetes.v1.KubernetesNodeData.annotations:type_name -> chalk.kubernetes.v1.KubernetesNodeData.AnnotationsEntry
	1, // 5: chalk.kubernetes.v1.KubernetesNodeData.spec:type_name -> chalk.kubernetes.v1.KubernetesNodeSpec
	4, // 6: chalk.kubernetes.v1.KubernetesNodeData.status:type_name -> chalk.kubernetes.v1.KubernetesNodeStatus
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_chalk_kubernetes_v1_nodes_proto_init() }
func file_chalk_kubernetes_v1_nodes_proto_init() {
	if File_chalk_kubernetes_v1_nodes_proto != nil {
		return
	}
	file_chalk_kubernetes_v1_nodes_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_kubernetes_v1_nodes_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_kubernetes_v1_nodes_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_kubernetes_v1_nodes_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_kubernetes_v1_nodes_proto_rawDesc), len(file_chalk_kubernetes_v1_nodes_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_kubernetes_v1_nodes_proto_goTypes,
		DependencyIndexes: file_chalk_kubernetes_v1_nodes_proto_depIdxs,
		MessageInfos:      file_chalk_kubernetes_v1_nodes_proto_msgTypes,
	}.Build()
	File_chalk_kubernetes_v1_nodes_proto = out.File
	file_chalk_kubernetes_v1_nodes_proto_goTypes = nil
	file_chalk_kubernetes_v1_nodes_proto_depIdxs = nil
}
