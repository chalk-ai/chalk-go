// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/pubsub/v1/queries.proto

package pubsubv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/gen_bq_schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryMessagePubSub corresponds exactly to the QueryStorageMessage pydantic model,
// which in turn mostly corresponds to the QueryStorageRequest pydantic model.
// It captures information about an online query from the header, plan, parsed metadata, and more.
type QueryMessagePubSub struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation unique identifier
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// Environment query belongs to
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// maps to FeatherRequestHeader.meta which can be specified via the client
	QueryMeta map[string]string `protobuf:"bytes,3,rep,name=query_meta,json=queryMeta,proto3" json:"query_meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// maps to FeatherRequestHeader.query_name which can be specified via the client
	QueryName *string `protobuf:"bytes,4,opt,name=query_name,json=queryName,proto3,oneof" json:"query_name,omitempty"`
	// maps to FeatherRequestHeader.query_name_version which can be specified via the client
	QueryNameVersion *string `protobuf:"bytes,5,opt,name=query_name_version,json=queryNameVersion,proto3,oneof" json:"query_name_version,omitempty"`
	// maps to FeatherRequestHeader.correlation_id which can be specified via the client
	CorrelationId *string `protobuf:"bytes,6,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	// parsed input feature fqns
	InputFeatures []string `protobuf:"bytes,7,rep,name=input_features,json=inputFeatures,proto3" json:"input_features,omitempty"`
	// parsed output feature fqns
	OutputFeatures []string `protobuf:"bytes,8,rep,name=output_features,json=outputFeatures,proto3" json:"output_features,omitempty"`
	// parsed output feature root fqns
	OutputRootFqns []string `protobuf:"bytes,9,rep,name=output_root_fqns,json=outputRootFqns,proto3" json:"output_root_fqns,omitempty"`
	// intermediate feature fqns currently empty
	IntermediateFeatures []string `protobuf:"bytes,10,rep,name=intermediate_features,json=intermediateFeatures,proto3" json:"intermediate_features,omitempty"`
	// resolver fqns used in plan
	Resolvers []string `protobuf:"bytes,11,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	// id of final plan
	QueryPlanId *string `protobuf:"bytes,12,opt,name=query_plan_id,json=queryPlanId,proto3,oneof" json:"query_plan_id,omitempty"`
	// timestamp
	CreatedAt int64 `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// if query had errors
	HasErrors *bool `protobuf:"varint,14,opt,name=has_errors,json=hasErrors,proto3,oneof" json:"has_errors,omitempty"`
	// aka as requester_id from run context
	AgentId *string `protobuf:"bytes,15,opt,name=agent_id,json=agentId,proto3,oneof" json:"agent_id,omitempty"`
	// branch query was run on
	BranchName *string `protobuf:"bytes,16,opt,name=branch_name,json=branchName,proto3,oneof" json:"branch_name,omitempty"`
	// deployment query was run on
	DeploymentId *string `protobuf:"bytes,17,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	// if query was run with plan_stages
	HasPlanStages *bool `protobuf:"varint,18,opt,name=has_plan_stages,json=hasPlanStages,proto3,oneof" json:"has_plan_stages,omitempty"`
	// the meta query hash
	MetaQueryHash *string `protobuf:"bytes,19,opt,name=meta_query_hash,json=metaQueryHash,proto3,oneof" json:"meta_query_hash,omitempty"`
	// query duration
	QueryDurationSeconds *float32 `protobuf:"fixed32,20,opt,name=query_duration_seconds,json=queryDurationSeconds,proto3,oneof" json:"query_duration_seconds,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *QueryMessagePubSub) Reset() {
	*x = QueryMessagePubSub{}
	mi := &file_chalk_pubsub_v1_queries_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMessagePubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMessagePubSub) ProtoMessage() {}

func (x *QueryMessagePubSub) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_queries_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMessagePubSub.ProtoReflect.Descriptor instead.
func (*QueryMessagePubSub) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_queries_proto_rawDescGZIP(), []int{0}
}

func (x *QueryMessagePubSub) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *QueryMessagePubSub) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *QueryMessagePubSub) GetQueryMeta() map[string]string {
	if x != nil {
		return x.QueryMeta
	}
	return nil
}

func (x *QueryMessagePubSub) GetQueryName() string {
	if x != nil && x.QueryName != nil {
		return *x.QueryName
	}
	return ""
}

func (x *QueryMessagePubSub) GetQueryNameVersion() string {
	if x != nil && x.QueryNameVersion != nil {
		return *x.QueryNameVersion
	}
	return ""
}

func (x *QueryMessagePubSub) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *QueryMessagePubSub) GetInputFeatures() []string {
	if x != nil {
		return x.InputFeatures
	}
	return nil
}

func (x *QueryMessagePubSub) GetOutputFeatures() []string {
	if x != nil {
		return x.OutputFeatures
	}
	return nil
}

func (x *QueryMessagePubSub) GetOutputRootFqns() []string {
	if x != nil {
		return x.OutputRootFqns
	}
	return nil
}

func (x *QueryMessagePubSub) GetIntermediateFeatures() []string {
	if x != nil {
		return x.IntermediateFeatures
	}
	return nil
}

func (x *QueryMessagePubSub) GetResolvers() []string {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *QueryMessagePubSub) GetQueryPlanId() string {
	if x != nil && x.QueryPlanId != nil {
		return *x.QueryPlanId
	}
	return ""
}

func (x *QueryMessagePubSub) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *QueryMessagePubSub) GetHasErrors() bool {
	if x != nil && x.HasErrors != nil {
		return *x.HasErrors
	}
	return false
}

func (x *QueryMessagePubSub) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *QueryMessagePubSub) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

func (x *QueryMessagePubSub) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *QueryMessagePubSub) GetHasPlanStages() bool {
	if x != nil && x.HasPlanStages != nil {
		return *x.HasPlanStages
	}
	return false
}

func (x *QueryMessagePubSub) GetMetaQueryHash() string {
	if x != nil && x.MetaQueryHash != nil {
		return *x.MetaQueryHash
	}
	return ""
}

func (x *QueryMessagePubSub) GetQueryDurationSeconds() float32 {
	if x != nil && x.QueryDurationSeconds != nil {
		return *x.QueryDurationSeconds
	}
	return 0
}

var File_chalk_pubsub_v1_queries_proto protoreflect.FileDescriptor

const file_chalk_pubsub_v1_queries_proto_rawDesc = "" +
	"\n" +
	"\x1dchalk/pubsub/v1/queries.proto\x12\x0fchalk.pubsub.v1\x1a\x1cgen_bq_schema/bq_field.proto\x1a\x1cgen_bq_schema/bq_table.proto\"\x9a\t\n" +
	"\x12QueryMessagePubSub\x12!\n" +
	"\foperation_id\x18\x01 \x01(\tR\voperationId\x12%\n" +
	"\x0eenvironment_id\x18\x02 \x01(\tR\renvironmentId\x12Q\n" +
	"\n" +
	"query_meta\x18\x03 \x03(\v22.chalk.pubsub.v1.QueryMessagePubSub.QueryMetaEntryR\tqueryMeta\x12\"\n" +
	"\n" +
	"query_name\x18\x04 \x01(\tH\x00R\tqueryName\x88\x01\x01\x121\n" +
	"\x12query_name_version\x18\x05 \x01(\tH\x01R\x10queryNameVersion\x88\x01\x01\x12*\n" +
	"\x0ecorrelation_id\x18\x06 \x01(\tH\x02R\rcorrelationId\x88\x01\x01\x12%\n" +
	"\x0einput_features\x18\a \x03(\tR\rinputFeatures\x12'\n" +
	"\x0foutput_features\x18\b \x03(\tR\x0eoutputFeatures\x12(\n" +
	"\x10output_root_fqns\x18\t \x03(\tR\x0eoutputRootFqns\x123\n" +
	"\x15intermediate_features\x18\n" +
	" \x03(\tR\x14intermediateFeatures\x12\x1c\n" +
	"\tresolvers\x18\v \x03(\tR\tresolvers\x12'\n" +
	"\rquery_plan_id\x18\f \x01(\tH\x03R\vqueryPlanId\x88\x01\x01\x12-\n" +
	"\n" +
	"created_at\x18\r \x01(\x03B\x0e\xea?\v\x12\tTIMESTAMPR\tcreatedAt\x12\"\n" +
	"\n" +
	"has_errors\x18\x0e \x01(\bH\x04R\thasErrors\x88\x01\x01\x12\x1e\n" +
	"\bagent_id\x18\x0f \x01(\tH\x05R\aagentId\x88\x01\x01\x12$\n" +
	"\vbranch_name\x18\x10 \x01(\tH\x06R\n" +
	"branchName\x88\x01\x01\x12(\n" +
	"\rdeployment_id\x18\x11 \x01(\tH\aR\fdeploymentId\x88\x01\x01\x12+\n" +
	"\x0fhas_plan_stages\x18\x12 \x01(\bH\bR\rhasPlanStages\x88\x01\x01\x12+\n" +
	"\x0fmeta_query_hash\x18\x13 \x01(\tH\tR\rmetaQueryHash\x88\x01\x01\x129\n" +
	"\x16query_duration_seconds\x18\x14 \x01(\x02H\n" +
	"R\x14queryDurationSeconds\x88\x01\x01\x1a<\n" +
	"\x0eQueryMetaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\f\xea?\t\n" +
	"\aqueriesB\r\n" +
	"\v_query_nameB\x15\n" +
	"\x13_query_name_versionB\x11\n" +
	"\x0f_correlation_idB\x10\n" +
	"\x0e_query_plan_idB\r\n" +
	"\v_has_errorsB\v\n" +
	"\t_agent_idB\x0e\n" +
	"\f_branch_nameB\x10\n" +
	"\x0e_deployment_idB\x12\n" +
	"\x10_has_plan_stagesB\x12\n" +
	"\x10_meta_query_hashB\x19\n" +
	"\x17_query_duration_secondsB\xbc\x01\n" +
	"\x13com.chalk.pubsub.v1B\fQueriesProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/pubsub/v1;pubsubv1\xa2\x02\x03CPX\xaa\x02\x0fChalk.Pubsub.V1\xca\x02\x0fChalk\\Pubsub\\V1\xe2\x02\x1bChalk\\Pubsub\\V1\\GPBMetadata\xea\x02\x11Chalk::Pubsub::V1b\x06proto3"

var (
	file_chalk_pubsub_v1_queries_proto_rawDescOnce sync.Once
	file_chalk_pubsub_v1_queries_proto_rawDescData []byte
)

func file_chalk_pubsub_v1_queries_proto_rawDescGZIP() []byte {
	file_chalk_pubsub_v1_queries_proto_rawDescOnce.Do(func() {
		file_chalk_pubsub_v1_queries_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_pubsub_v1_queries_proto_rawDesc), len(file_chalk_pubsub_v1_queries_proto_rawDesc)))
	})
	return file_chalk_pubsub_v1_queries_proto_rawDescData
}

var file_chalk_pubsub_v1_queries_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chalk_pubsub_v1_queries_proto_goTypes = []any{
	(*QueryMessagePubSub)(nil), // 0: chalk.pubsub.v1.QueryMessagePubSub
	nil,                        // 1: chalk.pubsub.v1.QueryMessagePubSub.QueryMetaEntry
}
var file_chalk_pubsub_v1_queries_proto_depIdxs = []int32{
	1, // 0: chalk.pubsub.v1.QueryMessagePubSub.query_meta:type_name -> chalk.pubsub.v1.QueryMessagePubSub.QueryMetaEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_chalk_pubsub_v1_queries_proto_init() }
func file_chalk_pubsub_v1_queries_proto_init() {
	if File_chalk_pubsub_v1_queries_proto != nil {
		return
	}
	file_chalk_pubsub_v1_queries_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_pubsub_v1_queries_proto_rawDesc), len(file_chalk_pubsub_v1_queries_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_pubsub_v1_queries_proto_goTypes,
		DependencyIndexes: file_chalk_pubsub_v1_queries_proto_depIdxs,
		MessageInfos:      file_chalk_pubsub_v1_queries_proto_msgTypes,
	}.Build()
	File_chalk_pubsub_v1_queries_proto = out.File
	file_chalk_pubsub_v1_queries_proto_goTypes = nil
	file_chalk_pubsub_v1_queries_proto_depIdxs = nil
}
