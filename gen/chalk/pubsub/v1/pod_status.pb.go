// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/pubsub/v1/pod_status.proto

package pubsubv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/gen_bq_schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PodStatusPubSub captures the state of a kubernetes pod.
type PodStatusPubSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Chalk team name that incurred the usage.
	Team            string `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	App             string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	Component       string `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	DatadogService  string `protobuf:"bytes,4,opt,name=datadog_service,json=datadogService,proto3" json:"datadog_service,omitempty"`
	DatadogVersion  string `protobuf:"bytes,5,opt,name=datadog_version,json=datadogVersion,proto3" json:"datadog_version,omitempty"`
	PodTemplateHash string `protobuf:"bytes,6,opt,name=pod_template_hash,json=podTemplateHash,proto3" json:"pod_template_hash,omitempty"`
	// string status = 7;
	Status *PodStatusPubSub_PodStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Spec   *PodStatusPubSub_PodSpec   `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
	// The time that the instance was created.
	// pod.CreationTimestamp.Unix()
	CreationTimestamp int64 `protobuf:"varint,18,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// pod.DeletionTimestamp.Unix()
	// The time that the instance was deleted. May be 0 if the instance is still running.
	DeletionTimestamp int64 `protobuf:"varint,19,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	// The time that we polled the instance for usage.
	ObservedTimestamp int64 `protobuf:"varint,20,opt,name=observed_timestamp,json=observedTimestamp,proto3" json:"observed_timestamp,omitempty"`
	// pod.Labels
	Labels map[string]string `protobuf:"bytes,21,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// pod.Annotations
	Annotations map[string]string `protobuf:"bytes,22,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cluster     string            `protobuf:"bytes,23,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// // node.UID
	Uid string `protobuf:"bytes,24,opt,name=uid,proto3" json:"uid,omitempty"`
	// // node.Name
	Name      string `protobuf:"bytes,25,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,26,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *PodStatusPubSub) Reset() {
	*x = PodStatusPubSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub) ProtoMessage() {}

func (x *PodStatusPubSub) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0}
}

func (x *PodStatusPubSub) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *PodStatusPubSub) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *PodStatusPubSub) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *PodStatusPubSub) GetDatadogService() string {
	if x != nil {
		return x.DatadogService
	}
	return ""
}

func (x *PodStatusPubSub) GetDatadogVersion() string {
	if x != nil {
		return x.DatadogVersion
	}
	return ""
}

func (x *PodStatusPubSub) GetPodTemplateHash() string {
	if x != nil {
		return x.PodTemplateHash
	}
	return ""
}

func (x *PodStatusPubSub) GetStatus() *PodStatusPubSub_PodStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PodStatusPubSub) GetSpec() *PodStatusPubSub_PodSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PodStatusPubSub) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *PodStatusPubSub) GetDeletionTimestamp() int64 {
	if x != nil {
		return x.DeletionTimestamp
	}
	return 0
}

func (x *PodStatusPubSub) GetObservedTimestamp() int64 {
	if x != nil {
		return x.ObservedTimestamp
	}
	return 0
}

func (x *PodStatusPubSub) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PodStatusPubSub) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *PodStatusPubSub) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PodStatusPubSub) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PodStatusPubSub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodStatusPubSub) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type PodStatusPubSub_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the volume.
	// Must be a DNS_LABEL and unique within the pod.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PodStatusPubSub_Volume) Reset() {
	*x = PodStatusPubSub_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_Volume) ProtoMessage() {}

func (x *PodStatusPubSub_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_Volume.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_Volume) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PodStatusPubSub_Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ClaimSource describes a reference to a ResourceClaim.
//
// Exactly one of these fields should be set.  Consumers of this type must
// treat an empty object as if it has an unknown value.
type PodStatusPubSub_ClaimSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResourceClaimName is the name of a ResourceClaim object in the same
	// namespace as this pod.
	ResourceClaimName *string `protobuf:"bytes,1,opt,name=resource_claim_name,json=resourceClaimName,proto3,oneof" json:"resource_claim_name,omitempty"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate
	// object in the same namespace as this pod.
	//
	// The template will be used to create a new ResourceClaim, which will
	// be bound to this pod. When this pod is deleted, the ResourceClaim
	// will also be deleted. The pod name and resource name, along with a
	// generated component, will be used to form a unique name for the
	// ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
	//
	// This field is immutable and no changes will be made to the
	// corresponding ResourceClaim by the control plane after creating the
	// ResourceClaim.
	ResourceClaimTemplateName *string `protobuf:"bytes,2,opt,name=resource_claim_template_name,json=resourceClaimTemplateName,proto3,oneof" json:"resource_claim_template_name,omitempty"`
}

func (x *PodStatusPubSub_ClaimSource) Reset() {
	*x = PodStatusPubSub_ClaimSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_ClaimSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_ClaimSource) ProtoMessage() {}

func (x *PodStatusPubSub_ClaimSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_ClaimSource.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_ClaimSource) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PodStatusPubSub_ClaimSource) GetResourceClaimName() string {
	if x != nil && x.ResourceClaimName != nil {
		return *x.ResourceClaimName
	}
	return ""
}

func (x *PodStatusPubSub_ClaimSource) GetResourceClaimTemplateName() string {
	if x != nil && x.ResourceClaimTemplateName != nil {
		return *x.ResourceClaimTemplateName
	}
	return ""
}

// PodResourceClaim references exactly one ResourceClaim through a ClaimSource.
// It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
// Containers that need access to the ResourceClaim reference it with this name.
type PodStatusPubSub_PodResourceClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name uniquely identifies this resource claim inside the pod.
	// This must be a DNS_LABEL.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Source describes where to find the ResourceClaim.
	Source *PodStatusPubSub_ClaimSource `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
}

func (x *PodStatusPubSub_PodResourceClaim) Reset() {
	*x = PodStatusPubSub_PodResourceClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_PodResourceClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_PodResourceClaim) ProtoMessage() {}

func (x *PodStatusPubSub_PodResourceClaim) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_PodResourceClaim.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_PodResourceClaim) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PodStatusPubSub_PodResourceClaim) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodStatusPubSub_PodResourceClaim) GetSource() *PodStatusPubSub_ClaimSource {
	if x != nil {
		return x.Source
	}
	return nil
}

// PodSpec is a description of a pod.
type PodStatusPubSub_PodSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of volumes that can be mounted by containers belonging to the pod.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes
	// +optional
	// +patchMergeKey=name
	// +patchStrategy=merge,retainKeys
	// +listType=map
	// +listMapKey=name
	Volumes []*PodStatusPubSub_Volume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	// List of initialization containers belonging to the pod.
	// Init containers are executed in order prior to containers being started. If any
	// init container fails, the pod is considered to have failed and is handled according
	// to its restartPolicy. The name for an init container or normal container must be
	// unique among all containers.
	// Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
	// The resourceRequirements of an init container are taken into account during scheduling
	// by finding the highest request/limit for each resource type, and then using the max of
	// of that value or the sum of the normal containers. Limits are applied to init containers
	// in a similar fashion.
	// Init containers cannot currently be added or removed.
	// Cannot be updated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// +patchMergeKey=name
	// +patchStrategy=merge
	// +listType=map
	// +listMapKey=name
	InitContainers []*PodStatusPubSub_Container `protobuf:"bytes,20,rep,name=init_containers,json=initContainers,proto3" json:"init_containers,omitempty"`
	// List of containers belonging to the pod.
	// Containers cannot currently be added or removed.
	// There must be at least one container in a Pod.
	// Cannot be updated.
	// +patchMergeKey=name
	// +patchStrategy=merge
	// +listType=map
	// +listMapKey=name
	Containers []*PodStatusPubSub_Container `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty"`
	// Restart policy for all containers within the pod.
	// One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
	// Default to Always.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	// +optional
	RestartPolicy *string `protobuf:"bytes,3,opt,name=restart_policy,json=restartPolicy,proto3,oneof" json:"restart_policy,omitempty"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down).
	// If this value is nil, the default grace period will be used instead.
	// The grace period is the duration in seconds after the processes running in the pod are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// Defaults to 30 seconds.
	// +optional
	TerminationGracePeriodSeconds *int64 `protobuf:"varint,4,opt,name=termination_grace_period_seconds,json=terminationGracePeriodSeconds,proto3,oneof" json:"termination_grace_period_seconds,omitempty"`
	// Optional duration in seconds the pod may be active on the node relative to
	// start_time before the system will actively try to mark it failed and kill associated containers.
	// Value must be a positive integer.
	// +optional
	ActiveDeadlineSeconds *int64 `protobuf:"varint,5,opt,name=active_deadline_seconds,json=activeDeadlineSeconds,proto3,oneof" json:"active_deadline_seconds,omitempty"`
	// Set DNS policy for the pod.
	// Defaults to "ClusterFirst".
	// Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
	// DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
	// To have DNS options set along with hostNetwork, you have to specify DNS policy
	// explicitly to 'ClusterFirstWithHostNet'.
	// +optional
	DnsPolicy *string `protobuf:"bytes,6,opt,name=dns_policy,json=dnsPolicy,proto3,oneof" json:"dns_policy,omitempty"`
	// NodeSelector is a selector which must be true for the pod to fit on a node.
	// Selector which must match a node's labels for the pod to be scheduled on that node.
	// More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	// +optional
	// +mapType=atomic
	NodeSelector map[string]string `protobuf:"bytes,7,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod.
	// More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	// +optional
	ServiceAccountName *string `protobuf:"bytes,8,opt,name=service_account_name,json=serviceAccountName,proto3,oneof" json:"service_account_name,omitempty"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	// +optional
	AutomountServiceAccountToken *bool `protobuf:"varint,21,opt,name=automount_service_account_token,json=automountServiceAccountToken,proto3,oneof" json:"automount_service_account_token,omitempty"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
	// the scheduler simply schedules this pod onto that node, assuming that it fits resource
	// requirements.
	// +optional
	NodeName *string `protobuf:"bytes,10,opt,name=node_name,json=nodeName,proto3,oneof" json:"node_name,omitempty"`
	// Host networking requested for this pod. Use the host's network namespace.
	// If this option is set, the ports that will be used must be specified.
	// Default to false.
	// +k8s:conversion-gen=false
	// +optional
	HostNetwork bool `protobuf:"varint,11,opt,name=host_network,json=hostNetwork,proto3" json:"host_network,omitempty"`
	// Use the host's pid namespace.
	// Optional: Default to false.
	// +k8s:conversion-gen=false
	// +optional
	HostPid bool `protobuf:"varint,12,opt,name=host_pid,json=hostPid,proto3" json:"host_pid,omitempty"`
	// Use the host's ipc namespace.
	// Optional: Default to false.
	// +k8s:conversion-gen=false
	// +optional
	HostIpc bool `protobuf:"varint,13,opt,name=host_ipc,json=hostIpc,proto3" json:"host_ipc,omitempty"`
	// Share a single process namespace between all of the containers in a pod.
	// When this is set containers will be able to view and signal processes from other containers
	// in the same pod, and the first process in each container will not be assigned PID 1.
	// HostPID and ShareProcessNamespace cannot both be set.
	// Optional: Default to false.
	// +k8s:conversion-gen=false
	// +optional
	ShareProcessNamespace bool `protobuf:"varint,27,opt,name=share_process_namespace,json=shareProcessNamespace,proto3" json:"share_process_namespace,omitempty"`
	// Specifies the hostname of the Pod
	// If not specified, the pod's hostname will be set to a system-defined value.
	// +optional
	Hostname *string `protobuf:"bytes,16,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
	// If not specified, the pod will not have a domainname at all.
	// +optional
	Subdomain *string `protobuf:"bytes,17,opt,name=subdomain,proto3,oneof" json:"subdomain,omitempty"`
	// If specified, the pod will be dispatched by specified scheduler.
	// If not specified, the pod will be dispatched by default scheduler.
	// +optional
	SchedulerName *string `protobuf:"bytes,19,opt,name=scheduler_name,json=schedulerName,proto3,oneof" json:"scheduler_name,omitempty"`
	// If specified, indicates the pod's priority. "system-node-critical" and
	// "system-cluster-critical" are two special keywords which indicate the
	// highest priorities with the former being the highest priority. Any other
	// name must be defined by creating a PriorityClass object with that name.
	// If not specified, the pod priority will be default or zero if there is no
	// default.
	// +optional
	PriorityClassName *string `protobuf:"bytes,24,opt,name=priority_class_name,json=priorityClassName,proto3,oneof" json:"priority_class_name,omitempty"`
	// The priority value. Various system components use this field to find the
	// priority of the pod. When Priority Admission Controller is enabled, it
	// prevents users from setting this field. The admission controller populates
	// this field from priority_class_name.
	// The higher the value, the higher the priority.
	// +optional
	Priority *int32 `protobuf:"varint,25,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
	// to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
	// If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
	// empty definition that uses the default runtime handler.
	// More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
	// +optional
	RuntimeClassName *string `protobuf:"bytes,29,opt,name=runtime_class_name,json=runtimeClassName,proto3,oneof" json:"runtime_class_name,omitempty"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's
	// environment variables, matching the syntax of Docker links.
	// Optional: Defaults to true.
	// +optional
	EnableServiceLinks *bool `protobuf:"varint,30,opt,name=enable_service_links,json=enableServiceLinks,proto3,oneof" json:"enable_service_links,omitempty"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority.
	// One of Never, PreemptLowerPriority.
	// Defaults to PreemptLowerPriority if unset.
	// +optional
	PreemptionPolicy *string `protobuf:"bytes,31,opt,name=preemption_policy,json=preemptionPolicy,proto3,oneof" json:"preemption_policy,omitempty"`
	// Use the host's user namespace.
	// Optional: Default to true.
	// If set to true or not present, the pod will be run in the host user namespace, useful
	// for when the pod needs a feature only available to the host user namespace, such as
	// loading a kernel module with CAP_SYS_MODULE.
	// When set to false, a new userns is created for the pod. Setting false is useful for
	// mitigating container breakout vulnerabilities even allowing users to run their
	// containers as root without actually having root privileges on the host.
	// This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
	// +k8s:conversion-gen=false
	// +optional
	HostUsers *bool `protobuf:"varint,37,opt,name=host_users,json=hostUsers,proto3,oneof" json:"host_users,omitempty"`
	// ResourceClaims defines which ResourceClaims must be allocated
	// and reserved before the Pod is allowed to start. The resources
	// will be made available to those containers which consume them
	// by name.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable.
	//
	// +patchMergeKey=name
	// +patchStrategy=merge,retainKeys
	// +listType=map
	// +listMapKey=name
	// +featureGate=DynamicResourceAllocation
	// +optional
	ResourceClaims []*PodStatusPubSub_PodResourceClaim `protobuf:"bytes,39,rep,name=resource_claims,json=resourceClaims,proto3" json:"resource_claims,omitempty"`
}

func (x *PodStatusPubSub_PodSpec) Reset() {
	*x = PodStatusPubSub_PodSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_PodSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_PodSpec) ProtoMessage() {}

func (x *PodStatusPubSub_PodSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_PodSpec.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_PodSpec) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PodStatusPubSub_PodSpec) GetVolumes() []*PodStatusPubSub_Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *PodStatusPubSub_PodSpec) GetInitContainers() []*PodStatusPubSub_Container {
	if x != nil {
		return x.InitContainers
	}
	return nil
}

func (x *PodStatusPubSub_PodSpec) GetContainers() []*PodStatusPubSub_Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *PodStatusPubSub_PodSpec) GetRestartPolicy() string {
	if x != nil && x.RestartPolicy != nil {
		return *x.RestartPolicy
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetTerminationGracePeriodSeconds() int64 {
	if x != nil && x.TerminationGracePeriodSeconds != nil {
		return *x.TerminationGracePeriodSeconds
	}
	return 0
}

func (x *PodStatusPubSub_PodSpec) GetActiveDeadlineSeconds() int64 {
	if x != nil && x.ActiveDeadlineSeconds != nil {
		return *x.ActiveDeadlineSeconds
	}
	return 0
}

func (x *PodStatusPubSub_PodSpec) GetDnsPolicy() string {
	if x != nil && x.DnsPolicy != nil {
		return *x.DnsPolicy
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *PodStatusPubSub_PodSpec) GetServiceAccountName() string {
	if x != nil && x.ServiceAccountName != nil {
		return *x.ServiceAccountName
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetAutomountServiceAccountToken() bool {
	if x != nil && x.AutomountServiceAccountToken != nil {
		return *x.AutomountServiceAccountToken
	}
	return false
}

func (x *PodStatusPubSub_PodSpec) GetNodeName() string {
	if x != nil && x.NodeName != nil {
		return *x.NodeName
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetHostNetwork() bool {
	if x != nil {
		return x.HostNetwork
	}
	return false
}

func (x *PodStatusPubSub_PodSpec) GetHostPid() bool {
	if x != nil {
		return x.HostPid
	}
	return false
}

func (x *PodStatusPubSub_PodSpec) GetHostIpc() bool {
	if x != nil {
		return x.HostIpc
	}
	return false
}

func (x *PodStatusPubSub_PodSpec) GetShareProcessNamespace() bool {
	if x != nil {
		return x.ShareProcessNamespace
	}
	return false
}

func (x *PodStatusPubSub_PodSpec) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetSubdomain() string {
	if x != nil && x.Subdomain != nil {
		return *x.Subdomain
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetSchedulerName() string {
	if x != nil && x.SchedulerName != nil {
		return *x.SchedulerName
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetPriorityClassName() string {
	if x != nil && x.PriorityClassName != nil {
		return *x.PriorityClassName
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *PodStatusPubSub_PodSpec) GetRuntimeClassName() string {
	if x != nil && x.RuntimeClassName != nil {
		return *x.RuntimeClassName
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetEnableServiceLinks() bool {
	if x != nil && x.EnableServiceLinks != nil {
		return *x.EnableServiceLinks
	}
	return false
}

func (x *PodStatusPubSub_PodSpec) GetPreemptionPolicy() string {
	if x != nil && x.PreemptionPolicy != nil {
		return *x.PreemptionPolicy
	}
	return ""
}

func (x *PodStatusPubSub_PodSpec) GetHostUsers() bool {
	if x != nil && x.HostUsers != nil {
		return *x.HostUsers
	}
	return false
}

func (x *PodStatusPubSub_PodSpec) GetResourceClaims() []*PodStatusPubSub_PodResourceClaim {
	if x != nil {
		return x.ResourceClaims
	}
	return nil
}

// ContainerState holds a possible state of container.
// Only one of its members may be specified.
// If none of them is specified, the default one is ContainerStateWaiting.
type PodStatusPubSub_ContainerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details about a waiting container
	// +optional
	Waiting *PodStatusPubSub_ContainerStateWaiting `protobuf:"bytes,1,opt,name=waiting,proto3,oneof" json:"waiting,omitempty"`
	// Details about a running container
	// +optional
	Running *PodStatusPubSub_ContainerStateRunning `protobuf:"bytes,2,opt,name=running,proto3,oneof" json:"running,omitempty"`
	// Details about a terminated container
	// +optional
	Terminated *PodStatusPubSub_ContainerStateTerminated `protobuf:"bytes,3,opt,name=terminated,proto3,oneof" json:"terminated,omitempty"`
}

func (x *PodStatusPubSub_ContainerState) Reset() {
	*x = PodStatusPubSub_ContainerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_ContainerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_ContainerState) ProtoMessage() {}

func (x *PodStatusPubSub_ContainerState) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_ContainerState.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_ContainerState) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PodStatusPubSub_ContainerState) GetWaiting() *PodStatusPubSub_ContainerStateWaiting {
	if x != nil {
		return x.Waiting
	}
	return nil
}

func (x *PodStatusPubSub_ContainerState) GetRunning() *PodStatusPubSub_ContainerStateRunning {
	if x != nil {
		return x.Running
	}
	return nil
}

func (x *PodStatusPubSub_ContainerState) GetTerminated() *PodStatusPubSub_ContainerStateTerminated {
	if x != nil {
		return x.Terminated
	}
	return nil
}

// ContainerStateRunning is a running state of a container.
type PodStatusPubSub_ContainerStateRunning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which the container was last (re-)started
	// +optional
	StartedAt int64 `protobuf:"varint,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
}

func (x *PodStatusPubSub_ContainerStateRunning) Reset() {
	*x = PodStatusPubSub_ContainerStateRunning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_ContainerStateRunning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_ContainerStateRunning) ProtoMessage() {}

func (x *PodStatusPubSub_ContainerStateRunning) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_ContainerStateRunning.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_ContainerStateRunning) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PodStatusPubSub_ContainerStateRunning) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

// ContainerStateTerminated is a terminated state of a container.
type PodStatusPubSub_ContainerStateTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exit status from the last termination of the container
	ExitCode int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Signal from the last termination of the container
	// +optional
	Signal *int32 `protobuf:"varint,2,opt,name=signal,proto3,oneof" json:"signal,omitempty"`
	// (brief) reason from the last termination of the container
	// +optional
	Reason *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// Message regarding the last termination of the container
	// +optional
	Message *string `protobuf:"bytes,4,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Time at which previous execution of the container started
	// +optional
	StartedAt *int64 `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	// Time at which the container last terminated
	// +optional
	FinishedAt *int64 `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3,oneof" json:"finished_at,omitempty"`
	// Container's ID in the format '<type>://<container_id>'
	// +optional
	ContainerId *string `protobuf:"bytes,7,opt,name=container_id,json=containerId,proto3,oneof" json:"container_id,omitempty"`
}

func (x *PodStatusPubSub_ContainerStateTerminated) Reset() {
	*x = PodStatusPubSub_ContainerStateTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_ContainerStateTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_ContainerStateTerminated) ProtoMessage() {}

func (x *PodStatusPubSub_ContainerStateTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_ContainerStateTerminated.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_ContainerStateTerminated) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PodStatusPubSub_ContainerStateTerminated) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *PodStatusPubSub_ContainerStateTerminated) GetSignal() int32 {
	if x != nil && x.Signal != nil {
		return *x.Signal
	}
	return 0
}

func (x *PodStatusPubSub_ContainerStateTerminated) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *PodStatusPubSub_ContainerStateTerminated) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PodStatusPubSub_ContainerStateTerminated) GetStartedAt() int64 {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return 0
}

func (x *PodStatusPubSub_ContainerStateTerminated) GetFinishedAt() int64 {
	if x != nil && x.FinishedAt != nil {
		return *x.FinishedAt
	}
	return 0
}

func (x *PodStatusPubSub_ContainerStateTerminated) GetContainerId() string {
	if x != nil && x.ContainerId != nil {
		return *x.ContainerId
	}
	return ""
}

// EnvVar represents an environment variable present in a Container.
type PodStatusPubSub_EnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Variable references $(VAR_NAME) are expanded
	// using the previously defined environment variables in the container and
	// any service environment variables. If a variable cannot be resolved,
	// the reference in the input string will be unchanged. Double $$ are reduced
	// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
	// "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
	// Escaped references will never be expanded, regardless of whether the variable
	// exists or not.
	// Defaults to "".
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PodStatusPubSub_EnvVar) Reset() {
	*x = PodStatusPubSub_EnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_EnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_EnvVar) ProtoMessage() {}

func (x *PodStatusPubSub_EnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_EnvVar.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_EnvVar) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 7}
}

func (x *PodStatusPubSub_EnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodStatusPubSub_EnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A single application container that you want to run within a pod.
type PodStatusPubSub_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the container specified as a DNS_LABEL.
	// Each container in a pod must have a unique name (DNS_LABEL).
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Container image name.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// This field is optional to allow higher level config management to default or override
	// container images in workload controllers like Deployments and StatefulSets.
	// +optional
	Image *string `protobuf:"bytes,2,opt,name=image,proto3,oneof" json:"image,omitempty"`
	// Entrypoint array. Not executed within a shell.
	// The container image's ENTRYPOINT is used if this is not provided.
	// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
	// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
	// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
	// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
	// of whether the variable exists or not. Cannot be updated.
	// More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +optional
	// +listType=atomic
	Command []string `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	// Arguments to the entrypoint.
	// The container image's CMD is used if this is not provided.
	// Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
	// cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
	// to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
	// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
	// of whether the variable exists or not. Cannot be updated.
	// More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +optional
	// +listType=atomic
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// Container's working directory.
	// If not specified, the container runtime's default will be used, which
	// might be configured in the container image.
	// Cannot be updated.
	// +optional
	WorkingDir *string `protobuf:"bytes,5,opt,name=working_dir,json=workingDir,proto3,oneof" json:"working_dir,omitempty"`
	// List of environment variables to set in the container.
	// Cannot be updated.
	// +optional
	// +patchMergeKey=name
	// +patchStrategy=merge
	// +listType=map
	// +listMapKey=name
	Env []*PodStatusPubSub_EnvVar `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty"`
	// Compute Resources required by this container.
	// Cannot be updated.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Resources *PodStatusPubSub_ResourceRequirements `protobuf:"bytes,8,opt,name=resources,proto3,oneof" json:"resources,omitempty"`
	// RestartPolicy defines the restart behavior of individual containers in a pod.
	// This field may only be set for init containers, and the only allowed value is "Always".
	// For non-init containers or when this field is not specified,
	// the restart behavior is defined by the Pod's restart policy and the container type.
	// Setting the RestartPolicy as "Always" for the init container will have the following effect:
	// this init container will be continually restarted on
	// exit until all regular containers have terminated. Once all regular
	// containers have completed, all init containers with restartPolicy "Always"
	// will be shut down. This lifecycle differs from normal init containers and
	// is often referred to as a "sidecar" container. Although this init
	// container still starts in the init container sequence, it does not wait
	// for the container to complete before proceeding to the next init
	// container. Instead, the next init container starts immediately after this
	// init container is started, or after any startupProbe has successfully
	// completed.
	// +featureGate=SidecarContainers
	// +optional
	RestartPolicy *string `protobuf:"bytes,24,opt,name=restart_policy,json=restartPolicy,proto3,oneof" json:"restart_policy,omitempty"`
	// Optional: Path at which the file to which the container's termination message
	// will be written is mounted into the container's filesystem.
	// Message written is intended to be brief final status, such as an assertion failure message.
	// Will be truncated by the node if greater than 4096 bytes. The total message length across
	// all containers will be limited to 12kb.
	// Defaults to /dev/termination-log.
	// Cannot be updated.
	// +optional
	TerminationMessagePath *string `protobuf:"bytes,13,opt,name=termination_message_path,json=terminationMessagePath,proto3,oneof" json:"termination_message_path,omitempty"`
	// Indicate how the termination message should be populated. File will use the contents of
	// terminationMessagePath to populate the container status message on both success and failure.
	// FallbackToLogsOnError will use the last chunk of container log output if the termination
	// message file is empty and the container exited with an error.
	// The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
	// Defaults to File.
	// Cannot be updated.
	// +optional
	TerminationMessagePolicy *string `protobuf:"bytes,20,opt,name=termination_message_policy,json=terminationMessagePolicy,proto3,oneof" json:"termination_message_policy,omitempty"`
	// Image pull policy.
	// One of Always, Never, IfNotPresent.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	// Cannot be updated.
	// More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	// +optional
	ImagePullPolicy *string `protobuf:"bytes,14,opt,name=image_pull_policy,json=imagePullPolicy,proto3,oneof" json:"image_pull_policy,omitempty"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this
	// is not set, reads from stdin in the container will always result in EOF.
	Stdin bool `protobuf:"varint,16,opt,name=stdin,proto3" json:"stdin,omitempty"`
	// Whether the container runtime should close the stdin channel after it has been opened by
	// a single attach. When stdin is true the stdin stream will remain open across multiple attach
	// sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
	// first client attaches to stdin, and then remains open and accepts data until the client disconnects,
	// at which time stdin is closed and remains closed until the container is restarted. If this
	// flag is false, a container processes that reads from stdin will never receive an EOF.
	StdinOnce bool `protobuf:"varint,17,opt,name=stdin_once,json=stdinOnce,proto3" json:"stdin_once,omitempty"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
	Tty bool `protobuf:"varint,18,opt,name=tty,proto3" json:"tty,omitempty"`
}

func (x *PodStatusPubSub_Container) Reset() {
	*x = PodStatusPubSub_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_Container) ProtoMessage() {}

func (x *PodStatusPubSub_Container) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_Container.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_Container) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 8}
}

func (x *PodStatusPubSub_Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodStatusPubSub_Container) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *PodStatusPubSub_Container) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *PodStatusPubSub_Container) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PodStatusPubSub_Container) GetWorkingDir() string {
	if x != nil && x.WorkingDir != nil {
		return *x.WorkingDir
	}
	return ""
}

func (x *PodStatusPubSub_Container) GetEnv() []*PodStatusPubSub_EnvVar {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *PodStatusPubSub_Container) GetResources() *PodStatusPubSub_ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *PodStatusPubSub_Container) GetRestartPolicy() string {
	if x != nil && x.RestartPolicy != nil {
		return *x.RestartPolicy
	}
	return ""
}

func (x *PodStatusPubSub_Container) GetTerminationMessagePath() string {
	if x != nil && x.TerminationMessagePath != nil {
		return *x.TerminationMessagePath
	}
	return ""
}

func (x *PodStatusPubSub_Container) GetTerminationMessagePolicy() string {
	if x != nil && x.TerminationMessagePolicy != nil {
		return *x.TerminationMessagePolicy
	}
	return ""
}

func (x *PodStatusPubSub_Container) GetImagePullPolicy() string {
	if x != nil && x.ImagePullPolicy != nil {
		return *x.ImagePullPolicy
	}
	return ""
}

func (x *PodStatusPubSub_Container) GetStdin() bool {
	if x != nil {
		return x.Stdin
	}
	return false
}

func (x *PodStatusPubSub_Container) GetStdinOnce() bool {
	if x != nil {
		return x.StdinOnce
	}
	return false
}

func (x *PodStatusPubSub_Container) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

// ContainerStateWaiting is a waiting state of a container.
type PodStatusPubSub_ContainerStateWaiting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (brief) reason the container is not yet running.
	// +optional
	Reason *string `protobuf:"bytes,1,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// Message regarding why the container is not yet running.
	// +optional
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *PodStatusPubSub_ContainerStateWaiting) Reset() {
	*x = PodStatusPubSub_ContainerStateWaiting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_ContainerStateWaiting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_ContainerStateWaiting) ProtoMessage() {}

func (x *PodStatusPubSub_ContainerStateWaiting) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_ContainerStateWaiting.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_ContainerStateWaiting) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 9}
}

func (x *PodStatusPubSub_ContainerStateWaiting) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *PodStatusPubSub_ContainerStateWaiting) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// ContainerStatus contains details for the current status of this container.
type PodStatusPubSub_ContainerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a DNS_LABEL representing the unique name of the container.
	// Each container in a pod must have a unique name across all container types.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// State holds details about the container's current condition.
	// +optional
	State *PodStatusPubSub_ContainerState `protobuf:"bytes,2,opt,name=state,proto3,oneof" json:"state,omitempty"`
	// LastTerminationState holds the last termination state of the container to
	// help debug container crashes and restarts. This field is not
	// populated if the container is still running and RestartCount is 0.
	// +optional
	LastState *PodStatusPubSub_ContainerState `protobuf:"bytes,3,opt,name=last_state,json=lastState,proto3,oneof" json:"last_state,omitempty"`
	// Ready specifies whether the container is currently passing its readiness check.
	// The value will change as readiness probes keep executing. If no readiness
	// probes are specified, this field defaults to true once the container is
	// fully started (see Started field).
	//
	// The value is typically used to determine whether a container is ready to
	// accept traffic.
	Ready *bool `protobuf:"varint,4,opt,name=ready,proto3,oneof" json:"ready,omitempty"`
	// RestartCount holds the number of times the container has been restarted.
	// Kubelet makes an effort to always increment the value, but there
	// are cases when the state may be lost due to node restarts and then the value
	// may be reset to 0. The value is never negative.
	RestartCount int32 `protobuf:"varint,5,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	// Image is the name of container image that the container is running.
	// The container image may not match the image used in the PodSpec,
	// as it may have been resolved by the runtime.
	// More info: https://kubernetes.io/docs/concepts/containers/images.
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// ImageID is the image ID of the container's image. The image ID may not
	// match the image ID of the image used in the PodSpec, as it may have been
	// resolved by the runtime.
	ImageId string `protobuf:"bytes,7,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// ContainerID is the ID of the container in the format '<type>://<container_id>'.
	// Where type is a container runtime identifier, returned from Version call of CRI API
	// (for example "containerd").
	// +optional
	ContainerId string `protobuf:"bytes,8,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Started indicates whether the container has finished its postStart lifecycle hook
	// and passed its startup probe.
	// Initialized as false, becomes true after startupProbe is considered
	// successful. Resets to false when the container is restarted, or if kubelet
	// loses state temporarily. In both cases, startup probes will run again.
	// Is always true when no startupProbe is defined and container is running and
	// has passed the postStart lifecycle hook.
	Started bool `protobuf:"varint,9,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *PodStatusPubSub_ContainerStatus) Reset() {
	*x = PodStatusPubSub_ContainerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_ContainerStatus) ProtoMessage() {}

func (x *PodStatusPubSub_ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_ContainerStatus.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_ContainerStatus) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 10}
}

func (x *PodStatusPubSub_ContainerStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodStatusPubSub_ContainerStatus) GetState() *PodStatusPubSub_ContainerState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *PodStatusPubSub_ContainerStatus) GetLastState() *PodStatusPubSub_ContainerState {
	if x != nil {
		return x.LastState
	}
	return nil
}

func (x *PodStatusPubSub_ContainerStatus) GetReady() bool {
	if x != nil && x.Ready != nil {
		return *x.Ready
	}
	return false
}

func (x *PodStatusPubSub_ContainerStatus) GetRestartCount() int32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *PodStatusPubSub_ContainerStatus) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PodStatusPubSub_ContainerStatus) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *PodStatusPubSub_ContainerStatus) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *PodStatusPubSub_ContainerStatus) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

type PodStatusPubSub_Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *string `protobuf:"bytes,1,opt,name=string,proto3,oneof" json:"string,omitempty"`
}

func (x *PodStatusPubSub_Quantity) Reset() {
	*x = PodStatusPubSub_Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_Quantity) ProtoMessage() {}

func (x *PodStatusPubSub_Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_Quantity.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_Quantity) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 11}
}

func (x *PodStatusPubSub_Quantity) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type PodStatusPubSub_ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Limits map[string]*PodStatusPubSub_Quantity `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// +optional
	Requests map[string]*PodStatusPubSub_Quantity `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PodStatusPubSub_ResourceRequirements) Reset() {
	*x = PodStatusPubSub_ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_ResourceRequirements) ProtoMessage() {}

func (x *PodStatusPubSub_ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_ResourceRequirements.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 12}
}

func (x *PodStatusPubSub_ResourceRequirements) GetLimits() map[string]*PodStatusPubSub_Quantity {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *PodStatusPubSub_ResourceRequirements) GetRequests() map[string]*PodStatusPubSub_Quantity {
	if x != nil {
		return x.Requests
	}
	return nil
}

// PodCondition contains details for the current condition of this pod.
type PodStatusPubSub_PodCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of the condition.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Status is the status of the condition.
	// Can be True, False, Unknown.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Last time we probed the condition.
	// +optional
	LastProbeTime int64 `protobuf:"varint,3,opt,name=last_probe_time,json=lastProbeTime,proto3" json:"last_probe_time,omitempty"`
	// Last time the condition transitioned from one status to another.
	// +optional
	LastTransitionTime int64 `protobuf:"varint,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	// +optional
	Reason *string `protobuf:"bytes,5,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// Human-readable message indicating details about last transition.
	// +optional
	Message *string `protobuf:"bytes,6,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *PodStatusPubSub_PodCondition) Reset() {
	*x = PodStatusPubSub_PodCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_PodCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_PodCondition) ProtoMessage() {}

func (x *PodStatusPubSub_PodCondition) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_PodCondition.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_PodCondition) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 13}
}

func (x *PodStatusPubSub_PodCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PodStatusPubSub_PodCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PodStatusPubSub_PodCondition) GetLastProbeTime() int64 {
	if x != nil {
		return x.LastProbeTime
	}
	return 0
}

func (x *PodStatusPubSub_PodCondition) GetLastTransitionTime() int64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *PodStatusPubSub_PodCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *PodStatusPubSub_PodCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// HostIP represents a single IP address allocated to the host.
type PodStatusPubSub_HostIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP is the IP address assigned to the host
	Ip *string `protobuf:"bytes,1,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
}

func (x *PodStatusPubSub_HostIP) Reset() {
	*x = PodStatusPubSub_HostIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_HostIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_HostIP) ProtoMessage() {}

func (x *PodStatusPubSub_HostIP) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_HostIP.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_HostIP) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 14}
}

func (x *PodStatusPubSub_HostIP) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

// PodStatus represents information about the status of a pod. Status may trail the actual
// state of a system, especially if the node that hosts the pod cannot contact the control
// plane.
type PodStatusPubSub_PodStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle.
	// The conditions array, the reason and message fields, and the individual container status
	// arrays contain more detail about the pod's status.
	// There are five possible phase values:
	//
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the
	// container images has not been created. This includes time before being scheduled as
	// well as time spent downloading images over the network, which could take a while.
	// Running: The pod has been bound to a node, and all of the containers have been created.
	// At least one container is still running, or is in the process of starting or restarting.
	// Succeeded: All containers in the pod have terminated in success, and will not be restarted.
	// Failed: All containers in the pod have terminated, and at least one container has
	// terminated in failure. The container either exited with non-zero status or was terminated
	// by the system.
	// Unknown: For some reason the state of the pod could not be obtained, typically due to an
	// error in communicating with the host of the pod.
	//
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	// +optional
	Phase *string `protobuf:"bytes,1,opt,name=phase,proto3,oneof" json:"phase,omitempty"`
	// Current service state of pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	// +listType=map
	// +listMapKey=type
	Conditions []*PodStatusPubSub_PodCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// A human readable message indicating details about why the pod is in this condition.
	// +optional
	Message *string `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// A brief CamelCase message indicating details about why the pod is in this state.
	// e.g. 'Evicted'
	// +optional
	Reason *string `protobuf:"bytes,4,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
	// scheduled right away as preemption victims receive their graceful termination periods.
	// This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide
	// to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to
	// give the resources on this node to a higher priority pod that is created after preemption.
	// As a result, this field may be different than PodSpec.nodeName when the pod is
	// scheduled.
	// +optional
	NominatedNodeName *string `protobuf:"bytes,11,opt,name=nominated_node_name,json=nominatedNodeName,proto3,oneof" json:"nominated_node_name,omitempty"`
	// hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet.
	// A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will
	// not be updated even if there is a node is assigned to pod
	// +optional
	HostIp *string `protobuf:"bytes,5,opt,name=host_ip,json=hostIp,proto3,oneof" json:"host_ip,omitempty"`
	// hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must
	// match the hostIP field. This list is empty if the pod has not started yet.
	// A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will
	// not be updated even if there is a node is assigned to this pod.
	// +optional
	// +patchStrategy=merge
	// +patchMergeKey=ip
	// +listType=atomic
	HostIps []*PodStatusPubSub_HostIP `protobuf:"bytes,16,rep,name=host_ips,json=hostIps,proto3" json:"host_ips,omitempty"`
	// podIP address allocated to the pod. Routable at least within the cluster.
	// Empty if not yet allocated.
	// +optional
	PodIp *string `protobuf:"bytes,6,opt,name=pod_ip,json=podIp,proto3,oneof" json:"pod_ip,omitempty"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet.
	// This is before the Kubelet pulled the container image(s) for the pod.
	// +optional
	StartTime *int64 `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	// The list has one entry per init container in the manifest. The most recent successful
	// init container will have ready = true, the most recently started container will have
	// startTime set.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	// +listType=atomic
	InitContainerStatuses []*PodStatusPubSub_ContainerStatus `protobuf:"bytes,10,rep,name=init_container_statuses,json=initContainerStatuses,proto3" json:"init_container_statuses,omitempty"`
	// The list has one entry per container in the manifest.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	// +optional
	// +listType=atomic
	ContainerStatuses []*PodStatusPubSub_ContainerStatus `protobuf:"bytes,8,rep,name=container_statuses,json=containerStatuses,proto3" json:"container_statuses,omitempty"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements
	// See PodQOSClass type for available QOS classes
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes
	// +optional
	QosClass *string `protobuf:"bytes,9,opt,name=qos_class,json=qosClass,proto3,oneof" json:"qos_class,omitempty"`
	// Status for any ephemeral containers that have run in this pod.
	// +optional
	// +listType=atomic
	EphemeralContainerStatuses []*PodStatusPubSub_ContainerStatus `protobuf:"bytes,13,rep,name=ephemeral_container_statuses,json=ephemeralContainerStatuses,proto3" json:"ephemeral_container_statuses,omitempty"`
	// Status of resources resize desired for pod's containers.
	// It is empty if no resources resize is pending.
	// Any changes to container resources will automatically set this to "Proposed"
	// +featureGate=InPlacePodVerticalScaling
	// +optional
	Resize *string `protobuf:"bytes,14,opt,name=resize,proto3,oneof" json:"resize,omitempty"`
}

func (x *PodStatusPubSub_PodStatus) Reset() {
	*x = PodStatusPubSub_PodStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatusPubSub_PodStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatusPubSub_PodStatus) ProtoMessage() {}

func (x *PodStatusPubSub_PodStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_pod_status_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatusPubSub_PodStatus.ProtoReflect.Descriptor instead.
func (*PodStatusPubSub_PodStatus) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP(), []int{0, 15}
}

func (x *PodStatusPubSub_PodStatus) GetPhase() string {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return ""
}

func (x *PodStatusPubSub_PodStatus) GetConditions() []*PodStatusPubSub_PodCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *PodStatusPubSub_PodStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *PodStatusPubSub_PodStatus) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *PodStatusPubSub_PodStatus) GetNominatedNodeName() string {
	if x != nil && x.NominatedNodeName != nil {
		return *x.NominatedNodeName
	}
	return ""
}

func (x *PodStatusPubSub_PodStatus) GetHostIp() string {
	if x != nil && x.HostIp != nil {
		return *x.HostIp
	}
	return ""
}

func (x *PodStatusPubSub_PodStatus) GetHostIps() []*PodStatusPubSub_HostIP {
	if x != nil {
		return x.HostIps
	}
	return nil
}

func (x *PodStatusPubSub_PodStatus) GetPodIp() string {
	if x != nil && x.PodIp != nil {
		return *x.PodIp
	}
	return ""
}

func (x *PodStatusPubSub_PodStatus) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *PodStatusPubSub_PodStatus) GetInitContainerStatuses() []*PodStatusPubSub_ContainerStatus {
	if x != nil {
		return x.InitContainerStatuses
	}
	return nil
}

func (x *PodStatusPubSub_PodStatus) GetContainerStatuses() []*PodStatusPubSub_ContainerStatus {
	if x != nil {
		return x.ContainerStatuses
	}
	return nil
}

func (x *PodStatusPubSub_PodStatus) GetQosClass() string {
	if x != nil && x.QosClass != nil {
		return *x.QosClass
	}
	return ""
}

func (x *PodStatusPubSub_PodStatus) GetEphemeralContainerStatuses() []*PodStatusPubSub_ContainerStatus {
	if x != nil {
		return x.EphemeralContainerStatuses
	}
	return nil
}

func (x *PodStatusPubSub_PodStatus) GetResize() string {
	if x != nil && x.Resize != nil {
		return *x.Resize
	}
	return ""
}

var File_chalk_pubsub_v1_pod_status_proto protoreflect.FileDescriptor

var file_chalk_pubsub_v1_pod_status_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x65, 0x6e, 0x5f, 0x62, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2f, 0x62, 0x71, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x65, 0x6e, 0x5f, 0x62, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x62, 0x71, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x84, 0x35, 0x0a, 0x0f, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x64,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x0e, 0xea, 0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x1c, 0x0a,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x0b,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x19, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x7c, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xd8, 0x0d,
	0x0a, 0x07, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x20, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x1d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x1c, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x63, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0c, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x22,
	0x0a, 0x20, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0xc5, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0a, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x1a, 0x46, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea,
	0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xf4, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0e, 0xea, 0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x48,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x48, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x1a,
	0x32, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xd6, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x58, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x18, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x74, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x6a, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x97, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x1a, 0x32, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xa0, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x59, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x64, 0x0a, 0x0b, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x66, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x87, 0x02, 0x0a, 0x0c, 0x50, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0e, 0xea, 0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f,
	0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x24, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x1a, 0x8e, 0x07, 0x0a, 0x09, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x52, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f, 0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x48, 0x06, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5f,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x71, 0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x72, 0x0a, 0x1c, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x65, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x64, 0x5f,
	0x69, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x0f, 0xea, 0x3f, 0x0c, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xbe, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0e,
	0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2f,
	0x76, 0x31, 0x3b, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x50,
	0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x50, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_pubsub_v1_pod_status_proto_rawDescOnce sync.Once
	file_chalk_pubsub_v1_pod_status_proto_rawDescData = file_chalk_pubsub_v1_pod_status_proto_rawDesc
)

func file_chalk_pubsub_v1_pod_status_proto_rawDescGZIP() []byte {
	file_chalk_pubsub_v1_pod_status_proto_rawDescOnce.Do(func() {
		file_chalk_pubsub_v1_pod_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_pubsub_v1_pod_status_proto_rawDescData)
	})
	return file_chalk_pubsub_v1_pod_status_proto_rawDescData
}

var file_chalk_pubsub_v1_pod_status_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_chalk_pubsub_v1_pod_status_proto_goTypes = []any{
	(*PodStatusPubSub)(nil),                          // 0: chalk.pubsub.v1.PodStatusPubSub
	(*PodStatusPubSub_Volume)(nil),                   // 1: chalk.pubsub.v1.PodStatusPubSub.Volume
	(*PodStatusPubSub_ClaimSource)(nil),              // 2: chalk.pubsub.v1.PodStatusPubSub.ClaimSource
	(*PodStatusPubSub_PodResourceClaim)(nil),         // 3: chalk.pubsub.v1.PodStatusPubSub.PodResourceClaim
	(*PodStatusPubSub_PodSpec)(nil),                  // 4: chalk.pubsub.v1.PodStatusPubSub.PodSpec
	(*PodStatusPubSub_ContainerState)(nil),           // 5: chalk.pubsub.v1.PodStatusPubSub.ContainerState
	(*PodStatusPubSub_ContainerStateRunning)(nil),    // 6: chalk.pubsub.v1.PodStatusPubSub.ContainerStateRunning
	(*PodStatusPubSub_ContainerStateTerminated)(nil), // 7: chalk.pubsub.v1.PodStatusPubSub.ContainerStateTerminated
	(*PodStatusPubSub_EnvVar)(nil),                   // 8: chalk.pubsub.v1.PodStatusPubSub.EnvVar
	(*PodStatusPubSub_Container)(nil),                // 9: chalk.pubsub.v1.PodStatusPubSub.Container
	(*PodStatusPubSub_ContainerStateWaiting)(nil),    // 10: chalk.pubsub.v1.PodStatusPubSub.ContainerStateWaiting
	(*PodStatusPubSub_ContainerStatus)(nil),          // 11: chalk.pubsub.v1.PodStatusPubSub.ContainerStatus
	(*PodStatusPubSub_Quantity)(nil),                 // 12: chalk.pubsub.v1.PodStatusPubSub.Quantity
	(*PodStatusPubSub_ResourceRequirements)(nil),     // 13: chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements
	(*PodStatusPubSub_PodCondition)(nil),             // 14: chalk.pubsub.v1.PodStatusPubSub.PodCondition
	(*PodStatusPubSub_HostIP)(nil),                   // 15: chalk.pubsub.v1.PodStatusPubSub.HostIP
	(*PodStatusPubSub_PodStatus)(nil),                // 16: chalk.pubsub.v1.PodStatusPubSub.PodStatus
	nil,                                              // 17: chalk.pubsub.v1.PodStatusPubSub.LabelsEntry
	nil,                                              // 18: chalk.pubsub.v1.PodStatusPubSub.AnnotationsEntry
	nil,                                              // 19: chalk.pubsub.v1.PodStatusPubSub.PodSpec.NodeSelectorEntry
	nil,                                              // 20: chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.LimitsEntry
	nil,                                              // 21: chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.RequestsEntry
}
var file_chalk_pubsub_v1_pod_status_proto_depIdxs = []int32{
	16, // 0: chalk.pubsub.v1.PodStatusPubSub.status:type_name -> chalk.pubsub.v1.PodStatusPubSub.PodStatus
	4,  // 1: chalk.pubsub.v1.PodStatusPubSub.spec:type_name -> chalk.pubsub.v1.PodStatusPubSub.PodSpec
	17, // 2: chalk.pubsub.v1.PodStatusPubSub.labels:type_name -> chalk.pubsub.v1.PodStatusPubSub.LabelsEntry
	18, // 3: chalk.pubsub.v1.PodStatusPubSub.annotations:type_name -> chalk.pubsub.v1.PodStatusPubSub.AnnotationsEntry
	2,  // 4: chalk.pubsub.v1.PodStatusPubSub.PodResourceClaim.source:type_name -> chalk.pubsub.v1.PodStatusPubSub.ClaimSource
	1,  // 5: chalk.pubsub.v1.PodStatusPubSub.PodSpec.volumes:type_name -> chalk.pubsub.v1.PodStatusPubSub.Volume
	9,  // 6: chalk.pubsub.v1.PodStatusPubSub.PodSpec.init_containers:type_name -> chalk.pubsub.v1.PodStatusPubSub.Container
	9,  // 7: chalk.pubsub.v1.PodStatusPubSub.PodSpec.containers:type_name -> chalk.pubsub.v1.PodStatusPubSub.Container
	19, // 8: chalk.pubsub.v1.PodStatusPubSub.PodSpec.node_selector:type_name -> chalk.pubsub.v1.PodStatusPubSub.PodSpec.NodeSelectorEntry
	3,  // 9: chalk.pubsub.v1.PodStatusPubSub.PodSpec.resource_claims:type_name -> chalk.pubsub.v1.PodStatusPubSub.PodResourceClaim
	10, // 10: chalk.pubsub.v1.PodStatusPubSub.ContainerState.waiting:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerStateWaiting
	6,  // 11: chalk.pubsub.v1.PodStatusPubSub.ContainerState.running:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerStateRunning
	7,  // 12: chalk.pubsub.v1.PodStatusPubSub.ContainerState.terminated:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerStateTerminated
	8,  // 13: chalk.pubsub.v1.PodStatusPubSub.Container.env:type_name -> chalk.pubsub.v1.PodStatusPubSub.EnvVar
	13, // 14: chalk.pubsub.v1.PodStatusPubSub.Container.resources:type_name -> chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements
	5,  // 15: chalk.pubsub.v1.PodStatusPubSub.ContainerStatus.state:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerState
	5,  // 16: chalk.pubsub.v1.PodStatusPubSub.ContainerStatus.last_state:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerState
	20, // 17: chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.limits:type_name -> chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.LimitsEntry
	21, // 18: chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.requests:type_name -> chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.RequestsEntry
	14, // 19: chalk.pubsub.v1.PodStatusPubSub.PodStatus.conditions:type_name -> chalk.pubsub.v1.PodStatusPubSub.PodCondition
	15, // 20: chalk.pubsub.v1.PodStatusPubSub.PodStatus.host_ips:type_name -> chalk.pubsub.v1.PodStatusPubSub.HostIP
	11, // 21: chalk.pubsub.v1.PodStatusPubSub.PodStatus.init_container_statuses:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerStatus
	11, // 22: chalk.pubsub.v1.PodStatusPubSub.PodStatus.container_statuses:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerStatus
	11, // 23: chalk.pubsub.v1.PodStatusPubSub.PodStatus.ephemeral_container_statuses:type_name -> chalk.pubsub.v1.PodStatusPubSub.ContainerStatus
	12, // 24: chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.LimitsEntry.value:type_name -> chalk.pubsub.v1.PodStatusPubSub.Quantity
	12, // 25: chalk.pubsub.v1.PodStatusPubSub.ResourceRequirements.RequestsEntry.value:type_name -> chalk.pubsub.v1.PodStatusPubSub.Quantity
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_chalk_pubsub_v1_pod_status_proto_init() }
func file_chalk_pubsub_v1_pod_status_proto_init() {
	if File_chalk_pubsub_v1_pod_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_ClaimSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_PodResourceClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_PodSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_ContainerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_ContainerStateRunning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_ContainerStateTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_EnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_ContainerStateWaiting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_ContainerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_PodCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_HostIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_pubsub_v1_pod_status_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PodStatusPubSub_PodStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[5].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[7].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[9].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[10].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[11].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[12].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[14].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[15].OneofWrappers = []any{}
	file_chalk_pubsub_v1_pod_status_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_pubsub_v1_pod_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_pubsub_v1_pod_status_proto_goTypes,
		DependencyIndexes: file_chalk_pubsub_v1_pod_status_proto_depIdxs,
		MessageInfos:      file_chalk_pubsub_v1_pod_status_proto_msgTypes,
	}.Build()
	File_chalk_pubsub_v1_pod_status_proto = out.File
	file_chalk_pubsub_v1_pod_status_proto_rawDesc = nil
	file_chalk_pubsub_v1_pod_status_proto_goTypes = nil
	file_chalk_pubsub_v1_pod_status_proto_depIdxs = nil
}
