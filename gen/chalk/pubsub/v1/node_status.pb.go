//
// THIS FILE CONTROLS ALL THE BILLING MONITORING. PLEASE BE VERY CAREFUL.
//
// When you update this file, you MUST run terraform apply
//
// If `terraform apply` is not run, we will stop censusing the nodes in the
// clusters that we run, which will impact our revenue.
//
// If you're not sure, please ask!
//
//
//
//
//
//
//
//
//
//
//
//
// PLEASE RUN TERRAFORM APPLY BEFORE MERGING THIS FILE

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/pubsub/v1/node_status.proto

package pubsubv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/gen_bq_schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InstanceUsage is a message that represents the usage of a single instance.
type NodeStatusPubSub struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Chalk team name that incurred the usage.
	Team string `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	// node.Name
	// ex. ip-10-33-13-186.us-west-2.compute.internal
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A Kubernetes systems-generated string to uniquely identify objects.
	// Every object created over the whole lifetime of a Kubernetes cluster
	// has a distinct UID. It is intended to distinguish between historical
	// occurrences of similar entities. Kubernetes UIDs are UUIDs.
	// ex. f65e1fce-e511-495f-a5af-e5d4ebe79614
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// node.kubernetes.io/instance-type
	// ex. t3.medium
	InstanceType string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// topology.kubernetes.io/region
	// ex. us-west-2
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// topology.kubernetes.io/zone
	// ex. us-west-2a
	Zone string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
	// The time that the instance was created.
	// node.CreationTimestamp.Unix()
	CreationTimestamp int64 `protobuf:"varint,8,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// node.DeletionTimestamp.Unix()
	// The time that the instance was deleted. May be 0 if the instance is still running.
	DeletionTimestamp int64 `protobuf:"varint,9,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	// The time that we polled the instance for usage.
	ObservedTimestamp int64 `protobuf:"varint,10,opt,name=observed_timestamp,json=observedTimestamp,proto3" json:"observed_timestamp,omitempty"`
	// node.Labels
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// node.Annotations
	Annotations map[string]string `protobuf:"bytes,12,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// MachineID reported by the node. For unique machine identification
	// in the cluster this field is preferred. Learn more from man(5)
	// machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
	// ex. ec2d1437f00e85506a67dc38744731fe
	MachineId string `protobuf:"bytes,13,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	// SystemUUID reported by the node. For unique machine identification
	// MachineID is preferred. This field is specific to Red Hat hosts
	// https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
	// ex. ec2d1437-f00e-8550-6a67-dc38744731fe
	SystemUuid string `protobuf:"bytes,14,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"`
	// Boot ID reported by the node.
	// ex. 2c094fc9-b776-4223-9316-c66e70f9f6b9
	BootId        string `protobuf:"bytes,15,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	Unschedulable bool   `protobuf:"varint,16,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`
	Namespace     string `protobuf:"bytes,17,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Often null.
	// container.googleapis.com/instance_id
	InstanceId string `protobuf:"bytes,18,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The name of the cluster that the node is in.
	// ex. mycompany-prod-eks
	Cluster           string `protobuf:"bytes,19,opt,name=cluster,proto3" json:"cluster,omitempty"`
	TotalCpu          string `protobuf:"bytes,20,opt,name=total_cpu,json=totalCpu,proto3" json:"total_cpu,omitempty"`
	TotalMemory       string `protobuf:"bytes,21,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	AllocatableCpu    string `protobuf:"bytes,22,opt,name=allocatable_cpu,json=allocatableCpu,proto3" json:"allocatable_cpu,omitempty"`
	AllocatableMemory string `protobuf:"bytes,23,opt,name=allocatable_memory,json=allocatableMemory,proto3" json:"allocatable_memory,omitempty"`
	ChalkManaged      bool   `protobuf:"varint,24,opt,name=chalk_managed,json=chalkManaged,proto3" json:"chalk_managed,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NodeStatusPubSub) Reset() {
	*x = NodeStatusPubSub{}
	mi := &file_chalk_pubsub_v1_node_status_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatusPubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusPubSub) ProtoMessage() {}

func (x *NodeStatusPubSub) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_node_status_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusPubSub.ProtoReflect.Descriptor instead.
func (*NodeStatusPubSub) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_node_status_proto_rawDescGZIP(), []int{0}
}

func (x *NodeStatusPubSub) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *NodeStatusPubSub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeStatusPubSub) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NodeStatusPubSub) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *NodeStatusPubSub) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NodeStatusPubSub) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *NodeStatusPubSub) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *NodeStatusPubSub) GetDeletionTimestamp() int64 {
	if x != nil {
		return x.DeletionTimestamp
	}
	return 0
}

func (x *NodeStatusPubSub) GetObservedTimestamp() int64 {
	if x != nil {
		return x.ObservedTimestamp
	}
	return 0
}

func (x *NodeStatusPubSub) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeStatusPubSub) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NodeStatusPubSub) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *NodeStatusPubSub) GetSystemUuid() string {
	if x != nil {
		return x.SystemUuid
	}
	return ""
}

func (x *NodeStatusPubSub) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

func (x *NodeStatusPubSub) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *NodeStatusPubSub) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NodeStatusPubSub) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *NodeStatusPubSub) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *NodeStatusPubSub) GetTotalCpu() string {
	if x != nil {
		return x.TotalCpu
	}
	return ""
}

func (x *NodeStatusPubSub) GetTotalMemory() string {
	if x != nil {
		return x.TotalMemory
	}
	return ""
}

func (x *NodeStatusPubSub) GetAllocatableCpu() string {
	if x != nil {
		return x.AllocatableCpu
	}
	return ""
}

func (x *NodeStatusPubSub) GetAllocatableMemory() string {
	if x != nil {
		return x.AllocatableMemory
	}
	return ""
}

func (x *NodeStatusPubSub) GetChalkManaged() bool {
	if x != nil {
		return x.ChalkManaged
	}
	return false
}

var File_chalk_pubsub_v1_node_status_proto protoreflect.FileDescriptor

const file_chalk_pubsub_v1_node_status_proto_rawDesc = "" +
	"\n" +
	"!chalk/pubsub/v1/node_status.proto\x12\x0fchalk.pubsub.v1\x1a\x1cgen_bq_schema/bq_field.proto\x1a\x1cgen_bq_schema/bq_table.proto\"\x99\b\n" +
	"\x10NodeStatusPubSub\x12\x12\n" +
	"\x04team\x18\x01 \x01(\tR\x04team\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\tR\x03uid\x12#\n" +
	"\rinstance_type\x18\x04 \x01(\tR\finstanceType\x12\x16\n" +
	"\x06region\x18\x05 \x01(\tR\x06region\x12\x12\n" +
	"\x04zone\x18\x06 \x01(\tR\x04zone\x12=\n" +
	"\x12creation_timestamp\x18\b \x01(\x03B\x0e\xea?\v\x12\tTIMESTAMPR\x11creationTimestamp\x12=\n" +
	"\x12deletion_timestamp\x18\t \x01(\x03B\x0e\xea?\v\x12\tTIMESTAMPR\x11deletionTimestamp\x12=\n" +
	"\x12observed_timestamp\x18\n" +
	" \x01(\x03B\x0e\xea?\v\x12\tTIMESTAMPR\x11observedTimestamp\x12E\n" +
	"\x06labels\x18\v \x03(\v2-.chalk.pubsub.v1.NodeStatusPubSub.LabelsEntryR\x06labels\x12T\n" +
	"\vannotations\x18\f \x03(\v22.chalk.pubsub.v1.NodeStatusPubSub.AnnotationsEntryR\vannotations\x12\x1d\n" +
	"\n" +
	"machine_id\x18\r \x01(\tR\tmachineId\x12\x1f\n" +
	"\vsystem_uuid\x18\x0e \x01(\tR\n" +
	"systemUuid\x12\x17\n" +
	"\aboot_id\x18\x0f \x01(\tR\x06bootId\x12$\n" +
	"\runschedulable\x18\x10 \x01(\bR\runschedulable\x12\x1c\n" +
	"\tnamespace\x18\x11 \x01(\tR\tnamespace\x12\x1f\n" +
	"\vinstance_id\x18\x12 \x01(\tR\n" +
	"instanceId\x12\x18\n" +
	"\acluster\x18\x13 \x01(\tR\acluster\x12\x1b\n" +
	"\ttotal_cpu\x18\x14 \x01(\tR\btotalCpu\x12!\n" +
	"\ftotal_memory\x18\x15 \x01(\tR\vtotalMemory\x12'\n" +
	"\x0fallocatable_cpu\x18\x16 \x01(\tR\x0eallocatableCpu\x12-\n" +
	"\x12allocatable_memory\x18\x17 \x01(\tR\x11allocatableMemory\x12#\n" +
	"\rchalk_managed\x18\x18 \x01(\bR\fchalkManaged\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\x10\xea?\r\n" +
	"\vnode_statusB\xbf\x01\n" +
	"\x13com.chalk.pubsub.v1B\x0fNodeStatusProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/pubsub/v1;pubsubv1\xa2\x02\x03CPX\xaa\x02\x0fChalk.Pubsub.V1\xca\x02\x0fChalk\\Pubsub\\V1\xe2\x02\x1bChalk\\Pubsub\\V1\\GPBMetadata\xea\x02\x11Chalk::Pubsub::V1b\x06proto3"

var (
	file_chalk_pubsub_v1_node_status_proto_rawDescOnce sync.Once
	file_chalk_pubsub_v1_node_status_proto_rawDescData []byte
)

func file_chalk_pubsub_v1_node_status_proto_rawDescGZIP() []byte {
	file_chalk_pubsub_v1_node_status_proto_rawDescOnce.Do(func() {
		file_chalk_pubsub_v1_node_status_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_pubsub_v1_node_status_proto_rawDesc), len(file_chalk_pubsub_v1_node_status_proto_rawDesc)))
	})
	return file_chalk_pubsub_v1_node_status_proto_rawDescData
}

var file_chalk_pubsub_v1_node_status_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_pubsub_v1_node_status_proto_goTypes = []any{
	(*NodeStatusPubSub)(nil), // 0: chalk.pubsub.v1.NodeStatusPubSub
	nil,                      // 1: chalk.pubsub.v1.NodeStatusPubSub.LabelsEntry
	nil,                      // 2: chalk.pubsub.v1.NodeStatusPubSub.AnnotationsEntry
}
var file_chalk_pubsub_v1_node_status_proto_depIdxs = []int32{
	1, // 0: chalk.pubsub.v1.NodeStatusPubSub.labels:type_name -> chalk.pubsub.v1.NodeStatusPubSub.LabelsEntry
	2, // 1: chalk.pubsub.v1.NodeStatusPubSub.annotations:type_name -> chalk.pubsub.v1.NodeStatusPubSub.AnnotationsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_pubsub_v1_node_status_proto_init() }
func file_chalk_pubsub_v1_node_status_proto_init() {
	if File_chalk_pubsub_v1_node_status_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_pubsub_v1_node_status_proto_rawDesc), len(file_chalk_pubsub_v1_node_status_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_pubsub_v1_node_status_proto_goTypes,
		DependencyIndexes: file_chalk_pubsub_v1_node_status_proto_depIdxs,
		MessageInfos:      file_chalk_pubsub_v1_node_status_proto_msgTypes,
	}.Build()
	File_chalk_pubsub_v1_node_status_proto = out.File
	file_chalk_pubsub_v1_node_status_proto_goTypes = nil
	file_chalk_pubsub_v1_node_status_proto_depIdxs = nil
}
