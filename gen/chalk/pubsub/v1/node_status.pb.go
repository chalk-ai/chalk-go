// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/pubsub/v1/node_status.proto

package pubsubv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/gen_bq_schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InstanceUsage is a message that represents the usage of a single instance.
type NodeStatusPubSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Chalk team name that incurred the usage.
	Team string `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	// node.Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// node.UID
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// node.kubernetes.io/instance-type
	InstanceType string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// topology.kubernetes.io/region
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// topology.kubernetes.io/zone
	Zone string `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
	// The time that the instance was created.
	// node.CreationTimestamp.Unix()
	CreationTimestamp int64 `protobuf:"varint,8,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// node.DeletionTimestamp.Unix()
	// The time that the instance was deleted. May be 0 if the instance is still running.
	DeletionTimestamp int64 `protobuf:"varint,9,opt,name=deletion_timestamp,json=deletionTimestamp,proto3" json:"deletion_timestamp,omitempty"`
	// The time that we polled the instance for usage.
	ObservedTimestamp int64 `protobuf:"varint,10,opt,name=observed_timestamp,json=observedTimestamp,proto3" json:"observed_timestamp,omitempty"`
	// node.Labels
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// node.Annotations
	Annotations   map[string]string `protobuf:"bytes,12,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MachineId     string            `protobuf:"bytes,13,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	SystemUuid    string            `protobuf:"bytes,14,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"`
	BootId        string            `protobuf:"bytes,15,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	Unschedulable bool              `protobuf:"varint,16,opt,name=unschedulable,proto3" json:"unschedulable,omitempty"`
	Namespace     string            `protobuf:"bytes,17,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// container.googleapis.com/instance_id
	InstanceId string `protobuf:"bytes,18,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Cluster    string `protobuf:"bytes,19,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *NodeStatusPubSub) Reset() {
	*x = NodeStatusPubSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_pubsub_v1_node_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatusPubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusPubSub) ProtoMessage() {}

func (x *NodeStatusPubSub) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_pubsub_v1_node_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusPubSub.ProtoReflect.Descriptor instead.
func (*NodeStatusPubSub) Descriptor() ([]byte, []int) {
	return file_chalk_pubsub_v1_node_status_proto_rawDescGZIP(), []int{0}
}

func (x *NodeStatusPubSub) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

func (x *NodeStatusPubSub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeStatusPubSub) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NodeStatusPubSub) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *NodeStatusPubSub) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *NodeStatusPubSub) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *NodeStatusPubSub) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *NodeStatusPubSub) GetDeletionTimestamp() int64 {
	if x != nil {
		return x.DeletionTimestamp
	}
	return 0
}

func (x *NodeStatusPubSub) GetObservedTimestamp() int64 {
	if x != nil {
		return x.ObservedTimestamp
	}
	return 0
}

func (x *NodeStatusPubSub) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeStatusPubSub) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NodeStatusPubSub) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *NodeStatusPubSub) GetSystemUuid() string {
	if x != nil {
		return x.SystemUuid
	}
	return ""
}

func (x *NodeStatusPubSub) GetBootId() string {
	if x != nil {
		return x.BootId
	}
	return ""
}

func (x *NodeStatusPubSub) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *NodeStatusPubSub) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NodeStatusPubSub) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *NodeStatusPubSub) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

var File_chalk_pubsub_v1_node_status_proto protoreflect.FileDescriptor

var file_chalk_pubsub_v1_node_status_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x65, 0x6e, 0x5f, 0x62, 0x71, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2f, 0x62, 0x71, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x65, 0x6e, 0x5f, 0x62, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x62, 0x71, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdc, 0x06, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x3d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f,
	0x0b, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f, 0x0b,
	0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d,
	0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xea, 0x3f, 0x0b, 0x12,
	0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x45, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x10, 0xea,
	0x3f, 0x0d, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0xbf, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x50, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_pubsub_v1_node_status_proto_rawDescOnce sync.Once
	file_chalk_pubsub_v1_node_status_proto_rawDescData = file_chalk_pubsub_v1_node_status_proto_rawDesc
)

func file_chalk_pubsub_v1_node_status_proto_rawDescGZIP() []byte {
	file_chalk_pubsub_v1_node_status_proto_rawDescOnce.Do(func() {
		file_chalk_pubsub_v1_node_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_pubsub_v1_node_status_proto_rawDescData)
	})
	return file_chalk_pubsub_v1_node_status_proto_rawDescData
}

var file_chalk_pubsub_v1_node_status_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_pubsub_v1_node_status_proto_goTypes = []any{
	(*NodeStatusPubSub)(nil), // 0: chalk.pubsub.v1.NodeStatusPubSub
	nil,                      // 1: chalk.pubsub.v1.NodeStatusPubSub.LabelsEntry
	nil,                      // 2: chalk.pubsub.v1.NodeStatusPubSub.AnnotationsEntry
}
var file_chalk_pubsub_v1_node_status_proto_depIdxs = []int32{
	1, // 0: chalk.pubsub.v1.NodeStatusPubSub.labels:type_name -> chalk.pubsub.v1.NodeStatusPubSub.LabelsEntry
	2, // 1: chalk.pubsub.v1.NodeStatusPubSub.annotations:type_name -> chalk.pubsub.v1.NodeStatusPubSub.AnnotationsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_pubsub_v1_node_status_proto_init() }
func file_chalk_pubsub_v1_node_status_proto_init() {
	if File_chalk_pubsub_v1_node_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_pubsub_v1_node_status_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NodeStatusPubSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_pubsub_v1_node_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_pubsub_v1_node_status_proto_goTypes,
		DependencyIndexes: file_chalk_pubsub_v1_node_status_proto_depIdxs,
		MessageInfos:      file_chalk_pubsub_v1_node_status_proto_msgTypes,
	}.Build()
	File_chalk_pubsub_v1_node_status_proto = out.File
	file_chalk_pubsub_v1_node_status_proto_rawDesc = nil
	file_chalk_pubsub_v1_node_status_proto_goTypes = nil
	file_chalk_pubsub_v1_node_status_proto_depIdxs = nil
}
