// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/common/v1/script_task.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScriptTaskStatus int32

const (
	ScriptTaskStatus_SCRIPT_TASK_STATUS_UNSPECIFIED ScriptTaskStatus = 0
	ScriptTaskStatus_SCRIPT_TASK_STATUS_QUEUED      ScriptTaskStatus = 1
	ScriptTaskStatus_SCRIPT_TASK_STATUS_WORKING     ScriptTaskStatus = 2
	ScriptTaskStatus_SCRIPT_TASK_STATUS_COMPLETED   ScriptTaskStatus = 3
	ScriptTaskStatus_SCRIPT_TASK_STATUS_FAILED      ScriptTaskStatus = 4
	ScriptTaskStatus_SCRIPT_TASK_STATUS_CANCELED    ScriptTaskStatus = 5
)

// Enum value maps for ScriptTaskStatus.
var (
	ScriptTaskStatus_name = map[int32]string{
		0: "SCRIPT_TASK_STATUS_UNSPECIFIED",
		1: "SCRIPT_TASK_STATUS_QUEUED",
		2: "SCRIPT_TASK_STATUS_WORKING",
		3: "SCRIPT_TASK_STATUS_COMPLETED",
		4: "SCRIPT_TASK_STATUS_FAILED",
		5: "SCRIPT_TASK_STATUS_CANCELED",
	}
	ScriptTaskStatus_value = map[string]int32{
		"SCRIPT_TASK_STATUS_UNSPECIFIED": 0,
		"SCRIPT_TASK_STATUS_QUEUED":      1,
		"SCRIPT_TASK_STATUS_WORKING":     2,
		"SCRIPT_TASK_STATUS_COMPLETED":   3,
		"SCRIPT_TASK_STATUS_FAILED":      4,
		"SCRIPT_TASK_STATUS_CANCELED":    5,
	}
)

func (x ScriptTaskStatus) Enum() *ScriptTaskStatus {
	p := new(ScriptTaskStatus)
	*p = x
	return p
}

func (x ScriptTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScriptTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_common_v1_script_task_proto_enumTypes[0].Descriptor()
}

func (ScriptTaskStatus) Type() protoreflect.EnumType {
	return &file_chalk_common_v1_script_task_proto_enumTypes[0]
}

func (x ScriptTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScriptTaskStatus.Descriptor instead.
func (ScriptTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_chalk_common_v1_script_task_proto_rawDescGZIP(), []int{0}
}

type ScriptTaskKind int32

const (
	ScriptTaskKind_SCRIPT_TASK_KIND_UNSPECIFIED   ScriptTaskKind = 0
	ScriptTaskKind_SCRIPT_TASK_KIND_PYTHON_SCRIPT ScriptTaskKind = 1
	ScriptTaskKind_SCRIPT_TASK_KIND_TRAINING_RUN  ScriptTaskKind = 2
)

// Enum value maps for ScriptTaskKind.
var (
	ScriptTaskKind_name = map[int32]string{
		0: "SCRIPT_TASK_KIND_UNSPECIFIED",
		1: "SCRIPT_TASK_KIND_PYTHON_SCRIPT",
		2: "SCRIPT_TASK_KIND_TRAINING_RUN",
	}
	ScriptTaskKind_value = map[string]int32{
		"SCRIPT_TASK_KIND_UNSPECIFIED":   0,
		"SCRIPT_TASK_KIND_PYTHON_SCRIPT": 1,
		"SCRIPT_TASK_KIND_TRAINING_RUN":  2,
	}
)

func (x ScriptTaskKind) Enum() *ScriptTaskKind {
	p := new(ScriptTaskKind)
	*p = x
	return p
}

func (x ScriptTaskKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScriptTaskKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_common_v1_script_task_proto_enumTypes[1].Descriptor()
}

func (ScriptTaskKind) Type() protoreflect.EnumType {
	return &file_chalk_common_v1_script_task_proto_enumTypes[1]
}

func (x ScriptTaskKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScriptTaskKind.Descriptor instead.
func (ScriptTaskKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_common_v1_script_task_proto_rawDescGZIP(), []int{1}
}

type TrainingRunArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentName string `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName,proto3" json:"experiment_name,omitempty"`
}

func (x *TrainingRunArgs) Reset() {
	*x = TrainingRunArgs{}
	mi := &file_chalk_common_v1_script_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainingRunArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingRunArgs) ProtoMessage() {}

func (x *TrainingRunArgs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_script_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingRunArgs.ProtoReflect.Descriptor instead.
func (*TrainingRunArgs) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_script_task_proto_rawDescGZIP(), []int{0}
}

func (x *TrainingRunArgs) GetExperimentName() string {
	if x != nil {
		return x.ExperimentName
	}
	return ""
}

type ScriptTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionReferenceType string                `protobuf:"bytes,1,opt,name=function_reference_type,json=functionReferenceType,proto3" json:"function_reference_type,omitempty"` // 'file' or 'module'
	FunctionReference     string                `protobuf:"bytes,2,opt,name=function_reference,json=functionReference,proto3" json:"function_reference,omitempty"`               // e.g. script.py::my_func
	ArgumentsJson         *string               `protobuf:"bytes,11,opt,name=arguments_json,json=argumentsJson,proto3,oneof" json:"arguments_json,omitempty"`
	Kind                  ScriptTaskKind        `protobuf:"varint,12,opt,name=kind,proto3,enum=chalk.common.v1.ScriptTaskKind" json:"kind,omitempty"`
	SourceKey             *string               `protobuf:"bytes,3,opt,name=source_key,json=sourceKey,proto3,oneof" json:"source_key,omitempty"` // only for single file inputs
	Branch                *string               `protobuf:"bytes,4,opt,name=branch,proto3,oneof" json:"branch,omitempty"`
	ResourceGroup         *string               `protobuf:"bytes,5,opt,name=resource_group,json=resourceGroup,proto3,oneof" json:"resource_group,omitempty"`
	ResourceRequests      *ResourceRequirements `protobuf:"bytes,6,opt,name=resource_requests,json=resourceRequests,proto3,oneof" json:"resource_requests,omitempty"`
	EnvOverrides          map[string]string     `protobuf:"bytes,7,rep,name=env_overrides,json=envOverrides,proto3" json:"env_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnableProfiling       bool                  `protobuf:"varint,8,opt,name=enable_profiling,json=enableProfiling,proto3" json:"enable_profiling,omitempty"`
	MaxRetries            *int32                `protobuf:"varint,9,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"` // defaults to 0
	CompletionDeadline    *string               `protobuf:"bytes,10,opt,name=completion_deadline,json=completionDeadline,proto3,oneof" json:"completion_deadline,omitempty"`
	// Types that are assignable to KindArgs:
	//
	//	*ScriptTaskRequest_TrainingRun
	KindArgs isScriptTaskRequest_KindArgs `protobuf_oneof:"kind_args"`
}

func (x *ScriptTaskRequest) Reset() {
	*x = ScriptTaskRequest{}
	mi := &file_chalk_common_v1_script_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptTaskRequest) ProtoMessage() {}

func (x *ScriptTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_script_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptTaskRequest.ProtoReflect.Descriptor instead.
func (*ScriptTaskRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_script_task_proto_rawDescGZIP(), []int{1}
}

func (x *ScriptTaskRequest) GetFunctionReferenceType() string {
	if x != nil {
		return x.FunctionReferenceType
	}
	return ""
}

func (x *ScriptTaskRequest) GetFunctionReference() string {
	if x != nil {
		return x.FunctionReference
	}
	return ""
}

func (x *ScriptTaskRequest) GetArgumentsJson() string {
	if x != nil && x.ArgumentsJson != nil {
		return *x.ArgumentsJson
	}
	return ""
}

func (x *ScriptTaskRequest) GetKind() ScriptTaskKind {
	if x != nil {
		return x.Kind
	}
	return ScriptTaskKind_SCRIPT_TASK_KIND_UNSPECIFIED
}

func (x *ScriptTaskRequest) GetSourceKey() string {
	if x != nil && x.SourceKey != nil {
		return *x.SourceKey
	}
	return ""
}

func (x *ScriptTaskRequest) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *ScriptTaskRequest) GetResourceGroup() string {
	if x != nil && x.ResourceGroup != nil {
		return *x.ResourceGroup
	}
	return ""
}

func (x *ScriptTaskRequest) GetResourceRequests() *ResourceRequirements {
	if x != nil {
		return x.ResourceRequests
	}
	return nil
}

func (x *ScriptTaskRequest) GetEnvOverrides() map[string]string {
	if x != nil {
		return x.EnvOverrides
	}
	return nil
}

func (x *ScriptTaskRequest) GetEnableProfiling() bool {
	if x != nil {
		return x.EnableProfiling
	}
	return false
}

func (x *ScriptTaskRequest) GetMaxRetries() int32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

func (x *ScriptTaskRequest) GetCompletionDeadline() string {
	if x != nil && x.CompletionDeadline != nil {
		return *x.CompletionDeadline
	}
	return ""
}

func (m *ScriptTaskRequest) GetKindArgs() isScriptTaskRequest_KindArgs {
	if m != nil {
		return m.KindArgs
	}
	return nil
}

func (x *ScriptTaskRequest) GetTrainingRun() *TrainingRunArgs {
	if x, ok := x.GetKindArgs().(*ScriptTaskRequest_TrainingRun); ok {
		return x.TrainingRun
	}
	return nil
}

type isScriptTaskRequest_KindArgs interface {
	isScriptTaskRequest_KindArgs()
}

type ScriptTaskRequest_TrainingRun struct {
	TrainingRun *TrainingRunArgs `protobuf:"bytes,13,opt,name=training_run,json=trainingRun,proto3,oneof"`
}

func (*ScriptTaskRequest_TrainingRun) isScriptTaskRequest_KindArgs() {}

type ScriptTaskFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []ScriptTaskStatus `protobuf:"varint,1,rep,packed,name=statuses,proto3,enum=chalk.common.v1.ScriptTaskStatus" json:"statuses,omitempty"`
	Kinds    []ScriptTaskKind   `protobuf:"varint,2,rep,packed,name=kinds,proto3,enum=chalk.common.v1.ScriptTaskKind" json:"kinds,omitempty"`
}

func (x *ScriptTaskFilter) Reset() {
	*x = ScriptTaskFilter{}
	mi := &file_chalk_common_v1_script_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptTaskFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptTaskFilter) ProtoMessage() {}

func (x *ScriptTaskFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_script_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptTaskFilter.ProtoReflect.Descriptor instead.
func (*ScriptTaskFilter) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_script_task_proto_rawDescGZIP(), []int{2}
}

func (x *ScriptTaskFilter) GetStatuses() []ScriptTaskStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ScriptTaskFilter) GetKinds() []ScriptTaskKind {
	if x != nil {
		return x.Kinds
	}
	return nil
}

var File_chalk_common_v1_script_task_proto protoreflect.FileDescriptor

var file_chalk_common_v1_script_task_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x96, 0x07, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x0e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x05,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x1a, 0x3f,
	0x0a, 0x11, 0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05,
	0x6b, 0x69, 0x6e, 0x64, 0x73, 0x2a, 0xd7, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a,
	0x79, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x02, 0x42, 0xbf, 0x01, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x42, 0x0f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_common_v1_script_task_proto_rawDescOnce sync.Once
	file_chalk_common_v1_script_task_proto_rawDescData = file_chalk_common_v1_script_task_proto_rawDesc
)

func file_chalk_common_v1_script_task_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_script_task_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_script_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v1_script_task_proto_rawDescData)
	})
	return file_chalk_common_v1_script_task_proto_rawDescData
}

var file_chalk_common_v1_script_task_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_common_v1_script_task_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chalk_common_v1_script_task_proto_goTypes = []any{
	(ScriptTaskStatus)(0),        // 0: chalk.common.v1.ScriptTaskStatus
	(ScriptTaskKind)(0),          // 1: chalk.common.v1.ScriptTaskKind
	(*TrainingRunArgs)(nil),      // 2: chalk.common.v1.TrainingRunArgs
	(*ScriptTaskRequest)(nil),    // 3: chalk.common.v1.ScriptTaskRequest
	(*ScriptTaskFilter)(nil),     // 4: chalk.common.v1.ScriptTaskFilter
	nil,                          // 5: chalk.common.v1.ScriptTaskRequest.EnvOverridesEntry
	(*ResourceRequirements)(nil), // 6: chalk.common.v1.ResourceRequirements
}
var file_chalk_common_v1_script_task_proto_depIdxs = []int32{
	1, // 0: chalk.common.v1.ScriptTaskRequest.kind:type_name -> chalk.common.v1.ScriptTaskKind
	6, // 1: chalk.common.v1.ScriptTaskRequest.resource_requests:type_name -> chalk.common.v1.ResourceRequirements
	5, // 2: chalk.common.v1.ScriptTaskRequest.env_overrides:type_name -> chalk.common.v1.ScriptTaskRequest.EnvOverridesEntry
	2, // 3: chalk.common.v1.ScriptTaskRequest.training_run:type_name -> chalk.common.v1.TrainingRunArgs
	0, // 4: chalk.common.v1.ScriptTaskFilter.statuses:type_name -> chalk.common.v1.ScriptTaskStatus
	1, // 5: chalk.common.v1.ScriptTaskFilter.kinds:type_name -> chalk.common.v1.ScriptTaskKind
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_script_task_proto_init() }
func file_chalk_common_v1_script_task_proto_init() {
	if File_chalk_common_v1_script_task_proto != nil {
		return
	}
	file_chalk_common_v1_resources_proto_init()
	file_chalk_common_v1_script_task_proto_msgTypes[1].OneofWrappers = []any{
		(*ScriptTaskRequest_TrainingRun)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v1_script_task_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_script_task_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_script_task_proto_depIdxs,
		EnumInfos:         file_chalk_common_v1_script_task_proto_enumTypes,
		MessageInfos:      file_chalk_common_v1_script_task_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_script_task_proto = out.File
	file_chalk_common_v1_script_task_proto_rawDesc = nil
	file_chalk_common_v1_script_task_proto_goTypes = nil
	file_chalk_common_v1_script_task_proto_depIdxs = nil
}
