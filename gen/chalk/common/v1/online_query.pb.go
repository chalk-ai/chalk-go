// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc        (unknown)
// source: chalk/common/v1/online_query.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatherBodyType int32

const (
	FeatherBodyType_FEATHER_BODY_TYPE_UNSPECIFIED    FeatherBodyType = 0
	FeatherBodyType_FEATHER_BODY_TYPE_TABLE          FeatherBodyType = 1
	FeatherBodyType_FEATHER_BODY_TYPE_RECORD_BATCHES FeatherBodyType = 2
)

// Enum value maps for FeatherBodyType.
var (
	FeatherBodyType_name = map[int32]string{
		0: "FEATHER_BODY_TYPE_UNSPECIFIED",
		1: "FEATHER_BODY_TYPE_TABLE",
		2: "FEATHER_BODY_TYPE_RECORD_BATCHES",
	}
	FeatherBodyType_value = map[string]int32{
		"FEATHER_BODY_TYPE_UNSPECIFIED":    0,
		"FEATHER_BODY_TYPE_TABLE":          1,
		"FEATHER_BODY_TYPE_RECORD_BATCHES": 2,
	}
)

func (x FeatherBodyType) Enum() *FeatherBodyType {
	p := new(FeatherBodyType)
	*p = x
	return p
}

func (x FeatherBodyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatherBodyType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_common_v1_online_query_proto_enumTypes[0].Descriptor()
}

func (FeatherBodyType) Type() protoreflect.EnumType {
	return &file_chalk_common_v1_online_query_proto_enumTypes[0]
}

func (x FeatherBodyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatherBodyType.Descriptor instead.
func (FeatherBodyType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{0}
}

type OnlineQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs          map[string]*structpb.Value  `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outputs         []*OutputExpr               `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Now             *timestamppb.Timestamp      `protobuf:"bytes,3,opt,name=now,proto3,oneof" json:"now,omitempty"`
	Staleness       map[string]string           `protobuf:"bytes,4,rep,name=staleness,proto3" json:"staleness,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context         *OnlineQueryContext         `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	ResponseOptions *OnlineQueryResponseOptions `protobuf:"bytes,6,opt,name=response_options,json=responseOptions,proto3" json:"response_options,omitempty"`
}

func (x *OnlineQueryRequest) Reset() {
	*x = OnlineQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryRequest) ProtoMessage() {}

func (x *OnlineQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryRequest.ProtoReflect.Descriptor instead.
func (*OnlineQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{0}
}

func (x *OnlineQueryRequest) GetInputs() map[string]*structpb.Value {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *OnlineQueryRequest) GetOutputs() []*OutputExpr {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *OnlineQueryRequest) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *OnlineQueryRequest) GetStaleness() map[string]string {
	if x != nil {
		return x.Staleness
	}
	return nil
}

func (x *OnlineQueryRequest) GetContext() *OnlineQueryContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *OnlineQueryRequest) GetResponseOptions() *OnlineQueryResponseOptions {
	if x != nil {
		return x.ResponseOptions
	}
	return nil
}

type OnlineQueryFeatherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputsFeather   []byte                      `protobuf:"bytes,1,opt,name=inputs_feather,json=inputsFeather,proto3" json:"inputs_feather,omitempty"`
	Outputs         []*OutputExpr               `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Now             []*timestamppb.Timestamp    `protobuf:"bytes,3,rep,name=now,proto3" json:"now,omitempty"`
	Staleness       map[string]string           `protobuf:"bytes,4,rep,name=staleness,proto3" json:"staleness,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context         *OnlineQueryContext         `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	ResponseOptions *OnlineQueryResponseOptions `protobuf:"bytes,6,opt,name=response_options,json=responseOptions,proto3" json:"response_options,omitempty"`
	BodyType        FeatherBodyType             `protobuf:"varint,7,opt,name=body_type,json=bodyType,proto3,enum=chalk.common.v1.FeatherBodyType" json:"body_type,omitempty"`
}

func (x *OnlineQueryFeatherRequest) Reset() {
	*x = OnlineQueryFeatherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryFeatherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryFeatherRequest) ProtoMessage() {}

func (x *OnlineQueryFeatherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryFeatherRequest.ProtoReflect.Descriptor instead.
func (*OnlineQueryFeatherRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{1}
}

func (x *OnlineQueryFeatherRequest) GetInputsFeather() []byte {
	if x != nil {
		return x.InputsFeather
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetOutputs() []*OutputExpr {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetNow() []*timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetStaleness() map[string]string {
	if x != nil {
		return x.Staleness
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetContext() *OnlineQueryContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetResponseOptions() *OnlineQueryResponseOptions {
	if x != nil {
		return x.ResponseOptions
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetBodyType() FeatherBodyType {
	if x != nil {
		return x.BodyType
	}
	return FeatherBodyType_FEATHER_BODY_TYPE_UNSPECIFIED
}

// Represenst an online query output. Currently these are just single feature FQNs.
// In the future these could be expressions like `User.card.transactions[_.amount < 100]`
type OutputExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//
	//	*OutputExpr_FeatureFqn
	Expr isOutputExpr_Expr `protobuf_oneof:"expr"`
}

func (x *OutputExpr) Reset() {
	*x = OutputExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputExpr) ProtoMessage() {}

func (x *OutputExpr) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputExpr.ProtoReflect.Descriptor instead.
func (*OutputExpr) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{2}
}

func (m *OutputExpr) GetExpr() isOutputExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *OutputExpr) GetFeatureFqn() string {
	if x, ok := x.GetExpr().(*OutputExpr_FeatureFqn); ok {
		return x.FeatureFqn
	}
	return ""
}

type isOutputExpr_Expr interface {
	isOutputExpr_Expr()
}

type OutputExpr_FeatureFqn struct {
	FeatureFqn string `protobuf:"bytes,1,opt,name=feature_fqn,json=featureFqn,proto3,oneof"`
}

func (*OutputExpr_FeatureFqn) isOutputExpr_Expr() {}

// Roughly speaking data in here should affect the query hash key / the query plan
type OnlineQueryContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment          string   `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	Tags                 []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	RequiredResolverTags []string `protobuf:"bytes,3,rep,name=required_resolver_tags,json=requiredResolverTags,proto3" json:"required_resolver_tags,omitempty"`
	DeploymentId         *string  `protobuf:"bytes,4,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	BranchId             *string  `protobuf:"bytes,5,opt,name=branch_id,json=branchId,proto3,oneof" json:"branch_id,omitempty"`
	CorrelationId        *string  `protobuf:"bytes,6,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	QueryName            *string  `protobuf:"bytes,7,opt,name=query_name,json=queryName,proto3,oneof" json:"query_name,omitempty"`
	QueryNameVersion     *string  `protobuf:"bytes,8,opt,name=query_name_version,json=queryNameVersion,proto3,oneof" json:"query_name_version,omitempty"`
	// Arbitrary flags for the query such as store_plan_stages
	// If a flag because consistently used it should be moved into an actual field.
	Options map[string]*structpb.Value `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OnlineQueryContext) Reset() {
	*x = OnlineQueryContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryContext) ProtoMessage() {}

func (x *OnlineQueryContext) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryContext.ProtoReflect.Descriptor instead.
func (*OnlineQueryContext) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{3}
}

func (x *OnlineQueryContext) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *OnlineQueryContext) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OnlineQueryContext) GetRequiredResolverTags() []string {
	if x != nil {
		return x.RequiredResolverTags
	}
	return nil
}

func (x *OnlineQueryContext) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *OnlineQueryContext) GetBranchId() string {
	if x != nil && x.BranchId != nil {
		return *x.BranchId
	}
	return ""
}

func (x *OnlineQueryContext) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *OnlineQueryContext) GetQueryName() string {
	if x != nil && x.QueryName != nil {
		return *x.QueryName
	}
	return ""
}

func (x *OnlineQueryContext) GetQueryNameVersion() string {
	if x != nil && x.QueryNameVersion != nil {
		return *x.QueryNameVersion
	}
	return ""
}

func (x *OnlineQueryContext) GetOptions() map[string]*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

// Options re: how we construct the response, shouldn't affect the query hash
type OnlineQueryResponseOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeMeta     bool                    `protobuf:"varint,1,opt,name=include_meta,json=includeMeta,proto3" json:"include_meta,omitempty"`
	Explain         *ExplainOptions         `protobuf:"bytes,2,opt,name=explain,proto3" json:"explain,omitempty"`
	EncodingOptions *FeatureEncodingOptions `protobuf:"bytes,3,opt,name=encoding_options,json=encodingOptions,proto3" json:"encoding_options,omitempty"`
	// Customer-provided metadata that gets returned in the response
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OnlineQueryResponseOptions) Reset() {
	*x = OnlineQueryResponseOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryResponseOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryResponseOptions) ProtoMessage() {}

func (x *OnlineQueryResponseOptions) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryResponseOptions.ProtoReflect.Descriptor instead.
func (*OnlineQueryResponseOptions) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{4}
}

func (x *OnlineQueryResponseOptions) GetIncludeMeta() bool {
	if x != nil {
		return x.IncludeMeta
	}
	return false
}

func (x *OnlineQueryResponseOptions) GetExplain() *ExplainOptions {
	if x != nil {
		return x.Explain
	}
	return nil
}

func (x *OnlineQueryResponseOptions) GetEncodingOptions() *FeatureEncodingOptions {
	if x != nil {
		return x.EncodingOptions
	}
	return nil
}

func (x *OnlineQueryResponseOptions) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ExplainOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExplainOptions) Reset() {
	*x = ExplainOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainOptions) ProtoMessage() {}

func (x *ExplainOptions) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainOptions.ProtoReflect.Descriptor instead.
func (*ExplainOptions) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{5}
}

type FeatureEncodingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodeStructsAsObjects bool `protobuf:"varint,1,opt,name=encode_structs_as_objects,json=encodeStructsAsObjects,proto3" json:"encode_structs_as_objects,omitempty"`
}

func (x *FeatureEncodingOptions) Reset() {
	*x = FeatureEncodingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureEncodingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureEncodingOptions) ProtoMessage() {}

func (x *FeatureEncodingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureEncodingOptions.ProtoReflect.Descriptor instead.
func (*FeatureEncodingOptions) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{6}
}

func (x *FeatureEncodingOptions) GetEncodeStructsAsObjects() bool {
	if x != nil {
		return x.EncodeStructsAsObjects
	}
	return false
}

type OnlineQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         *OnlineQueryResult   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Errors       []*ChalkError        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ResponseMeta *OnlineQueryMetadata `protobuf:"bytes,3,opt,name=response_meta,json=responseMeta,proto3" json:"response_meta,omitempty"`
}

func (x *OnlineQueryResponse) Reset() {
	*x = OnlineQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryResponse) ProtoMessage() {}

func (x *OnlineQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryResponse.ProtoReflect.Descriptor instead.
func (*OnlineQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{7}
}

func (x *OnlineQueryResponse) GetData() *OnlineQueryResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *OnlineQueryResponse) GetErrors() []*ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *OnlineQueryResponse) GetResponseMeta() *OnlineQueryMetadata {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type OnlineQueryFeatherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScalarsData  []byte               `protobuf:"bytes,1,opt,name=scalars_data,json=scalarsData,proto3" json:"scalars_data,omitempty"`
	GroupsData   map[string][]byte    `protobuf:"bytes,2,rep,name=groups_data,json=groupsData,proto3" json:"groups_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Errors       []*ChalkError        `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	ResponseMeta *OnlineQueryMetadata `protobuf:"bytes,4,opt,name=response_meta,json=responseMeta,proto3" json:"response_meta,omitempty"`
}

func (x *OnlineQueryFeatherResponse) Reset() {
	*x = OnlineQueryFeatherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryFeatherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryFeatherResponse) ProtoMessage() {}

func (x *OnlineQueryFeatherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryFeatherResponse.ProtoReflect.Descriptor instead.
func (*OnlineQueryFeatherResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{8}
}

func (x *OnlineQueryFeatherResponse) GetScalarsData() []byte {
	if x != nil {
		return x.ScalarsData
	}
	return nil
}

func (x *OnlineQueryFeatherResponse) GetGroupsData() map[string][]byte {
	if x != nil {
		return x.GroupsData
	}
	return nil
}

func (x *OnlineQueryFeatherResponse) GetErrors() []*ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *OnlineQueryFeatherResponse) GetResponseMeta() *OnlineQueryMetadata {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type OnlineQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FeatureResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *OnlineQueryResult) Reset() {
	*x = OnlineQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryResult) ProtoMessage() {}

func (x *OnlineQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryResult.ProtoReflect.Descriptor instead.
func (*OnlineQueryResult) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{9}
}

func (x *OnlineQueryResult) GetResults() []*FeatureResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FeatureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Error *string                `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Ts    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3,oneof" json:"ts,omitempty"`
	Meta  *FeatureMeta           `protobuf:"bytes,5,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (x *FeatureResult) Reset() {
	*x = FeatureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureResult) ProtoMessage() {}

func (x *FeatureResult) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureResult.ProtoReflect.Descriptor instead.
func (*FeatureResult) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{10}
}

func (x *FeatureResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FeatureResult) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FeatureResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *FeatureResult) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *FeatureResult) GetMeta() *FeatureMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type FeatureMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenResolverFqn string `protobuf:"bytes,1,opt,name=chosen_resolver_fqn,json=chosenResolverFqn,proto3" json:"chosen_resolver_fqn,omitempty"`
	CacheHit          bool   `protobuf:"varint,2,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	PrimitiveType     string `protobuf:"bytes,3,opt,name=primitive_type,json=primitiveType,proto3" json:"primitive_type,omitempty"`
	Version           int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FeatureMeta) Reset() {
	*x = FeatureMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureMeta) ProtoMessage() {}

func (x *FeatureMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureMeta.ProtoReflect.Descriptor instead.
func (*FeatureMeta) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{11}
}

func (x *FeatureMeta) GetChosenResolverFqn() string {
	if x != nil {
		return x.ChosenResolverFqn
	}
	return ""
}

func (x *FeatureMeta) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

func (x *FeatureMeta) GetPrimitiveType() string {
	if x != nil {
		return x.PrimitiveType
	}
	return ""
}

func (x *FeatureMeta) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type OnlineQueryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionDuration *durationpb.Duration   `protobuf:"bytes,1,opt,name=execution_duration,json=executionDuration,proto3" json:"execution_duration,omitempty"`
	DeploymentId      string                 `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	EnvironmentId     string                 `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	EnvironmentName   string                 `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	QueryId           string                 `protobuf:"bytes,5,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryTimestamp    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=query_timestamp,json=queryTimestamp,proto3" json:"query_timestamp,omitempty"`
	QueryHash         string                 `protobuf:"bytes,7,opt,name=query_hash,json=queryHash,proto3" json:"query_hash,omitempty"`
	ExplainOutput     *QueryExplainInfo      `protobuf:"bytes,8,opt,name=explain_output,json=explainOutput,proto3" json:"explain_output,omitempty"`
	// Same customer-provided metadata that was provided in the request.
	Metadata map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OnlineQueryMetadata) Reset() {
	*x = OnlineQueryMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryMetadata) ProtoMessage() {}

func (x *OnlineQueryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryMetadata.ProtoReflect.Descriptor instead.
func (*OnlineQueryMetadata) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{12}
}

func (x *OnlineQueryMetadata) GetExecutionDuration() *durationpb.Duration {
	if x != nil {
		return x.ExecutionDuration
	}
	return nil
}

func (x *OnlineQueryMetadata) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *OnlineQueryMetadata) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *OnlineQueryMetadata) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *OnlineQueryMetadata) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *OnlineQueryMetadata) GetQueryTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestamp
	}
	return nil
}

func (x *OnlineQueryMetadata) GetQueryHash() string {
	if x != nil {
		return x.QueryHash
	}
	return ""
}

func (x *OnlineQueryMetadata) GetExplainOutput() *QueryExplainInfo {
	if x != nil {
		return x.ExplainOutput
	}
	return nil
}

func (x *OnlineQueryMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type QueryExplainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unstructured string representation of the plan
	PlanString string `protobuf:"bytes,1,opt,name=plan_string,json=planString,proto3" json:"plan_string,omitempty"`
}

func (x *QueryExplainInfo) Reset() {
	*x = QueryExplainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExplainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExplainInfo) ProtoMessage() {}

func (x *QueryExplainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExplainInfo.ProtoReflect.Descriptor instead.
func (*QueryExplainInfo) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{13}
}

func (x *QueryExplainInfo) GetPlanString() string {
	if x != nil {
		return x.PlanString
	}
	return ""
}

var File_chalk_common_v1_online_query_proto protoreflect.FileDescriptor

var file_chalk_common_v1_online_query_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x04, 0x0a, 0x12, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6e, 0x6f, 0x77, 0x22, 0x94, 0x04, 0x0a, 0x19, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x57, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a,
	0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3c, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x0a, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x71, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x22, 0xc8, 0x04, 0x0a, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe2,
	0x02, 0x0a, 0x1a, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x55, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x16, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x41, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x49, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xdc, 0x02, 0x0a, 0x1a, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x49, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x11, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x02, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x0b,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x66,
	0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x46, 0x71, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x04, 0x0a, 0x13, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0x77, 0x0a,
	0x0f, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x44, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x42,
	0x4f, 0x44, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x44, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x53, 0x10, 0x02, 0x42, 0xc0, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x10,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chalk_common_v1_online_query_proto_rawDescOnce sync.Once
	file_chalk_common_v1_online_query_proto_rawDescData = file_chalk_common_v1_online_query_proto_rawDesc
)

func file_chalk_common_v1_online_query_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_online_query_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_online_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v1_online_query_proto_rawDescData)
	})
	return file_chalk_common_v1_online_query_proto_rawDescData
}

var file_chalk_common_v1_online_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_common_v1_online_query_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_chalk_common_v1_online_query_proto_goTypes = []interface{}{
	(FeatherBodyType)(0),               // 0: chalk.common.v1.FeatherBodyType
	(*OnlineQueryRequest)(nil),         // 1: chalk.common.v1.OnlineQueryRequest
	(*OnlineQueryFeatherRequest)(nil),  // 2: chalk.common.v1.OnlineQueryFeatherRequest
	(*OutputExpr)(nil),                 // 3: chalk.common.v1.OutputExpr
	(*OnlineQueryContext)(nil),         // 4: chalk.common.v1.OnlineQueryContext
	(*OnlineQueryResponseOptions)(nil), // 5: chalk.common.v1.OnlineQueryResponseOptions
	(*ExplainOptions)(nil),             // 6: chalk.common.v1.ExplainOptions
	(*FeatureEncodingOptions)(nil),     // 7: chalk.common.v1.FeatureEncodingOptions
	(*OnlineQueryResponse)(nil),        // 8: chalk.common.v1.OnlineQueryResponse
	(*OnlineQueryFeatherResponse)(nil), // 9: chalk.common.v1.OnlineQueryFeatherResponse
	(*OnlineQueryResult)(nil),          // 10: chalk.common.v1.OnlineQueryResult
	(*FeatureResult)(nil),              // 11: chalk.common.v1.FeatureResult
	(*FeatureMeta)(nil),                // 12: chalk.common.v1.FeatureMeta
	(*OnlineQueryMetadata)(nil),        // 13: chalk.common.v1.OnlineQueryMetadata
	(*QueryExplainInfo)(nil),           // 14: chalk.common.v1.QueryExplainInfo
	nil,                                // 15: chalk.common.v1.OnlineQueryRequest.InputsEntry
	nil,                                // 16: chalk.common.v1.OnlineQueryRequest.StalenessEntry
	nil,                                // 17: chalk.common.v1.OnlineQueryFeatherRequest.StalenessEntry
	nil,                                // 18: chalk.common.v1.OnlineQueryContext.OptionsEntry
	nil,                                // 19: chalk.common.v1.OnlineQueryResponseOptions.MetadataEntry
	nil,                                // 20: chalk.common.v1.OnlineQueryFeatherResponse.GroupsDataEntry
	nil,                                // 21: chalk.common.v1.OnlineQueryMetadata.MetadataEntry
	(*timestamppb.Timestamp)(nil),      // 22: google.protobuf.Timestamp
	(*ChalkError)(nil),                 // 23: chalk.common.v1.ChalkError
	(*structpb.Value)(nil),             // 24: google.protobuf.Value
	(*durationpb.Duration)(nil),        // 25: google.protobuf.Duration
}
var file_chalk_common_v1_online_query_proto_depIdxs = []int32{
	15, // 0: chalk.common.v1.OnlineQueryRequest.inputs:type_name -> chalk.common.v1.OnlineQueryRequest.InputsEntry
	3,  // 1: chalk.common.v1.OnlineQueryRequest.outputs:type_name -> chalk.common.v1.OutputExpr
	22, // 2: chalk.common.v1.OnlineQueryRequest.now:type_name -> google.protobuf.Timestamp
	16, // 3: chalk.common.v1.OnlineQueryRequest.staleness:type_name -> chalk.common.v1.OnlineQueryRequest.StalenessEntry
	4,  // 4: chalk.common.v1.OnlineQueryRequest.context:type_name -> chalk.common.v1.OnlineQueryContext
	5,  // 5: chalk.common.v1.OnlineQueryRequest.response_options:type_name -> chalk.common.v1.OnlineQueryResponseOptions
	3,  // 6: chalk.common.v1.OnlineQueryFeatherRequest.outputs:type_name -> chalk.common.v1.OutputExpr
	22, // 7: chalk.common.v1.OnlineQueryFeatherRequest.now:type_name -> google.protobuf.Timestamp
	17, // 8: chalk.common.v1.OnlineQueryFeatherRequest.staleness:type_name -> chalk.common.v1.OnlineQueryFeatherRequest.StalenessEntry
	4,  // 9: chalk.common.v1.OnlineQueryFeatherRequest.context:type_name -> chalk.common.v1.OnlineQueryContext
	5,  // 10: chalk.common.v1.OnlineQueryFeatherRequest.response_options:type_name -> chalk.common.v1.OnlineQueryResponseOptions
	0,  // 11: chalk.common.v1.OnlineQueryFeatherRequest.body_type:type_name -> chalk.common.v1.FeatherBodyType
	18, // 12: chalk.common.v1.OnlineQueryContext.options:type_name -> chalk.common.v1.OnlineQueryContext.OptionsEntry
	6,  // 13: chalk.common.v1.OnlineQueryResponseOptions.explain:type_name -> chalk.common.v1.ExplainOptions
	7,  // 14: chalk.common.v1.OnlineQueryResponseOptions.encoding_options:type_name -> chalk.common.v1.FeatureEncodingOptions
	19, // 15: chalk.common.v1.OnlineQueryResponseOptions.metadata:type_name -> chalk.common.v1.OnlineQueryResponseOptions.MetadataEntry
	10, // 16: chalk.common.v1.OnlineQueryResponse.data:type_name -> chalk.common.v1.OnlineQueryResult
	23, // 17: chalk.common.v1.OnlineQueryResponse.errors:type_name -> chalk.common.v1.ChalkError
	13, // 18: chalk.common.v1.OnlineQueryResponse.response_meta:type_name -> chalk.common.v1.OnlineQueryMetadata
	20, // 19: chalk.common.v1.OnlineQueryFeatherResponse.groups_data:type_name -> chalk.common.v1.OnlineQueryFeatherResponse.GroupsDataEntry
	23, // 20: chalk.common.v1.OnlineQueryFeatherResponse.errors:type_name -> chalk.common.v1.ChalkError
	13, // 21: chalk.common.v1.OnlineQueryFeatherResponse.response_meta:type_name -> chalk.common.v1.OnlineQueryMetadata
	11, // 22: chalk.common.v1.OnlineQueryResult.results:type_name -> chalk.common.v1.FeatureResult
	24, // 23: chalk.common.v1.FeatureResult.value:type_name -> google.protobuf.Value
	22, // 24: chalk.common.v1.FeatureResult.ts:type_name -> google.protobuf.Timestamp
	12, // 25: chalk.common.v1.FeatureResult.meta:type_name -> chalk.common.v1.FeatureMeta
	25, // 26: chalk.common.v1.OnlineQueryMetadata.execution_duration:type_name -> google.protobuf.Duration
	22, // 27: chalk.common.v1.OnlineQueryMetadata.query_timestamp:type_name -> google.protobuf.Timestamp
	14, // 28: chalk.common.v1.OnlineQueryMetadata.explain_output:type_name -> chalk.common.v1.QueryExplainInfo
	21, // 29: chalk.common.v1.OnlineQueryMetadata.metadata:type_name -> chalk.common.v1.OnlineQueryMetadata.MetadataEntry
	24, // 30: chalk.common.v1.OnlineQueryRequest.InputsEntry.value:type_name -> google.protobuf.Value
	24, // 31: chalk.common.v1.OnlineQueryContext.OptionsEntry.value:type_name -> google.protobuf.Value
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_online_query_proto_init() }
func file_chalk_common_v1_online_query_proto_init() {
	if File_chalk_common_v1_online_query_proto != nil {
		return
	}
	file_chalk_common_v1_chalk_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_common_v1_online_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryFeatherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryResponseOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureEncodingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryFeatherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExplainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_common_v1_online_query_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_chalk_common_v1_online_query_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OutputExpr_FeatureFqn)(nil),
	}
	file_chalk_common_v1_online_query_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_chalk_common_v1_online_query_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v1_online_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_online_query_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_online_query_proto_depIdxs,
		EnumInfos:         file_chalk_common_v1_online_query_proto_enumTypes,
		MessageInfos:      file_chalk_common_v1_online_query_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_online_query_proto = out.File
	file_chalk_common_v1_online_query_proto_rawDesc = nil
	file_chalk_common_v1_online_query_proto_goTypes = nil
	file_chalk_common_v1_online_query_proto_depIdxs = nil
}
