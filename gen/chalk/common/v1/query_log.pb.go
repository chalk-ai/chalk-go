// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/common/v1/query_log.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VersionedQueryName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryName        string  `protobuf:"bytes,1,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	QueryNameVersion *string `protobuf:"bytes,2,opt,name=query_name_version,json=queryNameVersion,proto3,oneof" json:"query_name_version,omitempty"`
}

func (x *VersionedQueryName) Reset() {
	*x = VersionedQueryName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_query_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedQueryName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedQueryName) ProtoMessage() {}

func (x *VersionedQueryName) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedQueryName.ProtoReflect.Descriptor instead.
func (*VersionedQueryName) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_log_proto_rawDescGZIP(), []int{0}
}

func (x *VersionedQueryName) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (x *VersionedQueryName) GetQueryNameVersion() string {
	if x != nil && x.QueryNameVersion != nil {
		return *x.QueryNameVersion
	}
	return ""
}

type QueryLogFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All of these fields are optional. If any are specified, they will be AND'd together in a where clause
	// Any len-zero options will be ignored. If multiple options are specified for a given key, they will be OR'd together
	// i.e. works similarly to how you filter products on Amazon -- (size 8 or size 9) AND (color == blue OR color == "red")
	OperationId   []string              `protobuf:"bytes,1,rep,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	OperationKind []OperationKind       `protobuf:"varint,2,rep,packed,name=operation_kind,json=operationKind,proto3,enum=chalk.common.v1.OperationKind" json:"operation_kind,omitempty"`
	QueryName     []*VersionedQueryName `protobuf:"bytes,3,rep,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	AgentId       []string              `protobuf:"bytes,5,rep,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	BranchName    []string              `protobuf:"bytes,6,rep,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CorrelationId []string              `protobuf:"bytes,7,rep,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	TraceId       []string              `protobuf:"bytes,8,rep,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	QueryPlanId   []string              `protobuf:"bytes,9,rep,name=query_plan_id,json=queryPlanId,proto3" json:"query_plan_id,omitempty"`
	DeploymentId  []string              `protobuf:"bytes,10,rep,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	QueryStatus   []QueryStatus         `protobuf:"varint,11,rep,packed,name=query_status,json=queryStatus,proto3,enum=chalk.common.v1.QueryStatus" json:"query_status,omitempty"`
	MetaQueryHash []string              `protobuf:"bytes,12,rep,name=meta_query_hash,json=metaQueryHash,proto3" json:"meta_query_hash,omitempty"`
}

func (x *QueryLogFilters) Reset() {
	*x = QueryLogFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_query_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLogFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLogFilters) ProtoMessage() {}

func (x *QueryLogFilters) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLogFilters.ProtoReflect.Descriptor instead.
func (*QueryLogFilters) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_log_proto_rawDescGZIP(), []int{1}
}

func (x *QueryLogFilters) GetOperationId() []string {
	if x != nil {
		return x.OperationId
	}
	return nil
}

func (x *QueryLogFilters) GetOperationKind() []OperationKind {
	if x != nil {
		return x.OperationKind
	}
	return nil
}

func (x *QueryLogFilters) GetQueryName() []*VersionedQueryName {
	if x != nil {
		return x.QueryName
	}
	return nil
}

func (x *QueryLogFilters) GetAgentId() []string {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *QueryLogFilters) GetBranchName() []string {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *QueryLogFilters) GetCorrelationId() []string {
	if x != nil {
		return x.CorrelationId
	}
	return nil
}

func (x *QueryLogFilters) GetTraceId() []string {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *QueryLogFilters) GetQueryPlanId() []string {
	if x != nil {
		return x.QueryPlanId
	}
	return nil
}

func (x *QueryLogFilters) GetDeploymentId() []string {
	if x != nil {
		return x.DeploymentId
	}
	return nil
}

func (x *QueryLogFilters) GetQueryStatus() []QueryStatus {
	if x != nil {
		return x.QueryStatus
	}
	return nil
}

func (x *QueryLogFilters) GetMetaQueryHash() []string {
	if x != nil {
		return x.MetaQueryHash
	}
	return nil
}

// Internal protobuf representing a next page token. Contains the operation id and the query timestamp for the last row
// in the previous batch. Results are sorted query timestamp then by operation id lexicographically, so this is all we
// need to know where the next page begins
type GetQueryLogEntriesPageToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationIdHwm    string                 `protobuf:"bytes,1,opt,name=operation_id_hwm,json=operationIdHwm,proto3" json:"operation_id_hwm,omitempty"`
	QueryTimestampHwm *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=query_timestamp_hwm,json=queryTimestampHwm,proto3" json:"query_timestamp_hwm,omitempty"`
}

func (x *GetQueryLogEntriesPageToken) Reset() {
	*x = GetQueryLogEntriesPageToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_query_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryLogEntriesPageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryLogEntriesPageToken) ProtoMessage() {}

func (x *GetQueryLogEntriesPageToken) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryLogEntriesPageToken.ProtoReflect.Descriptor instead.
func (*GetQueryLogEntriesPageToken) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_log_proto_rawDescGZIP(), []int{2}
}

func (x *GetQueryLogEntriesPageToken) GetOperationIdHwm() string {
	if x != nil {
		return x.OperationIdHwm
	}
	return ""
}

func (x *GetQueryLogEntriesPageToken) GetQueryTimestampHwm() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestampHwm
	}
	return nil
}

type GetQueryLogEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query log table is partitioned / sorted by timestamp, so we must provide these
	// for the queries to be efficient, even if we are querying for a single operation id
	QueryTimestampLowerBoundInclusive *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=query_timestamp_lower_bound_inclusive,json=queryTimestampLowerBoundInclusive,proto3" json:"query_timestamp_lower_bound_inclusive,omitempty"`
	// If the upper bound is omitted, then the lower bound will be used as an "equality" filter
	QueryTimestampUpperBoundExclusive *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=query_timestamp_upper_bound_exclusive,json=queryTimestampUpperBoundExclusive,proto3,oneof" json:"query_timestamp_upper_bound_exclusive,omitempty"`
	// Any filters for searching the query log. See the QueryLogFilters message above
	Filters *QueryLogFilters `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	// The (maximum) page size. If zero, the server gets to choose.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// When dealing with paginated responses, the next token can be provided to get the next page of responses
	// The query parameters above must be exactly the same when using a next token
	// This is opaque to the clients, but in practice, it is an encoding of the GetQueryLogEntriesPageToken
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *GetQueryLogEntriesRequest) Reset() {
	*x = GetQueryLogEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_query_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryLogEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryLogEntriesRequest) ProtoMessage() {}

func (x *GetQueryLogEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryLogEntriesRequest.ProtoReflect.Descriptor instead.
func (*GetQueryLogEntriesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_log_proto_rawDescGZIP(), []int{3}
}

func (x *GetQueryLogEntriesRequest) GetQueryTimestampLowerBoundInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestampLowerBoundInclusive
	}
	return nil
}

func (x *GetQueryLogEntriesRequest) GetQueryTimestampUpperBoundExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestampUpperBoundExclusive
	}
	return nil
}

func (x *GetQueryLogEntriesRequest) GetFilters() *QueryLogFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetQueryLogEntriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetQueryLogEntriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// This is a proto representation of the SQL QueryLogModel.
type QueryLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId         string                 `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	EnvironmentId       string                 `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId        string                 `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	OperationKind       OperationKind          `protobuf:"varint,4,opt,name=operation_kind,json=operationKind,proto3,enum=chalk.common.v1.OperationKind" json:"operation_kind,omitempty"`
	QueryTimestamp      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=query_timestamp,json=queryTimestamp,proto3" json:"query_timestamp,omitempty"`
	ExecutionStartedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=execution_started_at,json=executionStartedAt,proto3" json:"execution_started_at,omitempty"`
	ExecutionFinishedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=execution_finished_at,json=executionFinishedAt,proto3" json:"execution_finished_at,omitempty"`
	QueryStatus         QueryStatus            `protobuf:"varint,8,opt,name=query_status,json=queryStatus,proto3,enum=chalk.common.v1.QueryStatus" json:"query_status,omitempty"`
	QueryName           string                 `protobuf:"bytes,9,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	QueryNameVersion    string                 `protobuf:"bytes,10,opt,name=query_name_version,json=queryNameVersion,proto3" json:"query_name_version,omitempty"`
	AgentId             string                 `protobuf:"bytes,11,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	BranchName          string                 `protobuf:"bytes,12,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CorrelationId       string                 `protobuf:"bytes,13,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	TraceId             string                 `protobuf:"bytes,14,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	QueryPlanId         string                 `protobuf:"bytes,15,opt,name=query_plan_id,json=queryPlanId,proto3" json:"query_plan_id,omitempty"`
	ValueTables         []string               `protobuf:"bytes,16,rep,name=value_tables,json=valueTables,proto3" json:"value_tables,omitempty"`
	MetaQueryHash       string                 `protobuf:"bytes,17,opt,name=meta_query_hash,json=metaQueryHash,proto3" json:"meta_query_hash,omitempty"`
}

func (x *QueryLogEntry) Reset() {
	*x = QueryLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_query_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLogEntry) ProtoMessage() {}

func (x *QueryLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLogEntry.ProtoReflect.Descriptor instead.
func (*QueryLogEntry) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_log_proto_rawDescGZIP(), []int{4}
}

func (x *QueryLogEntry) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *QueryLogEntry) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *QueryLogEntry) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *QueryLogEntry) GetOperationKind() OperationKind {
	if x != nil {
		return x.OperationKind
	}
	return OperationKind_OPERATION_KIND_UNSPECIFIED
}

func (x *QueryLogEntry) GetQueryTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestamp
	}
	return nil
}

func (x *QueryLogEntry) GetExecutionStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionStartedAt
	}
	return nil
}

func (x *QueryLogEntry) GetExecutionFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionFinishedAt
	}
	return nil
}

func (x *QueryLogEntry) GetQueryStatus() QueryStatus {
	if x != nil {
		return x.QueryStatus
	}
	return QueryStatus_QUERY_STATUS_UNSPECIFIED
}

func (x *QueryLogEntry) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (x *QueryLogEntry) GetQueryNameVersion() string {
	if x != nil {
		return x.QueryNameVersion
	}
	return ""
}

func (x *QueryLogEntry) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *QueryLogEntry) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *QueryLogEntry) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *QueryLogEntry) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *QueryLogEntry) GetQueryPlanId() string {
	if x != nil {
		return x.QueryPlanId
	}
	return ""
}

func (x *QueryLogEntry) GetValueTables() []string {
	if x != nil {
		return x.ValueTables
	}
	return nil
}

func (x *QueryLogEntry) GetMetaQueryHash() string {
	if x != nil {
		return x.MetaQueryHash
	}
	return ""
}

type GetQueryLogEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*QueryLogEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// If the next_page_token is non-empty, then there may be more rows, even if the entires is empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetQueryLogEntriesResponse) Reset() {
	*x = GetQueryLogEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_query_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryLogEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryLogEntriesResponse) ProtoMessage() {}

func (x *GetQueryLogEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryLogEntriesResponse.ProtoReflect.Descriptor instead.
func (*GetQueryLogEntriesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_log_proto_rawDescGZIP(), []int{5}
}

func (x *GetQueryLogEntriesResponse) GetEntries() []*QueryLogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *GetQueryLogEntriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_chalk_common_v1_query_log_proto protoreflect.FileDescriptor

var file_chalk_common_v1_query_log_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x1a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a,
	0x12, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x03, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68, 0x22, 0x93,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x68,
	0x77, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x77, 0x6d, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x68, 0x77, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x77, 0x6d, 0x22, 0x9e, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6c, 0x0a, 0x25, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x21, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x71, 0x0a, 0x25, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x21, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x28, 0x0a, 0x26, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0xa3, 0x06, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x43, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x4e, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68, 0x22, 0x7e, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0xbd, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x42, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a,
	0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chalk_common_v1_query_log_proto_rawDescOnce sync.Once
	file_chalk_common_v1_query_log_proto_rawDescData = file_chalk_common_v1_query_log_proto_rawDesc
)

func file_chalk_common_v1_query_log_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_query_log_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_query_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v1_query_log_proto_rawDescData)
	})
	return file_chalk_common_v1_query_log_proto_rawDescData
}

var file_chalk_common_v1_query_log_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chalk_common_v1_query_log_proto_goTypes = []any{
	(*VersionedQueryName)(nil),          // 0: chalk.common.v1.VersionedQueryName
	(*QueryLogFilters)(nil),             // 1: chalk.common.v1.QueryLogFilters
	(*GetQueryLogEntriesPageToken)(nil), // 2: chalk.common.v1.GetQueryLogEntriesPageToken
	(*GetQueryLogEntriesRequest)(nil),   // 3: chalk.common.v1.GetQueryLogEntriesRequest
	(*QueryLogEntry)(nil),               // 4: chalk.common.v1.QueryLogEntry
	(*GetQueryLogEntriesResponse)(nil),  // 5: chalk.common.v1.GetQueryLogEntriesResponse
	(OperationKind)(0),                  // 6: chalk.common.v1.OperationKind
	(QueryStatus)(0),                    // 7: chalk.common.v1.QueryStatus
	(*timestamppb.Timestamp)(nil),       // 8: google.protobuf.Timestamp
}
var file_chalk_common_v1_query_log_proto_depIdxs = []int32{
	6,  // 0: chalk.common.v1.QueryLogFilters.operation_kind:type_name -> chalk.common.v1.OperationKind
	0,  // 1: chalk.common.v1.QueryLogFilters.query_name:type_name -> chalk.common.v1.VersionedQueryName
	7,  // 2: chalk.common.v1.QueryLogFilters.query_status:type_name -> chalk.common.v1.QueryStatus
	8,  // 3: chalk.common.v1.GetQueryLogEntriesPageToken.query_timestamp_hwm:type_name -> google.protobuf.Timestamp
	8,  // 4: chalk.common.v1.GetQueryLogEntriesRequest.query_timestamp_lower_bound_inclusive:type_name -> google.protobuf.Timestamp
	8,  // 5: chalk.common.v1.GetQueryLogEntriesRequest.query_timestamp_upper_bound_exclusive:type_name -> google.protobuf.Timestamp
	1,  // 6: chalk.common.v1.GetQueryLogEntriesRequest.filters:type_name -> chalk.common.v1.QueryLogFilters
	6,  // 7: chalk.common.v1.QueryLogEntry.operation_kind:type_name -> chalk.common.v1.OperationKind
	8,  // 8: chalk.common.v1.QueryLogEntry.query_timestamp:type_name -> google.protobuf.Timestamp
	8,  // 9: chalk.common.v1.QueryLogEntry.execution_started_at:type_name -> google.protobuf.Timestamp
	8,  // 10: chalk.common.v1.QueryLogEntry.execution_finished_at:type_name -> google.protobuf.Timestamp
	7,  // 11: chalk.common.v1.QueryLogEntry.query_status:type_name -> chalk.common.v1.QueryStatus
	4,  // 12: chalk.common.v1.GetQueryLogEntriesResponse.entries:type_name -> chalk.common.v1.QueryLogEntry
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_query_log_proto_init() }
func file_chalk_common_v1_query_log_proto_init() {
	if File_chalk_common_v1_query_log_proto != nil {
		return
	}
	file_chalk_common_v1_operation_kind_proto_init()
	file_chalk_common_v1_query_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_common_v1_query_log_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*VersionedQueryName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_query_log_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*QueryLogFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_query_log_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetQueryLogEntriesPageToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_query_log_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetQueryLogEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_query_log_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*QueryLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_query_log_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetQueryLogEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_common_v1_query_log_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_common_v1_query_log_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v1_query_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_query_log_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_query_log_proto_depIdxs,
		MessageInfos:      file_chalk_common_v1_query_log_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_query_log_proto = out.File
	file_chalk_common_v1_query_log_proto_rawDesc = nil
	file_chalk_common_v1_query_log_proto_goTypes = nil
	file_chalk_common_v1_query_log_proto_depIdxs = nil
}
