// Needed by ChalkSQL, very likely to change in near future

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/common/v1/offline_query.proto

package commonv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/expression/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OfflineQueryRecomputeFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*OfflineQueryRecomputeFeatures_AllOrNone
	//	*OfflineQueryRecomputeFeatures_FeatureList_
	Impl isOfflineQueryRecomputeFeatures_Impl `protobuf_oneof:"impl"`
}

func (x *OfflineQueryRecomputeFeatures) Reset() {
	*x = OfflineQueryRecomputeFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineQueryRecomputeFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryRecomputeFeatures) ProtoMessage() {}

func (x *OfflineQueryRecomputeFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryRecomputeFeatures.ProtoReflect.Descriptor instead.
func (*OfflineQueryRecomputeFeatures) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{0}
}

func (m *OfflineQueryRecomputeFeatures) GetImpl() isOfflineQueryRecomputeFeatures_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *OfflineQueryRecomputeFeatures) GetAllOrNone() bool {
	if x, ok := x.GetImpl().(*OfflineQueryRecomputeFeatures_AllOrNone); ok {
		return x.AllOrNone
	}
	return false
}

func (x *OfflineQueryRecomputeFeatures) GetFeatureList() *OfflineQueryRecomputeFeatures_FeatureList {
	if x, ok := x.GetImpl().(*OfflineQueryRecomputeFeatures_FeatureList_); ok {
		return x.FeatureList
	}
	return nil
}

type isOfflineQueryRecomputeFeatures_Impl interface {
	isOfflineQueryRecomputeFeatures_Impl()
}

type OfflineQueryRecomputeFeatures_AllOrNone struct {
	AllOrNone bool `protobuf:"varint,1,opt,name=all_or_none,json=allOrNone,proto3,oneof"`
}

type OfflineQueryRecomputeFeatures_FeatureList_ struct {
	FeatureList *OfflineQueryRecomputeFeatures_FeatureList `protobuf:"bytes,2,opt,name=feature_list,json=featureList,proto3,oneof"`
}

func (*OfflineQueryRecomputeFeatures_AllOrNone) isOfflineQueryRecomputeFeatures_Impl() {}

func (*OfflineQueryRecomputeFeatures_FeatureList_) isOfflineQueryRecomputeFeatures_Impl() {}

type OfflineQueryExplain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*OfflineQueryExplain_Truthy
	//	*OfflineQueryExplain_Only_
	Impl isOfflineQueryExplain_Impl `protobuf_oneof:"impl"`
}

func (x *OfflineQueryExplain) Reset() {
	*x = OfflineQueryExplain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineQueryExplain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryExplain) ProtoMessage() {}

func (x *OfflineQueryExplain) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryExplain.ProtoReflect.Descriptor instead.
func (*OfflineQueryExplain) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{1}
}

func (m *OfflineQueryExplain) GetImpl() isOfflineQueryExplain_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *OfflineQueryExplain) GetTruthy() bool {
	if x, ok := x.GetImpl().(*OfflineQueryExplain_Truthy); ok {
		return x.Truthy
	}
	return false
}

func (x *OfflineQueryExplain) GetOnly() *OfflineQueryExplain_Only {
	if x, ok := x.GetImpl().(*OfflineQueryExplain_Only_); ok {
		return x.Only
	}
	return nil
}

type isOfflineQueryExplain_Impl interface {
	isOfflineQueryExplain_Impl()
}

type OfflineQueryExplain_Truthy struct {
	Truthy bool `protobuf:"varint,1,opt,name=truthy,proto3,oneof"`
}

type OfflineQueryExplain_Only_ struct {
	Only *OfflineQueryExplain_Only `protobuf:"bytes,2,opt,name=only,proto3,oneof"`
}

func (*OfflineQueryExplain_Truthy) isOfflineQueryExplain_Impl() {}

func (*OfflineQueryExplain_Only_) isOfflineQueryExplain_Impl() {}

type OfflineQueryInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*OfflineQueryInputs_FeatherInputs
	//	*OfflineQueryInputs_NoInputs_
	Impl isOfflineQueryInputs_Impl `protobuf_oneof:"impl"`
}

func (x *OfflineQueryInputs) Reset() {
	*x = OfflineQueryInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineQueryInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryInputs) ProtoMessage() {}

func (x *OfflineQueryInputs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryInputs.ProtoReflect.Descriptor instead.
func (*OfflineQueryInputs) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{2}
}

func (m *OfflineQueryInputs) GetImpl() isOfflineQueryInputs_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *OfflineQueryInputs) GetFeatherInputs() []byte {
	if x, ok := x.GetImpl().(*OfflineQueryInputs_FeatherInputs); ok {
		return x.FeatherInputs
	}
	return nil
}

func (x *OfflineQueryInputs) GetNoInputs() *OfflineQueryInputs_NoInputs {
	if x, ok := x.GetImpl().(*OfflineQueryInputs_NoInputs_); ok {
		return x.NoInputs
	}
	return nil
}

type isOfflineQueryInputs_Impl interface {
	isOfflineQueryInputs_Impl()
}

type OfflineQueryInputs_FeatherInputs struct {
	// *
	// Should be a feather-compressed table, complete with schema
	FeatherInputs []byte `protobuf:"bytes,1,opt,name=feather_inputs,json=featherInputs,proto3,oneof"`
}

type OfflineQueryInputs_NoInputs_ struct {
	NoInputs *OfflineQueryInputs_NoInputs `protobuf:"bytes,2,opt,name=no_inputs,json=noInputs,proto3,oneof"`
}

func (*OfflineQueryInputs_FeatherInputs) isOfflineQueryInputs_Impl() {}

func (*OfflineQueryInputs_NoInputs_) isOfflineQueryInputs_Impl() {}

type OfflineQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs *OfflineQueryInputs `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// A list of output feature root fqns to query
	Outputs []string `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// A list of required output feature root fqns
	RequiredOutputs []string `protobuf:"bytes,3,rep,name=required_outputs,json=requiredOutputs,proto3" json:"required_outputs,omitempty"`
	// The desired output format. Should be 'CSV' or 'PARQUET
	DestinationFormat string                         `protobuf:"bytes,4,opt,name=destination_format,json=destinationFormat,proto3" json:"destination_format,omitempty"`
	Branch            *string                        `protobuf:"bytes,5,opt,name=branch,proto3,oneof" json:"branch,omitempty"`
	DatasetName       *string                        `protobuf:"bytes,6,opt,name=dataset_name,json=datasetName,proto3,oneof" json:"dataset_name,omitempty"`
	RecomputeFeatures *OfflineQueryRecomputeFeatures `protobuf:"bytes,7,opt,name=recompute_features,json=recomputeFeatures,proto3" json:"recompute_features,omitempty"`
	StorePlanStages   bool                           `protobuf:"varint,8,opt,name=store_plan_stages,json=storePlanStages,proto3" json:"store_plan_stages,omitempty"`
	// "Where" clause
	Filters []*v1.LogicalExprNode `protobuf:"bytes,11,rep,name=filters,proto3" json:"filters,omitempty"`
	// The maximum number of samples. If None, no limit
	MaxSamples *int32 `protobuf:"varint,101,opt,name=max_samples,json=maxSamples,proto3,oneof" json:"max_samples,omitempty"`
	// The maximum staleness, in seconds, for how old the view on the offline store can be. That is,
	// data ingested within this interval will not be reflected in this offline query.
	// Set to “0“ to ignore the cache. If not specified, it defaults to OFFLINE_QUERY_MAX_CACHE_AGE_SECS
	// in chalk engine config.
	MaxCacheAgeSecs *int32               `protobuf:"varint,102,opt,name=max_cache_age_secs,json=maxCacheAgeSecs,proto3,oneof" json:"max_cache_age_secs,omitempty"`
	Explain         *OfflineQueryExplain `protobuf:"bytes,103,opt,name=explain,proto3" json:"explain,omitempty"`
	Tags            []string             `protobuf:"bytes,104,rep,name=tags,proto3" json:"tags,omitempty"`
	CorrelationId   *string              `protobuf:"bytes,105,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	// The lower bound for the observed at timestamp (inclusive). If not specified, defaults to the beginning of time
	ObservedAtLowerBound *string `protobuf:"bytes,201,opt,name=observed_at_lower_bound,json=observedAtLowerBound,proto3,oneof" json:"observed_at_lower_bound,omitempty"`
	// The upper bound for the observed at timestamp (inclusive). If not specified, defaults to the end of time
	ObservedAtUpperBound *string `protobuf:"bytes,202,opt,name=observed_at_upper_bound,json=observedAtUpperBound,proto3,oneof" json:"observed_at_upper_bound,omitempty"`
}

func (x *OfflineQueryRequest) Reset() {
	*x = OfflineQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryRequest) ProtoMessage() {}

func (x *OfflineQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryRequest.ProtoReflect.Descriptor instead.
func (*OfflineQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{3}
}

func (x *OfflineQueryRequest) GetInputs() *OfflineQueryInputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *OfflineQueryRequest) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *OfflineQueryRequest) GetRequiredOutputs() []string {
	if x != nil {
		return x.RequiredOutputs
	}
	return nil
}

func (x *OfflineQueryRequest) GetDestinationFormat() string {
	if x != nil {
		return x.DestinationFormat
	}
	return ""
}

func (x *OfflineQueryRequest) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *OfflineQueryRequest) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *OfflineQueryRequest) GetRecomputeFeatures() *OfflineQueryRecomputeFeatures {
	if x != nil {
		return x.RecomputeFeatures
	}
	return nil
}

func (x *OfflineQueryRequest) GetStorePlanStages() bool {
	if x != nil {
		return x.StorePlanStages
	}
	return false
}

func (x *OfflineQueryRequest) GetFilters() []*v1.LogicalExprNode {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *OfflineQueryRequest) GetMaxSamples() int32 {
	if x != nil && x.MaxSamples != nil {
		return *x.MaxSamples
	}
	return 0
}

func (x *OfflineQueryRequest) GetMaxCacheAgeSecs() int32 {
	if x != nil && x.MaxCacheAgeSecs != nil {
		return *x.MaxCacheAgeSecs
	}
	return 0
}

func (x *OfflineQueryRequest) GetExplain() *OfflineQueryExplain {
	if x != nil {
		return x.Explain
	}
	return nil
}

func (x *OfflineQueryRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OfflineQueryRequest) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *OfflineQueryRequest) GetObservedAtLowerBound() string {
	if x != nil && x.ObservedAtLowerBound != nil {
		return *x.ObservedAtLowerBound
	}
	return ""
}

func (x *OfflineQueryRequest) GetObservedAtUpperBound() string {
	if x != nil && x.ObservedAtUpperBound != nil {
		return *x.ObservedAtUpperBound
	}
	return ""
}

type ColumnMetadataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*ColumnMetadataList_ColumnMetadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ColumnMetadataList) Reset() {
	*x = ColumnMetadataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMetadataList) ProtoMessage() {}

func (x *ColumnMetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMetadataList.ProtoReflect.Descriptor instead.
func (*ColumnMetadataList) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{4}
}

func (x *ColumnMetadataList) GetMetadata() []*ColumnMetadataList_ColumnMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetOfflineQueryJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished bool                `protobuf:"varint,1,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	Version    int32               `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Urls       []string            `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
	Errors     []*ChalkError       `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	Columns    *ColumnMetadataList `protobuf:"bytes,5,opt,name=columns,proto3,oneof" json:"columns,omitempty"`
}

func (x *GetOfflineQueryJobResponse) Reset() {
	*x = GetOfflineQueryJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOfflineQueryJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfflineQueryJobResponse) ProtoMessage() {}

func (x *GetOfflineQueryJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfflineQueryJobResponse.ProtoReflect.Descriptor instead.
func (*GetOfflineQueryJobResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{5}
}

func (x *GetOfflineQueryJobResponse) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *GetOfflineQueryJobResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GetOfflineQueryJobResponse) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *GetOfflineQueryJobResponse) GetErrors() []*ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetOfflineQueryJobResponse) GetColumns() *ColumnMetadataList {
	if x != nil {
		return x.Columns
	}
	return nil
}

type OfflineQueryRecomputeFeatures_FeatureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureList []string `protobuf:"bytes,1,rep,name=feature_list,json=featureList,proto3" json:"feature_list,omitempty"`
}

func (x *OfflineQueryRecomputeFeatures_FeatureList) Reset() {
	*x = OfflineQueryRecomputeFeatures_FeatureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineQueryRecomputeFeatures_FeatureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryRecomputeFeatures_FeatureList) ProtoMessage() {}

func (x *OfflineQueryRecomputeFeatures_FeatureList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryRecomputeFeatures_FeatureList.ProtoReflect.Descriptor instead.
func (*OfflineQueryRecomputeFeatures_FeatureList) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{0, 0}
}

func (x *OfflineQueryRecomputeFeatures_FeatureList) GetFeatureList() []string {
	if x != nil {
		return x.FeatureList
	}
	return nil
}

type OfflineQueryExplain_Only struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OfflineQueryExplain_Only) Reset() {
	*x = OfflineQueryExplain_Only{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineQueryExplain_Only) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryExplain_Only) ProtoMessage() {}

func (x *OfflineQueryExplain_Only) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryExplain_Only.ProtoReflect.Descriptor instead.
func (*OfflineQueryExplain_Only) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{1, 0}
}

type OfflineQueryInputs_NoInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OfflineQueryInputs_NoInputs) Reset() {
	*x = OfflineQueryInputs_NoInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineQueryInputs_NoInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryInputs_NoInputs) ProtoMessage() {}

func (x *OfflineQueryInputs_NoInputs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryInputs_NoInputs.ProtoReflect.Descriptor instead.
func (*OfflineQueryInputs_NoInputs) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{2, 0}
}

type ColumnMetadataList_ColumnMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root FQN of the feature for a column
	FeatureFqn string `protobuf:"bytes,1,opt,name=feature_fqn,json=featureFqn,proto3" json:"feature_fqn,omitempty"`
	// The name of the column that corresponds to this feature
	ColumnName string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// The data type for this feature
	Dtype string `protobuf:"bytes,3,opt,name=dtype,proto3" json:"dtype,omitempty"`
}

func (x *ColumnMetadataList_ColumnMetadata) Reset() {
	*x = ColumnMetadataList_ColumnMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_offline_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMetadataList_ColumnMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMetadataList_ColumnMetadata) ProtoMessage() {}

func (x *ColumnMetadataList_ColumnMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_offline_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMetadataList_ColumnMetadata.ProtoReflect.Descriptor instead.
func (*ColumnMetadataList_ColumnMetadata) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_offline_query_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ColumnMetadataList_ColumnMetadata) GetFeatureFqn() string {
	if x != nil {
		return x.FeatureFqn
	}
	return ""
}

func (x *ColumnMetadataList_ColumnMetadata) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnMetadataList_ColumnMetadata) GetDtype() string {
	if x != nil {
		return x.Dtype
	}
	return ""
}

var File_chalk_common_v1_offline_query_proto protoreflect.FileDescriptor

var file_chalk_common_v1_offline_query_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdc, 0x01, 0x0a, 0x1d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x4e,
	0x6f, 0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x30, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x22, 0x80,
	0x01, 0x0a, 0x13, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x74, 0x72, 0x75, 0x74, 0x68, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x74, 0x72, 0x75, 0x74, 0x68, 0x79,
	0x12, 0x3f, 0x0a, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x6e, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x6e, 0x6c,
	0x79, 0x1a, 0x06, 0x0a, 0x04, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6d, 0x70,
	0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x0a,
	0x0a, 0x08, 0x4e, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6d,
	0x70, 0x6c, 0x22, 0xb6, 0x07, 0x0a, 0x13, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x5d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x68, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x17, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0xca, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x12,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x68, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x71, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42,
	0xc1, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61,
	0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_common_v1_offline_query_proto_rawDescOnce sync.Once
	file_chalk_common_v1_offline_query_proto_rawDescData = file_chalk_common_v1_offline_query_proto_rawDesc
)

func file_chalk_common_v1_offline_query_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_offline_query_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_offline_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v1_offline_query_proto_rawDescData)
	})
	return file_chalk_common_v1_offline_query_proto_rawDescData
}

var file_chalk_common_v1_offline_query_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chalk_common_v1_offline_query_proto_goTypes = []any{
	(*OfflineQueryRecomputeFeatures)(nil),             // 0: chalk.common.v1.OfflineQueryRecomputeFeatures
	(*OfflineQueryExplain)(nil),                       // 1: chalk.common.v1.OfflineQueryExplain
	(*OfflineQueryInputs)(nil),                        // 2: chalk.common.v1.OfflineQueryInputs
	(*OfflineQueryRequest)(nil),                       // 3: chalk.common.v1.OfflineQueryRequest
	(*ColumnMetadataList)(nil),                        // 4: chalk.common.v1.ColumnMetadataList
	(*GetOfflineQueryJobResponse)(nil),                // 5: chalk.common.v1.GetOfflineQueryJobResponse
	(*OfflineQueryRecomputeFeatures_FeatureList)(nil), // 6: chalk.common.v1.OfflineQueryRecomputeFeatures.FeatureList
	(*OfflineQueryExplain_Only)(nil),                  // 7: chalk.common.v1.OfflineQueryExplain.Only
	(*OfflineQueryInputs_NoInputs)(nil),               // 8: chalk.common.v1.OfflineQueryInputs.NoInputs
	(*ColumnMetadataList_ColumnMetadata)(nil),         // 9: chalk.common.v1.ColumnMetadataList.ColumnMetadata
	(*v1.LogicalExprNode)(nil),                        // 10: chalk.expression.v1.LogicalExprNode
	(*ChalkError)(nil),                                // 11: chalk.common.v1.ChalkError
}
var file_chalk_common_v1_offline_query_proto_depIdxs = []int32{
	6,  // 0: chalk.common.v1.OfflineQueryRecomputeFeatures.feature_list:type_name -> chalk.common.v1.OfflineQueryRecomputeFeatures.FeatureList
	7,  // 1: chalk.common.v1.OfflineQueryExplain.only:type_name -> chalk.common.v1.OfflineQueryExplain.Only
	8,  // 2: chalk.common.v1.OfflineQueryInputs.no_inputs:type_name -> chalk.common.v1.OfflineQueryInputs.NoInputs
	2,  // 3: chalk.common.v1.OfflineQueryRequest.inputs:type_name -> chalk.common.v1.OfflineQueryInputs
	0,  // 4: chalk.common.v1.OfflineQueryRequest.recompute_features:type_name -> chalk.common.v1.OfflineQueryRecomputeFeatures
	10, // 5: chalk.common.v1.OfflineQueryRequest.filters:type_name -> chalk.expression.v1.LogicalExprNode
	1,  // 6: chalk.common.v1.OfflineQueryRequest.explain:type_name -> chalk.common.v1.OfflineQueryExplain
	9,  // 7: chalk.common.v1.ColumnMetadataList.metadata:type_name -> chalk.common.v1.ColumnMetadataList.ColumnMetadata
	11, // 8: chalk.common.v1.GetOfflineQueryJobResponse.errors:type_name -> chalk.common.v1.ChalkError
	4,  // 9: chalk.common.v1.GetOfflineQueryJobResponse.columns:type_name -> chalk.common.v1.ColumnMetadataList
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_offline_query_proto_init() }
func file_chalk_common_v1_offline_query_proto_init() {
	if File_chalk_common_v1_offline_query_proto != nil {
		return
	}
	file_chalk_common_v1_chalk_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_common_v1_offline_query_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineQueryRecomputeFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineQueryExplain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineQueryInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ColumnMetadataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetOfflineQueryJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineQueryRecomputeFeatures_FeatureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineQueryExplain_Only); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineQueryInputs_NoInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_offline_query_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ColumnMetadataList_ColumnMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_common_v1_offline_query_proto_msgTypes[0].OneofWrappers = []any{
		(*OfflineQueryRecomputeFeatures_AllOrNone)(nil),
		(*OfflineQueryRecomputeFeatures_FeatureList_)(nil),
	}
	file_chalk_common_v1_offline_query_proto_msgTypes[1].OneofWrappers = []any{
		(*OfflineQueryExplain_Truthy)(nil),
		(*OfflineQueryExplain_Only_)(nil),
	}
	file_chalk_common_v1_offline_query_proto_msgTypes[2].OneofWrappers = []any{
		(*OfflineQueryInputs_FeatherInputs)(nil),
		(*OfflineQueryInputs_NoInputs_)(nil),
	}
	file_chalk_common_v1_offline_query_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_common_v1_offline_query_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v1_offline_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_offline_query_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_offline_query_proto_depIdxs,
		MessageInfos:      file_chalk_common_v1_offline_query_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_offline_query_proto = out.File
	file_chalk_common_v1_offline_query_proto_rawDesc = nil
	file_chalk_common_v1_offline_query_proto_goTypes = nil
	file_chalk_common_v1_offline_query_proto_depIdxs = nil
}
