// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/common/v1/dataset_response.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatasetSampleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerBound *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	UpperBound *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	MaxSamples *int32                 `protobuf:"varint,3,opt,name=max_samples,json=maxSamples,proto3,oneof" json:"max_samples,omitempty"`
}

func (x *DatasetSampleFilter) Reset() {
	*x = DatasetSampleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetSampleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetSampleFilter) ProtoMessage() {}

func (x *DatasetSampleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetSampleFilter.ProtoReflect.Descriptor instead.
func (*DatasetSampleFilter) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_dataset_response_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetSampleFilter) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *DatasetSampleFilter) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *DatasetSampleFilter) GetMaxSamples() int32 {
	if x != nil && x.MaxSamples != nil {
		return *x.MaxSamples
	}
	return 0
}

type DatasetFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleFilters   *DatasetSampleFilter `protobuf:"bytes,1,opt,name=sample_filters,json=sampleFilters,proto3" json:"sample_filters,omitempty"`
	MaxCacheAgeSecs *float32             `protobuf:"fixed32,2,opt,name=max_cache_age_secs,json=maxCacheAgeSecs,proto3,oneof" json:"max_cache_age_secs,omitempty"`
}

func (x *DatasetFilter) Reset() {
	*x = DatasetFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetFilter) ProtoMessage() {}

func (x *DatasetFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetFilter.ProtoReflect.Descriptor instead.
func (*DatasetFilter) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_dataset_response_proto_rawDescGZIP(), []int{1}
}

func (x *DatasetFilter) GetSampleFilters() *DatasetSampleFilter {
	if x != nil {
		return x.SampleFilters
	}
	return nil
}

func (x *DatasetFilter) GetMaxCacheAgeSecs() float32 {
	if x != nil && x.MaxCacheAgeSecs != nil {
		return *x.MaxCacheAgeSecs
	}
	return 0
}

type DatasetRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetName   *string                `protobuf:"bytes,1,opt,name=dataset_name,json=datasetName,proto3,oneof" json:"dataset_name,omitempty"`
	DatasetId     *string                `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3,oneof" json:"dataset_id,omitempty"`
	EnvironmentId *string                `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3,oneof" json:"environment_id,omitempty"`
	RevisionId    *string                `protobuf:"bytes,4,opt,name=revision_id,json=revisionId,proto3,oneof" json:"revision_id,omitempty"`
	CreatorId     string                 `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Outputs       []string               `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	GivensUri     *string                `protobuf:"bytes,7,opt,name=givens_uri,json=givensUri,proto3,oneof" json:"givens_uri,omitempty"`
	Status        QueryStatus            `protobuf:"varint,8,opt,name=status,proto3,enum=chalk.common.v1.QueryStatus" json:"status,omitempty"`
	Filters       *DatasetFilter         `protobuf:"bytes,9,opt,name=filters,proto3" json:"filters,omitempty"`
	NumPartitions int32                  `protobuf:"varint,10,opt,name=num_partitions,json=numPartitions,proto3" json:"num_partitions,omitempty"`
	NumBytes      *int32                 `protobuf:"varint,11,opt,name=num_bytes,json=numBytes,proto3,oneof" json:"num_bytes,omitempty"`
	OutputUris    string                 `protobuf:"bytes,12,opt,name=output_uris,json=outputUris,proto3" json:"output_uris,omitempty"`
	OutputVersion int32                  `protobuf:"varint,13,opt,name=output_version,json=outputVersion,proto3" json:"output_version,omitempty"`
	Branch        *string                `protobuf:"bytes,14,opt,name=branch,proto3,oneof" json:"branch,omitempty"`
	DashboardUrl  *string                `protobuf:"bytes,15,opt,name=dashboard_url,json=dashboardUrl,proto3,oneof" json:"dashboard_url,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	TerminatedAt  *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=terminated_at,json=terminatedAt,proto3,oneof" json:"terminated_at,omitempty"`
}

func (x *DatasetRevisionResponse) Reset() {
	*x = DatasetRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetRevisionResponse) ProtoMessage() {}

func (x *DatasetRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetRevisionResponse.ProtoReflect.Descriptor instead.
func (*DatasetRevisionResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_dataset_response_proto_rawDescGZIP(), []int{2}
}

func (x *DatasetRevisionResponse) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *DatasetRevisionResponse) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *DatasetRevisionResponse) GetEnvironmentId() string {
	if x != nil && x.EnvironmentId != nil {
		return *x.EnvironmentId
	}
	return ""
}

func (x *DatasetRevisionResponse) GetRevisionId() string {
	if x != nil && x.RevisionId != nil {
		return *x.RevisionId
	}
	return ""
}

func (x *DatasetRevisionResponse) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *DatasetRevisionResponse) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *DatasetRevisionResponse) GetGivensUri() string {
	if x != nil && x.GivensUri != nil {
		return *x.GivensUri
	}
	return ""
}

func (x *DatasetRevisionResponse) GetStatus() QueryStatus {
	if x != nil {
		return x.Status
	}
	return QueryStatus_QUERY_STATUS_UNSPECIFIED
}

func (x *DatasetRevisionResponse) GetFilters() *DatasetFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *DatasetRevisionResponse) GetNumPartitions() int32 {
	if x != nil {
		return x.NumPartitions
	}
	return 0
}

func (x *DatasetRevisionResponse) GetNumBytes() int32 {
	if x != nil && x.NumBytes != nil {
		return *x.NumBytes
	}
	return 0
}

func (x *DatasetRevisionResponse) GetOutputUris() string {
	if x != nil {
		return x.OutputUris
	}
	return ""
}

func (x *DatasetRevisionResponse) GetOutputVersion() int32 {
	if x != nil {
		return x.OutputVersion
	}
	return 0
}

func (x *DatasetRevisionResponse) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *DatasetRevisionResponse) GetDashboardUrl() string {
	if x != nil && x.DashboardUrl != nil {
		return *x.DashboardUrl
	}
	return ""
}

func (x *DatasetRevisionResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DatasetRevisionResponse) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *DatasetRevisionResponse) GetTerminatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TerminatedAt
	}
	return nil
}

type DatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the export job is finished (it runs asynchronously)
	IsFinished bool `protobuf:"varint,1,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	// Version number representing the format of the data. The client uses this version number
	// to properly decode and load the query results into DataFrames.
	Version       int32                      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	EnvironmentId string                     `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DatasetId     string                     `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetName   string                     `protobuf:"bytes,5,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	Errors        []*ChalkError              `protobuf:"bytes,101,rep,name=errors,proto3" json:"errors,omitempty"`
	Revisions     []*DatasetRevisionResponse `protobuf:"bytes,102,rep,name=revisions,proto3" json:"revisions,omitempty"`
}

func (x *DatasetResponse) Reset() {
	*x = DatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetResponse) ProtoMessage() {}

func (x *DatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_dataset_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetResponse.ProtoReflect.Descriptor instead.
func (*DatasetResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_dataset_response_proto_rawDescGZIP(), []int{3}
}

func (x *DatasetResponse) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *DatasetResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DatasetResponse) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *DatasetResponse) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DatasetResponse) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

func (x *DatasetResponse) GetErrors() []*ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *DatasetResponse) GetRevisions() []*DatasetRevisionResponse {
	if x != nil {
		return x.Revisions
	}
	return nil
}

var File_chalk_common_v1_dataset_response_proto protoreflect.FileDescriptor

var file_chalk_common_v1_dataset_response_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x22, 0xcf, 0x07, 0x0a, 0x17,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x55, 0x72, 0x69, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x08, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0a, 0x52,
	0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xb2, 0x02,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0xc4, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chalk_common_v1_dataset_response_proto_rawDescOnce sync.Once
	file_chalk_common_v1_dataset_response_proto_rawDescData = file_chalk_common_v1_dataset_response_proto_rawDesc
)

func file_chalk_common_v1_dataset_response_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_dataset_response_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_dataset_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v1_dataset_response_proto_rawDescData)
	})
	return file_chalk_common_v1_dataset_response_proto_rawDescData
}

var file_chalk_common_v1_dataset_response_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chalk_common_v1_dataset_response_proto_goTypes = []any{
	(*DatasetSampleFilter)(nil),     // 0: chalk.common.v1.DatasetSampleFilter
	(*DatasetFilter)(nil),           // 1: chalk.common.v1.DatasetFilter
	(*DatasetRevisionResponse)(nil), // 2: chalk.common.v1.DatasetRevisionResponse
	(*DatasetResponse)(nil),         // 3: chalk.common.v1.DatasetResponse
	(*timestamppb.Timestamp)(nil),   // 4: google.protobuf.Timestamp
	(QueryStatus)(0),                // 5: chalk.common.v1.QueryStatus
	(*ChalkError)(nil),              // 6: chalk.common.v1.ChalkError
}
var file_chalk_common_v1_dataset_response_proto_depIdxs = []int32{
	4,  // 0: chalk.common.v1.DatasetSampleFilter.lower_bound:type_name -> google.protobuf.Timestamp
	4,  // 1: chalk.common.v1.DatasetSampleFilter.upper_bound:type_name -> google.protobuf.Timestamp
	0,  // 2: chalk.common.v1.DatasetFilter.sample_filters:type_name -> chalk.common.v1.DatasetSampleFilter
	5,  // 3: chalk.common.v1.DatasetRevisionResponse.status:type_name -> chalk.common.v1.QueryStatus
	1,  // 4: chalk.common.v1.DatasetRevisionResponse.filters:type_name -> chalk.common.v1.DatasetFilter
	4,  // 5: chalk.common.v1.DatasetRevisionResponse.created_at:type_name -> google.protobuf.Timestamp
	4,  // 6: chalk.common.v1.DatasetRevisionResponse.started_at:type_name -> google.protobuf.Timestamp
	4,  // 7: chalk.common.v1.DatasetRevisionResponse.terminated_at:type_name -> google.protobuf.Timestamp
	6,  // 8: chalk.common.v1.DatasetResponse.errors:type_name -> chalk.common.v1.ChalkError
	2,  // 9: chalk.common.v1.DatasetResponse.revisions:type_name -> chalk.common.v1.DatasetRevisionResponse
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_dataset_response_proto_init() }
func file_chalk_common_v1_dataset_response_proto_init() {
	if File_chalk_common_v1_dataset_response_proto != nil {
		return
	}
	file_chalk_common_v1_chalk_error_proto_init()
	file_chalk_common_v1_query_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_common_v1_dataset_response_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DatasetSampleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_dataset_response_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DatasetFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_dataset_response_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DatasetRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_dataset_response_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_common_v1_dataset_response_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_common_v1_dataset_response_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_common_v1_dataset_response_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v1_dataset_response_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_dataset_response_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_dataset_response_proto_depIdxs,
		MessageInfos:      file_chalk_common_v1_dataset_response_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_dataset_response_proto = out.File
	file_chalk_common_v1_dataset_response_proto_rawDesc = nil
	file_chalk_common_v1_dataset_response_proto_goTypes = nil
	file_chalk_common_v1_dataset_response_proto_depIdxs = nil
}
