// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/common/v1/feature_values.proto

package commonv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/chart/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type FeatureValueAggregation int32

const (
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_UNSPECIFIED        FeatureValueAggregation = 0
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES      FeatureValueAggregation = 1
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS FeatureValueAggregation = 2
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE    FeatureValueAggregation = 3
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_MAX_VALUE          FeatureValueAggregation = 4
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_MIN_VALUE          FeatureValueAggregation = 5
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_AVERAGE            FeatureValueAggregation = 6
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS       FeatureValueAggregation = 7
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P95                FeatureValueAggregation = 8
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P75                FeatureValueAggregation = 9
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P50                FeatureValueAggregation = 10
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P25                FeatureValueAggregation = 11
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P05                FeatureValueAggregation = 12
)

// Enum value maps for FeatureValueAggregation.
var (
	FeatureValueAggregation_name = map[int32]string{
		0:  "FEATURE_VALUE_AGGREGATION_UNSPECIFIED",
		1:  "FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES",
		2:  "FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS",
		3:  "FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE",
		4:  "FEATURE_VALUE_AGGREGATION_MAX_VALUE",
		5:  "FEATURE_VALUE_AGGREGATION_MIN_VALUE",
		6:  "FEATURE_VALUE_AGGREGATION_AVERAGE",
		7:  "FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS",
		8:  "FEATURE_VALUE_AGGREGATION_P95",
		9:  "FEATURE_VALUE_AGGREGATION_P75",
		10: "FEATURE_VALUE_AGGREGATION_P50",
		11: "FEATURE_VALUE_AGGREGATION_P25",
		12: "FEATURE_VALUE_AGGREGATION_P05",
	}
	FeatureValueAggregation_value = map[string]int32{
		"FEATURE_VALUE_AGGREGATION_UNSPECIFIED":        0,
		"FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES":      1,
		"FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS": 2,
		"FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE":    3,
		"FEATURE_VALUE_AGGREGATION_MAX_VALUE":          4,
		"FEATURE_VALUE_AGGREGATION_MIN_VALUE":          5,
		"FEATURE_VALUE_AGGREGATION_AVERAGE":            6,
		"FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS":       7,
		"FEATURE_VALUE_AGGREGATION_P95":                8,
		"FEATURE_VALUE_AGGREGATION_P75":                9,
		"FEATURE_VALUE_AGGREGATION_P50":                10,
		"FEATURE_VALUE_AGGREGATION_P25":                11,
		"FEATURE_VALUE_AGGREGATION_P05":                12,
	}
)

func (x FeatureValueAggregation) Enum() *FeatureValueAggregation {
	p := new(FeatureValueAggregation)
	*p = x
	return p
}

func (x FeatureValueAggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureValueAggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_common_v1_feature_values_proto_enumTypes[0].Descriptor()
}

func (FeatureValueAggregation) Type() protoreflect.EnumType {
	return &file_chalk_common_v1_feature_values_proto_enumTypes[0]
}

func (x FeatureValueAggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureValueAggregation.Descriptor instead.
func (FeatureValueAggregation) EnumDescriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn         string                    `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	AggregateBy []FeatureValueAggregation `protobuf:"varint,2,rep,packed,name=aggregate_by,json=aggregateBy,proto3,enum=chalk.common.v1.FeatureValueAggregation" json:"aggregate_by,omitempty"`
	// The size of each time bucket + how far apart time points are in the chart
	// Ideally a divisor of the total window between end and start ms
	// If not, the bucket aligned with end_ms will be of size total_window % window_period
	WindowPeriod *string `protobuf:"bytes,3,opt,name=window_period,json=windowPeriod,proto3,oneof" json:"window_period,omitempty"`
	StartMs      int64   `protobuf:"varint,4,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	// If not provided, will assume current time is the ending time
	EndMs *int64 `protobuf:"varint,5,opt,name=end_ms,json=endMs,proto3,oneof" json:"end_ms,omitempty"`
}

func (x *GetFeatureValuesChartRequest) Reset() {
	*x = GetFeatureValuesChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_feature_values_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureValuesChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesChartRequest) ProtoMessage() {}

func (x *GetFeatureValuesChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesChartRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesChartRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{0}
}

func (x *GetFeatureValuesChartRequest) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *GetFeatureValuesChartRequest) GetAggregateBy() []FeatureValueAggregation {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

func (x *GetFeatureValuesChartRequest) GetWindowPeriod() string {
	if x != nil && x.WindowPeriod != nil {
		return *x.WindowPeriod
	}
	return ""
}

func (x *GetFeatureValuesChartRequest) GetStartMs() int64 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *GetFeatureValuesChartRequest) GetEndMs() int64 {
	if x != nil && x.EndMs != nil {
		return *x.EndMs
	}
	return 0
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chart *Chart `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
}

func (x *GetFeatureValuesChartResponse) Reset() {
	*x = GetFeatureValuesChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_feature_values_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureValuesChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesChartResponse) ProtoMessage() {}

func (x *GetFeatureValuesChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesChartResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesChartResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{1}
}

func (x *GetFeatureValuesChartResponse) GetChart() *Chart {
	if x != nil {
		return x.Chart
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn         string                    `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	AggregateBy []FeatureValueAggregation `protobuf:"varint,2,rep,packed,name=aggregate_by,json=aggregateBy,proto3,enum=chalk.common.v1.FeatureValueAggregation" json:"aggregate_by,omitempty"`
	// The size of each time bucket + how far apart time points are in the chart
	// Ideally a divisor of the total window between end and start ms
	// If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
	// For JSON format, this is a string `${duration_in_seconds}s`
	WindowPeriod            *durationpb.Duration   `protobuf:"bytes,3,opt,name=window_period,json=windowPeriod,proto3,oneof" json:"window_period,omitempty"`
	StartTimestampInclusive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp_inclusive,json=startTimestampInclusive,proto3" json:"start_timestamp_inclusive,omitempty"`
	// If not provided, will assume current time is the ending time
	EndTimestampExclusive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_timestamp_exclusive,json=endTimestampExclusive,proto3,oneof" json:"end_timestamp_exclusive,omitempty"`
}

func (x *GetFeatureValuesTimeSeriesChartRequest) Reset() {
	*x = GetFeatureValuesTimeSeriesChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_feature_values_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureValuesTimeSeriesChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartRequest) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{2}
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetAggregateBy() []FeatureValueAggregation {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetWindowPeriod() *durationpb.Duration {
	if x != nil {
		return x.WindowPeriod
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetStartTimestampInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestampInclusive
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetEndTimestampExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestampExclusive
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFeatureValuesTimeSeriesChartResponse) Reset() {
	*x = GetFeatureValuesTimeSeriesChartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_feature_values_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureValuesTimeSeriesChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartResponse) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn         string                    `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	AggregateBy []FeatureValueAggregation `protobuf:"varint,2,rep,packed,name=aggregate_by,json=aggregateBy,proto3,enum=chalk.common.v1.FeatureValueAggregation" json:"aggregate_by,omitempty"`
	// The size of each time bucket + how far apart time points are in the chart
	// Ideally a divisor of the total window between end and start ms
	// If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
	// For JSON format, this is a string `${duration_in_seconds}s`
	WindowPeriod            *durationpb.Duration   `protobuf:"bytes,3,opt,name=window_period,json=windowPeriod,proto3,oneof" json:"window_period,omitempty"`
	StartTimestampInclusive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp_inclusive,json=startTimestampInclusive,proto3" json:"start_timestamp_inclusive,omitempty"`
	// If not provided, will assume current time is the ending time
	EndTimestampExclusive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_timestamp_exclusive,json=endTimestampExclusive,proto3,oneof" json:"end_timestamp_exclusive,omitempty"`
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) Reset() {
	*x = GetFeatureValuesTimeSeriesChartV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_feature_values_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartV2Request) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartV2Request.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartV2Request) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{4}
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetAggregateBy() []FeatureValueAggregation {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetWindowPeriod() *durationpb.Duration {
	if x != nil {
		return x.WindowPeriod
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetStartTimestampInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestampInclusive
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetEndTimestampExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestampExclusive
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chart *v1.DenseTimeSeriesChart `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
}

func (x *GetFeatureValuesTimeSeriesChartV2Response) Reset() {
	*x = GetFeatureValuesTimeSeriesChartV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_feature_values_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureValuesTimeSeriesChartV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartV2Response) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartV2Response.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartV2Response) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{5}
}

func (x *GetFeatureValuesTimeSeriesChartV2Response) GetChart() *v1.DenseTimeSeriesChart {
	if x != nil {
		return x.Chart
	}
	return nil
}

var File_chalk_common_v1_feature_values_proto protoreflect.FileDescriptor

var file_chalk_common_v1_feature_values_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x29, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xff, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x66, 0x71, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x12, 0x28, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x88, 0x01,
	0x01, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x73, 0x22, 0x51, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xaf, 0x03, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x71, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x43, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x57, 0x0a, 0x17,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x15, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x33, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xb1, 0x03, 0x0a,
	0x28, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a,
	0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x15, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x02,
	0x18, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x22, 0x6b, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x2a, 0xaa, 0x04,
	0x0a, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x30, 0x0a, 0x2c, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f,
	0x50, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x39, 0x35, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x37, 0x35, 0x10, 0x09, 0x12, 0x21, 0x0a,
	0x1d, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x35, 0x30, 0x10, 0x0a,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x32,
	0x35, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x30, 0x35, 0x10, 0x0c, 0x1a, 0x02, 0x18, 0x01, 0x42, 0xc2, 0x01, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x42, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_common_v1_feature_values_proto_rawDescOnce sync.Once
	file_chalk_common_v1_feature_values_proto_rawDescData = file_chalk_common_v1_feature_values_proto_rawDesc
)

func file_chalk_common_v1_feature_values_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_feature_values_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_feature_values_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v1_feature_values_proto_rawDescData)
	})
	return file_chalk_common_v1_feature_values_proto_rawDescData
}

var file_chalk_common_v1_feature_values_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_common_v1_feature_values_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chalk_common_v1_feature_values_proto_goTypes = []any{
	(FeatureValueAggregation)(0),                      // 0: chalk.common.v1.FeatureValueAggregation
	(*GetFeatureValuesChartRequest)(nil),              // 1: chalk.common.v1.GetFeatureValuesChartRequest
	(*GetFeatureValuesChartResponse)(nil),             // 2: chalk.common.v1.GetFeatureValuesChartResponse
	(*GetFeatureValuesTimeSeriesChartRequest)(nil),    // 3: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest
	(*GetFeatureValuesTimeSeriesChartResponse)(nil),   // 4: chalk.common.v1.GetFeatureValuesTimeSeriesChartResponse
	(*GetFeatureValuesTimeSeriesChartV2Request)(nil),  // 5: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request
	(*GetFeatureValuesTimeSeriesChartV2Response)(nil), // 6: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Response
	(*Chart)(nil),                   // 7: chalk.common.v1.Chart
	(*durationpb.Duration)(nil),     // 8: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),   // 9: google.protobuf.Timestamp
	(*v1.DenseTimeSeriesChart)(nil), // 10: chalk.chart.v1.DenseTimeSeriesChart
}
var file_chalk_common_v1_feature_values_proto_depIdxs = []int32{
	0,  // 0: chalk.common.v1.GetFeatureValuesChartRequest.aggregate_by:type_name -> chalk.common.v1.FeatureValueAggregation
	7,  // 1: chalk.common.v1.GetFeatureValuesChartResponse.chart:type_name -> chalk.common.v1.Chart
	0,  // 2: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.aggregate_by:type_name -> chalk.common.v1.FeatureValueAggregation
	8,  // 3: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.window_period:type_name -> google.protobuf.Duration
	9,  // 4: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.start_timestamp_inclusive:type_name -> google.protobuf.Timestamp
	9,  // 5: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.end_timestamp_exclusive:type_name -> google.protobuf.Timestamp
	0,  // 6: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.aggregate_by:type_name -> chalk.common.v1.FeatureValueAggregation
	8,  // 7: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.window_period:type_name -> google.protobuf.Duration
	9,  // 8: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.start_timestamp_inclusive:type_name -> google.protobuf.Timestamp
	9,  // 9: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.end_timestamp_exclusive:type_name -> google.protobuf.Timestamp
	10, // 10: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Response.chart:type_name -> chalk.chart.v1.DenseTimeSeriesChart
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_feature_values_proto_init() }
func file_chalk_common_v1_feature_values_proto_init() {
	if File_chalk_common_v1_feature_values_proto != nil {
		return
	}
	file_chalk_common_v1_chart_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_common_v1_feature_values_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetFeatureValuesChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_feature_values_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetFeatureValuesChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_feature_values_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetFeatureValuesTimeSeriesChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_feature_values_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetFeatureValuesTimeSeriesChartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_feature_values_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetFeatureValuesTimeSeriesChartV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_feature_values_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetFeatureValuesTimeSeriesChartV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_common_v1_feature_values_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_common_v1_feature_values_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_common_v1_feature_values_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v1_feature_values_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_feature_values_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_feature_values_proto_depIdxs,
		EnumInfos:         file_chalk_common_v1_feature_values_proto_enumTypes,
		MessageInfos:      file_chalk_common_v1_feature_values_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_feature_values_proto = out.File
	file_chalk_common_v1_feature_values_proto_rawDesc = nil
	file_chalk_common_v1_feature_values_proto_goTypes = nil
	file_chalk_common_v1_feature_values_proto_depIdxs = nil
}
