// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/common/v1/feature_values.proto

package commonv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/chart/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type FeatureValueAggregation int32

const (
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_UNSPECIFIED        FeatureValueAggregation = 0
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES      FeatureValueAggregation = 1
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS FeatureValueAggregation = 2
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE    FeatureValueAggregation = 3
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_MAX_VALUE          FeatureValueAggregation = 4
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_MIN_VALUE          FeatureValueAggregation = 5
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_AVERAGE            FeatureValueAggregation = 6
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS       FeatureValueAggregation = 7
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P95                FeatureValueAggregation = 8
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P75                FeatureValueAggregation = 9
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P50                FeatureValueAggregation = 10
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P25                FeatureValueAggregation = 11
	FeatureValueAggregation_FEATURE_VALUE_AGGREGATION_P05                FeatureValueAggregation = 12
)

// Enum value maps for FeatureValueAggregation.
var (
	FeatureValueAggregation_name = map[int32]string{
		0:  "FEATURE_VALUE_AGGREGATION_UNSPECIFIED",
		1:  "FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES",
		2:  "FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS",
		3:  "FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE",
		4:  "FEATURE_VALUE_AGGREGATION_MAX_VALUE",
		5:  "FEATURE_VALUE_AGGREGATION_MIN_VALUE",
		6:  "FEATURE_VALUE_AGGREGATION_AVERAGE",
		7:  "FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS",
		8:  "FEATURE_VALUE_AGGREGATION_P95",
		9:  "FEATURE_VALUE_AGGREGATION_P75",
		10: "FEATURE_VALUE_AGGREGATION_P50",
		11: "FEATURE_VALUE_AGGREGATION_P25",
		12: "FEATURE_VALUE_AGGREGATION_P05",
	}
	FeatureValueAggregation_value = map[string]int32{
		"FEATURE_VALUE_AGGREGATION_UNSPECIFIED":        0,
		"FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES":      1,
		"FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS": 2,
		"FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE":    3,
		"FEATURE_VALUE_AGGREGATION_MAX_VALUE":          4,
		"FEATURE_VALUE_AGGREGATION_MIN_VALUE":          5,
		"FEATURE_VALUE_AGGREGATION_AVERAGE":            6,
		"FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS":       7,
		"FEATURE_VALUE_AGGREGATION_P95":                8,
		"FEATURE_VALUE_AGGREGATION_P75":                9,
		"FEATURE_VALUE_AGGREGATION_P50":                10,
		"FEATURE_VALUE_AGGREGATION_P25":                11,
		"FEATURE_VALUE_AGGREGATION_P05":                12,
	}
)

func (x FeatureValueAggregation) Enum() *FeatureValueAggregation {
	p := new(FeatureValueAggregation)
	*p = x
	return p
}

func (x FeatureValueAggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureValueAggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_common_v1_feature_values_proto_enumTypes[0].Descriptor()
}

func (FeatureValueAggregation) Type() protoreflect.EnumType {
	return &file_chalk_common_v1_feature_values_proto_enumTypes[0]
}

func (x FeatureValueAggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureValueAggregation.Descriptor instead.
func (FeatureValueAggregation) EnumDescriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesChartRequest struct {
	state       protoimpl.MessageState    `protogen:"open.v1"`
	Fqn         string                    `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	AggregateBy []FeatureValueAggregation `protobuf:"varint,2,rep,packed,name=aggregate_by,json=aggregateBy,proto3,enum=chalk.common.v1.FeatureValueAggregation" json:"aggregate_by,omitempty"`
	// The size of each time bucket + how far apart time points are in the chart
	// Ideally a divisor of the total window between end and start ms
	// If not, the bucket aligned with end_ms will be of size total_window % window_period
	WindowPeriod *string `protobuf:"bytes,3,opt,name=window_period,json=windowPeriod,proto3,oneof" json:"window_period,omitempty"`
	StartMs      int64   `protobuf:"varint,4,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	// If not provided, will assume current time is the ending time
	EndMs         *int64 `protobuf:"varint,5,opt,name=end_ms,json=endMs,proto3,oneof" json:"end_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeatureValuesChartRequest) Reset() {
	*x = GetFeatureValuesChartRequest{}
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesChartRequest) ProtoMessage() {}

func (x *GetFeatureValuesChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesChartRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesChartRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{0}
}

func (x *GetFeatureValuesChartRequest) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *GetFeatureValuesChartRequest) GetAggregateBy() []FeatureValueAggregation {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

func (x *GetFeatureValuesChartRequest) GetWindowPeriod() string {
	if x != nil && x.WindowPeriod != nil {
		return *x.WindowPeriod
	}
	return ""
}

func (x *GetFeatureValuesChartRequest) GetStartMs() int64 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *GetFeatureValuesChartRequest) GetEndMs() int64 {
	if x != nil && x.EndMs != nil {
		return *x.EndMs
	}
	return 0
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesChartResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chart         *Chart                 `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeatureValuesChartResponse) Reset() {
	*x = GetFeatureValuesChartResponse{}
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesChartResponse) ProtoMessage() {}

func (x *GetFeatureValuesChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesChartResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesChartResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{1}
}

func (x *GetFeatureValuesChartResponse) GetChart() *Chart {
	if x != nil {
		return x.Chart
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartRequest struct {
	state       protoimpl.MessageState    `protogen:"open.v1"`
	Fqn         string                    `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	AggregateBy []FeatureValueAggregation `protobuf:"varint,2,rep,packed,name=aggregate_by,json=aggregateBy,proto3,enum=chalk.common.v1.FeatureValueAggregation" json:"aggregate_by,omitempty"`
	// The size of each time bucket + how far apart time points are in the chart
	// Ideally a divisor of the total window between end and start ms
	// If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
	// For JSON format, this is a string `${duration_in_seconds}s`
	WindowPeriod            *durationpb.Duration   `protobuf:"bytes,3,opt,name=window_period,json=windowPeriod,proto3,oneof" json:"window_period,omitempty"`
	StartTimestampInclusive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp_inclusive,json=startTimestampInclusive,proto3" json:"start_timestamp_inclusive,omitempty"`
	// If not provided, will assume current time is the ending time
	EndTimestampExclusive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_timestamp_exclusive,json=endTimestampExclusive,proto3,oneof" json:"end_timestamp_exclusive,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetFeatureValuesTimeSeriesChartRequest) Reset() {
	*x = GetFeatureValuesTimeSeriesChartRequest{}
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesTimeSeriesChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartRequest) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{2}
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetAggregateBy() []FeatureValueAggregation {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetWindowPeriod() *durationpb.Duration {
	if x != nil {
		return x.WindowPeriod
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetStartTimestampInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestampInclusive
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetEndTimestampExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestampExclusive
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeatureValuesTimeSeriesChartResponse) Reset() {
	*x = GetFeatureValuesTimeSeriesChartResponse{}
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesTimeSeriesChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartResponse) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartV2Request struct {
	state       protoimpl.MessageState    `protogen:"open.v1"`
	Fqn         string                    `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	AggregateBy []FeatureValueAggregation `protobuf:"varint,2,rep,packed,name=aggregate_by,json=aggregateBy,proto3,enum=chalk.common.v1.FeatureValueAggregation" json:"aggregate_by,omitempty"`
	// The size of each time bucket + how far apart time points are in the chart
	// Ideally a divisor of the total window between end and start ms
	// If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
	// For JSON format, this is a string `${duration_in_seconds}s`
	WindowPeriod            *durationpb.Duration   `protobuf:"bytes,3,opt,name=window_period,json=windowPeriod,proto3,oneof" json:"window_period,omitempty"`
	StartTimestampInclusive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp_inclusive,json=startTimestampInclusive,proto3" json:"start_timestamp_inclusive,omitempty"`
	// If not provided, will assume current time is the ending time
	EndTimestampExclusive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_timestamp_exclusive,json=endTimestampExclusive,proto3,oneof" json:"end_timestamp_exclusive,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) Reset() {
	*x = GetFeatureValuesTimeSeriesChartV2Request{}
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartV2Request) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartV2Request.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartV2Request) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{4}
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetAggregateBy() []FeatureValueAggregation {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetWindowPeriod() *durationpb.Duration {
	if x != nil {
		return x.WindowPeriod
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetStartTimestampInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestampInclusive
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartV2Request) GetEndTimestampExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestampExclusive
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/common/v1/feature_values.proto.
type GetFeatureValuesTimeSeriesChartV2Response struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Chart         *v1.DenseTimeSeriesChart `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeatureValuesTimeSeriesChartV2Response) Reset() {
	*x = GetFeatureValuesTimeSeriesChartV2Response{}
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesTimeSeriesChartV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartV2Response) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_feature_values_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartV2Response.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartV2Response) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_feature_values_proto_rawDescGZIP(), []int{5}
}

func (x *GetFeatureValuesTimeSeriesChartV2Response) GetChart() *v1.DenseTimeSeriesChart {
	if x != nil {
		return x.Chart
	}
	return nil
}

var File_chalk_common_v1_feature_values_proto protoreflect.FileDescriptor

const file_chalk_common_v1_feature_values_proto_rawDesc = "" +
	"\n" +
	"$chalk/common/v1/feature_values.proto\x12\x0fchalk.common.v1\x1a)chalk/chart/v1/densetimeserieschart.proto\x1a\x1bchalk/common/v1/chart.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xff\x01\n" +
	"\x1cGetFeatureValuesChartRequest\x12\x10\n" +
	"\x03fqn\x18\x01 \x01(\tR\x03fqn\x12K\n" +
	"\faggregate_by\x18\x02 \x03(\x0e2(.chalk.common.v1.FeatureValueAggregationR\vaggregateBy\x12(\n" +
	"\rwindow_period\x18\x03 \x01(\tH\x00R\fwindowPeriod\x88\x01\x01\x12\x19\n" +
	"\bstart_ms\x18\x04 \x01(\x03R\astartMs\x12\x1a\n" +
	"\x06end_ms\x18\x05 \x01(\x03H\x01R\x05endMs\x88\x01\x01:\x02\x18\x01B\x10\n" +
	"\x0e_window_periodB\t\n" +
	"\a_end_ms\"Q\n" +
	"\x1dGetFeatureValuesChartResponse\x12,\n" +
	"\x05chart\x18\x01 \x01(\v2\x16.chalk.common.v1.ChartR\x05chart:\x02\x18\x01\"\xaf\x03\n" +
	"&GetFeatureValuesTimeSeriesChartRequest\x12\x10\n" +
	"\x03fqn\x18\x01 \x01(\tR\x03fqn\x12K\n" +
	"\faggregate_by\x18\x02 \x03(\x0e2(.chalk.common.v1.FeatureValueAggregationR\vaggregateBy\x12C\n" +
	"\rwindow_period\x18\x03 \x01(\v2\x19.google.protobuf.DurationH\x00R\fwindowPeriod\x88\x01\x01\x12V\n" +
	"\x19start_timestamp_inclusive\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x17startTimestampInclusive\x12W\n" +
	"\x17end_timestamp_exclusive\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x15endTimestampExclusive\x88\x01\x01:\x02\x18\x01B\x10\n" +
	"\x0e_window_periodB\x1a\n" +
	"\x18_end_timestamp_exclusive\"3\n" +
	"'GetFeatureValuesTimeSeriesChartResponse:\x02\x18\x01J\x04\b\x01\x10\x02\"\xb1\x03\n" +
	"(GetFeatureValuesTimeSeriesChartV2Request\x12\x10\n" +
	"\x03fqn\x18\x01 \x01(\tR\x03fqn\x12K\n" +
	"\faggregate_by\x18\x02 \x03(\x0e2(.chalk.common.v1.FeatureValueAggregationR\vaggregateBy\x12C\n" +
	"\rwindow_period\x18\x03 \x01(\v2\x19.google.protobuf.DurationH\x00R\fwindowPeriod\x88\x01\x01\x12V\n" +
	"\x19start_timestamp_inclusive\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x17startTimestampInclusive\x12W\n" +
	"\x17end_timestamp_exclusive\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x15endTimestampExclusive\x88\x01\x01:\x02\x18\x01B\x10\n" +
	"\x0e_window_periodB\x1a\n" +
	"\x18_end_timestamp_exclusive\"k\n" +
	")GetFeatureValuesTimeSeriesChartV2Response\x12:\n" +
	"\x05chart\x18\x01 \x01(\v2$.chalk.chart.v1.DenseTimeSeriesChartR\x05chart:\x02\x18\x01*\xaa\x04\n" +
	"\x17FeatureValueAggregation\x12)\n" +
	"%FEATURE_VALUE_AGGREGATION_UNSPECIFIED\x10\x00\x12+\n" +
	"'FEATURE_VALUE_AGGREGATION_UNIQUE_VALUES\x10\x01\x120\n" +
	",FEATURE_VALUE_AGGREGATION_TOTAL_OBSERVATIONS\x10\x02\x12-\n" +
	")FEATURE_VALUE_AGGREGATION_NULL_PERCENTAGE\x10\x03\x12'\n" +
	"#FEATURE_VALUE_AGGREGATION_MAX_VALUE\x10\x04\x12'\n" +
	"#FEATURE_VALUE_AGGREGATION_MIN_VALUE\x10\x05\x12%\n" +
	"!FEATURE_VALUE_AGGREGATION_AVERAGE\x10\x06\x12*\n" +
	"&FEATURE_VALUE_AGGREGATION_UNIQUE_PKEYS\x10\a\x12!\n" +
	"\x1dFEATURE_VALUE_AGGREGATION_P95\x10\b\x12!\n" +
	"\x1dFEATURE_VALUE_AGGREGATION_P75\x10\t\x12!\n" +
	"\x1dFEATURE_VALUE_AGGREGATION_P50\x10\n" +
	"\x12!\n" +
	"\x1dFEATURE_VALUE_AGGREGATION_P25\x10\v\x12!\n" +
	"\x1dFEATURE_VALUE_AGGREGATION_P05\x10\f\x1a\x02\x18\x01B\xc2\x01\n" +
	"\x13com.chalk.common.v1B\x12FeatureValuesProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/common/v1;commonv1\xa2\x02\x03CCX\xaa\x02\x0fChalk.Common.V1\xca\x02\x0fChalk\\Common\\V1\xe2\x02\x1bChalk\\Common\\V1\\GPBMetadata\xea\x02\x11Chalk::Common::V1b\x06proto3"

var (
	file_chalk_common_v1_feature_values_proto_rawDescOnce sync.Once
	file_chalk_common_v1_feature_values_proto_rawDescData []byte
)

func file_chalk_common_v1_feature_values_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_feature_values_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_feature_values_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_common_v1_feature_values_proto_rawDesc), len(file_chalk_common_v1_feature_values_proto_rawDesc)))
	})
	return file_chalk_common_v1_feature_values_proto_rawDescData
}

var file_chalk_common_v1_feature_values_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_common_v1_feature_values_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chalk_common_v1_feature_values_proto_goTypes = []any{
	(FeatureValueAggregation)(0),                      // 0: chalk.common.v1.FeatureValueAggregation
	(*GetFeatureValuesChartRequest)(nil),              // 1: chalk.common.v1.GetFeatureValuesChartRequest
	(*GetFeatureValuesChartResponse)(nil),             // 2: chalk.common.v1.GetFeatureValuesChartResponse
	(*GetFeatureValuesTimeSeriesChartRequest)(nil),    // 3: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest
	(*GetFeatureValuesTimeSeriesChartResponse)(nil),   // 4: chalk.common.v1.GetFeatureValuesTimeSeriesChartResponse
	(*GetFeatureValuesTimeSeriesChartV2Request)(nil),  // 5: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request
	(*GetFeatureValuesTimeSeriesChartV2Response)(nil), // 6: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Response
	(*Chart)(nil),                   // 7: chalk.common.v1.Chart
	(*durationpb.Duration)(nil),     // 8: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),   // 9: google.protobuf.Timestamp
	(*v1.DenseTimeSeriesChart)(nil), // 10: chalk.chart.v1.DenseTimeSeriesChart
}
var file_chalk_common_v1_feature_values_proto_depIdxs = []int32{
	0,  // 0: chalk.common.v1.GetFeatureValuesChartRequest.aggregate_by:type_name -> chalk.common.v1.FeatureValueAggregation
	7,  // 1: chalk.common.v1.GetFeatureValuesChartResponse.chart:type_name -> chalk.common.v1.Chart
	0,  // 2: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.aggregate_by:type_name -> chalk.common.v1.FeatureValueAggregation
	8,  // 3: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.window_period:type_name -> google.protobuf.Duration
	9,  // 4: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.start_timestamp_inclusive:type_name -> google.protobuf.Timestamp
	9,  // 5: chalk.common.v1.GetFeatureValuesTimeSeriesChartRequest.end_timestamp_exclusive:type_name -> google.protobuf.Timestamp
	0,  // 6: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.aggregate_by:type_name -> chalk.common.v1.FeatureValueAggregation
	8,  // 7: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.window_period:type_name -> google.protobuf.Duration
	9,  // 8: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.start_timestamp_inclusive:type_name -> google.protobuf.Timestamp
	9,  // 9: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Request.end_timestamp_exclusive:type_name -> google.protobuf.Timestamp
	10, // 10: chalk.common.v1.GetFeatureValuesTimeSeriesChartV2Response.chart:type_name -> chalk.chart.v1.DenseTimeSeriesChart
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_feature_values_proto_init() }
func file_chalk_common_v1_feature_values_proto_init() {
	if File_chalk_common_v1_feature_values_proto != nil {
		return
	}
	file_chalk_common_v1_chart_proto_init()
	file_chalk_common_v1_feature_values_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_common_v1_feature_values_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_common_v1_feature_values_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_common_v1_feature_values_proto_rawDesc), len(file_chalk_common_v1_feature_values_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_feature_values_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_feature_values_proto_depIdxs,
		EnumInfos:         file_chalk_common_v1_feature_values_proto_enumTypes,
		MessageInfos:      file_chalk_common_v1_feature_values_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_feature_values_proto = out.File
	file_chalk_common_v1_feature_values_proto_goTypes = nil
	file_chalk_common_v1_feature_values_proto_depIdxs = nil
}
