// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/common/v1/query_values.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: Marked as deprecated in chalk/common/v1/query_values.proto.
type OperationIdTableIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If you want the results for a particular operation id, no need to look up the value tables separately.
	// The engine will do that for you
	OperationId   string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationIdTableIdentifier) Reset() {
	*x = OperationIdTableIdentifier{}
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationIdTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationIdTableIdentifier) ProtoMessage() {}

func (x *OperationIdTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationIdTableIdentifier.ProtoReflect.Descriptor instead.
func (*OperationIdTableIdentifier) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_values_proto_rawDescGZIP(), []int{0}
}

func (x *OperationIdTableIdentifier) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/common/v1/query_values.proto.
type TableNameTableIdentifier struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	TableName string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Optionally, you can filter. Specifying any filters will result in a join against the query log table.
	Filters       *QueryLogFilters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableNameTableIdentifier) Reset() {
	*x = TableNameTableIdentifier{}
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableNameTableIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableNameTableIdentifier) ProtoMessage() {}

func (x *TableNameTableIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableNameTableIdentifier.ProtoReflect.Descriptor instead.
func (*TableNameTableIdentifier) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_values_proto_rawDescGZIP(), []int{1}
}

func (x *TableNameTableIdentifier) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableNameTableIdentifier) GetFilters() *QueryLogFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Internal protobuf representing a next page token. Contains the operation id and the query timestamp for the last row in the pervious batch. Results are sorted query timestamp
// then by operation id lexagraphically then by row id, so this is all we need to know where the next page begins
//
// Deprecated: Marked as deprecated in chalk/common/v1/query_values.proto.
type GetQueryValuesPageToken struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	QueryTimestampHwm *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=query_timestamp_hwm,json=queryTimestampHwm,proto3" json:"query_timestamp_hwm,omitempty"`
	OperationIdHwm    string                 `protobuf:"bytes,2,opt,name=operation_id_hwm,json=operationIdHwm,proto3" json:"operation_id_hwm,omitempty"`
	RowIdHwm          int64                  `protobuf:"varint,3,opt,name=row_id_hwm,json=rowIdHwm,proto3" json:"row_id_hwm,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetQueryValuesPageToken) Reset() {
	*x = GetQueryValuesPageToken{}
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryValuesPageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryValuesPageToken) ProtoMessage() {}

func (x *GetQueryValuesPageToken) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryValuesPageToken.ProtoReflect.Descriptor instead.
func (*GetQueryValuesPageToken) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_values_proto_rawDescGZIP(), []int{2}
}

func (x *GetQueryValuesPageToken) GetQueryTimestampHwm() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestampHwm
	}
	return nil
}

func (x *GetQueryValuesPageToken) GetOperationIdHwm() string {
	if x != nil {
		return x.OperationIdHwm
	}
	return ""
}

func (x *GetQueryValuesPageToken) GetRowIdHwm() int64 {
	if x != nil {
		return x.RowIdHwm
	}
	return 0
}

// Deprecated: Marked as deprecated in chalk/common/v1/query_values.proto.
type GetQueryValuesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TableIdentifier:
	//
	//	*GetQueryValuesRequest_OperationIdIdentifier
	//	*GetQueryValuesRequest_TableNameIdentifier
	TableIdentifier isGetQueryValuesRequest_TableIdentifier `protobuf_oneof:"table_identifier"`
	// The query log table is partitioned / sorted by timestamp, so we must provide these
	// for the queries to be efficient, even if we are querying for a single operation id
	// This is always required.
	// If you know the operation id, then its feasible that you know the exact query timestamp, too.
	QueryTimestampLowerBoundInclusive *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=query_timestamp_lower_bound_inclusive,json=queryTimestampLowerBoundInclusive,proto3" json:"query_timestamp_lower_bound_inclusive,omitempty"`
	// If the upper bound is ommitted, then the lower bound will be used as an exact (equality) filter
	QueryTimestampUpperBoundExclusive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=query_timestamp_upper_bound_exclusive,json=queryTimestampUpperBoundExclusive,proto3,oneof" json:"query_timestamp_upper_bound_exclusive,omitempty"`
	// If you're insterested in a subset of features, specify those here. Other columns won't be selected from the database, which will help reduce query costs.
	// If empty, all features will be returned
	Features []string `protobuf:"bytes,5,rep,name=features,proto3" json:"features,omitempty"`
	// The (maximum) page size for results. If zero, then the server picks.
	PageSize int32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// When dealing with paginated responses, specify the next token to resume where you left off. The subsequent request must be identicial to the original (except for the value of the next_token)
	// Leave empty if querying for the zeroth page.
	PageToken     string `protobuf:"bytes,8,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueryValuesRequest) Reset() {
	*x = GetQueryValuesRequest{}
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryValuesRequest) ProtoMessage() {}

func (x *GetQueryValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryValuesRequest.ProtoReflect.Descriptor instead.
func (*GetQueryValuesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_values_proto_rawDescGZIP(), []int{3}
}

func (x *GetQueryValuesRequest) GetTableIdentifier() isGetQueryValuesRequest_TableIdentifier {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

func (x *GetQueryValuesRequest) GetOperationIdIdentifier() *OperationIdTableIdentifier {
	if x != nil {
		if x, ok := x.TableIdentifier.(*GetQueryValuesRequest_OperationIdIdentifier); ok {
			return x.OperationIdIdentifier
		}
	}
	return nil
}

func (x *GetQueryValuesRequest) GetTableNameIdentifier() *TableNameTableIdentifier {
	if x != nil {
		if x, ok := x.TableIdentifier.(*GetQueryValuesRequest_TableNameIdentifier); ok {
			return x.TableNameIdentifier
		}
	}
	return nil
}

func (x *GetQueryValuesRequest) GetQueryTimestampLowerBoundInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestampLowerBoundInclusive
	}
	return nil
}

func (x *GetQueryValuesRequest) GetQueryTimestampUpperBoundExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestampUpperBoundExclusive
	}
	return nil
}

func (x *GetQueryValuesRequest) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GetQueryValuesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetQueryValuesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isGetQueryValuesRequest_TableIdentifier interface {
	isGetQueryValuesRequest_TableIdentifier()
}

type GetQueryValuesRequest_OperationIdIdentifier struct {
	// Forcing the client to specify the table name can be a bit narly. Instead, for use case 1), it can be easier to allow the client to specify the operation id,
	// and the engine can figure out what table to query.
	OperationIdIdentifier *OperationIdTableIdentifier `protobuf:"bytes,1,opt,name=operation_id_identifier,json=operationIdIdentifier,proto3,oneof"`
}

type GetQueryValuesRequest_TableNameIdentifier struct {
	// For use case 2, you have to specify which table name to look up, if you want to query across multiple queries
	TableNameIdentifier *TableNameTableIdentifier `protobuf:"bytes,2,opt,name=table_name_identifier,json=tableNameIdentifier,proto3,oneof"`
}

func (*GetQueryValuesRequest_OperationIdIdentifier) isGetQueryValuesRequest_TableIdentifier() {}

func (*GetQueryValuesRequest_TableNameIdentifier) isGetQueryValuesRequest_TableIdentifier() {}

// Deprecated: Marked as deprecated in chalk/common/v1/query_values.proto.
type GetQueryValuesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If non-empty, call this endpoint again, with this next token to get the next page of responses.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The response payload. Defining as a one-of to future-proof it should we decide to support multiple encodings (parquet, feather, ...)
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*GetQueryValuesResponse_Parquet
	Payload       isGetQueryValuesResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueryValuesResponse) Reset() {
	*x = GetQueryValuesResponse{}
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueryValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryValuesResponse) ProtoMessage() {}

func (x *GetQueryValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_query_values_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryValuesResponse.ProtoReflect.Descriptor instead.
func (*GetQueryValuesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_query_values_proto_rawDescGZIP(), []int{4}
}

func (x *GetQueryValuesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetQueryValuesResponse) GetPayload() isGetQueryValuesResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GetQueryValuesResponse) GetParquet() []byte {
	if x != nil {
		if x, ok := x.Payload.(*GetQueryValuesResponse_Parquet); ok {
			return x.Parquet
		}
	}
	return nil
}

type isGetQueryValuesResponse_Payload interface {
	isGetQueryValuesResponse_Payload()
}

type GetQueryValuesResponse_Parquet struct {
	Parquet []byte `protobuf:"bytes,2,opt,name=parquet,proto3,oneof"`
}

func (*GetQueryValuesResponse_Parquet) isGetQueryValuesResponse_Payload() {}

var File_chalk_common_v1_query_values_proto protoreflect.FileDescriptor

const file_chalk_common_v1_query_values_proto_rawDesc = "" +
	"\n" +
	"\"chalk/common/v1/query_values.proto\x12\x0fchalk.common.v1\x1a\x1fchalk/common/v1/query_log.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"C\n" +
	"\x1aOperationIdTableIdentifier\x12!\n" +
	"\foperation_id\x18\x01 \x01(\tR\voperationId:\x02\x18\x01\"y\n" +
	"\x18TableNameTableIdentifier\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12:\n" +
	"\afilters\x18\x02 \x01(\v2 .chalk.common.v1.QueryLogFiltersR\afilters:\x02\x18\x01\"\xb1\x01\n" +
	"\x17GetQueryValuesPageToken\x12J\n" +
	"\x13query_timestamp_hwm\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x11queryTimestampHwm\x12(\n" +
	"\x10operation_id_hwm\x18\x02 \x01(\tR\x0eoperationIdHwm\x12\x1c\n" +
	"\n" +
	"row_id_hwm\x18\x03 \x01(\x03R\browIdHwm:\x02\x18\x01\"\xda\x04\n" +
	"\x15GetQueryValuesRequest\x12e\n" +
	"\x17operation_id_identifier\x18\x01 \x01(\v2+.chalk.common.v1.OperationIdTableIdentifierH\x00R\x15operationIdIdentifier\x12_\n" +
	"\x15table_name_identifier\x18\x02 \x01(\v2).chalk.common.v1.TableNameTableIdentifierH\x00R\x13tableNameIdentifier\x12l\n" +
	"%query_timestamp_lower_bound_inclusive\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR!queryTimestampLowerBoundInclusive\x12q\n" +
	"%query_timestamp_upper_bound_exclusive\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x01R!queryTimestampUpperBoundExclusive\x88\x01\x01\x12\x1a\n" +
	"\bfeatures\x18\x05 \x03(\tR\bfeatures\x12\x1b\n" +
	"\tpage_size\x18\a \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\b \x01(\tR\tpageToken:\x02\x18\x01B\x12\n" +
	"\x10table_identifierB(\n" +
	"&_query_timestamp_upper_bound_exclusive\"k\n" +
	"\x16GetQueryValuesResponse\x12&\n" +
	"\x0fnext_page_token\x18\x01 \x01(\tR\rnextPageToken\x12\x1a\n" +
	"\aparquet\x18\x02 \x01(\fH\x00R\aparquet:\x02\x18\x01B\t\n" +
	"\apayloadB\xc0\x01\n" +
	"\x13com.chalk.common.v1B\x10QueryValuesProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/common/v1;commonv1\xa2\x02\x03CCX\xaa\x02\x0fChalk.Common.V1\xca\x02\x0fChalk\\Common\\V1\xe2\x02\x1bChalk\\Common\\V1\\GPBMetadata\xea\x02\x11Chalk::Common::V1b\x06proto3"

var (
	file_chalk_common_v1_query_values_proto_rawDescOnce sync.Once
	file_chalk_common_v1_query_values_proto_rawDescData []byte
)

func file_chalk_common_v1_query_values_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_query_values_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_query_values_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_common_v1_query_values_proto_rawDesc), len(file_chalk_common_v1_query_values_proto_rawDesc)))
	})
	return file_chalk_common_v1_query_values_proto_rawDescData
}

var file_chalk_common_v1_query_values_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chalk_common_v1_query_values_proto_goTypes = []any{
	(*OperationIdTableIdentifier)(nil), // 0: chalk.common.v1.OperationIdTableIdentifier
	(*TableNameTableIdentifier)(nil),   // 1: chalk.common.v1.TableNameTableIdentifier
	(*GetQueryValuesPageToken)(nil),    // 2: chalk.common.v1.GetQueryValuesPageToken
	(*GetQueryValuesRequest)(nil),      // 3: chalk.common.v1.GetQueryValuesRequest
	(*GetQueryValuesResponse)(nil),     // 4: chalk.common.v1.GetQueryValuesResponse
	(*QueryLogFilters)(nil),            // 5: chalk.common.v1.QueryLogFilters
	(*timestamppb.Timestamp)(nil),      // 6: google.protobuf.Timestamp
}
var file_chalk_common_v1_query_values_proto_depIdxs = []int32{
	5, // 0: chalk.common.v1.TableNameTableIdentifier.filters:type_name -> chalk.common.v1.QueryLogFilters
	6, // 1: chalk.common.v1.GetQueryValuesPageToken.query_timestamp_hwm:type_name -> google.protobuf.Timestamp
	0, // 2: chalk.common.v1.GetQueryValuesRequest.operation_id_identifier:type_name -> chalk.common.v1.OperationIdTableIdentifier
	1, // 3: chalk.common.v1.GetQueryValuesRequest.table_name_identifier:type_name -> chalk.common.v1.TableNameTableIdentifier
	6, // 4: chalk.common.v1.GetQueryValuesRequest.query_timestamp_lower_bound_inclusive:type_name -> google.protobuf.Timestamp
	6, // 5: chalk.common.v1.GetQueryValuesRequest.query_timestamp_upper_bound_exclusive:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_query_values_proto_init() }
func file_chalk_common_v1_query_values_proto_init() {
	if File_chalk_common_v1_query_values_proto != nil {
		return
	}
	file_chalk_common_v1_query_log_proto_init()
	file_chalk_common_v1_query_values_proto_msgTypes[3].OneofWrappers = []any{
		(*GetQueryValuesRequest_OperationIdIdentifier)(nil),
		(*GetQueryValuesRequest_TableNameIdentifier)(nil),
	}
	file_chalk_common_v1_query_values_proto_msgTypes[4].OneofWrappers = []any{
		(*GetQueryValuesResponse_Parquet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_common_v1_query_values_proto_rawDesc), len(file_chalk_common_v1_query_values_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_query_values_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_query_values_proto_depIdxs,
		MessageInfos:      file_chalk_common_v1_query_values_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_query_values_proto = out.File
	file_chalk_common_v1_query_values_proto_goTypes = nil
	file_chalk_common_v1_query_values_proto_depIdxs = nil
}
