// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/common/v2/execute_plan.proto

package commonv2

import (
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/expression/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plan to execute.
	//
	// Types that are assignable to Payload:
	//
	//	*ExecutePlanRequest_LazyFrameCalls
	Payload          isExecutePlanRequest_Payload `protobuf_oneof:"payload"`
	ExecutionOptions *ExecutionOptions            `protobuf:"bytes,10,opt,name=execution_options,json=executionOptions,proto3,oneof" json:"execution_options,omitempty"`
	PlanningOptions  *PlanningOptions             `protobuf:"bytes,11,opt,name=planning_options,json=planningOptions,proto3,oneof" json:"planning_options,omitempty"`
}

func (x *ExecutePlanRequest) Reset() {
	*x = ExecutePlanRequest{}
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlanRequest) ProtoMessage() {}

func (x *ExecutePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlanRequest.ProtoReflect.Descriptor instead.
func (*ExecutePlanRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v2_execute_plan_proto_rawDescGZIP(), []int{0}
}

func (m *ExecutePlanRequest) GetPayload() isExecutePlanRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ExecutePlanRequest) GetLazyFrameCalls() *v1.LogicalExprNode {
	if x, ok := x.GetPayload().(*ExecutePlanRequest_LazyFrameCalls); ok {
		return x.LazyFrameCalls
	}
	return nil
}

func (x *ExecutePlanRequest) GetExecutionOptions() *ExecutionOptions {
	if x != nil {
		return x.ExecutionOptions
	}
	return nil
}

func (x *ExecutePlanRequest) GetPlanningOptions() *PlanningOptions {
	if x != nil {
		return x.PlanningOptions
	}
	return nil
}

type isExecutePlanRequest_Payload interface {
	isExecutePlanRequest_Payload()
}

type ExecutePlanRequest_LazyFrameCalls struct {
	LazyFrameCalls *v1.LogicalExprNode `protobuf:"bytes,1,opt,name=lazy_frame_calls,json=lazyFrameCalls,proto3,oneof"`
}

func (*ExecutePlanRequest_LazyFrameCalls) isExecutePlanRequest_Payload() {}

type ExecutePlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The result of the plan execution.
	//
	// Types that are assignable to Payload:
	//
	//	*ExecutePlanResponse_Feather
	Payload             isExecutePlanResponse_Payload `protobuf_oneof:"payload"`
	Errors              []*v11.ChalkError             `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ExecutionMetadata   *ExecutionMetadata            `protobuf:"bytes,10,opt,name=execution_metadata,json=executionMetadata,proto3,oneof" json:"execution_metadata,omitempty"`
	EnvironmentMetadata *EnvironmentMetadata          `protobuf:"bytes,11,opt,name=environment_metadata,json=environmentMetadata,proto3,oneof" json:"environment_metadata,omitempty"`
	Meta                *ExecutePlanRequest           `protobuf:"bytes,20,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (x *ExecutePlanResponse) Reset() {
	*x = ExecutePlanResponse{}
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlanResponse) ProtoMessage() {}

func (x *ExecutePlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlanResponse.ProtoReflect.Descriptor instead.
func (*ExecutePlanResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v2_execute_plan_proto_rawDescGZIP(), []int{1}
}

func (m *ExecutePlanResponse) GetPayload() isExecutePlanResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ExecutePlanResponse) GetFeather() []byte {
	if x, ok := x.GetPayload().(*ExecutePlanResponse_Feather); ok {
		return x.Feather
	}
	return nil
}

func (x *ExecutePlanResponse) GetErrors() []*v11.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ExecutePlanResponse) GetExecutionMetadata() *ExecutionMetadata {
	if x != nil {
		return x.ExecutionMetadata
	}
	return nil
}

func (x *ExecutePlanResponse) GetEnvironmentMetadata() *EnvironmentMetadata {
	if x != nil {
		return x.EnvironmentMetadata
	}
	return nil
}

func (x *ExecutePlanResponse) GetMeta() *ExecutePlanRequest {
	if x != nil {
		return x.Meta
	}
	return nil
}

type isExecutePlanResponse_Payload interface {
	isExecutePlanResponse_Payload()
}

type ExecutePlanResponse_Feather struct {
	// The result is returned as a serialized Feather file.
	Feather []byte `protobuf:"bytes,1,opt,name=feather,proto3,oneof"`
}

func (*ExecutePlanResponse_Feather) isExecutePlanResponse_Payload() {}

var File_chalk_common_v2_execute_plan_proto protoreflect.FileDescriptor

var file_chalk_common_v2_execute_plan_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x02,
	0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x7a, 0x79, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x12,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x11,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x13, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x42, 0xc0, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x42, 0x10, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x32, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x43,
	0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x56, 0x32, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_common_v2_execute_plan_proto_rawDescOnce sync.Once
	file_chalk_common_v2_execute_plan_proto_rawDescData = file_chalk_common_v2_execute_plan_proto_rawDesc
)

func file_chalk_common_v2_execute_plan_proto_rawDescGZIP() []byte {
	file_chalk_common_v2_execute_plan_proto_rawDescOnce.Do(func() {
		file_chalk_common_v2_execute_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v2_execute_plan_proto_rawDescData)
	})
	return file_chalk_common_v2_execute_plan_proto_rawDescData
}

var file_chalk_common_v2_execute_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chalk_common_v2_execute_plan_proto_goTypes = []any{
	(*ExecutePlanRequest)(nil),  // 0: chalk.common.v2.ExecutePlanRequest
	(*ExecutePlanResponse)(nil), // 1: chalk.common.v2.ExecutePlanResponse
	(*v1.LogicalExprNode)(nil),  // 2: chalk.expression.v1.LogicalExprNode
	(*ExecutionOptions)(nil),    // 3: chalk.common.v2.ExecutionOptions
	(*PlanningOptions)(nil),     // 4: chalk.common.v2.PlanningOptions
	(*v11.ChalkError)(nil),      // 5: chalk.common.v1.ChalkError
	(*ExecutionMetadata)(nil),   // 6: chalk.common.v2.ExecutionMetadata
	(*EnvironmentMetadata)(nil), // 7: chalk.common.v2.EnvironmentMetadata
}
var file_chalk_common_v2_execute_plan_proto_depIdxs = []int32{
	2, // 0: chalk.common.v2.ExecutePlanRequest.lazy_frame_calls:type_name -> chalk.expression.v1.LogicalExprNode
	3, // 1: chalk.common.v2.ExecutePlanRequest.execution_options:type_name -> chalk.common.v2.ExecutionOptions
	4, // 2: chalk.common.v2.ExecutePlanRequest.planning_options:type_name -> chalk.common.v2.PlanningOptions
	5, // 3: chalk.common.v2.ExecutePlanResponse.errors:type_name -> chalk.common.v1.ChalkError
	6, // 4: chalk.common.v2.ExecutePlanResponse.execution_metadata:type_name -> chalk.common.v2.ExecutionMetadata
	7, // 5: chalk.common.v2.ExecutePlanResponse.environment_metadata:type_name -> chalk.common.v2.EnvironmentMetadata
	0, // 6: chalk.common.v2.ExecutePlanResponse.meta:type_name -> chalk.common.v2.ExecutePlanRequest
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_chalk_common_v2_execute_plan_proto_init() }
func file_chalk_common_v2_execute_plan_proto_init() {
	if File_chalk_common_v2_execute_plan_proto != nil {
		return
	}
	file_chalk_common_v2_metadata_proto_init()
	file_chalk_common_v2_options_proto_init()
	file_chalk_common_v2_execute_plan_proto_msgTypes[0].OneofWrappers = []any{
		(*ExecutePlanRequest_LazyFrameCalls)(nil),
	}
	file_chalk_common_v2_execute_plan_proto_msgTypes[1].OneofWrappers = []any{
		(*ExecutePlanResponse_Feather)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v2_execute_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v2_execute_plan_proto_goTypes,
		DependencyIndexes: file_chalk_common_v2_execute_plan_proto_depIdxs,
		MessageInfos:      file_chalk_common_v2_execute_plan_proto_msgTypes,
	}.Build()
	File_chalk_common_v2_execute_plan_proto = out.File
	file_chalk_common_v2_execute_plan_proto_rawDesc = nil
	file_chalk_common_v2_execute_plan_proto_goTypes = nil
	file_chalk_common_v2_execute_plan_proto_depIdxs = nil
}
