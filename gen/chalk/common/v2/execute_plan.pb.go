// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/common/v2/execute_plan.proto

package commonv2

import (
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/expression/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecutePlanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The plan to execute.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*ExecutePlanRequest_LazyFrameCalls
	Payload          isExecutePlanRequest_Payload `protobuf_oneof:"payload"`
	ExecutionOptions *ExecutionOptions            `protobuf:"bytes,10,opt,name=execution_options,json=executionOptions,proto3,oneof" json:"execution_options,omitempty"`
	PlanningOptions  *PlanningOptions             `protobuf:"bytes,11,opt,name=planning_options,json=planningOptions,proto3,oneof" json:"planning_options,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExecutePlanRequest) Reset() {
	*x = ExecutePlanRequest{}
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlanRequest) ProtoMessage() {}

func (x *ExecutePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlanRequest.ProtoReflect.Descriptor instead.
func (*ExecutePlanRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v2_execute_plan_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutePlanRequest) GetPayload() isExecutePlanRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ExecutePlanRequest) GetLazyFrameCalls() *v1.LogicalExprNode {
	if x != nil {
		if x, ok := x.Payload.(*ExecutePlanRequest_LazyFrameCalls); ok {
			return x.LazyFrameCalls
		}
	}
	return nil
}

func (x *ExecutePlanRequest) GetExecutionOptions() *ExecutionOptions {
	if x != nil {
		return x.ExecutionOptions
	}
	return nil
}

func (x *ExecutePlanRequest) GetPlanningOptions() *PlanningOptions {
	if x != nil {
		return x.PlanningOptions
	}
	return nil
}

type isExecutePlanRequest_Payload interface {
	isExecutePlanRequest_Payload()
}

type ExecutePlanRequest_LazyFrameCalls struct {
	LazyFrameCalls *v1.LogicalExprNode `protobuf:"bytes,1,opt,name=lazy_frame_calls,json=lazyFrameCalls,proto3,oneof"`
}

func (*ExecutePlanRequest_LazyFrameCalls) isExecutePlanRequest_Payload() {}

type ExecutePlanResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The result of the plan execution.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*ExecutePlanResponse_Feather
	Payload             isExecutePlanResponse_Payload `protobuf_oneof:"payload"`
	Errors              []*v11.ChalkError             `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ExecutionMetadata   *ExecutionMetadata            `protobuf:"bytes,10,opt,name=execution_metadata,json=executionMetadata,proto3,oneof" json:"execution_metadata,omitempty"`
	EnvironmentMetadata *EnvironmentMetadata          `protobuf:"bytes,11,opt,name=environment_metadata,json=environmentMetadata,proto3,oneof" json:"environment_metadata,omitempty"`
	Meta                *ExecutePlanRequest           `protobuf:"bytes,20,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExecutePlanResponse) Reset() {
	*x = ExecutePlanResponse{}
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlanResponse) ProtoMessage() {}

func (x *ExecutePlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v2_execute_plan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlanResponse.ProtoReflect.Descriptor instead.
func (*ExecutePlanResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v2_execute_plan_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutePlanResponse) GetPayload() isExecutePlanResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ExecutePlanResponse) GetFeather() []byte {
	if x != nil {
		if x, ok := x.Payload.(*ExecutePlanResponse_Feather); ok {
			return x.Feather
		}
	}
	return nil
}

func (x *ExecutePlanResponse) GetErrors() []*v11.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ExecutePlanResponse) GetExecutionMetadata() *ExecutionMetadata {
	if x != nil {
		return x.ExecutionMetadata
	}
	return nil
}

func (x *ExecutePlanResponse) GetEnvironmentMetadata() *EnvironmentMetadata {
	if x != nil {
		return x.EnvironmentMetadata
	}
	return nil
}

func (x *ExecutePlanResponse) GetMeta() *ExecutePlanRequest {
	if x != nil {
		return x.Meta
	}
	return nil
}

type isExecutePlanResponse_Payload interface {
	isExecutePlanResponse_Payload()
}

type ExecutePlanResponse_Feather struct {
	// The result is returned as a serialized Feather file.
	Feather []byte `protobuf:"bytes,1,opt,name=feather,proto3,oneof"`
}

func (*ExecutePlanResponse_Feather) isExecutePlanResponse_Payload() {}

var File_chalk_common_v2_execute_plan_proto protoreflect.FileDescriptor

const file_chalk_common_v2_execute_plan_proto_rawDesc = "" +
	"\n" +
	"\"chalk/common/v2/execute_plan.proto\x12\x0fchalk.common.v2\x1a!chalk/common/v1/chalk_error.proto\x1a\x1echalk/common/v2/metadata.proto\x1a\x1dchalk/common/v2/options.proto\x1a$chalk/expression/v1/expression.proto\"\xc3\x02\n" +
	"\x12ExecutePlanRequest\x12P\n" +
	"\x10lazy_frame_calls\x18\x01 \x01(\v2$.chalk.expression.v1.LogicalExprNodeH\x00R\x0elazyFrameCalls\x12S\n" +
	"\x11execution_options\x18\n" +
	" \x01(\v2!.chalk.common.v2.ExecutionOptionsH\x01R\x10executionOptions\x88\x01\x01\x12P\n" +
	"\x10planning_options\x18\v \x01(\v2 .chalk.common.v2.PlanningOptionsH\x02R\x0fplanningOptions\x88\x01\x01B\t\n" +
	"\apayloadB\x14\n" +
	"\x12_execution_optionsB\x13\n" +
	"\x11_planning_options\"\x9e\x03\n" +
	"\x13ExecutePlanResponse\x12\x1a\n" +
	"\afeather\x18\x01 \x01(\fH\x00R\afeather\x123\n" +
	"\x06errors\x18\x02 \x03(\v2\x1b.chalk.common.v1.ChalkErrorR\x06errors\x12V\n" +
	"\x12execution_metadata\x18\n" +
	" \x01(\v2\".chalk.common.v2.ExecutionMetadataH\x01R\x11executionMetadata\x88\x01\x01\x12\\\n" +
	"\x14environment_metadata\x18\v \x01(\v2$.chalk.common.v2.EnvironmentMetadataH\x02R\x13environmentMetadata\x88\x01\x01\x12<\n" +
	"\x04meta\x18\x14 \x01(\v2#.chalk.common.v2.ExecutePlanRequestH\x03R\x04meta\x88\x01\x01B\t\n" +
	"\apayloadB\x15\n" +
	"\x13_execution_metadataB\x17\n" +
	"\x15_environment_metadataB\a\n" +
	"\x05_metaB\xc0\x01\n" +
	"\x13com.chalk.common.v2B\x10ExecutePlanProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/common/v2;commonv2\xa2\x02\x03CCX\xaa\x02\x0fChalk.Common.V2\xca\x02\x0fChalk\\Common\\V2\xe2\x02\x1bChalk\\Common\\V2\\GPBMetadata\xea\x02\x11Chalk::Common::V2b\x06proto3"

var (
	file_chalk_common_v2_execute_plan_proto_rawDescOnce sync.Once
	file_chalk_common_v2_execute_plan_proto_rawDescData []byte
)

func file_chalk_common_v2_execute_plan_proto_rawDescGZIP() []byte {
	file_chalk_common_v2_execute_plan_proto_rawDescOnce.Do(func() {
		file_chalk_common_v2_execute_plan_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_common_v2_execute_plan_proto_rawDesc), len(file_chalk_common_v2_execute_plan_proto_rawDesc)))
	})
	return file_chalk_common_v2_execute_plan_proto_rawDescData
}

var file_chalk_common_v2_execute_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chalk_common_v2_execute_plan_proto_goTypes = []any{
	(*ExecutePlanRequest)(nil),  // 0: chalk.common.v2.ExecutePlanRequest
	(*ExecutePlanResponse)(nil), // 1: chalk.common.v2.ExecutePlanResponse
	(*v1.LogicalExprNode)(nil),  // 2: chalk.expression.v1.LogicalExprNode
	(*ExecutionOptions)(nil),    // 3: chalk.common.v2.ExecutionOptions
	(*PlanningOptions)(nil),     // 4: chalk.common.v2.PlanningOptions
	(*v11.ChalkError)(nil),      // 5: chalk.common.v1.ChalkError
	(*ExecutionMetadata)(nil),   // 6: chalk.common.v2.ExecutionMetadata
	(*EnvironmentMetadata)(nil), // 7: chalk.common.v2.EnvironmentMetadata
}
var file_chalk_common_v2_execute_plan_proto_depIdxs = []int32{
	2, // 0: chalk.common.v2.ExecutePlanRequest.lazy_frame_calls:type_name -> chalk.expression.v1.LogicalExprNode
	3, // 1: chalk.common.v2.ExecutePlanRequest.execution_options:type_name -> chalk.common.v2.ExecutionOptions
	4, // 2: chalk.common.v2.ExecutePlanRequest.planning_options:type_name -> chalk.common.v2.PlanningOptions
	5, // 3: chalk.common.v2.ExecutePlanResponse.errors:type_name -> chalk.common.v1.ChalkError
	6, // 4: chalk.common.v2.ExecutePlanResponse.execution_metadata:type_name -> chalk.common.v2.ExecutionMetadata
	7, // 5: chalk.common.v2.ExecutePlanResponse.environment_metadata:type_name -> chalk.common.v2.EnvironmentMetadata
	0, // 6: chalk.common.v2.ExecutePlanResponse.meta:type_name -> chalk.common.v2.ExecutePlanRequest
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_chalk_common_v2_execute_plan_proto_init() }
func file_chalk_common_v2_execute_plan_proto_init() {
	if File_chalk_common_v2_execute_plan_proto != nil {
		return
	}
	file_chalk_common_v2_metadata_proto_init()
	file_chalk_common_v2_options_proto_init()
	file_chalk_common_v2_execute_plan_proto_msgTypes[0].OneofWrappers = []any{
		(*ExecutePlanRequest_LazyFrameCalls)(nil),
	}
	file_chalk_common_v2_execute_plan_proto_msgTypes[1].OneofWrappers = []any{
		(*ExecutePlanResponse_Feather)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_common_v2_execute_plan_proto_rawDesc), len(file_chalk_common_v2_execute_plan_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v2_execute_plan_proto_goTypes,
		DependencyIndexes: file_chalk_common_v2_execute_plan_proto_depIdxs,
		MessageInfos:      file_chalk_common_v2_execute_plan_proto_msgTypes,
	}.Build()
	File_chalk_common_v2_execute_plan_proto = out.File
	file_chalk_common_v2_execute_plan_proto_goTypes = nil
	file_chalk_common_v2_execute_plan_proto_depIdxs = nil
}
