// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/auth/v1/permissions.proto

package authv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/utils/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Permission int32

const (
	// Default value -- should never be set.
	Permission_PERMISSION_UNSPECIFIED Permission = 0
	// Only used for creating a new token
	Permission_PERMISSION_INSECURE_UNAUTHENTICATED Permission = 1
	// User is authenticated FOR THE ENVIRONMENT. This permissions should be used sparingly
	// (e.g. for ping checks that shouldn't be exposed to the public)
	Permission_PERMISSION_AUTHENTICATED Permission = 2
	// Query online features.
	Permission_PERMISSION_QUERY_ONLINE Permission = 3
	// Query offline features.
	Permission_PERMISSION_QUERY_OFFLINE Permission = 4
	// Create a new chart or alert
	Permission_PERMISSION_MONITORING_CREATE Permission = 5
	// See charts and alerts
	Permission_PERMISSION_MONITORING_READ Permission = 6
	// Add team members to your organization
	Permission_PERMISSION_TEAM_ADD Permission = 7
	// Remove a team member
	Permission_PERMISSION_TEAM_DELETE Permission = 8
	// See the team members in your organization
	Permission_PERMISSION_TEAM_LIST Permission = 9
	// Configure authentication options for your organization
	Permission_PERMISSION_TEAM_ADMIN Permission = 10
	// Read information about deployments.
	Permission_PERMISSION_DEPLOY_READ Permission = 11
	// Create a new deployment.
	Permission_PERMISSION_DEPLOY_CREATE Permission = 12
	// Create a new branch deployment.
	Permission_PERMISSION_DEPLOY_PREVIEW Permission = 13
	// Redeploy an existing deployment.
	Permission_PERMISSION_DEPLOY_REDEPLOY Permission = 14
	// Read logs from resolvers.
	Permission_PERMISSION_LOGS_LIST Permission = 15
	// Read the scheduled runs.
	Permission_PERMISSION_CRON_READ Permission = 16
	// Trigger a new scheduled run.
	Permission_PERMISSION_CRON_CREATE Permission = 17
	// Create, modify, or delete secret values.
	Permission_PERMISSION_SECRETS_WRITE Permission = 18
	// Decrypt secret values.
	Permission_PERMISSION_SECRETS_DECRYPT Permission = 19
	// See the list of available secrets. Reading secrets is not allowed with this permission.
	Permission_PERMISSION_SECRETS_LIST Permission = 20
	// Create, modify, or delete service tokens.
	Permission_PERMISSION_TOKENS_WRITE Permission = 21
	// List the service tokens and see client ids, but not client secrets.
	Permission_PERMISSION_TOKENS_LIST Permission = 22
	// View information about migrations.
	Permission_PERMISSION_MIGRATE_READ Permission = 23
	// Create a migration plan.
	Permission_PERMISSION_MIGRATE_PLAN Permission = 24
	// Execute a migration plan.
	Permission_PERMISSION_MIGRATE_EXECUTE Permission = 25
	// Create a new project
	Permission_PERMISSION_PROJECT_CREATE Permission = 26
	// Administer Chalk
	Permission_PERMISSION_CHALK_ADMIN Permission = 27
	// Read billing information
	Permission_PERMISSION_BILLING_READ Permission = 28
	// Manage Auth Service
	Permission_PERMISSION_AUTH_SERVICE_MANAGER Permission = 29
)

// Enum value maps for Permission.
var (
	Permission_name = map[int32]string{
		0:  "PERMISSION_UNSPECIFIED",
		1:  "PERMISSION_INSECURE_UNAUTHENTICATED",
		2:  "PERMISSION_AUTHENTICATED",
		3:  "PERMISSION_QUERY_ONLINE",
		4:  "PERMISSION_QUERY_OFFLINE",
		5:  "PERMISSION_MONITORING_CREATE",
		6:  "PERMISSION_MONITORING_READ",
		7:  "PERMISSION_TEAM_ADD",
		8:  "PERMISSION_TEAM_DELETE",
		9:  "PERMISSION_TEAM_LIST",
		10: "PERMISSION_TEAM_ADMIN",
		11: "PERMISSION_DEPLOY_READ",
		12: "PERMISSION_DEPLOY_CREATE",
		13: "PERMISSION_DEPLOY_PREVIEW",
		14: "PERMISSION_DEPLOY_REDEPLOY",
		15: "PERMISSION_LOGS_LIST",
		16: "PERMISSION_CRON_READ",
		17: "PERMISSION_CRON_CREATE",
		18: "PERMISSION_SECRETS_WRITE",
		19: "PERMISSION_SECRETS_DECRYPT",
		20: "PERMISSION_SECRETS_LIST",
		21: "PERMISSION_TOKENS_WRITE",
		22: "PERMISSION_TOKENS_LIST",
		23: "PERMISSION_MIGRATE_READ",
		24: "PERMISSION_MIGRATE_PLAN",
		25: "PERMISSION_MIGRATE_EXECUTE",
		26: "PERMISSION_PROJECT_CREATE",
		27: "PERMISSION_CHALK_ADMIN",
		28: "PERMISSION_BILLING_READ",
		29: "PERMISSION_AUTH_SERVICE_MANAGER",
	}
	Permission_value = map[string]int32{
		"PERMISSION_UNSPECIFIED":              0,
		"PERMISSION_INSECURE_UNAUTHENTICATED": 1,
		"PERMISSION_AUTHENTICATED":            2,
		"PERMISSION_QUERY_ONLINE":             3,
		"PERMISSION_QUERY_OFFLINE":            4,
		"PERMISSION_MONITORING_CREATE":        5,
		"PERMISSION_MONITORING_READ":          6,
		"PERMISSION_TEAM_ADD":                 7,
		"PERMISSION_TEAM_DELETE":              8,
		"PERMISSION_TEAM_LIST":                9,
		"PERMISSION_TEAM_ADMIN":               10,
		"PERMISSION_DEPLOY_READ":              11,
		"PERMISSION_DEPLOY_CREATE":            12,
		"PERMISSION_DEPLOY_PREVIEW":           13,
		"PERMISSION_DEPLOY_REDEPLOY":          14,
		"PERMISSION_LOGS_LIST":                15,
		"PERMISSION_CRON_READ":                16,
		"PERMISSION_CRON_CREATE":              17,
		"PERMISSION_SECRETS_WRITE":            18,
		"PERMISSION_SECRETS_DECRYPT":          19,
		"PERMISSION_SECRETS_LIST":             20,
		"PERMISSION_TOKENS_WRITE":             21,
		"PERMISSION_TOKENS_LIST":              22,
		"PERMISSION_MIGRATE_READ":             23,
		"PERMISSION_MIGRATE_PLAN":             24,
		"PERMISSION_MIGRATE_EXECUTE":          25,
		"PERMISSION_PROJECT_CREATE":           26,
		"PERMISSION_CHALK_ADMIN":              27,
		"PERMISSION_BILLING_READ":             28,
		"PERMISSION_AUTH_SERVICE_MANAGER":     29,
	}
)

func (x Permission) Enum() *Permission {
	p := new(Permission)
	*p = x
	return p
}

func (x Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_auth_v1_permissions_proto_enumTypes[0].Descriptor()
}

func (Permission) Type() protoreflect.EnumType {
	return &file_chalk_auth_v1_permissions_proto_enumTypes[0]
}

func (x Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Permission.Descriptor instead.
func (Permission) EnumDescriptor() ([]byte, []int) {
	return file_chalk_auth_v1_permissions_proto_rawDescGZIP(), []int{0}
}

var file_chalk_auth_v1_permissions_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Permission)(nil),
		Field:         2000,
		Name:          "chalk.auth.v1.permission",
		Tag:           "varint,2000,opt,name=permission,enum=chalk.auth.v1.Permission",
		Filename:      "chalk/auth/v1/permissions.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional chalk.auth.v1.Permission permission = 2000;
	E_Permission = &file_chalk_auth_v1_permissions_proto_extTypes[0]
)

var File_chalk_auth_v1_permissions_proto protoreflect.FileDescriptor

const file_chalk_auth_v1_permissions_proto_rawDesc = "" +
	"\n" +
	"\x1fchalk/auth/v1/permissions.proto\x12\rchalk.auth.v1\x1a\x1dchalk/utils/v1/encoding.proto\x1a google/protobuf/descriptor.proto*\xb5\v\n" +
	"\n" +
	"Permission\x12\x1a\n" +
	"\x16PERMISSION_UNSPECIFIED\x10\x00\x12'\n" +
	"#PERMISSION_INSECURE_UNAUTHENTICATED\x10\x01\x12\x1c\n" +
	"\x18PERMISSION_AUTHENTICATED\x10\x02\x12\x1b\n" +
	"\x17PERMISSION_QUERY_ONLINE\x10\x03\x12\x1c\n" +
	"\x18PERMISSION_QUERY_OFFLINE\x10\x04\x12 \n" +
	"\x1cPERMISSION_MONITORING_CREATE\x10\x05\x12\x1e\n" +
	"\x1aPERMISSION_MONITORING_READ\x10\x06\x12\x17\n" +
	"\x13PERMISSION_TEAM_ADD\x10\a\x12\x1a\n" +
	"\x16PERMISSION_TEAM_DELETE\x10\b\x12\x18\n" +
	"\x14PERMISSION_TEAM_LIST\x10\t\x12\x19\n" +
	"\x15PERMISSION_TEAM_ADMIN\x10\n" +
	"\x12\x1a\n" +
	"\x16PERMISSION_DEPLOY_READ\x10\v\x12\x1c\n" +
	"\x18PERMISSION_DEPLOY_CREATE\x10\f\x12\x1d\n" +
	"\x19PERMISSION_DEPLOY_PREVIEW\x10\r\x12\x1e\n" +
	"\x1aPERMISSION_DEPLOY_REDEPLOY\x10\x0e\x12\x18\n" +
	"\x14PERMISSION_LOGS_LIST\x10\x0f\x12\x18\n" +
	"\x14PERMISSION_CRON_READ\x10\x10\x12\x1a\n" +
	"\x16PERMISSION_CRON_CREATE\x10\x11\x12\x1c\n" +
	"\x18PERMISSION_SECRETS_WRITE\x10\x12\x12\x1e\n" +
	"\x1aPERMISSION_SECRETS_DECRYPT\x10\x13\x12\x1b\n" +
	"\x17PERMISSION_SECRETS_LIST\x10\x14\x12\x1b\n" +
	"\x17PERMISSION_TOKENS_WRITE\x10\x15\x12\x1a\n" +
	"\x16PERMISSION_TOKENS_LIST\x10\x16\x12\x1b\n" +
	"\x17PERMISSION_MIGRATE_READ\x10\x17\x12\x1b\n" +
	"\x17PERMISSION_MIGRATE_PLAN\x10\x18\x12\x1e\n" +
	"\x1aPERMISSION_MIGRATE_EXECUTE\x10\x19\x12\x1d\n" +
	"\x19PERMISSION_PROJECT_CREATE\x10\x1a\x12\x1a\n" +
	"\x16PERMISSION_CHALK_ADMIN\x10\x1b\x12\x1b\n" +
	"\x17PERMISSION_BILLING_READ\x10\x1c\x12#\n" +
	"\x1fPERMISSION_AUTH_SERVICE_MANAGER\x10\x1d\x1a\xa8\x04\xe2\xa1'\xa3\x04\n" +
	"\x1c\b\x01\x12\x18insecure_unauthenticated\n" +
	"\x11\b\x02\x12\rauthenticated\n" +
	"\x10\b\x03\x12\fquery.online\n" +
	"\x11\b\x04\x12\rquery.offline\n" +
	"\x15\b\x05\x12\x11monitoring.create\n" +
	"\x13\b\x06\x12\x0fmonitoring.read\n" +
	"\f\b\a\x12\bteam.add\n" +
	"\x0f\b\b\x12\vteam.delete\n" +
	"\r\b\t\x12\tteam.list\n" +
	"\x0e\b\n" +
	"\x12\n" +
	"team.admin\n" +
	"\x0f\b\v\x12\vdeploy.read\n" +
	"\x11\b\f\x12\rdeploy.create\n" +
	"\x12\b\r\x12\x0edeploy.preview\n" +
	"\x13\b\x0e\x12\x0fdeploy.redeploy\n" +
	"\r\b\x0f\x12\tlogs.list\n" +
	"\r\b\x10\x12\tcron.read\n" +
	"\x0f\b\x11\x12\vcron.create\n" +
	"\x11\b\x12\x12\rsecrets.write\n" +
	"\x13\b\x13\x12\x0fsecrets.decrypt\n" +
	"\x10\b\x14\x12\fsecrets.list\n" +
	"\x10\b\x15\x12\ftokens.write\n" +
	"\x0f\b\x16\x12\vtokens.list\n" +
	"\x10\b\x17\x12\fmigrate.read\n" +
	"\x10\b\x18\x12\fmigrate.plan\n" +
	"\x13\b\x19\x12\x0fmigrate.execute\n" +
	"\x12\b\x1a\x12\x0eproject.create\n" +
	"\x0f\b\x1b\x12\vchalk.admin\n" +
	"\x10\b\x1c\x12\fbilling.read\n" +
	"\x18\b\x1d\x12\x14auth_service.manager:Z\n" +
	"\n" +
	"permission\x12\x1e.google.protobuf.MethodOptions\x18\xd0\x0f \x01(\x0e2\x19.chalk.auth.v1.PermissionR\n" +
	"permissionB\xb2\x01\n" +
	"\x11com.chalk.auth.v1B\x10PermissionsProtoP\x01Z5github.com/chalk-ai/chalk-go/gen/chalk/auth/v1;authv1\xa2\x02\x03CAX\xaa\x02\rChalk.Auth.V1\xca\x02\rChalk\\Auth\\V1\xe2\x02\x19Chalk\\Auth\\V1\\GPBMetadata\xea\x02\x0fChalk::Auth::V1b\x06proto3"

var (
	file_chalk_auth_v1_permissions_proto_rawDescOnce sync.Once
	file_chalk_auth_v1_permissions_proto_rawDescData []byte
)

func file_chalk_auth_v1_permissions_proto_rawDescGZIP() []byte {
	file_chalk_auth_v1_permissions_proto_rawDescOnce.Do(func() {
		file_chalk_auth_v1_permissions_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_auth_v1_permissions_proto_rawDesc), len(file_chalk_auth_v1_permissions_proto_rawDesc)))
	})
	return file_chalk_auth_v1_permissions_proto_rawDescData
}

var file_chalk_auth_v1_permissions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_auth_v1_permissions_proto_goTypes = []any{
	(Permission)(0),                    // 0: chalk.auth.v1.Permission
	(*descriptorpb.MethodOptions)(nil), // 1: google.protobuf.MethodOptions
}
var file_chalk_auth_v1_permissions_proto_depIdxs = []int32{
	1, // 0: chalk.auth.v1.permission:extendee -> google.protobuf.MethodOptions
	0, // 1: chalk.auth.v1.permission:type_name -> chalk.auth.v1.Permission
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	1, // [1:2] is the sub-list for extension type_name
	0, // [0:1] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chalk_auth_v1_permissions_proto_init() }
func file_chalk_auth_v1_permissions_proto_init() {
	if File_chalk_auth_v1_permissions_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_auth_v1_permissions_proto_rawDesc), len(file_chalk_auth_v1_permissions_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_chalk_auth_v1_permissions_proto_goTypes,
		DependencyIndexes: file_chalk_auth_v1_permissions_proto_depIdxs,
		EnumInfos:         file_chalk_auth_v1_permissions_proto_enumTypes,
		ExtensionInfos:    file_chalk_auth_v1_permissions_proto_extTypes,
	}.Build()
	File_chalk_auth_v1_permissions_proto = out.File
	file_chalk_auth_v1_permissions_proto_goTypes = nil
	file_chalk_auth_v1_permissions_proto_depIdxs = nil
}
