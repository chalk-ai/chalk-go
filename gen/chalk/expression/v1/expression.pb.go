// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/expression/v1/expression.proto

package expressionv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScalarFunction int32

const (
	ScalarFunction_SCALAR_FUNCTION_UNSPECIFIED           ScalarFunction = 0
	ScalarFunction_SCALAR_FUNCTION_ABS                   ScalarFunction = 1
	ScalarFunction_SCALAR_FUNCTION_ACOS                  ScalarFunction = 2
	ScalarFunction_SCALAR_FUNCTION_ASIN                  ScalarFunction = 3
	ScalarFunction_SCALAR_FUNCTION_ATAN                  ScalarFunction = 4
	ScalarFunction_SCALAR_FUNCTION_ASCII                 ScalarFunction = 5
	ScalarFunction_SCALAR_FUNCTION_CEIL                  ScalarFunction = 6
	ScalarFunction_SCALAR_FUNCTION_COS                   ScalarFunction = 7
	ScalarFunction_SCALAR_FUNCTION_DIGEST                ScalarFunction = 8
	ScalarFunction_SCALAR_FUNCTION_EXP                   ScalarFunction = 9
	ScalarFunction_SCALAR_FUNCTION_FLOOR                 ScalarFunction = 10
	ScalarFunction_SCALAR_FUNCTION_LN                    ScalarFunction = 11
	ScalarFunction_SCALAR_FUNCTION_LOG                   ScalarFunction = 12
	ScalarFunction_SCALAR_FUNCTION_LOG10                 ScalarFunction = 13
	ScalarFunction_SCALAR_FUNCTION_LOG2                  ScalarFunction = 14
	ScalarFunction_SCALAR_FUNCTION_ROUND                 ScalarFunction = 15
	ScalarFunction_SCALAR_FUNCTION_SIGNUM                ScalarFunction = 16
	ScalarFunction_SCALAR_FUNCTION_SIN                   ScalarFunction = 17
	ScalarFunction_SCALAR_FUNCTION_SQRT                  ScalarFunction = 18
	ScalarFunction_SCALAR_FUNCTION_TAN                   ScalarFunction = 19
	ScalarFunction_SCALAR_FUNCTION_TRUNC                 ScalarFunction = 20
	ScalarFunction_SCALAR_FUNCTION_ARRAY                 ScalarFunction = 21
	ScalarFunction_SCALAR_FUNCTION_REGEXP_MATCH          ScalarFunction = 22
	ScalarFunction_SCALAR_FUNCTION_BIT_LENGTH            ScalarFunction = 23
	ScalarFunction_SCALAR_FUNCTION_BTRIM                 ScalarFunction = 24
	ScalarFunction_SCALAR_FUNCTION_CHARACTER_LENGTH      ScalarFunction = 25
	ScalarFunction_SCALAR_FUNCTION_CHR                   ScalarFunction = 26
	ScalarFunction_SCALAR_FUNCTION_CONCAT                ScalarFunction = 27
	ScalarFunction_SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR ScalarFunction = 28
	ScalarFunction_SCALAR_FUNCTION_DATE_PART             ScalarFunction = 29
	ScalarFunction_SCALAR_FUNCTION_DATE_TRUNC            ScalarFunction = 30
	ScalarFunction_SCALAR_FUNCTION_INIT_CAP              ScalarFunction = 31
	ScalarFunction_SCALAR_FUNCTION_LEFT                  ScalarFunction = 32
	ScalarFunction_SCALAR_FUNCTION_LPAD                  ScalarFunction = 33
	ScalarFunction_SCALAR_FUNCTION_LOWER                 ScalarFunction = 34
	ScalarFunction_SCALAR_FUNCTION_LTRIM                 ScalarFunction = 35
	ScalarFunction_SCALAR_FUNCTION_MD5                   ScalarFunction = 36
	ScalarFunction_SCALAR_FUNCTION_NULL_IF               ScalarFunction = 37
	ScalarFunction_SCALAR_FUNCTION_OCTET_LENGTH          ScalarFunction = 38
	ScalarFunction_SCALAR_FUNCTION_RANDOM                ScalarFunction = 39
	ScalarFunction_SCALAR_FUNCTION_REGEXP_REPLACE        ScalarFunction = 40
	ScalarFunction_SCALAR_FUNCTION_REPEAT                ScalarFunction = 41
	ScalarFunction_SCALAR_FUNCTION_REPLACE               ScalarFunction = 42
	ScalarFunction_SCALAR_FUNCTION_REVERSE               ScalarFunction = 43
	ScalarFunction_SCALAR_FUNCTION_RIGHT                 ScalarFunction = 44
	ScalarFunction_SCALAR_FUNCTION_RPAD                  ScalarFunction = 45
	ScalarFunction_SCALAR_FUNCTION_RTRIM                 ScalarFunction = 46
	ScalarFunction_SCALAR_FUNCTION_SHA224                ScalarFunction = 47
	ScalarFunction_SCALAR_FUNCTION_SHA256                ScalarFunction = 48
	ScalarFunction_SCALAR_FUNCTION_SHA384                ScalarFunction = 49
	ScalarFunction_SCALAR_FUNCTION_SHA512                ScalarFunction = 50
	ScalarFunction_SCALAR_FUNCTION_SPLIT_PART            ScalarFunction = 51
	ScalarFunction_SCALAR_FUNCTION_STARTS_WITH           ScalarFunction = 52
	ScalarFunction_SCALAR_FUNCTION_STRPOS                ScalarFunction = 53
	ScalarFunction_SCALAR_FUNCTION_SUBSTR                ScalarFunction = 54
	ScalarFunction_SCALAR_FUNCTION_TO_HEX                ScalarFunction = 55
	ScalarFunction_SCALAR_FUNCTION_TO_TIMESTAMP          ScalarFunction = 56
	ScalarFunction_SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS   ScalarFunction = 57
	ScalarFunction_SCALAR_FUNCTION_TO_TIMESTAMP_MICROS   ScalarFunction = 58
	ScalarFunction_SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS  ScalarFunction = 59
	ScalarFunction_SCALAR_FUNCTION_NOW                   ScalarFunction = 60
	ScalarFunction_SCALAR_FUNCTION_TRANSLATE             ScalarFunction = 61
	ScalarFunction_SCALAR_FUNCTION_TRIM                  ScalarFunction = 62
	ScalarFunction_SCALAR_FUNCTION_UPPER                 ScalarFunction = 63
	ScalarFunction_SCALAR_FUNCTION_COALESCE              ScalarFunction = 64
	ScalarFunction_SCALAR_FUNCTION_POWER                 ScalarFunction = 65
	ScalarFunction_SCALAR_FUNCTION_STRUCT_FUN            ScalarFunction = 66
	ScalarFunction_SCALAR_FUNCTION_FROM_UNIXTIME         ScalarFunction = 67
	ScalarFunction_SCALAR_FUNCTION_ATAN2                 ScalarFunction = 68
	ScalarFunction_SCALAR_FUNCTION_DATE_BIN              ScalarFunction = 69
	ScalarFunction_SCALAR_FUNCTION_ARROW_TYPEOF          ScalarFunction = 70
	ScalarFunction_SCALAR_FUNCTION_CURRENT_DATE          ScalarFunction = 71
	ScalarFunction_SCALAR_FUNCTION_CURRENT_TIME          ScalarFunction = 72
	ScalarFunction_SCALAR_FUNCTION_UUID                  ScalarFunction = 73
	ScalarFunction_SCALAR_FUNCTION_CBRT                  ScalarFunction = 74
	ScalarFunction_SCALAR_FUNCTION_ACOSH                 ScalarFunction = 75
	ScalarFunction_SCALAR_FUNCTION_ASINH                 ScalarFunction = 76
	ScalarFunction_SCALAR_FUNCTION_ATANH                 ScalarFunction = 77
	ScalarFunction_SCALAR_FUNCTION_SINH                  ScalarFunction = 78
	ScalarFunction_SCALAR_FUNCTION_COSH                  ScalarFunction = 79
	ScalarFunction_SCALAR_FUNCTION_TANH                  ScalarFunction = 80
	ScalarFunction_SCALAR_FUNCTION_PI                    ScalarFunction = 81
	ScalarFunction_SCALAR_FUNCTION_DEGREES               ScalarFunction = 82
	ScalarFunction_SCALAR_FUNCTION_RADIANS               ScalarFunction = 83
	ScalarFunction_SCALAR_FUNCTION_FACTORIAL             ScalarFunction = 84
	ScalarFunction_SCALAR_FUNCTION_LCM                   ScalarFunction = 85
	ScalarFunction_SCALAR_FUNCTION_GCD                   ScalarFunction = 86
	ScalarFunction_SCALAR_FUNCTION_ARRAY_APPEND          ScalarFunction = 87
	ScalarFunction_SCALAR_FUNCTION_ARRAY_CONCAT          ScalarFunction = 88
	ScalarFunction_SCALAR_FUNCTION_ARRAY_DIMS            ScalarFunction = 89
	ScalarFunction_SCALAR_FUNCTION_ARRAY_REPEAT          ScalarFunction = 90
	ScalarFunction_SCALAR_FUNCTION_ARRAY_LENGTH          ScalarFunction = 91
	ScalarFunction_SCALAR_FUNCTION_ARRAY_NDIMS           ScalarFunction = 92
	ScalarFunction_SCALAR_FUNCTION_ARRAY_POSITION        ScalarFunction = 93
	ScalarFunction_SCALAR_FUNCTION_ARRAY_POSITIONS       ScalarFunction = 94
	ScalarFunction_SCALAR_FUNCTION_ARRAY_PREPEND         ScalarFunction = 95
	ScalarFunction_SCALAR_FUNCTION_ARRAY_REMOVE          ScalarFunction = 96
	ScalarFunction_SCALAR_FUNCTION_ARRAY_REPLACE         ScalarFunction = 97
	ScalarFunction_SCALAR_FUNCTION_ARRAY_TO_STRING       ScalarFunction = 98
	ScalarFunction_SCALAR_FUNCTION_CARDINALITY           ScalarFunction = 99
	ScalarFunction_SCALAR_FUNCTION_ARRAY_ELEMENT         ScalarFunction = 100
	ScalarFunction_SCALAR_FUNCTION_ARRAY_SLICE           ScalarFunction = 101
	ScalarFunction_SCALAR_FUNCTION_ENCODE                ScalarFunction = 102
	ScalarFunction_SCALAR_FUNCTION_DECODE                ScalarFunction = 103
	ScalarFunction_SCALAR_FUNCTION_COT                   ScalarFunction = 104
	ScalarFunction_SCALAR_FUNCTION_ARRAY_HAS             ScalarFunction = 105
	ScalarFunction_SCALAR_FUNCTION_ARRAY_HAS_ANY         ScalarFunction = 106
	ScalarFunction_SCALAR_FUNCTION_ARRAY_HAS_ALL         ScalarFunction = 107
	ScalarFunction_SCALAR_FUNCTION_ARRAY_REMOVE_N        ScalarFunction = 108
	ScalarFunction_SCALAR_FUNCTION_ARRAY_REPLACE_N       ScalarFunction = 109
	ScalarFunction_SCALAR_FUNCTION_ARRAY_REMOVE_ALL      ScalarFunction = 110
	ScalarFunction_SCALAR_FUNCTION_ARRAY_REPLACE_ALL     ScalarFunction = 111
	ScalarFunction_SCALAR_FUNCTION_NANVL                 ScalarFunction = 112
	ScalarFunction_SCALAR_FUNCTION_FLATTEN               ScalarFunction = 113
	ScalarFunction_SCALAR_FUNCTION_ISNAN                 ScalarFunction = 114
	ScalarFunction_SCALAR_FUNCTION_ISZERO                ScalarFunction = 115
	ScalarFunction_SCALAR_FUNCTION_ARRAY_EMPTY           ScalarFunction = 116
	ScalarFunction_SCALAR_FUNCTION_ARRAY_POP_BACK        ScalarFunction = 117
	ScalarFunction_SCALAR_FUNCTION_STRING_TO_ARRAY       ScalarFunction = 118
	ScalarFunction_SCALAR_FUNCTION_TO_TIMESTAMP_NANOS    ScalarFunction = 119
	ScalarFunction_SCALAR_FUNCTION_ARRAY_INTERSECT       ScalarFunction = 120
	ScalarFunction_SCALAR_FUNCTION_ARRAY_UNION           ScalarFunction = 121
	ScalarFunction_SCALAR_FUNCTION_OVER_LAY              ScalarFunction = 122
	ScalarFunction_SCALAR_FUNCTION_RANGE                 ScalarFunction = 123
	ScalarFunction_SCALAR_FUNCTION_ARRAY_EXCEPT          ScalarFunction = 124
	ScalarFunction_SCALAR_FUNCTION_ARRAY_POP_FRONT       ScalarFunction = 125
	ScalarFunction_SCALAR_FUNCTION_LEVENSHTEIN           ScalarFunction = 126
	ScalarFunction_SCALAR_FUNCTION_SUBSTR_INDEX          ScalarFunction = 127
	ScalarFunction_SCALAR_FUNCTION_FIND_IN_SET           ScalarFunction = 128
	ScalarFunction_SCALAR_FUNCTION_ARRAY_SORT            ScalarFunction = 129
	ScalarFunction_SCALAR_FUNCTION_ARRAY_DISTINCT        ScalarFunction = 130
)

// Enum value maps for ScalarFunction.
var (
	ScalarFunction_name = map[int32]string{
		0:   "SCALAR_FUNCTION_UNSPECIFIED",
		1:   "SCALAR_FUNCTION_ABS",
		2:   "SCALAR_FUNCTION_ACOS",
		3:   "SCALAR_FUNCTION_ASIN",
		4:   "SCALAR_FUNCTION_ATAN",
		5:   "SCALAR_FUNCTION_ASCII",
		6:   "SCALAR_FUNCTION_CEIL",
		7:   "SCALAR_FUNCTION_COS",
		8:   "SCALAR_FUNCTION_DIGEST",
		9:   "SCALAR_FUNCTION_EXP",
		10:  "SCALAR_FUNCTION_FLOOR",
		11:  "SCALAR_FUNCTION_LN",
		12:  "SCALAR_FUNCTION_LOG",
		13:  "SCALAR_FUNCTION_LOG10",
		14:  "SCALAR_FUNCTION_LOG2",
		15:  "SCALAR_FUNCTION_ROUND",
		16:  "SCALAR_FUNCTION_SIGNUM",
		17:  "SCALAR_FUNCTION_SIN",
		18:  "SCALAR_FUNCTION_SQRT",
		19:  "SCALAR_FUNCTION_TAN",
		20:  "SCALAR_FUNCTION_TRUNC",
		21:  "SCALAR_FUNCTION_ARRAY",
		22:  "SCALAR_FUNCTION_REGEXP_MATCH",
		23:  "SCALAR_FUNCTION_BIT_LENGTH",
		24:  "SCALAR_FUNCTION_BTRIM",
		25:  "SCALAR_FUNCTION_CHARACTER_LENGTH",
		26:  "SCALAR_FUNCTION_CHR",
		27:  "SCALAR_FUNCTION_CONCAT",
		28:  "SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR",
		29:  "SCALAR_FUNCTION_DATE_PART",
		30:  "SCALAR_FUNCTION_DATE_TRUNC",
		31:  "SCALAR_FUNCTION_INIT_CAP",
		32:  "SCALAR_FUNCTION_LEFT",
		33:  "SCALAR_FUNCTION_LPAD",
		34:  "SCALAR_FUNCTION_LOWER",
		35:  "SCALAR_FUNCTION_LTRIM",
		36:  "SCALAR_FUNCTION_MD5",
		37:  "SCALAR_FUNCTION_NULL_IF",
		38:  "SCALAR_FUNCTION_OCTET_LENGTH",
		39:  "SCALAR_FUNCTION_RANDOM",
		40:  "SCALAR_FUNCTION_REGEXP_REPLACE",
		41:  "SCALAR_FUNCTION_REPEAT",
		42:  "SCALAR_FUNCTION_REPLACE",
		43:  "SCALAR_FUNCTION_REVERSE",
		44:  "SCALAR_FUNCTION_RIGHT",
		45:  "SCALAR_FUNCTION_RPAD",
		46:  "SCALAR_FUNCTION_RTRIM",
		47:  "SCALAR_FUNCTION_SHA224",
		48:  "SCALAR_FUNCTION_SHA256",
		49:  "SCALAR_FUNCTION_SHA384",
		50:  "SCALAR_FUNCTION_SHA512",
		51:  "SCALAR_FUNCTION_SPLIT_PART",
		52:  "SCALAR_FUNCTION_STARTS_WITH",
		53:  "SCALAR_FUNCTION_STRPOS",
		54:  "SCALAR_FUNCTION_SUBSTR",
		55:  "SCALAR_FUNCTION_TO_HEX",
		56:  "SCALAR_FUNCTION_TO_TIMESTAMP",
		57:  "SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS",
		58:  "SCALAR_FUNCTION_TO_TIMESTAMP_MICROS",
		59:  "SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS",
		60:  "SCALAR_FUNCTION_NOW",
		61:  "SCALAR_FUNCTION_TRANSLATE",
		62:  "SCALAR_FUNCTION_TRIM",
		63:  "SCALAR_FUNCTION_UPPER",
		64:  "SCALAR_FUNCTION_COALESCE",
		65:  "SCALAR_FUNCTION_POWER",
		66:  "SCALAR_FUNCTION_STRUCT_FUN",
		67:  "SCALAR_FUNCTION_FROM_UNIXTIME",
		68:  "SCALAR_FUNCTION_ATAN2",
		69:  "SCALAR_FUNCTION_DATE_BIN",
		70:  "SCALAR_FUNCTION_ARROW_TYPEOF",
		71:  "SCALAR_FUNCTION_CURRENT_DATE",
		72:  "SCALAR_FUNCTION_CURRENT_TIME",
		73:  "SCALAR_FUNCTION_UUID",
		74:  "SCALAR_FUNCTION_CBRT",
		75:  "SCALAR_FUNCTION_ACOSH",
		76:  "SCALAR_FUNCTION_ASINH",
		77:  "SCALAR_FUNCTION_ATANH",
		78:  "SCALAR_FUNCTION_SINH",
		79:  "SCALAR_FUNCTION_COSH",
		80:  "SCALAR_FUNCTION_TANH",
		81:  "SCALAR_FUNCTION_PI",
		82:  "SCALAR_FUNCTION_DEGREES",
		83:  "SCALAR_FUNCTION_RADIANS",
		84:  "SCALAR_FUNCTION_FACTORIAL",
		85:  "SCALAR_FUNCTION_LCM",
		86:  "SCALAR_FUNCTION_GCD",
		87:  "SCALAR_FUNCTION_ARRAY_APPEND",
		88:  "SCALAR_FUNCTION_ARRAY_CONCAT",
		89:  "SCALAR_FUNCTION_ARRAY_DIMS",
		90:  "SCALAR_FUNCTION_ARRAY_REPEAT",
		91:  "SCALAR_FUNCTION_ARRAY_LENGTH",
		92:  "SCALAR_FUNCTION_ARRAY_NDIMS",
		93:  "SCALAR_FUNCTION_ARRAY_POSITION",
		94:  "SCALAR_FUNCTION_ARRAY_POSITIONS",
		95:  "SCALAR_FUNCTION_ARRAY_PREPEND",
		96:  "SCALAR_FUNCTION_ARRAY_REMOVE",
		97:  "SCALAR_FUNCTION_ARRAY_REPLACE",
		98:  "SCALAR_FUNCTION_ARRAY_TO_STRING",
		99:  "SCALAR_FUNCTION_CARDINALITY",
		100: "SCALAR_FUNCTION_ARRAY_ELEMENT",
		101: "SCALAR_FUNCTION_ARRAY_SLICE",
		102: "SCALAR_FUNCTION_ENCODE",
		103: "SCALAR_FUNCTION_DECODE",
		104: "SCALAR_FUNCTION_COT",
		105: "SCALAR_FUNCTION_ARRAY_HAS",
		106: "SCALAR_FUNCTION_ARRAY_HAS_ANY",
		107: "SCALAR_FUNCTION_ARRAY_HAS_ALL",
		108: "SCALAR_FUNCTION_ARRAY_REMOVE_N",
		109: "SCALAR_FUNCTION_ARRAY_REPLACE_N",
		110: "SCALAR_FUNCTION_ARRAY_REMOVE_ALL",
		111: "SCALAR_FUNCTION_ARRAY_REPLACE_ALL",
		112: "SCALAR_FUNCTION_NANVL",
		113: "SCALAR_FUNCTION_FLATTEN",
		114: "SCALAR_FUNCTION_ISNAN",
		115: "SCALAR_FUNCTION_ISZERO",
		116: "SCALAR_FUNCTION_ARRAY_EMPTY",
		117: "SCALAR_FUNCTION_ARRAY_POP_BACK",
		118: "SCALAR_FUNCTION_STRING_TO_ARRAY",
		119: "SCALAR_FUNCTION_TO_TIMESTAMP_NANOS",
		120: "SCALAR_FUNCTION_ARRAY_INTERSECT",
		121: "SCALAR_FUNCTION_ARRAY_UNION",
		122: "SCALAR_FUNCTION_OVER_LAY",
		123: "SCALAR_FUNCTION_RANGE",
		124: "SCALAR_FUNCTION_ARRAY_EXCEPT",
		125: "SCALAR_FUNCTION_ARRAY_POP_FRONT",
		126: "SCALAR_FUNCTION_LEVENSHTEIN",
		127: "SCALAR_FUNCTION_SUBSTR_INDEX",
		128: "SCALAR_FUNCTION_FIND_IN_SET",
		129: "SCALAR_FUNCTION_ARRAY_SORT",
		130: "SCALAR_FUNCTION_ARRAY_DISTINCT",
	}
	ScalarFunction_value = map[string]int32{
		"SCALAR_FUNCTION_UNSPECIFIED":           0,
		"SCALAR_FUNCTION_ABS":                   1,
		"SCALAR_FUNCTION_ACOS":                  2,
		"SCALAR_FUNCTION_ASIN":                  3,
		"SCALAR_FUNCTION_ATAN":                  4,
		"SCALAR_FUNCTION_ASCII":                 5,
		"SCALAR_FUNCTION_CEIL":                  6,
		"SCALAR_FUNCTION_COS":                   7,
		"SCALAR_FUNCTION_DIGEST":                8,
		"SCALAR_FUNCTION_EXP":                   9,
		"SCALAR_FUNCTION_FLOOR":                 10,
		"SCALAR_FUNCTION_LN":                    11,
		"SCALAR_FUNCTION_LOG":                   12,
		"SCALAR_FUNCTION_LOG10":                 13,
		"SCALAR_FUNCTION_LOG2":                  14,
		"SCALAR_FUNCTION_ROUND":                 15,
		"SCALAR_FUNCTION_SIGNUM":                16,
		"SCALAR_FUNCTION_SIN":                   17,
		"SCALAR_FUNCTION_SQRT":                  18,
		"SCALAR_FUNCTION_TAN":                   19,
		"SCALAR_FUNCTION_TRUNC":                 20,
		"SCALAR_FUNCTION_ARRAY":                 21,
		"SCALAR_FUNCTION_REGEXP_MATCH":          22,
		"SCALAR_FUNCTION_BIT_LENGTH":            23,
		"SCALAR_FUNCTION_BTRIM":                 24,
		"SCALAR_FUNCTION_CHARACTER_LENGTH":      25,
		"SCALAR_FUNCTION_CHR":                   26,
		"SCALAR_FUNCTION_CONCAT":                27,
		"SCALAR_FUNCTION_CONCAT_WITH_SEPARATOR": 28,
		"SCALAR_FUNCTION_DATE_PART":             29,
		"SCALAR_FUNCTION_DATE_TRUNC":            30,
		"SCALAR_FUNCTION_INIT_CAP":              31,
		"SCALAR_FUNCTION_LEFT":                  32,
		"SCALAR_FUNCTION_LPAD":                  33,
		"SCALAR_FUNCTION_LOWER":                 34,
		"SCALAR_FUNCTION_LTRIM":                 35,
		"SCALAR_FUNCTION_MD5":                   36,
		"SCALAR_FUNCTION_NULL_IF":               37,
		"SCALAR_FUNCTION_OCTET_LENGTH":          38,
		"SCALAR_FUNCTION_RANDOM":                39,
		"SCALAR_FUNCTION_REGEXP_REPLACE":        40,
		"SCALAR_FUNCTION_REPEAT":                41,
		"SCALAR_FUNCTION_REPLACE":               42,
		"SCALAR_FUNCTION_REVERSE":               43,
		"SCALAR_FUNCTION_RIGHT":                 44,
		"SCALAR_FUNCTION_RPAD":                  45,
		"SCALAR_FUNCTION_RTRIM":                 46,
		"SCALAR_FUNCTION_SHA224":                47,
		"SCALAR_FUNCTION_SHA256":                48,
		"SCALAR_FUNCTION_SHA384":                49,
		"SCALAR_FUNCTION_SHA512":                50,
		"SCALAR_FUNCTION_SPLIT_PART":            51,
		"SCALAR_FUNCTION_STARTS_WITH":           52,
		"SCALAR_FUNCTION_STRPOS":                53,
		"SCALAR_FUNCTION_SUBSTR":                54,
		"SCALAR_FUNCTION_TO_HEX":                55,
		"SCALAR_FUNCTION_TO_TIMESTAMP":          56,
		"SCALAR_FUNCTION_TO_TIMESTAMP_MILLIS":   57,
		"SCALAR_FUNCTION_TO_TIMESTAMP_MICROS":   58,
		"SCALAR_FUNCTION_TO_TIMESTAMP_SECONDS":  59,
		"SCALAR_FUNCTION_NOW":                   60,
		"SCALAR_FUNCTION_TRANSLATE":             61,
		"SCALAR_FUNCTION_TRIM":                  62,
		"SCALAR_FUNCTION_UPPER":                 63,
		"SCALAR_FUNCTION_COALESCE":              64,
		"SCALAR_FUNCTION_POWER":                 65,
		"SCALAR_FUNCTION_STRUCT_FUN":            66,
		"SCALAR_FUNCTION_FROM_UNIXTIME":         67,
		"SCALAR_FUNCTION_ATAN2":                 68,
		"SCALAR_FUNCTION_DATE_BIN":              69,
		"SCALAR_FUNCTION_ARROW_TYPEOF":          70,
		"SCALAR_FUNCTION_CURRENT_DATE":          71,
		"SCALAR_FUNCTION_CURRENT_TIME":          72,
		"SCALAR_FUNCTION_UUID":                  73,
		"SCALAR_FUNCTION_CBRT":                  74,
		"SCALAR_FUNCTION_ACOSH":                 75,
		"SCALAR_FUNCTION_ASINH":                 76,
		"SCALAR_FUNCTION_ATANH":                 77,
		"SCALAR_FUNCTION_SINH":                  78,
		"SCALAR_FUNCTION_COSH":                  79,
		"SCALAR_FUNCTION_TANH":                  80,
		"SCALAR_FUNCTION_PI":                    81,
		"SCALAR_FUNCTION_DEGREES":               82,
		"SCALAR_FUNCTION_RADIANS":               83,
		"SCALAR_FUNCTION_FACTORIAL":             84,
		"SCALAR_FUNCTION_LCM":                   85,
		"SCALAR_FUNCTION_GCD":                   86,
		"SCALAR_FUNCTION_ARRAY_APPEND":          87,
		"SCALAR_FUNCTION_ARRAY_CONCAT":          88,
		"SCALAR_FUNCTION_ARRAY_DIMS":            89,
		"SCALAR_FUNCTION_ARRAY_REPEAT":          90,
		"SCALAR_FUNCTION_ARRAY_LENGTH":          91,
		"SCALAR_FUNCTION_ARRAY_NDIMS":           92,
		"SCALAR_FUNCTION_ARRAY_POSITION":        93,
		"SCALAR_FUNCTION_ARRAY_POSITIONS":       94,
		"SCALAR_FUNCTION_ARRAY_PREPEND":         95,
		"SCALAR_FUNCTION_ARRAY_REMOVE":          96,
		"SCALAR_FUNCTION_ARRAY_REPLACE":         97,
		"SCALAR_FUNCTION_ARRAY_TO_STRING":       98,
		"SCALAR_FUNCTION_CARDINALITY":           99,
		"SCALAR_FUNCTION_ARRAY_ELEMENT":         100,
		"SCALAR_FUNCTION_ARRAY_SLICE":           101,
		"SCALAR_FUNCTION_ENCODE":                102,
		"SCALAR_FUNCTION_DECODE":                103,
		"SCALAR_FUNCTION_COT":                   104,
		"SCALAR_FUNCTION_ARRAY_HAS":             105,
		"SCALAR_FUNCTION_ARRAY_HAS_ANY":         106,
		"SCALAR_FUNCTION_ARRAY_HAS_ALL":         107,
		"SCALAR_FUNCTION_ARRAY_REMOVE_N":        108,
		"SCALAR_FUNCTION_ARRAY_REPLACE_N":       109,
		"SCALAR_FUNCTION_ARRAY_REMOVE_ALL":      110,
		"SCALAR_FUNCTION_ARRAY_REPLACE_ALL":     111,
		"SCALAR_FUNCTION_NANVL":                 112,
		"SCALAR_FUNCTION_FLATTEN":               113,
		"SCALAR_FUNCTION_ISNAN":                 114,
		"SCALAR_FUNCTION_ISZERO":                115,
		"SCALAR_FUNCTION_ARRAY_EMPTY":           116,
		"SCALAR_FUNCTION_ARRAY_POP_BACK":        117,
		"SCALAR_FUNCTION_STRING_TO_ARRAY":       118,
		"SCALAR_FUNCTION_TO_TIMESTAMP_NANOS":    119,
		"SCALAR_FUNCTION_ARRAY_INTERSECT":       120,
		"SCALAR_FUNCTION_ARRAY_UNION":           121,
		"SCALAR_FUNCTION_OVER_LAY":              122,
		"SCALAR_FUNCTION_RANGE":                 123,
		"SCALAR_FUNCTION_ARRAY_EXCEPT":          124,
		"SCALAR_FUNCTION_ARRAY_POP_FRONT":       125,
		"SCALAR_FUNCTION_LEVENSHTEIN":           126,
		"SCALAR_FUNCTION_SUBSTR_INDEX":          127,
		"SCALAR_FUNCTION_FIND_IN_SET":           128,
		"SCALAR_FUNCTION_ARRAY_SORT":            129,
		"SCALAR_FUNCTION_ARRAY_DISTINCT":        130,
	}
)

func (x ScalarFunction) Enum() *ScalarFunction {
	p := new(ScalarFunction)
	*p = x
	return p
}

func (x ScalarFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalarFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_expression_v1_expression_proto_enumTypes[0].Descriptor()
}

func (ScalarFunction) Type() protoreflect.EnumType {
	return &file_chalk_expression_v1_expression_proto_enumTypes[0]
}

func (x ScalarFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalarFunction.Descriptor instead.
func (ScalarFunction) EnumDescriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{0}
}

type AggregateFunction int32

const (
	AggregateFunction_AGGREGATE_FUNCTION_UNSPECIFIED                        AggregateFunction = 0
	AggregateFunction_AGGREGATE_FUNCTION_MIN                                AggregateFunction = 1
	AggregateFunction_AGGREGATE_FUNCTION_MAX                                AggregateFunction = 2
	AggregateFunction_AGGREGATE_FUNCTION_SUM                                AggregateFunction = 3
	AggregateFunction_AGGREGATE_FUNCTION_AVG                                AggregateFunction = 4
	AggregateFunction_AGGREGATE_FUNCTION_COUNT                              AggregateFunction = 5
	AggregateFunction_AGGREGATE_FUNCTION_APPROX_DISTINCT                    AggregateFunction = 6
	AggregateFunction_AGGREGATE_FUNCTION_ARRAY                              AggregateFunction = 7
	AggregateFunction_AGGREGATE_FUNCTION_VARIANCE                           AggregateFunction = 8
	AggregateFunction_AGGREGATE_FUNCTION_VARIANCE_POP                       AggregateFunction = 9
	AggregateFunction_AGGREGATE_FUNCTION_COVARIANCE                         AggregateFunction = 10
	AggregateFunction_AGGREGATE_FUNCTION_COVARIANCE_POP                     AggregateFunction = 11
	AggregateFunction_AGGREGATE_FUNCTION_STDDEV                             AggregateFunction = 12
	AggregateFunction_AGGREGATE_FUNCTION_STDDEV_POP                         AggregateFunction = 13
	AggregateFunction_AGGREGATE_FUNCTION_CORRELATION                        AggregateFunction = 14
	AggregateFunction_AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT             AggregateFunction = 15
	AggregateFunction_AGGREGATE_FUNCTION_APPROX_MEDIAN                      AggregateFunction = 16
	AggregateFunction_AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT AggregateFunction = 17
	AggregateFunction_AGGREGATE_FUNCTION_GROUPING                           AggregateFunction = 18
	AggregateFunction_AGGREGATE_FUNCTION_MEDIAN                             AggregateFunction = 19
	AggregateFunction_AGGREGATE_FUNCTION_BIT_AND                            AggregateFunction = 20
	AggregateFunction_AGGREGATE_FUNCTION_BIT_OR                             AggregateFunction = 21
	AggregateFunction_AGGREGATE_FUNCTION_BIT_XOR                            AggregateFunction = 22
	AggregateFunction_AGGREGATE_FUNCTION_BOOL_AND                           AggregateFunction = 23
	AggregateFunction_AGGREGATE_FUNCTION_BOOL_OR                            AggregateFunction = 24
	AggregateFunction_AGGREGATE_FUNCTION_FIRST_VALUE                        AggregateFunction = 25
	AggregateFunction_AGGREGATE_FUNCTION_LAST_VALUE                         AggregateFunction = 26
	AggregateFunction_AGGREGATE_FUNCTION_REGR_SLOPE                         AggregateFunction = 27
	AggregateFunction_AGGREGATE_FUNCTION_REGR_INTERCEPT                     AggregateFunction = 28
	AggregateFunction_AGGREGATE_FUNCTION_REGR_COUNT                         AggregateFunction = 29
	AggregateFunction_AGGREGATE_FUNCTION_REGR_R2                            AggregateFunction = 30
	AggregateFunction_AGGREGATE_FUNCTION_REGR_AVGX                          AggregateFunction = 31
	AggregateFunction_AGGREGATE_FUNCTION_REGR_AVGY                          AggregateFunction = 32
	AggregateFunction_AGGREGATE_FUNCTION_REGR_SXX                           AggregateFunction = 33
	AggregateFunction_AGGREGATE_FUNCTION_REGR_SYY                           AggregateFunction = 34
	AggregateFunction_AGGREGATE_FUNCTION_REGR_SXY                           AggregateFunction = 35
	AggregateFunction_AGGREGATE_FUNCTION_STRING                             AggregateFunction = 36
)

// Enum value maps for AggregateFunction.
var (
	AggregateFunction_name = map[int32]string{
		0:  "AGGREGATE_FUNCTION_UNSPECIFIED",
		1:  "AGGREGATE_FUNCTION_MIN",
		2:  "AGGREGATE_FUNCTION_MAX",
		3:  "AGGREGATE_FUNCTION_SUM",
		4:  "AGGREGATE_FUNCTION_AVG",
		5:  "AGGREGATE_FUNCTION_COUNT",
		6:  "AGGREGATE_FUNCTION_APPROX_DISTINCT",
		7:  "AGGREGATE_FUNCTION_ARRAY",
		8:  "AGGREGATE_FUNCTION_VARIANCE",
		9:  "AGGREGATE_FUNCTION_VARIANCE_POP",
		10: "AGGREGATE_FUNCTION_COVARIANCE",
		11: "AGGREGATE_FUNCTION_COVARIANCE_POP",
		12: "AGGREGATE_FUNCTION_STDDEV",
		13: "AGGREGATE_FUNCTION_STDDEV_POP",
		14: "AGGREGATE_FUNCTION_CORRELATION",
		15: "AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT",
		16: "AGGREGATE_FUNCTION_APPROX_MEDIAN",
		17: "AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT",
		18: "AGGREGATE_FUNCTION_GROUPING",
		19: "AGGREGATE_FUNCTION_MEDIAN",
		20: "AGGREGATE_FUNCTION_BIT_AND",
		21: "AGGREGATE_FUNCTION_BIT_OR",
		22: "AGGREGATE_FUNCTION_BIT_XOR",
		23: "AGGREGATE_FUNCTION_BOOL_AND",
		24: "AGGREGATE_FUNCTION_BOOL_OR",
		25: "AGGREGATE_FUNCTION_FIRST_VALUE",
		26: "AGGREGATE_FUNCTION_LAST_VALUE",
		27: "AGGREGATE_FUNCTION_REGR_SLOPE",
		28: "AGGREGATE_FUNCTION_REGR_INTERCEPT",
		29: "AGGREGATE_FUNCTION_REGR_COUNT",
		30: "AGGREGATE_FUNCTION_REGR_R2",
		31: "AGGREGATE_FUNCTION_REGR_AVGX",
		32: "AGGREGATE_FUNCTION_REGR_AVGY",
		33: "AGGREGATE_FUNCTION_REGR_SXX",
		34: "AGGREGATE_FUNCTION_REGR_SYY",
		35: "AGGREGATE_FUNCTION_REGR_SXY",
		36: "AGGREGATE_FUNCTION_STRING",
	}
	AggregateFunction_value = map[string]int32{
		"AGGREGATE_FUNCTION_UNSPECIFIED":                        0,
		"AGGREGATE_FUNCTION_MIN":                                1,
		"AGGREGATE_FUNCTION_MAX":                                2,
		"AGGREGATE_FUNCTION_SUM":                                3,
		"AGGREGATE_FUNCTION_AVG":                                4,
		"AGGREGATE_FUNCTION_COUNT":                              5,
		"AGGREGATE_FUNCTION_APPROX_DISTINCT":                    6,
		"AGGREGATE_FUNCTION_ARRAY":                              7,
		"AGGREGATE_FUNCTION_VARIANCE":                           8,
		"AGGREGATE_FUNCTION_VARIANCE_POP":                       9,
		"AGGREGATE_FUNCTION_COVARIANCE":                         10,
		"AGGREGATE_FUNCTION_COVARIANCE_POP":                     11,
		"AGGREGATE_FUNCTION_STDDEV":                             12,
		"AGGREGATE_FUNCTION_STDDEV_POP":                         13,
		"AGGREGATE_FUNCTION_CORRELATION":                        14,
		"AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT":             15,
		"AGGREGATE_FUNCTION_APPROX_MEDIAN":                      16,
		"AGGREGATE_FUNCTION_APPROX_PERCENTILE_CONT_WITH_WEIGHT": 17,
		"AGGREGATE_FUNCTION_GROUPING":                           18,
		"AGGREGATE_FUNCTION_MEDIAN":                             19,
		"AGGREGATE_FUNCTION_BIT_AND":                            20,
		"AGGREGATE_FUNCTION_BIT_OR":                             21,
		"AGGREGATE_FUNCTION_BIT_XOR":                            22,
		"AGGREGATE_FUNCTION_BOOL_AND":                           23,
		"AGGREGATE_FUNCTION_BOOL_OR":                            24,
		"AGGREGATE_FUNCTION_FIRST_VALUE":                        25,
		"AGGREGATE_FUNCTION_LAST_VALUE":                         26,
		"AGGREGATE_FUNCTION_REGR_SLOPE":                         27,
		"AGGREGATE_FUNCTION_REGR_INTERCEPT":                     28,
		"AGGREGATE_FUNCTION_REGR_COUNT":                         29,
		"AGGREGATE_FUNCTION_REGR_R2":                            30,
		"AGGREGATE_FUNCTION_REGR_AVGX":                          31,
		"AGGREGATE_FUNCTION_REGR_AVGY":                          32,
		"AGGREGATE_FUNCTION_REGR_SXX":                           33,
		"AGGREGATE_FUNCTION_REGR_SYY":                           34,
		"AGGREGATE_FUNCTION_REGR_SXY":                           35,
		"AGGREGATE_FUNCTION_STRING":                             36,
	}
)

func (x AggregateFunction) Enum() *AggregateFunction {
	p := new(AggregateFunction)
	*p = x
	return p
}

func (x AggregateFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregateFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_expression_v1_expression_proto_enumTypes[1].Descriptor()
}

func (AggregateFunction) Type() protoreflect.EnumType {
	return &file_chalk_expression_v1_expression_proto_enumTypes[1]
}

func (x AggregateFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregateFunction.Descriptor instead.
func (AggregateFunction) EnumDescriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{1}
}

type BuiltInWindowFunction int32

const (
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_UNSPECIFIED  BuiltInWindowFunction = 0
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_ROW_NUMBER   BuiltInWindowFunction = 1
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_RANK         BuiltInWindowFunction = 2
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_DENSE_RANK   BuiltInWindowFunction = 3
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_PERCENT_RANK BuiltInWindowFunction = 4
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_CUME_DIST    BuiltInWindowFunction = 5
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_NTILE        BuiltInWindowFunction = 6
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_LAG          BuiltInWindowFunction = 7
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_LEAD         BuiltInWindowFunction = 8
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_FIRST_VALUE  BuiltInWindowFunction = 9
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_LAST_VALUE   BuiltInWindowFunction = 10
	BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_NTH_VALUE    BuiltInWindowFunction = 11
)

// Enum value maps for BuiltInWindowFunction.
var (
	BuiltInWindowFunction_name = map[int32]string{
		0:  "BUILT_IN_WINDOW_FUNCTION_UNSPECIFIED",
		1:  "BUILT_IN_WINDOW_FUNCTION_ROW_NUMBER",
		2:  "BUILT_IN_WINDOW_FUNCTION_RANK",
		3:  "BUILT_IN_WINDOW_FUNCTION_DENSE_RANK",
		4:  "BUILT_IN_WINDOW_FUNCTION_PERCENT_RANK",
		5:  "BUILT_IN_WINDOW_FUNCTION_CUME_DIST",
		6:  "BUILT_IN_WINDOW_FUNCTION_NTILE",
		7:  "BUILT_IN_WINDOW_FUNCTION_LAG",
		8:  "BUILT_IN_WINDOW_FUNCTION_LEAD",
		9:  "BUILT_IN_WINDOW_FUNCTION_FIRST_VALUE",
		10: "BUILT_IN_WINDOW_FUNCTION_LAST_VALUE",
		11: "BUILT_IN_WINDOW_FUNCTION_NTH_VALUE",
	}
	BuiltInWindowFunction_value = map[string]int32{
		"BUILT_IN_WINDOW_FUNCTION_UNSPECIFIED":  0,
		"BUILT_IN_WINDOW_FUNCTION_ROW_NUMBER":   1,
		"BUILT_IN_WINDOW_FUNCTION_RANK":         2,
		"BUILT_IN_WINDOW_FUNCTION_DENSE_RANK":   3,
		"BUILT_IN_WINDOW_FUNCTION_PERCENT_RANK": 4,
		"BUILT_IN_WINDOW_FUNCTION_CUME_DIST":    5,
		"BUILT_IN_WINDOW_FUNCTION_NTILE":        6,
		"BUILT_IN_WINDOW_FUNCTION_LAG":          7,
		"BUILT_IN_WINDOW_FUNCTION_LEAD":         8,
		"BUILT_IN_WINDOW_FUNCTION_FIRST_VALUE":  9,
		"BUILT_IN_WINDOW_FUNCTION_LAST_VALUE":   10,
		"BUILT_IN_WINDOW_FUNCTION_NTH_VALUE":    11,
	}
)

func (x BuiltInWindowFunction) Enum() *BuiltInWindowFunction {
	p := new(BuiltInWindowFunction)
	*p = x
	return p
}

func (x BuiltInWindowFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltInWindowFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_expression_v1_expression_proto_enumTypes[2].Descriptor()
}

func (BuiltInWindowFunction) Type() protoreflect.EnumType {
	return &file_chalk_expression_v1_expression_proto_enumTypes[2]
}

func (x BuiltInWindowFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltInWindowFunction.Descriptor instead.
func (BuiltInWindowFunction) EnumDescriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{2}
}

type WindowFrameUnits int32

const (
	WindowFrameUnits_WINDOW_FRAME_UNITS_UNSPECIFIED WindowFrameUnits = 0
	WindowFrameUnits_WINDOW_FRAME_UNITS_ROWS        WindowFrameUnits = 1
	WindowFrameUnits_WINDOW_FRAME_UNITS_RANGE       WindowFrameUnits = 2
	WindowFrameUnits_WINDOW_FRAME_UNITS_GROUPS      WindowFrameUnits = 3
)

// Enum value maps for WindowFrameUnits.
var (
	WindowFrameUnits_name = map[int32]string{
		0: "WINDOW_FRAME_UNITS_UNSPECIFIED",
		1: "WINDOW_FRAME_UNITS_ROWS",
		2: "WINDOW_FRAME_UNITS_RANGE",
		3: "WINDOW_FRAME_UNITS_GROUPS",
	}
	WindowFrameUnits_value = map[string]int32{
		"WINDOW_FRAME_UNITS_UNSPECIFIED": 0,
		"WINDOW_FRAME_UNITS_ROWS":        1,
		"WINDOW_FRAME_UNITS_RANGE":       2,
		"WINDOW_FRAME_UNITS_GROUPS":      3,
	}
)

func (x WindowFrameUnits) Enum() *WindowFrameUnits {
	p := new(WindowFrameUnits)
	*p = x
	return p
}

func (x WindowFrameUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowFrameUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_expression_v1_expression_proto_enumTypes[3].Descriptor()
}

func (WindowFrameUnits) Type() protoreflect.EnumType {
	return &file_chalk_expression_v1_expression_proto_enumTypes[3]
}

func (x WindowFrameUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowFrameUnits.Descriptor instead.
func (WindowFrameUnits) EnumDescriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{3}
}

type WindowFrameBoundType int32

const (
	WindowFrameBoundType_WINDOW_FRAME_BOUND_TYPE_UNSPECIFIED WindowFrameBoundType = 0
	WindowFrameBoundType_WINDOW_FRAME_BOUND_TYPE_CURRENT_ROW WindowFrameBoundType = 1
	WindowFrameBoundType_WINDOW_FRAME_BOUND_TYPE_PRECEDING   WindowFrameBoundType = 2
	WindowFrameBoundType_WINDOW_FRAME_BOUND_TYPE_FOLLOWING   WindowFrameBoundType = 3
)

// Enum value maps for WindowFrameBoundType.
var (
	WindowFrameBoundType_name = map[int32]string{
		0: "WINDOW_FRAME_BOUND_TYPE_UNSPECIFIED",
		1: "WINDOW_FRAME_BOUND_TYPE_CURRENT_ROW",
		2: "WINDOW_FRAME_BOUND_TYPE_PRECEDING",
		3: "WINDOW_FRAME_BOUND_TYPE_FOLLOWING",
	}
	WindowFrameBoundType_value = map[string]int32{
		"WINDOW_FRAME_BOUND_TYPE_UNSPECIFIED": 0,
		"WINDOW_FRAME_BOUND_TYPE_CURRENT_ROW": 1,
		"WINDOW_FRAME_BOUND_TYPE_PRECEDING":   2,
		"WINDOW_FRAME_BOUND_TYPE_FOLLOWING":   3,
	}
)

func (x WindowFrameBoundType) Enum() *WindowFrameBoundType {
	p := new(WindowFrameBoundType)
	*p = x
	return p
}

func (x WindowFrameBoundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowFrameBoundType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_expression_v1_expression_proto_enumTypes[4].Descriptor()
}

func (WindowFrameBoundType) Type() protoreflect.EnumType {
	return &file_chalk_expression_v1_expression_proto_enumTypes[4]
}

func (x WindowFrameBoundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowFrameBoundType.Descriptor instead.
func (WindowFrameBoundType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{4}
}

type LogicalExprNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExprType:
	//
	//	*LogicalExprNode_Column
	//	*LogicalExprNode_Alias
	//	*LogicalExprNode_Literal
	//	*LogicalExprNode_BinaryExpr
	//	*LogicalExprNode_AggregateExpr
	//	*LogicalExprNode_IsNullExpr
	//	*LogicalExprNode_IsNotNullExpr
	//	*LogicalExprNode_NotExpr
	//	*LogicalExprNode_Between
	//	*LogicalExprNode_Case
	//	*LogicalExprNode_Cast
	//	*LogicalExprNode_Sort
	//	*LogicalExprNode_Negative
	//	*LogicalExprNode_InList
	//	*LogicalExprNode_Wildcard
	//	*LogicalExprNode_ScalarFunction
	//	*LogicalExprNode_TryCast
	//	*LogicalExprNode_WindowExpr
	//	*LogicalExprNode_AggregateUdfExpr
	//	*LogicalExprNode_ScalarUdfExpr
	//	*LogicalExprNode_GetIndexedField
	//	*LogicalExprNode_GroupingSet
	//	*LogicalExprNode_Cube
	//	*LogicalExprNode_Rollup
	//	*LogicalExprNode_IsTrue
	//	*LogicalExprNode_IsFalse
	//	*LogicalExprNode_IsUnknown
	//	*LogicalExprNode_IsNotTrue
	//	*LogicalExprNode_IsNotFalse
	//	*LogicalExprNode_IsNotUnknown
	//	*LogicalExprNode_Like
	//	*LogicalExprNode_Ilike
	//	*LogicalExprNode_SimilarTo
	//	*LogicalExprNode_Placeholder
	ExprType isLogicalExprNode_ExprType `protobuf_oneof:"expr_type"`
}

func (x *LogicalExprNode) Reset() {
	*x = LogicalExprNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalExprNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalExprNode) ProtoMessage() {}

func (x *LogicalExprNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalExprNode.ProtoReflect.Descriptor instead.
func (*LogicalExprNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{0}
}

func (m *LogicalExprNode) GetExprType() isLogicalExprNode_ExprType {
	if m != nil {
		return m.ExprType
	}
	return nil
}

func (x *LogicalExprNode) GetColumn() *Column {
	if x, ok := x.GetExprType().(*LogicalExprNode_Column); ok {
		return x.Column
	}
	return nil
}

func (x *LogicalExprNode) GetAlias() *AliasNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Alias); ok {
		return x.Alias
	}
	return nil
}

func (x *LogicalExprNode) GetLiteral() *v1.ScalarValue {
	if x, ok := x.GetExprType().(*LogicalExprNode_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *LogicalExprNode) GetBinaryExpr() *BinaryExprNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_BinaryExpr); ok {
		return x.BinaryExpr
	}
	return nil
}

func (x *LogicalExprNode) GetAggregateExpr() *AggregateExprNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_AggregateExpr); ok {
		return x.AggregateExpr
	}
	return nil
}

func (x *LogicalExprNode) GetIsNullExpr() *IsNull {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsNullExpr); ok {
		return x.IsNullExpr
	}
	return nil
}

func (x *LogicalExprNode) GetIsNotNullExpr() *IsNotNull {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsNotNullExpr); ok {
		return x.IsNotNullExpr
	}
	return nil
}

func (x *LogicalExprNode) GetNotExpr() *Not {
	if x, ok := x.GetExprType().(*LogicalExprNode_NotExpr); ok {
		return x.NotExpr
	}
	return nil
}

func (x *LogicalExprNode) GetBetween() *BetweenNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Between); ok {
		return x.Between
	}
	return nil
}

func (x *LogicalExprNode) GetCase() *CaseNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Case); ok {
		return x.Case
	}
	return nil
}

func (x *LogicalExprNode) GetCast() *CastNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Cast); ok {
		return x.Cast
	}
	return nil
}

func (x *LogicalExprNode) GetSort() *SortExprNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Sort); ok {
		return x.Sort
	}
	return nil
}

func (x *LogicalExprNode) GetNegative() *NegativeNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Negative); ok {
		return x.Negative
	}
	return nil
}

func (x *LogicalExprNode) GetInList() *InListNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_InList); ok {
		return x.InList
	}
	return nil
}

func (x *LogicalExprNode) GetWildcard() *Wildcard {
	if x, ok := x.GetExprType().(*LogicalExprNode_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

func (x *LogicalExprNode) GetScalarFunction() *ScalarFunctionNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_ScalarFunction); ok {
		return x.ScalarFunction
	}
	return nil
}

func (x *LogicalExprNode) GetTryCast() *TryCastNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_TryCast); ok {
		return x.TryCast
	}
	return nil
}

func (x *LogicalExprNode) GetWindowExpr() *WindowExprNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_WindowExpr); ok {
		return x.WindowExpr
	}
	return nil
}

func (x *LogicalExprNode) GetAggregateUdfExpr() *AggregateUDFExprNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_AggregateUdfExpr); ok {
		return x.AggregateUdfExpr
	}
	return nil
}

func (x *LogicalExprNode) GetScalarUdfExpr() *ScalarUDFExprNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_ScalarUdfExpr); ok {
		return x.ScalarUdfExpr
	}
	return nil
}

func (x *LogicalExprNode) GetGetIndexedField() *GetIndexedField {
	if x, ok := x.GetExprType().(*LogicalExprNode_GetIndexedField); ok {
		return x.GetIndexedField
	}
	return nil
}

func (x *LogicalExprNode) GetGroupingSet() *GroupingSetNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_GroupingSet); ok {
		return x.GroupingSet
	}
	return nil
}

func (x *LogicalExprNode) GetCube() *CubeNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Cube); ok {
		return x.Cube
	}
	return nil
}

func (x *LogicalExprNode) GetRollup() *RollupNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Rollup); ok {
		return x.Rollup
	}
	return nil
}

func (x *LogicalExprNode) GetIsTrue() *IsTrue {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsTrue); ok {
		return x.IsTrue
	}
	return nil
}

func (x *LogicalExprNode) GetIsFalse() *IsFalse {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsFalse); ok {
		return x.IsFalse
	}
	return nil
}

func (x *LogicalExprNode) GetIsUnknown() *IsUnknown {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsUnknown); ok {
		return x.IsUnknown
	}
	return nil
}

func (x *LogicalExprNode) GetIsNotTrue() *IsNotTrue {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsNotTrue); ok {
		return x.IsNotTrue
	}
	return nil
}

func (x *LogicalExprNode) GetIsNotFalse() *IsNotFalse {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsNotFalse); ok {
		return x.IsNotFalse
	}
	return nil
}

func (x *LogicalExprNode) GetIsNotUnknown() *IsNotUnknown {
	if x, ok := x.GetExprType().(*LogicalExprNode_IsNotUnknown); ok {
		return x.IsNotUnknown
	}
	return nil
}

func (x *LogicalExprNode) GetLike() *LikeNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Like); ok {
		return x.Like
	}
	return nil
}

func (x *LogicalExprNode) GetIlike() *ILikeNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Ilike); ok {
		return x.Ilike
	}
	return nil
}

func (x *LogicalExprNode) GetSimilarTo() *SimilarToNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_SimilarTo); ok {
		return x.SimilarTo
	}
	return nil
}

func (x *LogicalExprNode) GetPlaceholder() *PlaceholderNode {
	if x, ok := x.GetExprType().(*LogicalExprNode_Placeholder); ok {
		return x.Placeholder
	}
	return nil
}

type isLogicalExprNode_ExprType interface {
	isLogicalExprNode_ExprType()
}

type LogicalExprNode_Column struct {
	// column references
	Column *Column `protobuf:"bytes,1,opt,name=column,proto3,oneof"`
}

type LogicalExprNode_Alias struct {
	// alias
	Alias *AliasNode `protobuf:"bytes,2,opt,name=alias,proto3,oneof"`
}

type LogicalExprNode_Literal struct {
	Literal *v1.ScalarValue `protobuf:"bytes,3,opt,name=literal,proto3,oneof"`
}

type LogicalExprNode_BinaryExpr struct {
	// binary expressions
	BinaryExpr *BinaryExprNode `protobuf:"bytes,4,opt,name=binary_expr,json=binaryExpr,proto3,oneof"`
}

type LogicalExprNode_AggregateExpr struct {
	// aggregate expressions
	AggregateExpr *AggregateExprNode `protobuf:"bytes,5,opt,name=aggregate_expr,json=aggregateExpr,proto3,oneof"`
}

type LogicalExprNode_IsNullExpr struct {
	// null checks
	IsNullExpr *IsNull `protobuf:"bytes,6,opt,name=is_null_expr,json=isNullExpr,proto3,oneof"`
}

type LogicalExprNode_IsNotNullExpr struct {
	IsNotNullExpr *IsNotNull `protobuf:"bytes,7,opt,name=is_not_null_expr,json=isNotNullExpr,proto3,oneof"`
}

type LogicalExprNode_NotExpr struct {
	NotExpr *Not `protobuf:"bytes,8,opt,name=not_expr,json=notExpr,proto3,oneof"`
}

type LogicalExprNode_Between struct {
	Between *BetweenNode `protobuf:"bytes,9,opt,name=between,proto3,oneof"`
}

type LogicalExprNode_Case struct {
	Case *CaseNode `protobuf:"bytes,10,opt,name=case,proto3,oneof"`
}

type LogicalExprNode_Cast struct {
	Cast *CastNode `protobuf:"bytes,11,opt,name=cast,proto3,oneof"`
}

type LogicalExprNode_Sort struct {
	Sort *SortExprNode `protobuf:"bytes,12,opt,name=sort,proto3,oneof"`
}

type LogicalExprNode_Negative struct {
	Negative *NegativeNode `protobuf:"bytes,13,opt,name=negative,proto3,oneof"`
}

type LogicalExprNode_InList struct {
	InList *InListNode `protobuf:"bytes,14,opt,name=in_list,json=inList,proto3,oneof"`
}

type LogicalExprNode_Wildcard struct {
	Wildcard *Wildcard `protobuf:"bytes,15,opt,name=wildcard,proto3,oneof"`
}

type LogicalExprNode_ScalarFunction struct {
	ScalarFunction *ScalarFunctionNode `protobuf:"bytes,16,opt,name=scalar_function,json=scalarFunction,proto3,oneof"`
}

type LogicalExprNode_TryCast struct {
	TryCast *TryCastNode `protobuf:"bytes,17,opt,name=try_cast,json=tryCast,proto3,oneof"`
}

type LogicalExprNode_WindowExpr struct {
	// window expressions
	WindowExpr *WindowExprNode `protobuf:"bytes,18,opt,name=window_expr,json=windowExpr,proto3,oneof"`
}

type LogicalExprNode_AggregateUdfExpr struct {
	// AggregateUDF expressions
	AggregateUdfExpr *AggregateUDFExprNode `protobuf:"bytes,19,opt,name=aggregate_udf_expr,json=aggregateUdfExpr,proto3,oneof"`
}

type LogicalExprNode_ScalarUdfExpr struct {
	// Scalar UDF expressions
	ScalarUdfExpr *ScalarUDFExprNode `protobuf:"bytes,20,opt,name=scalar_udf_expr,json=scalarUdfExpr,proto3,oneof"`
}

type LogicalExprNode_GetIndexedField struct {
	GetIndexedField *GetIndexedField `protobuf:"bytes,21,opt,name=get_indexed_field,json=getIndexedField,proto3,oneof"`
}

type LogicalExprNode_GroupingSet struct {
	GroupingSet *GroupingSetNode `protobuf:"bytes,22,opt,name=grouping_set,json=groupingSet,proto3,oneof"`
}

type LogicalExprNode_Cube struct {
	Cube *CubeNode `protobuf:"bytes,23,opt,name=cube,proto3,oneof"`
}

type LogicalExprNode_Rollup struct {
	Rollup *RollupNode `protobuf:"bytes,24,opt,name=rollup,proto3,oneof"`
}

type LogicalExprNode_IsTrue struct {
	IsTrue *IsTrue `protobuf:"bytes,25,opt,name=is_true,json=isTrue,proto3,oneof"`
}

type LogicalExprNode_IsFalse struct {
	IsFalse *IsFalse `protobuf:"bytes,26,opt,name=is_false,json=isFalse,proto3,oneof"`
}

type LogicalExprNode_IsUnknown struct {
	IsUnknown *IsUnknown `protobuf:"bytes,27,opt,name=is_unknown,json=isUnknown,proto3,oneof"`
}

type LogicalExprNode_IsNotTrue struct {
	IsNotTrue *IsNotTrue `protobuf:"bytes,28,opt,name=is_not_true,json=isNotTrue,proto3,oneof"`
}

type LogicalExprNode_IsNotFalse struct {
	IsNotFalse *IsNotFalse `protobuf:"bytes,29,opt,name=is_not_false,json=isNotFalse,proto3,oneof"`
}

type LogicalExprNode_IsNotUnknown struct {
	IsNotUnknown *IsNotUnknown `protobuf:"bytes,30,opt,name=is_not_unknown,json=isNotUnknown,proto3,oneof"`
}

type LogicalExprNode_Like struct {
	Like *LikeNode `protobuf:"bytes,31,opt,name=like,proto3,oneof"`
}

type LogicalExprNode_Ilike struct {
	Ilike *ILikeNode `protobuf:"bytes,32,opt,name=ilike,proto3,oneof"`
}

type LogicalExprNode_SimilarTo struct {
	SimilarTo *SimilarToNode `protobuf:"bytes,33,opt,name=similar_to,json=similarTo,proto3,oneof"`
}

type LogicalExprNode_Placeholder struct {
	Placeholder *PlaceholderNode `protobuf:"bytes,34,opt,name=placeholder,proto3,oneof"`
}

func (*LogicalExprNode_Column) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Alias) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Literal) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_BinaryExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_AggregateExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsNullExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsNotNullExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_NotExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Between) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Case) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Cast) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Sort) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Negative) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_InList) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Wildcard) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_ScalarFunction) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_TryCast) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_WindowExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_AggregateUdfExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_ScalarUdfExpr) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_GetIndexedField) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_GroupingSet) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Cube) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Rollup) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsTrue) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsFalse) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsUnknown) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsNotTrue) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsNotFalse) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_IsNotUnknown) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Like) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Ilike) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_SimilarTo) isLogicalExprNode_ExprType() {}

func (*LogicalExprNode_Placeholder) isLogicalExprNode_ExprType() {}

type ColumnRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation string `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *ColumnRelation) Reset() {
	*x = ColumnRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRelation) ProtoMessage() {}

func (x *ColumnRelation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRelation.ProtoReflect.Descriptor instead.
func (*ColumnRelation) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnRelation) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Relation *ColumnRelation `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetRelation() *ColumnRelation {
	if x != nil {
		return x.Relation
	}
	return nil
}

type Wildcard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifier *string `protobuf:"bytes,1,opt,name=qualifier,proto3,oneof" json:"qualifier,omitempty"`
}

func (x *Wildcard) Reset() {
	*x = Wildcard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wildcard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wildcard) ProtoMessage() {}

func (x *Wildcard) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wildcard.ProtoReflect.Descriptor instead.
func (*Wildcard) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{3}
}

func (x *Wildcard) GetQualifier() string {
	if x != nil && x.Qualifier != nil {
		return *x.Qualifier
	}
	return ""
}

type PlaceholderNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataType *v1.ArrowType `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
}

func (x *PlaceholderNode) Reset() {
	*x = PlaceholderNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderNode) ProtoMessage() {}

func (x *PlaceholderNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderNode.ProtoReflect.Descriptor instead.
func (*PlaceholderNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{4}
}

func (x *PlaceholderNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlaceholderNode) GetDataType() *v1.ArrowType {
	if x != nil {
		return x.DataType
	}
	return nil
}

type LogicalExprList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*LogicalExprNode `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *LogicalExprList) Reset() {
	*x = LogicalExprList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalExprList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalExprList) ProtoMessage() {}

func (x *LogicalExprList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalExprList.ProtoReflect.Descriptor instead.
func (*LogicalExprList) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{5}
}

func (x *LogicalExprList) GetExpr() []*LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type GroupingSetNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*LogicalExprList `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *GroupingSetNode) Reset() {
	*x = GroupingSetNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupingSetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupingSetNode) ProtoMessage() {}

func (x *GroupingSetNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupingSetNode.ProtoReflect.Descriptor instead.
func (*GroupingSetNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{6}
}

func (x *GroupingSetNode) GetExpr() []*LogicalExprList {
	if x != nil {
		return x.Expr
	}
	return nil
}

type CubeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*LogicalExprNode `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *CubeNode) Reset() {
	*x = CubeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CubeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CubeNode) ProtoMessage() {}

func (x *CubeNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CubeNode.ProtoReflect.Descriptor instead.
func (*CubeNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{7}
}

func (x *CubeNode) GetExpr() []*LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type RollupNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*LogicalExprNode `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *RollupNode) Reset() {
	*x = RollupNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollupNode) ProtoMessage() {}

func (x *RollupNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollupNode.ProtoReflect.Descriptor instead.
func (*RollupNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{8}
}

func (x *RollupNode) GetExpr() []*LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type NamedStructField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *v1.ScalarValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NamedStructField) Reset() {
	*x = NamedStructField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedStructField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedStructField) ProtoMessage() {}

func (x *NamedStructField) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedStructField.ProtoReflect.Descriptor instead.
func (*NamedStructField) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{9}
}

func (x *NamedStructField) GetName() *v1.ScalarValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type ListIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *LogicalExprNode `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ListIndex) Reset() {
	*x = ListIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndex) ProtoMessage() {}

func (x *ListIndex) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndex.ProtoReflect.Descriptor instead.
func (*ListIndex) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{10}
}

func (x *ListIndex) GetKey() *LogicalExprNode {
	if x != nil {
		return x.Key
	}
	return nil
}

type ListRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *LogicalExprNode `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Stop  *LogicalExprNode `protobuf:"bytes,2,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *ListRange) Reset() {
	*x = ListRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRange) ProtoMessage() {}

func (x *ListRange) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRange.ProtoReflect.Descriptor instead.
func (*ListRange) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{11}
}

func (x *ListRange) GetStart() *LogicalExprNode {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListRange) GetStop() *LogicalExprNode {
	if x != nil {
		return x.Stop
	}
	return nil
}

type GetIndexedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	// Types that are assignable to Field:
	//
	//	*GetIndexedField_NamedStructField
	//	*GetIndexedField_ListIndex
	//	*GetIndexedField_ListRange
	Field isGetIndexedField_Field `protobuf_oneof:"field"`
}

func (x *GetIndexedField) Reset() {
	*x = GetIndexedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIndexedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexedField) ProtoMessage() {}

func (x *GetIndexedField) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexedField.ProtoReflect.Descriptor instead.
func (*GetIndexedField) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{12}
}

func (x *GetIndexedField) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (m *GetIndexedField) GetField() isGetIndexedField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *GetIndexedField) GetNamedStructField() *NamedStructField {
	if x, ok := x.GetField().(*GetIndexedField_NamedStructField); ok {
		return x.NamedStructField
	}
	return nil
}

func (x *GetIndexedField) GetListIndex() *ListIndex {
	if x, ok := x.GetField().(*GetIndexedField_ListIndex); ok {
		return x.ListIndex
	}
	return nil
}

func (x *GetIndexedField) GetListRange() *ListRange {
	if x, ok := x.GetField().(*GetIndexedField_ListRange); ok {
		return x.ListRange
	}
	return nil
}

type isGetIndexedField_Field interface {
	isGetIndexedField_Field()
}

type GetIndexedField_NamedStructField struct {
	NamedStructField *NamedStructField `protobuf:"bytes,2,opt,name=named_struct_field,json=namedStructField,proto3,oneof"`
}

type GetIndexedField_ListIndex struct {
	ListIndex *ListIndex `protobuf:"bytes,3,opt,name=list_index,json=listIndex,proto3,oneof"`
}

type GetIndexedField_ListRange struct {
	ListRange *ListRange `protobuf:"bytes,4,opt,name=list_range,json=listRange,proto3,oneof"`
}

func (*GetIndexedField_NamedStructField) isGetIndexedField_Field() {}

func (*GetIndexedField_ListIndex) isGetIndexedField_Field() {}

func (*GetIndexedField_ListRange) isGetIndexedField_Field() {}

type IsNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsNull) Reset() {
	*x = IsNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNull) ProtoMessage() {}

func (x *IsNull) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNull.ProtoReflect.Descriptor instead.
func (*IsNull) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{13}
}

func (x *IsNull) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type IsNotNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsNotNull) Reset() {
	*x = IsNotNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNotNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNotNull) ProtoMessage() {}

func (x *IsNotNull) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNotNull.ProtoReflect.Descriptor instead.
func (*IsNotNull) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{14}
}

func (x *IsNotNull) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type IsTrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsTrue) Reset() {
	*x = IsTrue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTrue) ProtoMessage() {}

func (x *IsTrue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTrue.ProtoReflect.Descriptor instead.
func (*IsTrue) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{15}
}

func (x *IsTrue) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type IsFalse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsFalse) Reset() {
	*x = IsFalse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFalse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFalse) ProtoMessage() {}

func (x *IsFalse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFalse.ProtoReflect.Descriptor instead.
func (*IsFalse) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{16}
}

func (x *IsFalse) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type IsUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsUnknown) Reset() {
	*x = IsUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUnknown) ProtoMessage() {}

func (x *IsUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUnknown.ProtoReflect.Descriptor instead.
func (*IsUnknown) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{17}
}

func (x *IsUnknown) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type IsNotTrue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsNotTrue) Reset() {
	*x = IsNotTrue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNotTrue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNotTrue) ProtoMessage() {}

func (x *IsNotTrue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNotTrue.ProtoReflect.Descriptor instead.
func (*IsNotTrue) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{18}
}

func (x *IsNotTrue) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type IsNotFalse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsNotFalse) Reset() {
	*x = IsNotFalse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNotFalse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNotFalse) ProtoMessage() {}

func (x *IsNotFalse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNotFalse.ProtoReflect.Descriptor instead.
func (*IsNotFalse) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{19}
}

func (x *IsNotFalse) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type IsNotUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *IsNotUnknown) Reset() {
	*x = IsNotUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsNotUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsNotUnknown) ProtoMessage() {}

func (x *IsNotUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsNotUnknown.ProtoReflect.Descriptor instead.
func (*IsNotUnknown) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{20}
}

func (x *IsNotUnknown) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Not struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Not) Reset() {
	*x = Not{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Not) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Not) ProtoMessage() {}

func (x *Not) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Not.ProtoReflect.Descriptor instead.
func (*Not) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{21}
}

func (x *Not) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type AliasNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr     *LogicalExprNode       `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Alias    string                 `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Relation []*OwnedTableReference `protobuf:"bytes,3,rep,name=relation,proto3" json:"relation,omitempty"`
}

func (x *AliasNode) Reset() {
	*x = AliasNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliasNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliasNode) ProtoMessage() {}

func (x *AliasNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliasNode.ProtoReflect.Descriptor instead.
func (*AliasNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{22}
}

func (x *AliasNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *AliasNode) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AliasNode) GetRelation() []*OwnedTableReference {
	if x != nil {
		return x.Relation
	}
	return nil
}

type BareTableReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *BareTableReference) Reset() {
	*x = BareTableReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BareTableReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BareTableReference) ProtoMessage() {}

func (x *BareTableReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BareTableReference.ProtoReflect.Descriptor instead.
func (*BareTableReference) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{23}
}

func (x *BareTableReference) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type PartialTableReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table  string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *PartialTableReference) Reset() {
	*x = PartialTableReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialTableReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialTableReference) ProtoMessage() {}

func (x *PartialTableReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialTableReference.ProtoReflect.Descriptor instead.
func (*PartialTableReference) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{24}
}

func (x *PartialTableReference) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *PartialTableReference) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type FullTableReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog string `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	Schema  string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Table   string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *FullTableReference) Reset() {
	*x = FullTableReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullTableReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTableReference) ProtoMessage() {}

func (x *FullTableReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTableReference.ProtoReflect.Descriptor instead.
func (*FullTableReference) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{25}
}

func (x *FullTableReference) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *FullTableReference) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *FullTableReference) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type OwnedTableReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TableReferenceEnum:
	//
	//	*OwnedTableReference_Bare
	//	*OwnedTableReference_Partial
	//	*OwnedTableReference_Full
	TableReferenceEnum isOwnedTableReference_TableReferenceEnum `protobuf_oneof:"table_reference_enum"`
}

func (x *OwnedTableReference) Reset() {
	*x = OwnedTableReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnedTableReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedTableReference) ProtoMessage() {}

func (x *OwnedTableReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedTableReference.ProtoReflect.Descriptor instead.
func (*OwnedTableReference) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{26}
}

func (m *OwnedTableReference) GetTableReferenceEnum() isOwnedTableReference_TableReferenceEnum {
	if m != nil {
		return m.TableReferenceEnum
	}
	return nil
}

func (x *OwnedTableReference) GetBare() *BareTableReference {
	if x, ok := x.GetTableReferenceEnum().(*OwnedTableReference_Bare); ok {
		return x.Bare
	}
	return nil
}

func (x *OwnedTableReference) GetPartial() *PartialTableReference {
	if x, ok := x.GetTableReferenceEnum().(*OwnedTableReference_Partial); ok {
		return x.Partial
	}
	return nil
}

func (x *OwnedTableReference) GetFull() *FullTableReference {
	if x, ok := x.GetTableReferenceEnum().(*OwnedTableReference_Full); ok {
		return x.Full
	}
	return nil
}

type isOwnedTableReference_TableReferenceEnum interface {
	isOwnedTableReference_TableReferenceEnum()
}

type OwnedTableReference_Bare struct {
	Bare *BareTableReference `protobuf:"bytes,1,opt,name=bare,proto3,oneof"`
}

type OwnedTableReference_Partial struct {
	Partial *PartialTableReference `protobuf:"bytes,2,opt,name=partial,proto3,oneof"`
}

type OwnedTableReference_Full struct {
	Full *FullTableReference `protobuf:"bytes,3,opt,name=full,proto3,oneof"`
}

func (*OwnedTableReference_Bare) isOwnedTableReference_TableReferenceEnum() {}

func (*OwnedTableReference_Partial) isOwnedTableReference_TableReferenceEnum() {}

func (*OwnedTableReference_Full) isOwnedTableReference_TableReferenceEnum() {}

type BinaryExprNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents the operands from the left inner most expression
	// to the right outer most expression where each of them are chained
	// with the operator 'op'.
	Operands []*LogicalExprNode `protobuf:"bytes,1,rep,name=operands,proto3" json:"operands,omitempty"`
	Op       string             `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *BinaryExprNode) Reset() {
	*x = BinaryExprNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExprNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExprNode) ProtoMessage() {}

func (x *BinaryExprNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExprNode.ProtoReflect.Descriptor instead.
func (*BinaryExprNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{27}
}

func (x *BinaryExprNode) GetOperands() []*LogicalExprNode {
	if x != nil {
		return x.Operands
	}
	return nil
}

func (x *BinaryExprNode) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type NegativeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *NegativeNode) Reset() {
	*x = NegativeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegativeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegativeNode) ProtoMessage() {}

func (x *NegativeNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegativeNode.ProtoReflect.Descriptor instead.
func (*NegativeNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{28}
}

func (x *NegativeNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

type InListNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr    *LogicalExprNode   `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	List    []*LogicalExprNode `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Negated bool               `protobuf:"varint,3,opt,name=negated,proto3" json:"negated,omitempty"`
}

func (x *InListNode) Reset() {
	*x = InListNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InListNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InListNode) ProtoMessage() {}

func (x *InListNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InListNode.ProtoReflect.Descriptor instead.
func (*InListNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{29}
}

func (x *InListNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *InListNode) GetList() []*LogicalExprNode {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *InListNode) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

type ScalarFunctionNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fun  ScalarFunction     `protobuf:"varint,1,opt,name=fun,proto3,enum=chalk.expression.v1.ScalarFunction" json:"fun,omitempty"`
	Args []*LogicalExprNode `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ScalarFunctionNode) Reset() {
	*x = ScalarFunctionNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFunctionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFunctionNode) ProtoMessage() {}

func (x *ScalarFunctionNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFunctionNode.ProtoReflect.Descriptor instead.
func (*ScalarFunctionNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{30}
}

func (x *ScalarFunctionNode) GetFun() ScalarFunction {
	if x != nil {
		return x.Fun
	}
	return ScalarFunction_SCALAR_FUNCTION_UNSPECIFIED
}

func (x *ScalarFunctionNode) GetArgs() []*LogicalExprNode {
	if x != nil {
		return x.Args
	}
	return nil
}

type AggregateExprNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggrFunction AggregateFunction  `protobuf:"varint,1,opt,name=aggr_function,json=aggrFunction,proto3,enum=chalk.expression.v1.AggregateFunction" json:"aggr_function,omitempty"`
	Expr         []*LogicalExprNode `protobuf:"bytes,2,rep,name=expr,proto3" json:"expr,omitempty"`
	Distinct     bool               `protobuf:"varint,3,opt,name=distinct,proto3" json:"distinct,omitempty"`
	Filter       *LogicalExprNode   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy      []*LogicalExprNode `protobuf:"bytes,5,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *AggregateExprNode) Reset() {
	*x = AggregateExprNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateExprNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateExprNode) ProtoMessage() {}

func (x *AggregateExprNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateExprNode.ProtoReflect.Descriptor instead.
func (*AggregateExprNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{31}
}

func (x *AggregateExprNode) GetAggrFunction() AggregateFunction {
	if x != nil {
		return x.AggrFunction
	}
	return AggregateFunction_AGGREGATE_FUNCTION_UNSPECIFIED
}

func (x *AggregateExprNode) GetExpr() []*LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *AggregateExprNode) GetDistinct() bool {
	if x != nil {
		return x.Distinct
	}
	return false
}

func (x *AggregateExprNode) GetFilter() *LogicalExprNode {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AggregateExprNode) GetOrderBy() []*LogicalExprNode {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type AggregateUDFExprNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunName string                      `protobuf:"bytes,1,opt,name=fun_name,json=funName,proto3" json:"fun_name,omitempty"`
	Args    []*LogicalExprNode          `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Filter  *LogicalExprNode            `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy []*LogicalExprNode          `protobuf:"bytes,4,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Kwargs  map[string]*LogicalExprNode `protobuf:"bytes,5,rep,name=kwargs,proto3" json:"kwargs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AggregateUDFExprNode) Reset() {
	*x = AggregateUDFExprNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateUDFExprNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateUDFExprNode) ProtoMessage() {}

func (x *AggregateUDFExprNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateUDFExprNode.ProtoReflect.Descriptor instead.
func (*AggregateUDFExprNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{32}
}

func (x *AggregateUDFExprNode) GetFunName() string {
	if x != nil {
		return x.FunName
	}
	return ""
}

func (x *AggregateUDFExprNode) GetArgs() []*LogicalExprNode {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AggregateUDFExprNode) GetFilter() *LogicalExprNode {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AggregateUDFExprNode) GetOrderBy() []*LogicalExprNode {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *AggregateUDFExprNode) GetKwargs() map[string]*LogicalExprNode {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

type ScalarUDFExprNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunName string             `protobuf:"bytes,1,opt,name=fun_name,json=funName,proto3" json:"fun_name,omitempty"`
	Args    []*LogicalExprNode `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ScalarUDFExprNode) Reset() {
	*x = ScalarUDFExprNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarUDFExprNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarUDFExprNode) ProtoMessage() {}

func (x *ScalarUDFExprNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarUDFExprNode.ProtoReflect.Descriptor instead.
func (*ScalarUDFExprNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{33}
}

func (x *ScalarUDFExprNode) GetFunName() string {
	if x != nil {
		return x.FunName
	}
	return ""
}

func (x *ScalarUDFExprNode) GetArgs() []*LogicalExprNode {
	if x != nil {
		return x.Args
	}
	return nil
}

type WindowExprNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WindowFunction:
	//
	//	*WindowExprNode_AggrFunction
	//	*WindowExprNode_BuiltInFunction
	//	*WindowExprNode_Udaf
	//	*WindowExprNode_Udwf
	WindowFunction isWindowExprNode_WindowFunction `protobuf_oneof:"window_function"`
	Expr           *LogicalExprNode                `protobuf:"bytes,4,opt,name=expr,proto3" json:"expr,omitempty"`
	PartitionBy    []*LogicalExprNode              `protobuf:"bytes,5,rep,name=partition_by,json=partitionBy,proto3" json:"partition_by,omitempty"`
	OrderBy        []*LogicalExprNode              `protobuf:"bytes,6,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// repeated LogicalExprNode filter = 7;
	WindowFrame *WindowFrame `protobuf:"bytes,8,opt,name=window_frame,json=windowFrame,proto3" json:"window_frame,omitempty"`
}

func (x *WindowExprNode) Reset() {
	*x = WindowExprNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowExprNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowExprNode) ProtoMessage() {}

func (x *WindowExprNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowExprNode.ProtoReflect.Descriptor instead.
func (*WindowExprNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{34}
}

func (m *WindowExprNode) GetWindowFunction() isWindowExprNode_WindowFunction {
	if m != nil {
		return m.WindowFunction
	}
	return nil
}

func (x *WindowExprNode) GetAggrFunction() AggregateFunction {
	if x, ok := x.GetWindowFunction().(*WindowExprNode_AggrFunction); ok {
		return x.AggrFunction
	}
	return AggregateFunction_AGGREGATE_FUNCTION_UNSPECIFIED
}

func (x *WindowExprNode) GetBuiltInFunction() BuiltInWindowFunction {
	if x, ok := x.GetWindowFunction().(*WindowExprNode_BuiltInFunction); ok {
		return x.BuiltInFunction
	}
	return BuiltInWindowFunction_BUILT_IN_WINDOW_FUNCTION_UNSPECIFIED
}

func (x *WindowExprNode) GetUdaf() string {
	if x, ok := x.GetWindowFunction().(*WindowExprNode_Udaf); ok {
		return x.Udaf
	}
	return ""
}

func (x *WindowExprNode) GetUdwf() string {
	if x, ok := x.GetWindowFunction().(*WindowExprNode_Udwf); ok {
		return x.Udwf
	}
	return ""
}

func (x *WindowExprNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *WindowExprNode) GetPartitionBy() []*LogicalExprNode {
	if x != nil {
		return x.PartitionBy
	}
	return nil
}

func (x *WindowExprNode) GetOrderBy() []*LogicalExprNode {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *WindowExprNode) GetWindowFrame() *WindowFrame {
	if x != nil {
		return x.WindowFrame
	}
	return nil
}

type isWindowExprNode_WindowFunction interface {
	isWindowExprNode_WindowFunction()
}

type WindowExprNode_AggrFunction struct {
	AggrFunction AggregateFunction `protobuf:"varint,1,opt,name=aggr_function,json=aggrFunction,proto3,enum=chalk.expression.v1.AggregateFunction,oneof"`
}

type WindowExprNode_BuiltInFunction struct {
	BuiltInFunction BuiltInWindowFunction `protobuf:"varint,2,opt,name=built_in_function,json=builtInFunction,proto3,enum=chalk.expression.v1.BuiltInWindowFunction,oneof"`
}

type WindowExprNode_Udaf struct {
	Udaf string `protobuf:"bytes,3,opt,name=udaf,proto3,oneof"`
}

type WindowExprNode_Udwf struct {
	Udwf string `protobuf:"bytes,9,opt,name=udwf,proto3,oneof"`
}

func (*WindowExprNode_AggrFunction) isWindowExprNode_WindowFunction() {}

func (*WindowExprNode_BuiltInFunction) isWindowExprNode_WindowFunction() {}

func (*WindowExprNode_Udaf) isWindowExprNode_WindowFunction() {}

func (*WindowExprNode_Udwf) isWindowExprNode_WindowFunction() {}

type BetweenNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr    *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Negated bool             `protobuf:"varint,2,opt,name=negated,proto3" json:"negated,omitempty"`
	Low     *LogicalExprNode `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`
	High    *LogicalExprNode `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *BetweenNode) Reset() {
	*x = BetweenNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetweenNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetweenNode) ProtoMessage() {}

func (x *BetweenNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetweenNode.ProtoReflect.Descriptor instead.
func (*BetweenNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{35}
}

func (x *BetweenNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *BetweenNode) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *BetweenNode) GetLow() *LogicalExprNode {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *BetweenNode) GetHigh() *LogicalExprNode {
	if x != nil {
		return x.High
	}
	return nil
}

type LikeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negated    bool             `protobuf:"varint,1,opt,name=negated,proto3" json:"negated,omitempty"`
	Expr       *LogicalExprNode `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Pattern    *LogicalExprNode `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	EscapeChar string           `protobuf:"bytes,4,opt,name=escape_char,json=escapeChar,proto3" json:"escape_char,omitempty"`
}

func (x *LikeNode) Reset() {
	*x = LikeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeNode) ProtoMessage() {}

func (x *LikeNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeNode.ProtoReflect.Descriptor instead.
func (*LikeNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{36}
}

func (x *LikeNode) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *LikeNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *LikeNode) GetPattern() *LogicalExprNode {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *LikeNode) GetEscapeChar() string {
	if x != nil {
		return x.EscapeChar
	}
	return ""
}

type ILikeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negated    bool             `protobuf:"varint,1,opt,name=negated,proto3" json:"negated,omitempty"`
	Expr       *LogicalExprNode `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Pattern    *LogicalExprNode `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	EscapeChar string           `protobuf:"bytes,4,opt,name=escape_char,json=escapeChar,proto3" json:"escape_char,omitempty"`
}

func (x *ILikeNode) Reset() {
	*x = ILikeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ILikeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ILikeNode) ProtoMessage() {}

func (x *ILikeNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ILikeNode.ProtoReflect.Descriptor instead.
func (*ILikeNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{37}
}

func (x *ILikeNode) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *ILikeNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *ILikeNode) GetPattern() *LogicalExprNode {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *ILikeNode) GetEscapeChar() string {
	if x != nil {
		return x.EscapeChar
	}
	return ""
}

type SimilarToNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negated    bool             `protobuf:"varint,1,opt,name=negated,proto3" json:"negated,omitempty"`
	Expr       *LogicalExprNode `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Pattern    *LogicalExprNode `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	EscapeChar string           `protobuf:"bytes,4,opt,name=escape_char,json=escapeChar,proto3" json:"escape_char,omitempty"`
}

func (x *SimilarToNode) Reset() {
	*x = SimilarToNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimilarToNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarToNode) ProtoMessage() {}

func (x *SimilarToNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarToNode.ProtoReflect.Descriptor instead.
func (*SimilarToNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{38}
}

func (x *SimilarToNode) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *SimilarToNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *SimilarToNode) GetPattern() *LogicalExprNode {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *SimilarToNode) GetEscapeChar() string {
	if x != nil {
		return x.EscapeChar
	}
	return ""
}

type CaseNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr         *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	WhenThenExpr []*WhenThen      `protobuf:"bytes,2,rep,name=when_then_expr,json=whenThenExpr,proto3" json:"when_then_expr,omitempty"`
	ElseExpr     *LogicalExprNode `protobuf:"bytes,3,opt,name=else_expr,json=elseExpr,proto3" json:"else_expr,omitempty"`
}

func (x *CaseNode) Reset() {
	*x = CaseNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseNode) ProtoMessage() {}

func (x *CaseNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseNode.ProtoReflect.Descriptor instead.
func (*CaseNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{39}
}

func (x *CaseNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *CaseNode) GetWhenThenExpr() []*WhenThen {
	if x != nil {
		return x.WhenThenExpr
	}
	return nil
}

func (x *CaseNode) GetElseExpr() *LogicalExprNode {
	if x != nil {
		return x.ElseExpr
	}
	return nil
}

type WhenThen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhenExpr *LogicalExprNode `protobuf:"bytes,1,opt,name=when_expr,json=whenExpr,proto3" json:"when_expr,omitempty"`
	ThenExpr *LogicalExprNode `protobuf:"bytes,2,opt,name=then_expr,json=thenExpr,proto3" json:"then_expr,omitempty"`
}

func (x *WhenThen) Reset() {
	*x = WhenThen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhenThen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhenThen) ProtoMessage() {}

func (x *WhenThen) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhenThen.ProtoReflect.Descriptor instead.
func (*WhenThen) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{40}
}

func (x *WhenThen) GetWhenExpr() *LogicalExprNode {
	if x != nil {
		return x.WhenExpr
	}
	return nil
}

func (x *WhenThen) GetThenExpr() *LogicalExprNode {
	if x != nil {
		return x.ThenExpr
	}
	return nil
}

type CastNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr      *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	ArrowType *v1.ArrowType    `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *CastNode) Reset() {
	*x = CastNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CastNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastNode) ProtoMessage() {}

func (x *CastNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastNode.ProtoReflect.Descriptor instead.
func (*CastNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{41}
}

func (x *CastNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *CastNode) GetArrowType() *v1.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type TryCastNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr      *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	ArrowType *v1.ArrowType    `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *TryCastNode) Reset() {
	*x = TryCastNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryCastNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryCastNode) ProtoMessage() {}

func (x *TryCastNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryCastNode.ProtoReflect.Descriptor instead.
func (*TryCastNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{42}
}

func (x *TryCastNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *TryCastNode) GetArrowType() *v1.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type SortExprNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr       *LogicalExprNode `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Asc        bool             `protobuf:"varint,2,opt,name=asc,proto3" json:"asc,omitempty"`
	NullsFirst bool             `protobuf:"varint,3,opt,name=nulls_first,json=nullsFirst,proto3" json:"nulls_first,omitempty"`
}

func (x *SortExprNode) Reset() {
	*x = SortExprNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortExprNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortExprNode) ProtoMessage() {}

func (x *SortExprNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortExprNode.ProtoReflect.Descriptor instead.
func (*SortExprNode) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{43}
}

func (x *SortExprNode) GetExpr() *LogicalExprNode {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *SortExprNode) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *SortExprNode) GetNullsFirst() bool {
	if x != nil {
		return x.NullsFirst
	}
	return false
}

type WindowFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowFrameUnits WindowFrameUnits  `protobuf:"varint,1,opt,name=window_frame_units,json=windowFrameUnits,proto3,enum=chalk.expression.v1.WindowFrameUnits" json:"window_frame_units,omitempty"`
	StartBound       *WindowFrameBound `protobuf:"bytes,2,opt,name=start_bound,json=startBound,proto3" json:"start_bound,omitempty"`
	Bound            *WindowFrameBound `protobuf:"bytes,3,opt,name=bound,proto3,oneof" json:"bound,omitempty"`
}

func (x *WindowFrame) Reset() {
	*x = WindowFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowFrame) ProtoMessage() {}

func (x *WindowFrame) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowFrame.ProtoReflect.Descriptor instead.
func (*WindowFrame) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{44}
}

func (x *WindowFrame) GetWindowFrameUnits() WindowFrameUnits {
	if x != nil {
		return x.WindowFrameUnits
	}
	return WindowFrameUnits_WINDOW_FRAME_UNITS_UNSPECIFIED
}

func (x *WindowFrame) GetStartBound() *WindowFrameBound {
	if x != nil {
		return x.StartBound
	}
	return nil
}

func (x *WindowFrame) GetBound() *WindowFrameBound {
	if x != nil {
		return x.Bound
	}
	return nil
}

type WindowFrameBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowFrameBoundType WindowFrameBoundType `protobuf:"varint,1,opt,name=window_frame_bound_type,json=windowFrameBoundType,proto3,enum=chalk.expression.v1.WindowFrameBoundType" json:"window_frame_bound_type,omitempty"`
	BoundValue           *v1.ScalarValue      `protobuf:"bytes,2,opt,name=bound_value,json=boundValue,proto3" json:"bound_value,omitempty"`
}

func (x *WindowFrameBound) Reset() {
	*x = WindowFrameBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_expression_v1_expression_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowFrameBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowFrameBound) ProtoMessage() {}

func (x *WindowFrameBound) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_expression_v1_expression_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowFrameBound.ProtoReflect.Descriptor instead.
func (*WindowFrameBound) Descriptor() ([]byte, []int) {
	return file_chalk_expression_v1_expression_proto_rawDescGZIP(), []int{45}
}

func (x *WindowFrameBound) GetWindowFrameBoundType() WindowFrameBoundType {
	if x != nil {
		return x.WindowFrameBoundType
	}
	return WindowFrameBoundType_WINDOW_FRAME_BOUND_TYPE_UNSPECIFIED
}

func (x *WindowFrameBound) GetBoundValue() *v1.ScalarValue {
	if x != nil {
		return x.BoundValue
	}
	return nil
}

var File_chalk_expression_v1_expression_proto protoreflect.FileDescriptor

var file_chalk_expression_v1_expression_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x11, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3f, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x49, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x6f, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x3c, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x33, 0x0a,
	0x04, 0x63, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x61, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x08, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x79, 0x43, 0x61, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x79, 0x43, 0x61, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45,
	0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x45, 0x78, 0x70, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x64, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x55, 0x44, 0x46, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x50, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x64, 0x66, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x55, 0x44, 0x46, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x55, 0x64, 0x66, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x52, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x75, 0x62, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x75, 0x62, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x6c, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x12, 0x36, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x54, 0x72, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x69, 0x73, 0x54, 0x72, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x46,
	0x61, 0x6c, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x74, 0x72, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x54, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x54, 0x72, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4e, 0x6f, 0x74,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x4e, 0x6f, 0x74,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6b, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x69, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x4c, 0x69, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x6c, 0x69, 0x6b, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f,
	0x74, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x54, 0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x2c, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d,
	0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a,
	0x08, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x0f, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x22, 0x4b, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0x44, 0x0a, 0x08, 0x43, 0x75, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x46, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x43, 0x0a,
	0x10, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x43, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22, 0xad, 0x02, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x42, 0x0a, 0x06, 0x49,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0x45, 0x0a, 0x09, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x42, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x72, 0x75, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x43, 0x0a, 0x07, 0x49, 0x73,
	0x46, 0x61, 0x6c, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0x45, 0x0a, 0x09, 0x49, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x45, 0x0a, 0x09, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x54,
	0x72, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x46, 0x0a,
	0x0a, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x48, 0x0a, 0x0c, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0x3f, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x22, 0xa1, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x12, 0x42, 0x61, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x45, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x12, 0x46, 0x75, 0x6c, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x04, 0x62, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x75, 0x6c, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x22, 0x62, 0x0a, 0x0e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x22,
	0x48, 0x0a, 0x0c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x49, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a,
	0x03, 0x66, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x66, 0x75, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xb5,
	0x02, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x9a, 0x03, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x55, 0x44, 0x46, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x4d, 0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x55, 0x44, 0x46, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4b,
	0x77, 0x61, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6b, 0x77, 0x61, 0x72,
	0x67, 0x73, 0x1a, 0x5f, 0x0a, 0x0b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x55, 0x44, 0x46,
	0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x81, 0x04,
	0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x58, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x49,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x64, 0x61,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x64, 0x61, 0x66, 0x12,
	0x14, 0x0a, 0x04, 0x75, 0x64, 0x77, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x64, 0x77, 0x66, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12,
	0x47, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x38, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6b, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x49, 0x4c,
	0x69, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72, 0x22, 0xc4, 0x01, 0x0a,
	0x0d, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x77, 0x68,
	0x65, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x54, 0x68, 0x65,
	0x6e, 0x52, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x54, 0x68, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x41, 0x0a, 0x09, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x73, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x57, 0x68, 0x65, 0x6e, 0x54, 0x68, 0x65, 0x6e, 0x12,
	0x41, 0x0a, 0x09, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x77, 0x68, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x68, 0x65,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x22, 0x7e, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x79, 0x43, 0x61, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12,
	0x38, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x0c, 0x53, 0x6f, 0x72,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c,
	0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x10, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0xb2, 0x01, 0x0a, 0x10, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x60, 0x0a, 0x17, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x14, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2a, 0xa0, 0x1f, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x53, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x53, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x41, 0x4e, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x49, 0x49, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x45,
	0x49, 0x4c, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x49, 0x47, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x4e, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x0c, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x31, 0x30, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47,
	0x32, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x4d, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49,
	0x4e, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x51, 0x52, 0x54, 0x10, 0x12, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x4e, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x10,
	0x14, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x15, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x47, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x16, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x17, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x54, 0x52, 0x49, 0x4d, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x19, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x52, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x43,
	0x41, 0x54, 0x10, 0x1b, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1c, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x10, 0x1d, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x10, 0x1e, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x50, 0x41, 0x44, 0x10, 0x21,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x54, 0x52, 0x49, 0x4d, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x24, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x49, 0x46, 0x10, 0x25, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x43, 0x54, 0x45, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x26, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x27, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x47, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x28, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x10, 0x29, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x2a, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52,
	0x53, 0x45, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x2c, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x50, 0x41, 0x44, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x54, 0x52,
	0x49, 0x4d, 0x10, 0x2e, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x32, 0x34, 0x10, 0x2f,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x35,
	0x31, 0x32, 0x10, 0x32, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x10, 0x33, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x50, 0x4f, 0x53, 0x10,
	0x35, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x10, 0x36, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x5f, 0x48, 0x45, 0x58, 0x10, 0x37, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x38, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x53, 0x10, 0x39, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x10, 0x3a, 0x12, 0x28, 0x0a,
	0x24, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x3b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x3c,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x3d, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x10, 0x3e, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x50,
	0x45, 0x52, 0x10, 0x3f, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43, 0x45,
	0x10, 0x40, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x41, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x10, 0x42, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x43,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x41, 0x4e, 0x32, 0x10, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x10, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52,
	0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x4f, 0x46, 0x10, 0x46, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x47, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x48, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x10, 0x49, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x42, 0x52,
	0x54, 0x10, 0x4a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4f, 0x53, 0x48, 0x10, 0x4b, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x53, 0x49, 0x4e, 0x48, 0x10, 0x4c, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x41,
	0x4e, 0x48, 0x10, 0x4d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x48, 0x10, 0x4e, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x53, 0x48, 0x10, 0x4f, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x4e, 0x48,
	0x10, 0x50, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x10, 0x51, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x47, 0x52, 0x45, 0x45, 0x53, 0x10, 0x52, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x41,
	0x4e, 0x53, 0x10, 0x53, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x49, 0x41,
	0x4c, 0x10, 0x54, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x43, 0x4d, 0x10, 0x55, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x43, 0x44, 0x10, 0x56, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x41,
	0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x57, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x10, 0x58, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x44, 0x49, 0x4d, 0x53, 0x10, 0x59, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x10, 0x5a, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x5b, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x4e, 0x44, 0x49, 0x4d, 0x53, 0x10, 0x5c, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x5d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x5e, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x5f, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x60, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x61, 0x12,
	0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x62, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x63, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0x66, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x67, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x54, 0x10, 0x68, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x10, 0x69, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x6a, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x6b, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x4e, 0x10, 0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x10, 0x6d, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x6e, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4e, 0x56, 0x4c, 0x10, 0x70,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x71, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x53, 0x4e, 0x41, 0x4e, 0x10, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5a, 0x45,
	0x52, 0x4f, 0x10, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x50,
	0x4f, 0x50, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x75, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x76, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4e,
	0x41, 0x4e, 0x4f, 0x53, 0x10, 0x77, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x10, 0x78, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x79, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x10, 0x7a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x7b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x7c, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x7d, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4e, 0x53, 0x48, 0x54, 0x45, 0x49, 0x4e, 0x10, 0x7e, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x7f, 0x12,
	0x20, 0x0a, 0x1b, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x80,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x10,
	0x81, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x43, 0x54, 0x10, 0x82, 0x01, 0x2a, 0x8b, 0x0a, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x47, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x49, 0x4e, 0x43, 0x54, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x50, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x44, 0x44,
	0x45, 0x56, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x44, 0x44, 0x45,
	0x56, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x10,
	0x12, 0x39, 0x0a, 0x35, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x49, 0x54, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x19, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x53, 0x4c,
	0x4f, 0x50, 0x45, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x10, 0x1c, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1d, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x52, 0x32, 0x10, 0x1e, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x41, 0x56, 0x47, 0x58, 0x10,
	0x1f, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x41, 0x56, 0x47,
	0x59, 0x10, 0x20, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x53,
	0x58, 0x58, 0x10, 0x21, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f,
	0x53, 0x59, 0x59, 0x10, 0x22, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x52,
	0x5f, 0x53, 0x58, 0x59, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x24, 0x2a, 0xed, 0x03, 0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49,
	0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x24, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x55, 0x49,
	0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x29,
	0x0a, 0x25, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x49,
	0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x54,
	0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x49, 0x4c, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x55,
	0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0a, 0x12, 0x26, 0x0a,
	0x22, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x54, 0x48, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x0b, 0x2a, 0x90, 0x01, 0x0a, 0x10, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x53, 0x5f, 0x52, 0x4f, 0x57, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x53, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x03, 0x2a, 0xb6, 0x01, 0x0a, 0x14, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f,
	0x57, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x43, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x42, 0xdb, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x45, 0x58, 0xaa, 0x02, 0x13, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x13, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a,
	0x3a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_expression_v1_expression_proto_rawDescOnce sync.Once
	file_chalk_expression_v1_expression_proto_rawDescData = file_chalk_expression_v1_expression_proto_rawDesc
)

func file_chalk_expression_v1_expression_proto_rawDescGZIP() []byte {
	file_chalk_expression_v1_expression_proto_rawDescOnce.Do(func() {
		file_chalk_expression_v1_expression_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_expression_v1_expression_proto_rawDescData)
	})
	return file_chalk_expression_v1_expression_proto_rawDescData
}

var file_chalk_expression_v1_expression_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_chalk_expression_v1_expression_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_chalk_expression_v1_expression_proto_goTypes = []any{
	(ScalarFunction)(0),           // 0: chalk.expression.v1.ScalarFunction
	(AggregateFunction)(0),        // 1: chalk.expression.v1.AggregateFunction
	(BuiltInWindowFunction)(0),    // 2: chalk.expression.v1.BuiltInWindowFunction
	(WindowFrameUnits)(0),         // 3: chalk.expression.v1.WindowFrameUnits
	(WindowFrameBoundType)(0),     // 4: chalk.expression.v1.WindowFrameBoundType
	(*LogicalExprNode)(nil),       // 5: chalk.expression.v1.LogicalExprNode
	(*ColumnRelation)(nil),        // 6: chalk.expression.v1.ColumnRelation
	(*Column)(nil),                // 7: chalk.expression.v1.Column
	(*Wildcard)(nil),              // 8: chalk.expression.v1.Wildcard
	(*PlaceholderNode)(nil),       // 9: chalk.expression.v1.PlaceholderNode
	(*LogicalExprList)(nil),       // 10: chalk.expression.v1.LogicalExprList
	(*GroupingSetNode)(nil),       // 11: chalk.expression.v1.GroupingSetNode
	(*CubeNode)(nil),              // 12: chalk.expression.v1.CubeNode
	(*RollupNode)(nil),            // 13: chalk.expression.v1.RollupNode
	(*NamedStructField)(nil),      // 14: chalk.expression.v1.NamedStructField
	(*ListIndex)(nil),             // 15: chalk.expression.v1.ListIndex
	(*ListRange)(nil),             // 16: chalk.expression.v1.ListRange
	(*GetIndexedField)(nil),       // 17: chalk.expression.v1.GetIndexedField
	(*IsNull)(nil),                // 18: chalk.expression.v1.IsNull
	(*IsNotNull)(nil),             // 19: chalk.expression.v1.IsNotNull
	(*IsTrue)(nil),                // 20: chalk.expression.v1.IsTrue
	(*IsFalse)(nil),               // 21: chalk.expression.v1.IsFalse
	(*IsUnknown)(nil),             // 22: chalk.expression.v1.IsUnknown
	(*IsNotTrue)(nil),             // 23: chalk.expression.v1.IsNotTrue
	(*IsNotFalse)(nil),            // 24: chalk.expression.v1.IsNotFalse
	(*IsNotUnknown)(nil),          // 25: chalk.expression.v1.IsNotUnknown
	(*Not)(nil),                   // 26: chalk.expression.v1.Not
	(*AliasNode)(nil),             // 27: chalk.expression.v1.AliasNode
	(*BareTableReference)(nil),    // 28: chalk.expression.v1.BareTableReference
	(*PartialTableReference)(nil), // 29: chalk.expression.v1.PartialTableReference
	(*FullTableReference)(nil),    // 30: chalk.expression.v1.FullTableReference
	(*OwnedTableReference)(nil),   // 31: chalk.expression.v1.OwnedTableReference
	(*BinaryExprNode)(nil),        // 32: chalk.expression.v1.BinaryExprNode
	(*NegativeNode)(nil),          // 33: chalk.expression.v1.NegativeNode
	(*InListNode)(nil),            // 34: chalk.expression.v1.InListNode
	(*ScalarFunctionNode)(nil),    // 35: chalk.expression.v1.ScalarFunctionNode
	(*AggregateExprNode)(nil),     // 36: chalk.expression.v1.AggregateExprNode
	(*AggregateUDFExprNode)(nil),  // 37: chalk.expression.v1.AggregateUDFExprNode
	(*ScalarUDFExprNode)(nil),     // 38: chalk.expression.v1.ScalarUDFExprNode
	(*WindowExprNode)(nil),        // 39: chalk.expression.v1.WindowExprNode
	(*BetweenNode)(nil),           // 40: chalk.expression.v1.BetweenNode
	(*LikeNode)(nil),              // 41: chalk.expression.v1.LikeNode
	(*ILikeNode)(nil),             // 42: chalk.expression.v1.ILikeNode
	(*SimilarToNode)(nil),         // 43: chalk.expression.v1.SimilarToNode
	(*CaseNode)(nil),              // 44: chalk.expression.v1.CaseNode
	(*WhenThen)(nil),              // 45: chalk.expression.v1.WhenThen
	(*CastNode)(nil),              // 46: chalk.expression.v1.CastNode
	(*TryCastNode)(nil),           // 47: chalk.expression.v1.TryCastNode
	(*SortExprNode)(nil),          // 48: chalk.expression.v1.SortExprNode
	(*WindowFrame)(nil),           // 49: chalk.expression.v1.WindowFrame
	(*WindowFrameBound)(nil),      // 50: chalk.expression.v1.WindowFrameBound
	nil,                           // 51: chalk.expression.v1.AggregateUDFExprNode.KwargsEntry
	(*v1.ScalarValue)(nil),        // 52: chalk.arrow.v1.ScalarValue
	(*v1.ArrowType)(nil),          // 53: chalk.arrow.v1.ArrowType
}
var file_chalk_expression_v1_expression_proto_depIdxs = []int32{
	7,   // 0: chalk.expression.v1.LogicalExprNode.column:type_name -> chalk.expression.v1.Column
	27,  // 1: chalk.expression.v1.LogicalExprNode.alias:type_name -> chalk.expression.v1.AliasNode
	52,  // 2: chalk.expression.v1.LogicalExprNode.literal:type_name -> chalk.arrow.v1.ScalarValue
	32,  // 3: chalk.expression.v1.LogicalExprNode.binary_expr:type_name -> chalk.expression.v1.BinaryExprNode
	36,  // 4: chalk.expression.v1.LogicalExprNode.aggregate_expr:type_name -> chalk.expression.v1.AggregateExprNode
	18,  // 5: chalk.expression.v1.LogicalExprNode.is_null_expr:type_name -> chalk.expression.v1.IsNull
	19,  // 6: chalk.expression.v1.LogicalExprNode.is_not_null_expr:type_name -> chalk.expression.v1.IsNotNull
	26,  // 7: chalk.expression.v1.LogicalExprNode.not_expr:type_name -> chalk.expression.v1.Not
	40,  // 8: chalk.expression.v1.LogicalExprNode.between:type_name -> chalk.expression.v1.BetweenNode
	44,  // 9: chalk.expression.v1.LogicalExprNode.case:type_name -> chalk.expression.v1.CaseNode
	46,  // 10: chalk.expression.v1.LogicalExprNode.cast:type_name -> chalk.expression.v1.CastNode
	48,  // 11: chalk.expression.v1.LogicalExprNode.sort:type_name -> chalk.expression.v1.SortExprNode
	33,  // 12: chalk.expression.v1.LogicalExprNode.negative:type_name -> chalk.expression.v1.NegativeNode
	34,  // 13: chalk.expression.v1.LogicalExprNode.in_list:type_name -> chalk.expression.v1.InListNode
	8,   // 14: chalk.expression.v1.LogicalExprNode.wildcard:type_name -> chalk.expression.v1.Wildcard
	35,  // 15: chalk.expression.v1.LogicalExprNode.scalar_function:type_name -> chalk.expression.v1.ScalarFunctionNode
	47,  // 16: chalk.expression.v1.LogicalExprNode.try_cast:type_name -> chalk.expression.v1.TryCastNode
	39,  // 17: chalk.expression.v1.LogicalExprNode.window_expr:type_name -> chalk.expression.v1.WindowExprNode
	37,  // 18: chalk.expression.v1.LogicalExprNode.aggregate_udf_expr:type_name -> chalk.expression.v1.AggregateUDFExprNode
	38,  // 19: chalk.expression.v1.LogicalExprNode.scalar_udf_expr:type_name -> chalk.expression.v1.ScalarUDFExprNode
	17,  // 20: chalk.expression.v1.LogicalExprNode.get_indexed_field:type_name -> chalk.expression.v1.GetIndexedField
	11,  // 21: chalk.expression.v1.LogicalExprNode.grouping_set:type_name -> chalk.expression.v1.GroupingSetNode
	12,  // 22: chalk.expression.v1.LogicalExprNode.cube:type_name -> chalk.expression.v1.CubeNode
	13,  // 23: chalk.expression.v1.LogicalExprNode.rollup:type_name -> chalk.expression.v1.RollupNode
	20,  // 24: chalk.expression.v1.LogicalExprNode.is_true:type_name -> chalk.expression.v1.IsTrue
	21,  // 25: chalk.expression.v1.LogicalExprNode.is_false:type_name -> chalk.expression.v1.IsFalse
	22,  // 26: chalk.expression.v1.LogicalExprNode.is_unknown:type_name -> chalk.expression.v1.IsUnknown
	23,  // 27: chalk.expression.v1.LogicalExprNode.is_not_true:type_name -> chalk.expression.v1.IsNotTrue
	24,  // 28: chalk.expression.v1.LogicalExprNode.is_not_false:type_name -> chalk.expression.v1.IsNotFalse
	25,  // 29: chalk.expression.v1.LogicalExprNode.is_not_unknown:type_name -> chalk.expression.v1.IsNotUnknown
	41,  // 30: chalk.expression.v1.LogicalExprNode.like:type_name -> chalk.expression.v1.LikeNode
	42,  // 31: chalk.expression.v1.LogicalExprNode.ilike:type_name -> chalk.expression.v1.ILikeNode
	43,  // 32: chalk.expression.v1.LogicalExprNode.similar_to:type_name -> chalk.expression.v1.SimilarToNode
	9,   // 33: chalk.expression.v1.LogicalExprNode.placeholder:type_name -> chalk.expression.v1.PlaceholderNode
	6,   // 34: chalk.expression.v1.Column.relation:type_name -> chalk.expression.v1.ColumnRelation
	53,  // 35: chalk.expression.v1.PlaceholderNode.data_type:type_name -> chalk.arrow.v1.ArrowType
	5,   // 36: chalk.expression.v1.LogicalExprList.expr:type_name -> chalk.expression.v1.LogicalExprNode
	10,  // 37: chalk.expression.v1.GroupingSetNode.expr:type_name -> chalk.expression.v1.LogicalExprList
	5,   // 38: chalk.expression.v1.CubeNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 39: chalk.expression.v1.RollupNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	52,  // 40: chalk.expression.v1.NamedStructField.name:type_name -> chalk.arrow.v1.ScalarValue
	5,   // 41: chalk.expression.v1.ListIndex.key:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 42: chalk.expression.v1.ListRange.start:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 43: chalk.expression.v1.ListRange.stop:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 44: chalk.expression.v1.GetIndexedField.expr:type_name -> chalk.expression.v1.LogicalExprNode
	14,  // 45: chalk.expression.v1.GetIndexedField.named_struct_field:type_name -> chalk.expression.v1.NamedStructField
	15,  // 46: chalk.expression.v1.GetIndexedField.list_index:type_name -> chalk.expression.v1.ListIndex
	16,  // 47: chalk.expression.v1.GetIndexedField.list_range:type_name -> chalk.expression.v1.ListRange
	5,   // 48: chalk.expression.v1.IsNull.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 49: chalk.expression.v1.IsNotNull.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 50: chalk.expression.v1.IsTrue.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 51: chalk.expression.v1.IsFalse.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 52: chalk.expression.v1.IsUnknown.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 53: chalk.expression.v1.IsNotTrue.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 54: chalk.expression.v1.IsNotFalse.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 55: chalk.expression.v1.IsNotUnknown.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 56: chalk.expression.v1.Not.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 57: chalk.expression.v1.AliasNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	31,  // 58: chalk.expression.v1.AliasNode.relation:type_name -> chalk.expression.v1.OwnedTableReference
	28,  // 59: chalk.expression.v1.OwnedTableReference.bare:type_name -> chalk.expression.v1.BareTableReference
	29,  // 60: chalk.expression.v1.OwnedTableReference.partial:type_name -> chalk.expression.v1.PartialTableReference
	30,  // 61: chalk.expression.v1.OwnedTableReference.full:type_name -> chalk.expression.v1.FullTableReference
	5,   // 62: chalk.expression.v1.BinaryExprNode.operands:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 63: chalk.expression.v1.NegativeNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 64: chalk.expression.v1.InListNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 65: chalk.expression.v1.InListNode.list:type_name -> chalk.expression.v1.LogicalExprNode
	0,   // 66: chalk.expression.v1.ScalarFunctionNode.fun:type_name -> chalk.expression.v1.ScalarFunction
	5,   // 67: chalk.expression.v1.ScalarFunctionNode.args:type_name -> chalk.expression.v1.LogicalExprNode
	1,   // 68: chalk.expression.v1.AggregateExprNode.aggr_function:type_name -> chalk.expression.v1.AggregateFunction
	5,   // 69: chalk.expression.v1.AggregateExprNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 70: chalk.expression.v1.AggregateExprNode.filter:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 71: chalk.expression.v1.AggregateExprNode.order_by:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 72: chalk.expression.v1.AggregateUDFExprNode.args:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 73: chalk.expression.v1.AggregateUDFExprNode.filter:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 74: chalk.expression.v1.AggregateUDFExprNode.order_by:type_name -> chalk.expression.v1.LogicalExprNode
	51,  // 75: chalk.expression.v1.AggregateUDFExprNode.kwargs:type_name -> chalk.expression.v1.AggregateUDFExprNode.KwargsEntry
	5,   // 76: chalk.expression.v1.ScalarUDFExprNode.args:type_name -> chalk.expression.v1.LogicalExprNode
	1,   // 77: chalk.expression.v1.WindowExprNode.aggr_function:type_name -> chalk.expression.v1.AggregateFunction
	2,   // 78: chalk.expression.v1.WindowExprNode.built_in_function:type_name -> chalk.expression.v1.BuiltInWindowFunction
	5,   // 79: chalk.expression.v1.WindowExprNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 80: chalk.expression.v1.WindowExprNode.partition_by:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 81: chalk.expression.v1.WindowExprNode.order_by:type_name -> chalk.expression.v1.LogicalExprNode
	49,  // 82: chalk.expression.v1.WindowExprNode.window_frame:type_name -> chalk.expression.v1.WindowFrame
	5,   // 83: chalk.expression.v1.BetweenNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 84: chalk.expression.v1.BetweenNode.low:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 85: chalk.expression.v1.BetweenNode.high:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 86: chalk.expression.v1.LikeNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 87: chalk.expression.v1.LikeNode.pattern:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 88: chalk.expression.v1.ILikeNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 89: chalk.expression.v1.ILikeNode.pattern:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 90: chalk.expression.v1.SimilarToNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 91: chalk.expression.v1.SimilarToNode.pattern:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 92: chalk.expression.v1.CaseNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	45,  // 93: chalk.expression.v1.CaseNode.when_then_expr:type_name -> chalk.expression.v1.WhenThen
	5,   // 94: chalk.expression.v1.CaseNode.else_expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 95: chalk.expression.v1.WhenThen.when_expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 96: chalk.expression.v1.WhenThen.then_expr:type_name -> chalk.expression.v1.LogicalExprNode
	5,   // 97: chalk.expression.v1.CastNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	53,  // 98: chalk.expression.v1.CastNode.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	5,   // 99: chalk.expression.v1.TryCastNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	53,  // 100: chalk.expression.v1.TryCastNode.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	5,   // 101: chalk.expression.v1.SortExprNode.expr:type_name -> chalk.expression.v1.LogicalExprNode
	3,   // 102: chalk.expression.v1.WindowFrame.window_frame_units:type_name -> chalk.expression.v1.WindowFrameUnits
	50,  // 103: chalk.expression.v1.WindowFrame.start_bound:type_name -> chalk.expression.v1.WindowFrameBound
	50,  // 104: chalk.expression.v1.WindowFrame.bound:type_name -> chalk.expression.v1.WindowFrameBound
	4,   // 105: chalk.expression.v1.WindowFrameBound.window_frame_bound_type:type_name -> chalk.expression.v1.WindowFrameBoundType
	52,  // 106: chalk.expression.v1.WindowFrameBound.bound_value:type_name -> chalk.arrow.v1.ScalarValue
	5,   // 107: chalk.expression.v1.AggregateUDFExprNode.KwargsEntry.value:type_name -> chalk.expression.v1.LogicalExprNode
	108, // [108:108] is the sub-list for method output_type
	108, // [108:108] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_chalk_expression_v1_expression_proto_init() }
func file_chalk_expression_v1_expression_proto_init() {
	if File_chalk_expression_v1_expression_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_expression_v1_expression_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LogicalExprNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ColumnRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Wildcard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PlaceholderNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LogicalExprList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GroupingSetNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CubeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RollupNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*NamedStructField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetIndexedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*IsNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*IsNotNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*IsTrue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*IsFalse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*IsUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*IsNotTrue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*IsNotFalse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*IsNotUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Not); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AliasNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*BareTableReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PartialTableReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*FullTableReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*OwnedTableReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*BinaryExprNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*NegativeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*InListNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarFunctionNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AggregateExprNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AggregateUDFExprNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarUDFExprNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*WindowExprNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*BetweenNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*LikeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ILikeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*SimilarToNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CaseNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*WhenThen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CastNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*TryCastNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*SortExprNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*WindowFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_expression_v1_expression_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*WindowFrameBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_expression_v1_expression_proto_msgTypes[0].OneofWrappers = []any{
		(*LogicalExprNode_Column)(nil),
		(*LogicalExprNode_Alias)(nil),
		(*LogicalExprNode_Literal)(nil),
		(*LogicalExprNode_BinaryExpr)(nil),
		(*LogicalExprNode_AggregateExpr)(nil),
		(*LogicalExprNode_IsNullExpr)(nil),
		(*LogicalExprNode_IsNotNullExpr)(nil),
		(*LogicalExprNode_NotExpr)(nil),
		(*LogicalExprNode_Between)(nil),
		(*LogicalExprNode_Case)(nil),
		(*LogicalExprNode_Cast)(nil),
		(*LogicalExprNode_Sort)(nil),
		(*LogicalExprNode_Negative)(nil),
		(*LogicalExprNode_InList)(nil),
		(*LogicalExprNode_Wildcard)(nil),
		(*LogicalExprNode_ScalarFunction)(nil),
		(*LogicalExprNode_TryCast)(nil),
		(*LogicalExprNode_WindowExpr)(nil),
		(*LogicalExprNode_AggregateUdfExpr)(nil),
		(*LogicalExprNode_ScalarUdfExpr)(nil),
		(*LogicalExprNode_GetIndexedField)(nil),
		(*LogicalExprNode_GroupingSet)(nil),
		(*LogicalExprNode_Cube)(nil),
		(*LogicalExprNode_Rollup)(nil),
		(*LogicalExprNode_IsTrue)(nil),
		(*LogicalExprNode_IsFalse)(nil),
		(*LogicalExprNode_IsUnknown)(nil),
		(*LogicalExprNode_IsNotTrue)(nil),
		(*LogicalExprNode_IsNotFalse)(nil),
		(*LogicalExprNode_IsNotUnknown)(nil),
		(*LogicalExprNode_Like)(nil),
		(*LogicalExprNode_Ilike)(nil),
		(*LogicalExprNode_SimilarTo)(nil),
		(*LogicalExprNode_Placeholder)(nil),
	}
	file_chalk_expression_v1_expression_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_expression_v1_expression_proto_msgTypes[12].OneofWrappers = []any{
		(*GetIndexedField_NamedStructField)(nil),
		(*GetIndexedField_ListIndex)(nil),
		(*GetIndexedField_ListRange)(nil),
	}
	file_chalk_expression_v1_expression_proto_msgTypes[26].OneofWrappers = []any{
		(*OwnedTableReference_Bare)(nil),
		(*OwnedTableReference_Partial)(nil),
		(*OwnedTableReference_Full)(nil),
	}
	file_chalk_expression_v1_expression_proto_msgTypes[34].OneofWrappers = []any{
		(*WindowExprNode_AggrFunction)(nil),
		(*WindowExprNode_BuiltInFunction)(nil),
		(*WindowExprNode_Udaf)(nil),
		(*WindowExprNode_Udwf)(nil),
	}
	file_chalk_expression_v1_expression_proto_msgTypes[44].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_expression_v1_expression_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_expression_v1_expression_proto_goTypes,
		DependencyIndexes: file_chalk_expression_v1_expression_proto_depIdxs,
		EnumInfos:         file_chalk_expression_v1_expression_proto_enumTypes,
		MessageInfos:      file_chalk_expression_v1_expression_proto_msgTypes,
	}.Build()
	File_chalk_expression_v1_expression_proto = out.File
	file_chalk_expression_v1_expression_proto_rawDesc = nil
	file_chalk_expression_v1_expression_proto_goTypes = nil
	file_chalk_expression_v1_expression_proto_depIdxs = nil
}
