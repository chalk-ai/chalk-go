// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/server/v1/timeserieschart.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PointV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// wrapped in a Point to allow for optional (empty space in time series)
	Value *float64 `protobuf:"fixed64,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *PointV2) Reset() {
	*x = PointV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_timeserieschart_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointV2) ProtoMessage() {}

func (x *PointV2) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_timeserieschart_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointV2.ProtoReflect.Descriptor instead.
func (*PointV2) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_timeserieschart_proto_rawDescGZIP(), []int{0}
}

func (x *PointV2) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type TimeSeriesV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*PointV2 `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	Label  string     `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Units  string     `protobuf:"bytes,3,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *TimeSeriesV2) Reset() {
	*x = TimeSeriesV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_timeserieschart_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesV2) ProtoMessage() {}

func (x *TimeSeriesV2) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_timeserieschart_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesV2.ProtoReflect.Descriptor instead.
func (*TimeSeriesV2) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_timeserieschart_proto_rawDescGZIP(), []int{1}
}

func (x *TimeSeriesV2) GetPoints() []*PointV2 {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *TimeSeriesV2) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TimeSeriesV2) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type TimeSeriesChartV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Series       []*TimeSeriesV2          `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
	XSeries      []*timestamppb.Timestamp `protobuf:"bytes,3,rep,name=x_series,json=xSeries,proto3" json:"x_series,omitempty"`
	WindowPeriod *durationpb.Duration     `protobuf:"bytes,4,opt,name=window_period,json=windowPeriod,proto3" json:"window_period,omitempty"`
}

func (x *TimeSeriesChartV2) Reset() {
	*x = TimeSeriesChartV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_timeserieschart_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesChartV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesChartV2) ProtoMessage() {}

func (x *TimeSeriesChartV2) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_timeserieschart_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesChartV2.ProtoReflect.Descriptor instead.
func (*TimeSeriesChartV2) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_timeserieschart_proto_rawDescGZIP(), []int{2}
}

func (x *TimeSeriesChartV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TimeSeriesChartV2) GetSeries() []*TimeSeriesV2 {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *TimeSeriesChartV2) GetXSeries() []*timestamppb.Timestamp {
	if x != nil {
		return x.XSeries
	}
	return nil
}

func (x *TimeSeriesChartV2) GetWindowPeriod() *durationpb.Duration {
	if x != nil {
		return x.WindowPeriod
	}
	return nil
}

var File_chalk_server_v1_timeserieschart_proto protoreflect.FileDescriptor

var file_chalk_server_v1_timeserieschart_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x07, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x56, 0x32, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x32, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x56, 0x32, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x56, 0x32, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x78, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x78, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x42, 0xc4, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_timeserieschart_proto_rawDescOnce sync.Once
	file_chalk_server_v1_timeserieschart_proto_rawDescData = file_chalk_server_v1_timeserieschart_proto_rawDesc
)

func file_chalk_server_v1_timeserieschart_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_timeserieschart_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_timeserieschart_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_timeserieschart_proto_rawDescData)
	})
	return file_chalk_server_v1_timeserieschart_proto_rawDescData
}

var file_chalk_server_v1_timeserieschart_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_server_v1_timeserieschart_proto_goTypes = []any{
	(*PointV2)(nil),               // 0: chalk.server.v1.PointV2
	(*TimeSeriesV2)(nil),          // 1: chalk.server.v1.TimeSeriesV2
	(*TimeSeriesChartV2)(nil),     // 2: chalk.server.v1.TimeSeriesChartV2
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 4: google.protobuf.Duration
}
var file_chalk_server_v1_timeserieschart_proto_depIdxs = []int32{
	0, // 0: chalk.server.v1.TimeSeriesV2.points:type_name -> chalk.server.v1.PointV2
	1, // 1: chalk.server.v1.TimeSeriesChartV2.series:type_name -> chalk.server.v1.TimeSeriesV2
	3, // 2: chalk.server.v1.TimeSeriesChartV2.x_series:type_name -> google.protobuf.Timestamp
	4, // 3: chalk.server.v1.TimeSeriesChartV2.window_period:type_name -> google.protobuf.Duration
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_timeserieschart_proto_init() }
func file_chalk_server_v1_timeserieschart_proto_init() {
	if File_chalk_server_v1_timeserieschart_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_server_v1_timeserieschart_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PointV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_server_v1_timeserieschart_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TimeSeriesV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_server_v1_timeserieschart_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TimeSeriesChartV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_server_v1_timeserieschart_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_timeserieschart_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_timeserieschart_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_timeserieschart_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_timeserieschart_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_timeserieschart_proto = out.File
	file_chalk_server_v1_timeserieschart_proto_rawDesc = nil
	file_chalk_server_v1_timeserieschart_proto_goTypes = nil
	file_chalk_server_v1_timeserieschart_proto_depIdxs = nil
}
