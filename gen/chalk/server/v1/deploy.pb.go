// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/server/v1/deploy.proto

package serverv1

import (
	v12 "github.com/chalk-ai/chalk-go/gen/chalk/artifacts/v1"
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeployBranchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BranchName    string                 `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	ResetBranch   bool                   `protobuf:"varint,2,opt,name=reset_branch,json=resetBranch,proto3" json:"reset_branch,omitempty"`
	Archive       []byte                 `protobuf:"bytes,3,opt,name=archive,proto3" json:"archive,omitempty"`
	IsHotDeploy   bool                   `protobuf:"varint,4,opt,name=is_hot_deploy,json=isHotDeploy,proto3" json:"is_hot_deploy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployBranchRequest) Reset() {
	*x = DeployBranchRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployBranchRequest) ProtoMessage() {}

func (x *DeployBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployBranchRequest.ProtoReflect.Descriptor instead.
func (*DeployBranchRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{0}
}

func (x *DeployBranchRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *DeployBranchRequest) GetResetBranch() bool {
	if x != nil {
		return x.ResetBranch
	}
	return false
}

func (x *DeployBranchRequest) GetArchive() []byte {
	if x != nil {
		return x.Archive
	}
	return nil
}

func (x *DeployBranchRequest) GetIsHotDeploy() bool {
	if x != nil {
		return x.IsHotDeploy
	}
	return false
}

type DeployBranchResponse struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/deploy.proto.
	Graph            *v1.Graph         `protobuf:"bytes,2,opt,name=graph,proto3,oneof" json:"graph,omitempty"`
	DeploymentErrors []*v11.ChalkError `protobuf:"bytes,3,rep,name=deployment_errors,json=deploymentErrors,proto3" json:"deployment_errors,omitempty"`
	Export           *v12.Export       `protobuf:"bytes,4,opt,name=export,proto3,oneof" json:"export,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeployBranchResponse) Reset() {
	*x = DeployBranchResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployBranchResponse) ProtoMessage() {}

func (x *DeployBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployBranchResponse.ProtoReflect.Descriptor instead.
func (*DeployBranchResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{1}
}

func (x *DeployBranchResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/server/v1/deploy.proto.
func (x *DeployBranchResponse) GetGraph() *v1.Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *DeployBranchResponse) GetDeploymentErrors() []*v11.ChalkError {
	if x != nil {
		return x.DeploymentErrors
	}
	return nil
}

func (x *DeployBranchResponse) GetExport() *v12.Export {
	if x != nil {
		return x.Export
	}
	return nil
}

type CreateBranchFromSourceDeploymentRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	BranchName string                 `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*CreateBranchFromSourceDeploymentRequest_SourceBranchName
	//	*CreateBranchFromSourceDeploymentRequest_SourceDeploymentId
	//	*CreateBranchFromSourceDeploymentRequest_CurrentMainlineDeployment
	Source        isCreateBranchFromSourceDeploymentRequest_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBranchFromSourceDeploymentRequest) Reset() {
	*x = CreateBranchFromSourceDeploymentRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBranchFromSourceDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchFromSourceDeploymentRequest) ProtoMessage() {}

func (x *CreateBranchFromSourceDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchFromSourceDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchFromSourceDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBranchFromSourceDeploymentRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateBranchFromSourceDeploymentRequest) GetSource() isCreateBranchFromSourceDeploymentRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CreateBranchFromSourceDeploymentRequest) GetSourceBranchName() string {
	if x != nil {
		if x, ok := x.Source.(*CreateBranchFromSourceDeploymentRequest_SourceBranchName); ok {
			return x.SourceBranchName
		}
	}
	return ""
}

func (x *CreateBranchFromSourceDeploymentRequest) GetSourceDeploymentId() string {
	if x != nil {
		if x, ok := x.Source.(*CreateBranchFromSourceDeploymentRequest_SourceDeploymentId); ok {
			return x.SourceDeploymentId
		}
	}
	return ""
}

func (x *CreateBranchFromSourceDeploymentRequest) GetCurrentMainlineDeployment() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Source.(*CreateBranchFromSourceDeploymentRequest_CurrentMainlineDeployment); ok {
			return x.CurrentMainlineDeployment
		}
	}
	return nil
}

type isCreateBranchFromSourceDeploymentRequest_Source interface {
	isCreateBranchFromSourceDeploymentRequest_Source()
}

type CreateBranchFromSourceDeploymentRequest_SourceBranchName struct {
	SourceBranchName string `protobuf:"bytes,2,opt,name=source_branch_name,json=sourceBranchName,proto3,oneof"`
}

type CreateBranchFromSourceDeploymentRequest_SourceDeploymentId struct {
	SourceDeploymentId string `protobuf:"bytes,3,opt,name=source_deployment_id,json=sourceDeploymentId,proto3,oneof"`
}

type CreateBranchFromSourceDeploymentRequest_CurrentMainlineDeployment struct {
	CurrentMainlineDeployment *emptypb.Empty `protobuf:"bytes,4,opt,name=current_mainline_deployment,json=currentMainlineDeployment,proto3,oneof"`
}

func (*CreateBranchFromSourceDeploymentRequest_SourceBranchName) isCreateBranchFromSourceDeploymentRequest_Source() {
}

func (*CreateBranchFromSourceDeploymentRequest_SourceDeploymentId) isCreateBranchFromSourceDeploymentRequest_Source() {
}

func (*CreateBranchFromSourceDeploymentRequest_CurrentMainlineDeployment) isCreateBranchFromSourceDeploymentRequest_Source() {
}

type CreateBranchFromSourceDeploymentResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId        string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	DeploymentErrors    []*v11.ChalkError      `protobuf:"bytes,2,rep,name=deployment_errors,json=deploymentErrors,proto3" json:"deployment_errors,omitempty"`
	Export              *v12.Export            `protobuf:"bytes,3,opt,name=export,proto3,oneof" json:"export,omitempty"`
	BranchAlreadyExists bool                   `protobuf:"varint,4,opt,name=branch_already_exists,json=branchAlreadyExists,proto3" json:"branch_already_exists,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateBranchFromSourceDeploymentResponse) Reset() {
	*x = CreateBranchFromSourceDeploymentResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBranchFromSourceDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchFromSourceDeploymentResponse) ProtoMessage() {}

func (x *CreateBranchFromSourceDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchFromSourceDeploymentResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchFromSourceDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBranchFromSourceDeploymentResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *CreateBranchFromSourceDeploymentResponse) GetDeploymentErrors() []*v11.ChalkError {
	if x != nil {
		return x.DeploymentErrors
	}
	return nil
}

func (x *CreateBranchFromSourceDeploymentResponse) GetExport() *v12.Export {
	if x != nil {
		return x.Export
	}
	return nil
}

func (x *CreateBranchFromSourceDeploymentResponse) GetBranchAlreadyExists() bool {
	if x != nil {
		return x.BranchAlreadyExists
	}
	return false
}

type GetDeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeploymentRequest) Reset() {
	*x = GetDeploymentRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentRequest) ProtoMessage() {}

func (x *GetDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{4}
}

func (x *GetDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deployment    *Deployment            `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeploymentResponse) Reset() {
	*x = GetDeploymentResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentResponse) ProtoMessage() {}

func (x *GetDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{5}
}

func (x *GetDeploymentResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type ListDeploymentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cursor        *string                `protobuf:"bytes,1,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	Limit         *int32                 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	IncludeBranch *bool                  `protobuf:"varint,3,opt,name=include_branch,json=includeBranch,proto3,oneof" json:"include_branch,omitempty"`
	BranchName    *string                `protobuf:"bytes,4,opt,name=branch_name,json=branchName,proto3,oneof" json:"branch_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeploymentsRequest) Reset() {
	*x = ListDeploymentsRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsRequest) ProtoMessage() {}

func (x *ListDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{6}
}

func (x *ListDeploymentsRequest) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *ListDeploymentsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListDeploymentsRequest) GetIncludeBranch() bool {
	if x != nil && x.IncludeBranch != nil {
		return *x.IncludeBranch
	}
	return false
}

func (x *ListDeploymentsRequest) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

type ListDeploymentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deployments   []*Deployment          `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	Cursor        *string                `protobuf:"bytes,2,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeploymentsResponse) Reset() {
	*x = ListDeploymentsResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsResponse) ProtoMessage() {}

func (x *ListDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*ListDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{7}
}

func (x *ListDeploymentsResponse) GetDeployments() []*Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *ListDeploymentsResponse) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

type SuspendDeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspendDeploymentRequest) Reset() {
	*x = SuspendDeploymentRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendDeploymentRequest) ProtoMessage() {}

func (x *SuspendDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendDeploymentRequest.ProtoReflect.Descriptor instead.
func (*SuspendDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{8}
}

func (x *SuspendDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type SuspendDeploymentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deployment    *Deployment            `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspendDeploymentResponse) Reset() {
	*x = SuspendDeploymentResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendDeploymentResponse) ProtoMessage() {}

func (x *SuspendDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendDeploymentResponse.ProtoReflect.Descriptor instead.
func (*SuspendDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{9}
}

func (x *SuspendDeploymentResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type ScaleDeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Sizing        *InstanceSizing        `protobuf:"bytes,2,opt,name=sizing,proto3" json:"sizing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScaleDeploymentRequest) Reset() {
	*x = ScaleDeploymentRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaleDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleDeploymentRequest) ProtoMessage() {}

func (x *ScaleDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleDeploymentRequest.ProtoReflect.Descriptor instead.
func (*ScaleDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{10}
}

func (x *ScaleDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ScaleDeploymentRequest) GetSizing() *InstanceSizing {
	if x != nil {
		return x.Sizing
	}
	return nil
}

type ScaleDeploymentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deployment    *Deployment            `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScaleDeploymentResponse) Reset() {
	*x = ScaleDeploymentResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaleDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleDeploymentResponse) ProtoMessage() {}

func (x *ScaleDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleDeploymentResponse.ProtoReflect.Descriptor instead.
func (*ScaleDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{11}
}

func (x *ScaleDeploymentResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type TagDeploymentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeploymentId  string                 `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	MirrorWeight  *int32                 `protobuf:"varint,3,opt,name=mirror_weight,json=mirrorWeight,proto3,oneof" json:"mirror_weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagDeploymentRequest) Reset() {
	*x = TagDeploymentRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDeploymentRequest) ProtoMessage() {}

func (x *TagDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDeploymentRequest.ProtoReflect.Descriptor instead.
func (*TagDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{12}
}

func (x *TagDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *TagDeploymentRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TagDeploymentRequest) GetMirrorWeight() int32 {
	if x != nil && x.MirrorWeight != nil {
		return *x.MirrorWeight
	}
	return 0
}

type TagDeploymentResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Deployment           *Deployment            `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	UntaggedDeploymentId *string                `protobuf:"bytes,2,opt,name=untagged_deployment_id,json=untaggedDeploymentId,proto3,oneof" json:"untagged_deployment_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TagDeploymentResponse) Reset() {
	*x = TagDeploymentResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDeploymentResponse) ProtoMessage() {}

func (x *TagDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDeploymentResponse.ProtoReflect.Descriptor instead.
func (*TagDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{13}
}

func (x *TagDeploymentResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *TagDeploymentResponse) GetUntaggedDeploymentId() string {
	if x != nil && x.UntaggedDeploymentId != nil {
		return *x.UntaggedDeploymentId
	}
	return ""
}

type GetActiveDeploymentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveDeploymentsRequest) Reset() {
	*x = GetActiveDeploymentsRequest{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDeploymentsRequest) ProtoMessage() {}

func (x *GetActiveDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{14}
}

type GetActiveDeploymentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deployments   []*Deployment          `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveDeploymentsResponse) Reset() {
	*x = GetActiveDeploymentsResponse{}
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDeploymentsResponse) ProtoMessage() {}

func (x *GetActiveDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_deploy_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_deploy_proto_rawDescGZIP(), []int{15}
}

func (x *GetActiveDeploymentsResponse) GetDeployments() []*Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

var File_chalk_server_v1_deploy_proto protoreflect.FileDescriptor

const file_chalk_server_v1_deploy_proto_rawDesc = "" +
	"\n" +
	"\x1cchalk/server/v1/deploy.proto\x12\x0fchalk.server.v1\x1a\x1fchalk/artifacts/v1/export.proto\x1a\x19chalk/auth/v1/audit.proto\x1a\x1fchalk/auth/v1/permissions.proto\x1a!chalk/common/v1/chalk_error.proto\x1a\x1achalk/graph/v1/graph.proto\x1a chalk/server/v1/deployment.proto\x1a\x1bgoogle/protobuf/empty.proto\"\x97\x01\n" +
	"\x13DeployBranchRequest\x12\x1f\n" +
	"\vbranch_name\x18\x01 \x01(\tR\n" +
	"branchName\x12!\n" +
	"\freset_branch\x18\x02 \x01(\bR\vresetBranch\x12\x18\n" +
	"\aarchive\x18\x03 \x01(\fR\aarchive\x12\"\n" +
	"\ris_hot_deploy\x18\x04 \x01(\bR\visHotDeploy\"\x89\x02\n" +
	"\x14DeployBranchResponse\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\x124\n" +
	"\x05graph\x18\x02 \x01(\v2\x15.chalk.graph.v1.GraphB\x02\x18\x01H\x00R\x05graph\x88\x01\x01\x12H\n" +
	"\x11deployment_errors\x18\x03 \x03(\v2\x1b.chalk.common.v1.ChalkErrorR\x10deploymentErrors\x127\n" +
	"\x06export\x18\x04 \x01(\v2\x1a.chalk.artifacts.v1.ExportH\x01R\x06export\x88\x01\x01B\b\n" +
	"\x06_graphB\t\n" +
	"\a_export\"\x92\x02\n" +
	"'CreateBranchFromSourceDeploymentRequest\x12\x1f\n" +
	"\vbranch_name\x18\x01 \x01(\tR\n" +
	"branchName\x12.\n" +
	"\x12source_branch_name\x18\x02 \x01(\tH\x00R\x10sourceBranchName\x122\n" +
	"\x14source_deployment_id\x18\x03 \x01(\tH\x00R\x12sourceDeploymentId\x12X\n" +
	"\x1bcurrent_mainline_deployment\x18\x04 \x01(\v2\x16.google.protobuf.EmptyH\x00R\x19currentMainlineDeploymentB\b\n" +
	"\x06source\"\x91\x02\n" +
	"(CreateBranchFromSourceDeploymentResponse\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\x12H\n" +
	"\x11deployment_errors\x18\x02 \x03(\v2\x1b.chalk.common.v1.ChalkErrorR\x10deploymentErrors\x127\n" +
	"\x06export\x18\x03 \x01(\v2\x1a.chalk.artifacts.v1.ExportH\x00R\x06export\x88\x01\x01\x122\n" +
	"\x15branch_already_exists\x18\x04 \x01(\bR\x13branchAlreadyExistsB\t\n" +
	"\a_export\";\n" +
	"\x14GetDeploymentRequest\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\"T\n" +
	"\x15GetDeploymentResponse\x12;\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2\x1b.chalk.server.v1.DeploymentR\n" +
	"deployment\"\xda\x01\n" +
	"\x16ListDeploymentsRequest\x12\x1b\n" +
	"\x06cursor\x18\x01 \x01(\tH\x00R\x06cursor\x88\x01\x01\x12\x19\n" +
	"\x05limit\x18\x02 \x01(\x05H\x01R\x05limit\x88\x01\x01\x12*\n" +
	"\x0einclude_branch\x18\x03 \x01(\bH\x02R\rincludeBranch\x88\x01\x01\x12$\n" +
	"\vbranch_name\x18\x04 \x01(\tH\x03R\n" +
	"branchName\x88\x01\x01B\t\n" +
	"\a_cursorB\b\n" +
	"\x06_limitB\x11\n" +
	"\x0f_include_branchB\x0e\n" +
	"\f_branch_name\"\x80\x01\n" +
	"\x17ListDeploymentsResponse\x12=\n" +
	"\vdeployments\x18\x01 \x03(\v2\x1b.chalk.server.v1.DeploymentR\vdeployments\x12\x1b\n" +
	"\x06cursor\x18\x02 \x01(\tH\x00R\x06cursor\x88\x01\x01B\t\n" +
	"\a_cursor\"?\n" +
	"\x18SuspendDeploymentRequest\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\"X\n" +
	"\x19SuspendDeploymentResponse\x12;\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2\x1b.chalk.server.v1.DeploymentR\n" +
	"deployment\"v\n" +
	"\x16ScaleDeploymentRequest\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\x127\n" +
	"\x06sizing\x18\x02 \x01(\v2\x1f.chalk.server.v1.InstanceSizingR\x06sizing\"V\n" +
	"\x17ScaleDeploymentResponse\x12;\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2\x1b.chalk.server.v1.DeploymentR\n" +
	"deployment\"\x89\x01\n" +
	"\x14TagDeploymentRequest\x12#\n" +
	"\rdeployment_id\x18\x01 \x01(\tR\fdeploymentId\x12\x10\n" +
	"\x03tag\x18\x02 \x01(\tR\x03tag\x12(\n" +
	"\rmirror_weight\x18\x03 \x01(\x05H\x00R\fmirrorWeight\x88\x01\x01B\x10\n" +
	"\x0e_mirror_weight\"\xaa\x01\n" +
	"\x15TagDeploymentResponse\x12;\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2\x1b.chalk.server.v1.DeploymentR\n" +
	"deployment\x129\n" +
	"\x16untagged_deployment_id\x18\x02 \x01(\tH\x00R\x14untaggedDeploymentId\x88\x01\x01B\x19\n" +
	"\x17_untagged_deployment_id\"\x1d\n" +
	"\x1bGetActiveDeploymentsRequest\"]\n" +
	"\x1cGetActiveDeploymentsResponse\x12=\n" +
	"\vdeployments\x18\x01 \x03(\v2\x1b.chalk.server.v1.DeploymentR\vdeployments2\xad\a\n" +
	"\rDeployService\x12`\n" +
	"\fDeployBranch\x12$.chalk.server.v1.DeployBranchRequest\x1a%.chalk.server.v1.DeployBranchResponse\"\x03\x80}\r\x12\x9c\x01\n" +
	" CreateBranchFromSourceDeployment\x128.chalk.server.v1.CreateBranchFromSourceDeploymentRequest\x1a9.chalk.server.v1.CreateBranchFromSourceDeploymentResponse\"\x03\x80}\r\x12c\n" +
	"\rGetDeployment\x12%.chalk.server.v1.GetDeploymentRequest\x1a&.chalk.server.v1.GetDeploymentResponse\"\x03\x80}\v\x12i\n" +
	"\x0fListDeployments\x12'.chalk.server.v1.ListDeploymentsRequest\x1a(.chalk.server.v1.ListDeploymentsResponse\"\x03\x80}\v\x12x\n" +
	"\x14GetActiveDeployments\x12,.chalk.server.v1.GetActiveDeploymentsRequest\x1a-.chalk.server.v1.GetActiveDeploymentsResponse\"\x03\x80}\x02\x12u\n" +
	"\x11SuspendDeployment\x12).chalk.server.v1.SuspendDeploymentRequest\x1a*.chalk.server.v1.SuspendDeploymentResponse\"\t\x80}\f\x8a\xd3\x0e\x02\b\x02\x12o\n" +
	"\x0fScaleDeployment\x12'.chalk.server.v1.ScaleDeploymentRequest\x1a(.chalk.server.v1.ScaleDeploymentResponse\"\t\x80}\f\x8a\xd3\x0e\x02\b\x02\x12i\n" +
	"\rTagDeployment\x12%.chalk.server.v1.TagDeploymentRequest\x1a&.chalk.server.v1.TagDeploymentResponse\"\t\x80}\f\x8a\xd3\x0e\x02\b\x02B\xbb\x01\n" +
	"\x13com.chalk.server.v1B\vDeployProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/server/v1;serverv1\xa2\x02\x03CSX\xaa\x02\x0fChalk.Server.V1\xca\x02\x0fChalk\\Server\\V1\xe2\x02\x1bChalk\\Server\\V1\\GPBMetadata\xea\x02\x11Chalk::Server::V1b\x06proto3"

var (
	file_chalk_server_v1_deploy_proto_rawDescOnce sync.Once
	file_chalk_server_v1_deploy_proto_rawDescData []byte
)

func file_chalk_server_v1_deploy_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_deploy_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_deploy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_server_v1_deploy_proto_rawDesc), len(file_chalk_server_v1_deploy_proto_rawDesc)))
	})
	return file_chalk_server_v1_deploy_proto_rawDescData
}

var file_chalk_server_v1_deploy_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_chalk_server_v1_deploy_proto_goTypes = []any{
	(*DeployBranchRequest)(nil),                      // 0: chalk.server.v1.DeployBranchRequest
	(*DeployBranchResponse)(nil),                     // 1: chalk.server.v1.DeployBranchResponse
	(*CreateBranchFromSourceDeploymentRequest)(nil),  // 2: chalk.server.v1.CreateBranchFromSourceDeploymentRequest
	(*CreateBranchFromSourceDeploymentResponse)(nil), // 3: chalk.server.v1.CreateBranchFromSourceDeploymentResponse
	(*GetDeploymentRequest)(nil),                     // 4: chalk.server.v1.GetDeploymentRequest
	(*GetDeploymentResponse)(nil),                    // 5: chalk.server.v1.GetDeploymentResponse
	(*ListDeploymentsRequest)(nil),                   // 6: chalk.server.v1.ListDeploymentsRequest
	(*ListDeploymentsResponse)(nil),                  // 7: chalk.server.v1.ListDeploymentsResponse
	(*SuspendDeploymentRequest)(nil),                 // 8: chalk.server.v1.SuspendDeploymentRequest
	(*SuspendDeploymentResponse)(nil),                // 9: chalk.server.v1.SuspendDeploymentResponse
	(*ScaleDeploymentRequest)(nil),                   // 10: chalk.server.v1.ScaleDeploymentRequest
	(*ScaleDeploymentResponse)(nil),                  // 11: chalk.server.v1.ScaleDeploymentResponse
	(*TagDeploymentRequest)(nil),                     // 12: chalk.server.v1.TagDeploymentRequest
	(*TagDeploymentResponse)(nil),                    // 13: chalk.server.v1.TagDeploymentResponse
	(*GetActiveDeploymentsRequest)(nil),              // 14: chalk.server.v1.GetActiveDeploymentsRequest
	(*GetActiveDeploymentsResponse)(nil),             // 15: chalk.server.v1.GetActiveDeploymentsResponse
	(*v1.Graph)(nil),                                 // 16: chalk.graph.v1.Graph
	(*v11.ChalkError)(nil),                           // 17: chalk.common.v1.ChalkError
	(*v12.Export)(nil),                               // 18: chalk.artifacts.v1.Export
	(*emptypb.Empty)(nil),                            // 19: google.protobuf.Empty
	(*Deployment)(nil),                               // 20: chalk.server.v1.Deployment
	(*InstanceSizing)(nil),                           // 21: chalk.server.v1.InstanceSizing
}
var file_chalk_server_v1_deploy_proto_depIdxs = []int32{
	16, // 0: chalk.server.v1.DeployBranchResponse.graph:type_name -> chalk.graph.v1.Graph
	17, // 1: chalk.server.v1.DeployBranchResponse.deployment_errors:type_name -> chalk.common.v1.ChalkError
	18, // 2: chalk.server.v1.DeployBranchResponse.export:type_name -> chalk.artifacts.v1.Export
	19, // 3: chalk.server.v1.CreateBranchFromSourceDeploymentRequest.current_mainline_deployment:type_name -> google.protobuf.Empty
	17, // 4: chalk.server.v1.CreateBranchFromSourceDeploymentResponse.deployment_errors:type_name -> chalk.common.v1.ChalkError
	18, // 5: chalk.server.v1.CreateBranchFromSourceDeploymentResponse.export:type_name -> chalk.artifacts.v1.Export
	20, // 6: chalk.server.v1.GetDeploymentResponse.deployment:type_name -> chalk.server.v1.Deployment
	20, // 7: chalk.server.v1.ListDeploymentsResponse.deployments:type_name -> chalk.server.v1.Deployment
	20, // 8: chalk.server.v1.SuspendDeploymentResponse.deployment:type_name -> chalk.server.v1.Deployment
	21, // 9: chalk.server.v1.ScaleDeploymentRequest.sizing:type_name -> chalk.server.v1.InstanceSizing
	20, // 10: chalk.server.v1.ScaleDeploymentResponse.deployment:type_name -> chalk.server.v1.Deployment
	20, // 11: chalk.server.v1.TagDeploymentResponse.deployment:type_name -> chalk.server.v1.Deployment
	20, // 12: chalk.server.v1.GetActiveDeploymentsResponse.deployments:type_name -> chalk.server.v1.Deployment
	0,  // 13: chalk.server.v1.DeployService.DeployBranch:input_type -> chalk.server.v1.DeployBranchRequest
	2,  // 14: chalk.server.v1.DeployService.CreateBranchFromSourceDeployment:input_type -> chalk.server.v1.CreateBranchFromSourceDeploymentRequest
	4,  // 15: chalk.server.v1.DeployService.GetDeployment:input_type -> chalk.server.v1.GetDeploymentRequest
	6,  // 16: chalk.server.v1.DeployService.ListDeployments:input_type -> chalk.server.v1.ListDeploymentsRequest
	14, // 17: chalk.server.v1.DeployService.GetActiveDeployments:input_type -> chalk.server.v1.GetActiveDeploymentsRequest
	8,  // 18: chalk.server.v1.DeployService.SuspendDeployment:input_type -> chalk.server.v1.SuspendDeploymentRequest
	10, // 19: chalk.server.v1.DeployService.ScaleDeployment:input_type -> chalk.server.v1.ScaleDeploymentRequest
	12, // 20: chalk.server.v1.DeployService.TagDeployment:input_type -> chalk.server.v1.TagDeploymentRequest
	1,  // 21: chalk.server.v1.DeployService.DeployBranch:output_type -> chalk.server.v1.DeployBranchResponse
	3,  // 22: chalk.server.v1.DeployService.CreateBranchFromSourceDeployment:output_type -> chalk.server.v1.CreateBranchFromSourceDeploymentResponse
	5,  // 23: chalk.server.v1.DeployService.GetDeployment:output_type -> chalk.server.v1.GetDeploymentResponse
	7,  // 24: chalk.server.v1.DeployService.ListDeployments:output_type -> chalk.server.v1.ListDeploymentsResponse
	15, // 25: chalk.server.v1.DeployService.GetActiveDeployments:output_type -> chalk.server.v1.GetActiveDeploymentsResponse
	9,  // 26: chalk.server.v1.DeployService.SuspendDeployment:output_type -> chalk.server.v1.SuspendDeploymentResponse
	11, // 27: chalk.server.v1.DeployService.ScaleDeployment:output_type -> chalk.server.v1.ScaleDeploymentResponse
	13, // 28: chalk.server.v1.DeployService.TagDeployment:output_type -> chalk.server.v1.TagDeploymentResponse
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_deploy_proto_init() }
func file_chalk_server_v1_deploy_proto_init() {
	if File_chalk_server_v1_deploy_proto != nil {
		return
	}
	file_chalk_server_v1_deployment_proto_init()
	file_chalk_server_v1_deploy_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_server_v1_deploy_proto_msgTypes[2].OneofWrappers = []any{
		(*CreateBranchFromSourceDeploymentRequest_SourceBranchName)(nil),
		(*CreateBranchFromSourceDeploymentRequest_SourceDeploymentId)(nil),
		(*CreateBranchFromSourceDeploymentRequest_CurrentMainlineDeployment)(nil),
	}
	file_chalk_server_v1_deploy_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_server_v1_deploy_proto_msgTypes[6].OneofWrappers = []any{}
	file_chalk_server_v1_deploy_proto_msgTypes[7].OneofWrappers = []any{}
	file_chalk_server_v1_deploy_proto_msgTypes[12].OneofWrappers = []any{}
	file_chalk_server_v1_deploy_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_server_v1_deploy_proto_rawDesc), len(file_chalk_server_v1_deploy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_deploy_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_deploy_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_deploy_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_deploy_proto = out.File
	file_chalk_server_v1_deploy_proto_goTypes = nil
	file_chalk_server_v1_deploy_proto_depIdxs = nil
}
