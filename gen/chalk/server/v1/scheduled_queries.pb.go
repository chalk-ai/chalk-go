// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/scheduled_queries.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduledQueryRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CronQueryScheduleId int64                  `protobuf:"varint,2,opt,name=cron_query_schedule_id,json=cronQueryScheduleId,proto3" json:"cron_query_schedule_id,omitempty"`
	EnvironmentId       string                 `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId        *string                `protobuf:"bytes,4,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	Name                string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	RunId               *string                `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3,oneof" json:"run_id,omitempty"`
	GcrJobName          *string                `protobuf:"bytes,7,opt,name=gcr_job_name,json=gcrJobName,proto3,oneof" json:"gcr_job_name,omitempty"`
	GcrExecutionId      *string                `protobuf:"bytes,8,opt,name=gcr_execution_id,json=gcrExecutionId,proto3,oneof" json:"gcr_execution_id,omitempty"`
	OfflineQueryId      string                 `protobuf:"bytes,9,opt,name=offline_query_id,json=offlineQueryId,proto3" json:"offline_query_id,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ScheduledQueryRun) Reset() {
	*x = ScheduledQueryRun{}
	mi := &file_chalk_server_v1_scheduled_queries_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduledQueryRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledQueryRun) ProtoMessage() {}

func (x *ScheduledQueryRun) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduled_queries_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledQueryRun.ProtoReflect.Descriptor instead.
func (*ScheduledQueryRun) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduled_queries_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduledQueryRun) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScheduledQueryRun) GetCronQueryScheduleId() int64 {
	if x != nil {
		return x.CronQueryScheduleId
	}
	return 0
}

func (x *ScheduledQueryRun) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *ScheduledQueryRun) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *ScheduledQueryRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduledQueryRun) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *ScheduledQueryRun) GetGcrJobName() string {
	if x != nil && x.GcrJobName != nil {
		return *x.GcrJobName
	}
	return ""
}

func (x *ScheduledQueryRun) GetGcrExecutionId() string {
	if x != nil && x.GcrExecutionId != nil {
		return *x.GcrExecutionId
	}
	return ""
}

func (x *ScheduledQueryRun) GetOfflineQueryId() string {
	if x != nil {
		return x.OfflineQueryId
	}
	return ""
}

func (x *ScheduledQueryRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScheduledQueryRun) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetScheduledQueryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetScheduledQueryRunRequest_RunId
	//	*GetScheduledQueryRunRequest_OfflineQueryId
	Identifier           isGetScheduledQueryRunRequest_Identifier `protobuf_oneof:"identifier"`
	SkipOfflineQueryMeta *bool                                    `protobuf:"varint,3,opt,name=skip_offline_query_meta,json=skipOfflineQueryMeta,proto3,oneof" json:"skip_offline_query_meta,omitempty"`
}

func (x *GetScheduledQueryRunRequest) Reset() {
	*x = GetScheduledQueryRunRequest{}
	mi := &file_chalk_server_v1_scheduled_queries_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduledQueryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledQueryRunRequest) ProtoMessage() {}

func (x *GetScheduledQueryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduled_queries_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledQueryRunRequest.ProtoReflect.Descriptor instead.
func (*GetScheduledQueryRunRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduled_queries_proto_rawDescGZIP(), []int{1}
}

func (m *GetScheduledQueryRunRequest) GetIdentifier() isGetScheduledQueryRunRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetScheduledQueryRunRequest) GetRunId() string {
	if x, ok := x.GetIdentifier().(*GetScheduledQueryRunRequest_RunId); ok {
		return x.RunId
	}
	return ""
}

func (x *GetScheduledQueryRunRequest) GetOfflineQueryId() string {
	if x, ok := x.GetIdentifier().(*GetScheduledQueryRunRequest_OfflineQueryId); ok {
		return x.OfflineQueryId
	}
	return ""
}

func (x *GetScheduledQueryRunRequest) GetSkipOfflineQueryMeta() bool {
	if x != nil && x.SkipOfflineQueryMeta != nil {
		return *x.SkipOfflineQueryMeta
	}
	return false
}

type isGetScheduledQueryRunRequest_Identifier interface {
	isGetScheduledQueryRunRequest_Identifier()
}

type GetScheduledQueryRunRequest_RunId struct {
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3,oneof"`
}

type GetScheduledQueryRunRequest_OfflineQueryId struct {
	OfflineQueryId string `protobuf:"bytes,2,opt,name=offline_query_id,json=offlineQueryId,proto3,oneof"`
}

func (*GetScheduledQueryRunRequest_RunId) isGetScheduledQueryRunRequest_Identifier() {}

func (*GetScheduledQueryRunRequest_OfflineQueryId) isGetScheduledQueryRunRequest_Identifier() {}

type GetScheduledQueryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledQueryRun *ScheduledQueryRun `protobuf:"bytes,1,opt,name=scheduled_query_run,json=scheduledQueryRun,proto3" json:"scheduled_query_run,omitempty"`
	OfflineQuery      *OfflineQueryMeta  `protobuf:"bytes,2,opt,name=offline_query,json=offlineQuery,proto3,oneof" json:"offline_query,omitempty"`
}

func (x *GetScheduledQueryRunResponse) Reset() {
	*x = GetScheduledQueryRunResponse{}
	mi := &file_chalk_server_v1_scheduled_queries_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduledQueryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledQueryRunResponse) ProtoMessage() {}

func (x *GetScheduledQueryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduled_queries_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledQueryRunResponse.ProtoReflect.Descriptor instead.
func (*GetScheduledQueryRunResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduled_queries_proto_rawDescGZIP(), []int{2}
}

func (x *GetScheduledQueryRunResponse) GetScheduledQueryRun() *ScheduledQueryRun {
	if x != nil {
		return x.ScheduledQueryRun
	}
	return nil
}

func (x *GetScheduledQueryRunResponse) GetOfflineQuery() *OfflineQueryMeta {
	if x != nil {
		return x.OfflineQuery
	}
	return nil
}

var File_chalk_server_v1_scheduled_queries_proto protoreflect.FileDescriptor

var file_chalk_server_v1_scheduled_queries_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x25, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x92, 0x04, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x72, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x67, 0x63, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x67, 0x63, 0x72, 0x4a, 0x6f, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x63, 0x72, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0e, 0x67, 0x63, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x63, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x63, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x17,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x14, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x22, 0xd1, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x4b, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0xc5, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x15,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_scheduled_queries_proto_rawDescOnce sync.Once
	file_chalk_server_v1_scheduled_queries_proto_rawDescData = file_chalk_server_v1_scheduled_queries_proto_rawDesc
)

func file_chalk_server_v1_scheduled_queries_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_scheduled_queries_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_scheduled_queries_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_scheduled_queries_proto_rawDescData)
	})
	return file_chalk_server_v1_scheduled_queries_proto_rawDescData
}

var file_chalk_server_v1_scheduled_queries_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_server_v1_scheduled_queries_proto_goTypes = []any{
	(*ScheduledQueryRun)(nil),            // 0: chalk.server.v1.ScheduledQueryRun
	(*GetScheduledQueryRunRequest)(nil),  // 1: chalk.server.v1.GetScheduledQueryRunRequest
	(*GetScheduledQueryRunResponse)(nil), // 2: chalk.server.v1.GetScheduledQueryRunResponse
	(*timestamppb.Timestamp)(nil),        // 3: google.protobuf.Timestamp
	(*OfflineQueryMeta)(nil),             // 4: chalk.server.v1.OfflineQueryMeta
}
var file_chalk_server_v1_scheduled_queries_proto_depIdxs = []int32{
	3, // 0: chalk.server.v1.ScheduledQueryRun.created_at:type_name -> google.protobuf.Timestamp
	3, // 1: chalk.server.v1.ScheduledQueryRun.updated_at:type_name -> google.protobuf.Timestamp
	0, // 2: chalk.server.v1.GetScheduledQueryRunResponse.scheduled_query_run:type_name -> chalk.server.v1.ScheduledQueryRun
	4, // 3: chalk.server.v1.GetScheduledQueryRunResponse.offline_query:type_name -> chalk.server.v1.OfflineQueryMeta
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_scheduled_queries_proto_init() }
func file_chalk_server_v1_scheduled_queries_proto_init() {
	if File_chalk_server_v1_scheduled_queries_proto != nil {
		return
	}
	file_chalk_server_v1_offline_queries_proto_init()
	file_chalk_server_v1_scheduled_queries_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_scheduled_queries_proto_msgTypes[1].OneofWrappers = []any{
		(*GetScheduledQueryRunRequest_RunId)(nil),
		(*GetScheduledQueryRunRequest_OfflineQueryId)(nil),
	}
	file_chalk_server_v1_scheduled_queries_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_scheduled_queries_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_scheduled_queries_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_scheduled_queries_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_scheduled_queries_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_scheduled_queries_proto = out.File
	file_chalk_server_v1_scheduled_queries_proto_rawDesc = nil
	file_chalk_server_v1_scheduled_queries_proto_goTypes = nil
	file_chalk_server_v1_scheduled_queries_proto_depIdxs = nil
}
