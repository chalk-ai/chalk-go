// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/datasets.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatasetRevisionStatus int32

const (
	DatasetRevisionStatus_DATASET_REVISION_STATUS_UNSPECIFIED DatasetRevisionStatus = 0
	DatasetRevisionStatus_DATASET_REVISION_STATUS_UNKNOWN     DatasetRevisionStatus = 1
	DatasetRevisionStatus_DATASET_REVISION_STATUS_WORKING     DatasetRevisionStatus = 2
	DatasetRevisionStatus_DATASET_REVISION_STATUS_COMPLETED   DatasetRevisionStatus = 3
	DatasetRevisionStatus_DATASET_REVISION_STATUS_FAILED      DatasetRevisionStatus = 4
	DatasetRevisionStatus_DATASET_REVISION_STATUS_CANCELED    DatasetRevisionStatus = 5
	DatasetRevisionStatus_DATASET_REVISION_STATUS_QUEUED      DatasetRevisionStatus = 6
)

// Enum value maps for DatasetRevisionStatus.
var (
	DatasetRevisionStatus_name = map[int32]string{
		0: "DATASET_REVISION_STATUS_UNSPECIFIED",
		1: "DATASET_REVISION_STATUS_UNKNOWN",
		2: "DATASET_REVISION_STATUS_WORKING",
		3: "DATASET_REVISION_STATUS_COMPLETED",
		4: "DATASET_REVISION_STATUS_FAILED",
		5: "DATASET_REVISION_STATUS_CANCELED",
		6: "DATASET_REVISION_STATUS_QUEUED",
	}
	DatasetRevisionStatus_value = map[string]int32{
		"DATASET_REVISION_STATUS_UNSPECIFIED": 0,
		"DATASET_REVISION_STATUS_UNKNOWN":     1,
		"DATASET_REVISION_STATUS_WORKING":     2,
		"DATASET_REVISION_STATUS_COMPLETED":   3,
		"DATASET_REVISION_STATUS_FAILED":      4,
		"DATASET_REVISION_STATUS_CANCELED":    5,
		"DATASET_REVISION_STATUS_QUEUED":      6,
	}
)

func (x DatasetRevisionStatus) Enum() *DatasetRevisionStatus {
	p := new(DatasetRevisionStatus)
	*p = x
	return p
}

func (x DatasetRevisionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetRevisionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_datasets_proto_enumTypes[0].Descriptor()
}

func (DatasetRevisionStatus) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_datasets_proto_enumTypes[0]
}

func (x DatasetRevisionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetRevisionStatus.Descriptor instead.
func (DatasetRevisionStatus) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_datasets_proto_rawDescGZIP(), []int{0}
}

type DatasetVersion int32

const (
	DatasetVersion_DATASET_VERSION_UNSPECIFIED                               DatasetVersion = 0
	DatasetVersion_DATASET_VERSION_UNKNOWN                                   DatasetVersion = 1
	DatasetVersion_DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES    DatasetVersion = 2
	DatasetVersion_DATASET_VERSION_DATASET_WRITER                            DatasetVersion = 3
	DatasetVersion_DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES_V2 DatasetVersion = 4
	DatasetVersion_DATASET_VERSION_COMPUTE_RESOLVER_OUTPUT_V1                DatasetVersion = 5
	DatasetVersion_DATASET_VERSION_NATIVE_DTYPES                             DatasetVersion = 6
	DatasetVersion_DATASET_VERSION_NATIVE_COLUMN_NAMES                       DatasetVersion = 7
)

// Enum value maps for DatasetVersion.
var (
	DatasetVersion_name = map[int32]string{
		0: "DATASET_VERSION_UNSPECIFIED",
		1: "DATASET_VERSION_UNKNOWN",
		2: "DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES",
		3: "DATASET_VERSION_DATASET_WRITER",
		4: "DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES_V2",
		5: "DATASET_VERSION_COMPUTE_RESOLVER_OUTPUT_V1",
		6: "DATASET_VERSION_NATIVE_DTYPES",
		7: "DATASET_VERSION_NATIVE_COLUMN_NAMES",
	}
	DatasetVersion_value = map[string]int32{
		"DATASET_VERSION_UNSPECIFIED":                               0,
		"DATASET_VERSION_UNKNOWN":                                   1,
		"DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES":    2,
		"DATASET_VERSION_DATASET_WRITER":                            3,
		"DATASET_VERSION_BIGQUERY_JOB_WITH_B32_ENCODED_COLNAMES_V2": 4,
		"DATASET_VERSION_COMPUTE_RESOLVER_OUTPUT_V1":                5,
		"DATASET_VERSION_NATIVE_DTYPES":                             6,
		"DATASET_VERSION_NATIVE_COLUMN_NAMES":                       7,
	}
)

func (x DatasetVersion) Enum() *DatasetVersion {
	p := new(DatasetVersion)
	*p = x
	return p
}

func (x DatasetVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_datasets_proto_enumTypes[1].Descriptor()
}

func (DatasetVersion) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_datasets_proto_enumTypes[1]
}

func (x DatasetVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetVersion.Descriptor instead.
func (DatasetVersion) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_datasets_proto_rawDescGZIP(), []int{1}
}

type OfflineQueryGivensVersion int32

const (
	OfflineQueryGivensVersion_OFFLINE_QUERY_GIVENS_VERSION_UNSPECIFIED                        OfflineQueryGivensVersion = 0
	OfflineQueryGivensVersion_OFFLINE_QUERY_GIVENS_VERSION_UNKNOWN                            OfflineQueryGivensVersion = 1
	OfflineQueryGivensVersion_OFFLINE_QUERY_GIVENS_VERSION_NATIVE_TS_FEATURE_FOR_ROOT_NS      OfflineQueryGivensVersion = 2
	OfflineQueryGivensVersion_OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME                 OfflineQueryGivensVersion = 3
	OfflineQueryGivensVersion_OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME_WITH_URI_PREFIX OfflineQueryGivensVersion = 4
)

// Enum value maps for OfflineQueryGivensVersion.
var (
	OfflineQueryGivensVersion_name = map[int32]string{
		0: "OFFLINE_QUERY_GIVENS_VERSION_UNSPECIFIED",
		1: "OFFLINE_QUERY_GIVENS_VERSION_UNKNOWN",
		2: "OFFLINE_QUERY_GIVENS_VERSION_NATIVE_TS_FEATURE_FOR_ROOT_NS",
		3: "OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME",
		4: "OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME_WITH_URI_PREFIX",
	}
	OfflineQueryGivensVersion_value = map[string]int32{
		"OFFLINE_QUERY_GIVENS_VERSION_UNSPECIFIED":                        0,
		"OFFLINE_QUERY_GIVENS_VERSION_UNKNOWN":                            1,
		"OFFLINE_QUERY_GIVENS_VERSION_NATIVE_TS_FEATURE_FOR_ROOT_NS":      2,
		"OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME":                 3,
		"OFFLINE_QUERY_GIVENS_VERSION_SINGLE_TS_COL_NAME_WITH_URI_PREFIX": 4,
	}
)

func (x OfflineQueryGivensVersion) Enum() *OfflineQueryGivensVersion {
	p := new(OfflineQueryGivensVersion)
	*p = x
	return p
}

func (x OfflineQueryGivensVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfflineQueryGivensVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_datasets_proto_enumTypes[2].Descriptor()
}

func (OfflineQueryGivensVersion) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_datasets_proto_enumTypes[2]
}

func (x OfflineQueryGivensVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfflineQueryGivensVersion.Descriptor instead.
func (OfflineQueryGivensVersion) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_datasets_proto_rawDescGZIP(), []int{2}
}

type DatasetRevisionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumericId         int64                      `protobuf:"varint,1,opt,name=numeric_id,json=numericId,proto3" json:"numeric_id,omitempty"`
	OfflineQueryId    string                     `protobuf:"bytes,2,opt,name=offline_query_id,json=offlineQueryId,proto3" json:"offline_query_id,omitempty"`
	DatasetId         string                     `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	GivensUri         *string                    `protobuf:"bytes,4,opt,name=givens_uri,json=givensUri,proto3,oneof" json:"givens_uri,omitempty"`
	GivensVersion     *OfflineQueryGivensVersion `protobuf:"varint,5,opt,name=givens_version,json=givensVersion,proto3,enum=chalk.server.v1.OfflineQueryGivensVersion,oneof" json:"givens_version,omitempty"`
	OutputUri         *string                    `protobuf:"bytes,6,opt,name=output_uri,json=outputUri,proto3,oneof" json:"output_uri,omitempty"`
	OutputVersion     *DatasetVersion            `protobuf:"varint,7,opt,name=output_version,json=outputVersion,proto3,enum=chalk.server.v1.DatasetVersion,oneof" json:"output_version,omitempty"`
	BranchName        *string                    `protobuf:"bytes,8,opt,name=branch_name,json=branchName,proto3,oneof" json:"branch_name,omitempty"`
	NumRows           *int64                     `protobuf:"varint,9,opt,name=num_rows,json=numRows,proto3,oneof" json:"num_rows,omitempty"`
	PhysicalSizeBytes *int64                     `protobuf:"varint,10,opt,name=physical_size_bytes,json=physicalSizeBytes,proto3,oneof" json:"physical_size_bytes,omitempty"`
	OutputColumns     []string                   `protobuf:"bytes,11,rep,name=output_columns,json=outputColumns,proto3" json:"output_columns,omitempty"`
	OutputFqns        []string                   `protobuf:"bytes,12,rep,name=output_fqns,json=outputFqns,proto3" json:"output_fqns,omitempty"`
	AgentId           *string                    `protobuf:"bytes,13,opt,name=agent_id,json=agentId,proto3,oneof" json:"agent_id,omitempty"`
	CompletedAt       *timestamppb.Timestamp     `protobuf:"bytes,14,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	NumShards         *int64                     `protobuf:"varint,15,opt,name=num_shards,json=numShards,proto3,oneof" json:"num_shards,omitempty"`
	NumComputers      *int64                     `protobuf:"varint,16,opt,name=num_computers,json=numComputers,proto3,oneof" json:"num_computers,omitempty"`
	Metadata          *structpb.Value            `protobuf:"bytes,17,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Status            *DatasetRevisionStatus     `protobuf:"varint,18,opt,name=status,proto3,enum=chalk.server.v1.DatasetRevisionStatus,oneof" json:"status,omitempty"` // possibly deprecated?
}

func (x *DatasetRevisionMeta) Reset() {
	*x = DatasetRevisionMeta{}
	mi := &file_chalk_server_v1_datasets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetRevisionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetRevisionMeta) ProtoMessage() {}

func (x *DatasetRevisionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_datasets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetRevisionMeta.ProtoReflect.Descriptor instead.
func (*DatasetRevisionMeta) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_datasets_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetRevisionMeta) GetNumericId() int64 {
	if x != nil {
		return x.NumericId
	}
	return 0
}

func (x *DatasetRevisionMeta) GetOfflineQueryId() string {
	if x != nil {
		return x.OfflineQueryId
	}
	return ""
}

func (x *DatasetRevisionMeta) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DatasetRevisionMeta) GetGivensUri() string {
	if x != nil && x.GivensUri != nil {
		return *x.GivensUri
	}
	return ""
}

func (x *DatasetRevisionMeta) GetGivensVersion() OfflineQueryGivensVersion {
	if x != nil && x.GivensVersion != nil {
		return *x.GivensVersion
	}
	return OfflineQueryGivensVersion_OFFLINE_QUERY_GIVENS_VERSION_UNSPECIFIED
}

func (x *DatasetRevisionMeta) GetOutputUri() string {
	if x != nil && x.OutputUri != nil {
		return *x.OutputUri
	}
	return ""
}

func (x *DatasetRevisionMeta) GetOutputVersion() DatasetVersion {
	if x != nil && x.OutputVersion != nil {
		return *x.OutputVersion
	}
	return DatasetVersion_DATASET_VERSION_UNSPECIFIED
}

func (x *DatasetRevisionMeta) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

func (x *DatasetRevisionMeta) GetNumRows() int64 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

func (x *DatasetRevisionMeta) GetPhysicalSizeBytes() int64 {
	if x != nil && x.PhysicalSizeBytes != nil {
		return *x.PhysicalSizeBytes
	}
	return 0
}

func (x *DatasetRevisionMeta) GetOutputColumns() []string {
	if x != nil {
		return x.OutputColumns
	}
	return nil
}

func (x *DatasetRevisionMeta) GetOutputFqns() []string {
	if x != nil {
		return x.OutputFqns
	}
	return nil
}

func (x *DatasetRevisionMeta) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *DatasetRevisionMeta) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *DatasetRevisionMeta) GetNumShards() int64 {
	if x != nil && x.NumShards != nil {
		return *x.NumShards
	}
	return 0
}

func (x *DatasetRevisionMeta) GetNumComputers() int64 {
	if x != nil && x.NumComputers != nil {
		return *x.NumComputers
	}
	return 0
}

func (x *DatasetRevisionMeta) GetMetadata() *structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DatasetRevisionMeta) GetStatus() DatasetRevisionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return DatasetRevisionStatus_DATASET_REVISION_STATUS_UNSPECIFIED
}

var File_chalk_server_v1_datasets_proto protoreflect.FileDescriptor

var file_chalk_server_v1_datasets_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xad, 0x08, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x55, 0x72,
	0x69, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x69, 0x76, 0x65, 0x6e,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0d, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x06, 0x52, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x71, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x71, 0x6e, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x0a, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0b, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2a, 0x9f, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44,
	0x10, 0x06, 0x2a, 0xe9, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45,
	0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x3a, 0x0a, 0x36, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x33, 0x32, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x3d, 0x0a, 0x39, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x4a, 0x4f, 0x42, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x33, 0x32, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x56, 0x32,
	0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x56, 0x31,
	0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x07, 0x2a, 0xad,
	0x02, 0x0a, 0x19, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x69, 0x76, 0x65, 0x6e, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x28,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49,
	0x56, 0x45, 0x4e, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x4e, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x12, 0x3e, 0x0a, 0x3a, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x53, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x53, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f,
	0x4e, 0x53, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x53, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x54, 0x53, 0x5f, 0x43,
	0x4f, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x43, 0x0a, 0x3f, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e,
	0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x55, 0x52, 0x49, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x04, 0x42, 0xbd,
	0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_datasets_proto_rawDescOnce sync.Once
	file_chalk_server_v1_datasets_proto_rawDescData = file_chalk_server_v1_datasets_proto_rawDesc
)

func file_chalk_server_v1_datasets_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_datasets_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_datasets_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_datasets_proto_rawDescData)
	})
	return file_chalk_server_v1_datasets_proto_rawDescData
}

var file_chalk_server_v1_datasets_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_chalk_server_v1_datasets_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_chalk_server_v1_datasets_proto_goTypes = []any{
	(DatasetRevisionStatus)(0),     // 0: chalk.server.v1.DatasetRevisionStatus
	(DatasetVersion)(0),            // 1: chalk.server.v1.DatasetVersion
	(OfflineQueryGivensVersion)(0), // 2: chalk.server.v1.OfflineQueryGivensVersion
	(*DatasetRevisionMeta)(nil),    // 3: chalk.server.v1.DatasetRevisionMeta
	(*timestamppb.Timestamp)(nil),  // 4: google.protobuf.Timestamp
	(*structpb.Value)(nil),         // 5: google.protobuf.Value
}
var file_chalk_server_v1_datasets_proto_depIdxs = []int32{
	2, // 0: chalk.server.v1.DatasetRevisionMeta.givens_version:type_name -> chalk.server.v1.OfflineQueryGivensVersion
	1, // 1: chalk.server.v1.DatasetRevisionMeta.output_version:type_name -> chalk.server.v1.DatasetVersion
	4, // 2: chalk.server.v1.DatasetRevisionMeta.completed_at:type_name -> google.protobuf.Timestamp
	5, // 3: chalk.server.v1.DatasetRevisionMeta.metadata:type_name -> google.protobuf.Value
	0, // 4: chalk.server.v1.DatasetRevisionMeta.status:type_name -> chalk.server.v1.DatasetRevisionStatus
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_datasets_proto_init() }
func file_chalk_server_v1_datasets_proto_init() {
	if File_chalk_server_v1_datasets_proto != nil {
		return
	}
	file_chalk_server_v1_datasets_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_datasets_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_datasets_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_datasets_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_datasets_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_datasets_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_datasets_proto = out.File
	file_chalk_server_v1_datasets_proto_rawDesc = nil
	file_chalk_server_v1_datasets_proto_goTypes = nil
	file_chalk_server_v1_datasets_proto_depIdxs = nil
}
