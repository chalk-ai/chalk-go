// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/server/v1/named_query.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NamedQueryService_GetAllNamedQueries_FullMethodName                 = "/chalk.server.v1.NamedQueryService/GetAllNamedQueries"
	NamedQueryService_GetAllNamedQueriesActiveDeployment_FullMethodName = "/chalk.server.v1.NamedQueryService/GetAllNamedQueriesActiveDeployment"
	NamedQueryService_GetNamedQueryByName_FullMethodName                = "/chalk.server.v1.NamedQueryService/GetNamedQueryByName"
)

// NamedQueryServiceClient is the client API for NamedQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamedQueryServiceClient interface {
	GetAllNamedQueries(ctx context.Context, in *GetAllNamedQueriesRequest, opts ...grpc.CallOption) (*GetAllNamedQueriesResponse, error)
	GetAllNamedQueriesActiveDeployment(ctx context.Context, in *GetAllNamedQueriesActiveDeploymentRequest, opts ...grpc.CallOption) (*GetAllNamedQueriesActiveDeploymentResponse, error)
	GetNamedQueryByName(ctx context.Context, in *GetNamedQueryByNameRequest, opts ...grpc.CallOption) (*GetNamedQueryByNameResponse, error)
}

type namedQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamedQueryServiceClient(cc grpc.ClientConnInterface) NamedQueryServiceClient {
	return &namedQueryServiceClient{cc}
}

func (c *namedQueryServiceClient) GetAllNamedQueries(ctx context.Context, in *GetAllNamedQueriesRequest, opts ...grpc.CallOption) (*GetAllNamedQueriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllNamedQueriesResponse)
	err := c.cc.Invoke(ctx, NamedQueryService_GetAllNamedQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedQueryServiceClient) GetAllNamedQueriesActiveDeployment(ctx context.Context, in *GetAllNamedQueriesActiveDeploymentRequest, opts ...grpc.CallOption) (*GetAllNamedQueriesActiveDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllNamedQueriesActiveDeploymentResponse)
	err := c.cc.Invoke(ctx, NamedQueryService_GetAllNamedQueriesActiveDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedQueryServiceClient) GetNamedQueryByName(ctx context.Context, in *GetNamedQueryByNameRequest, opts ...grpc.CallOption) (*GetNamedQueryByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamedQueryByNameResponse)
	err := c.cc.Invoke(ctx, NamedQueryService_GetNamedQueryByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamedQueryServiceServer is the server API for NamedQueryService service.
// All implementations must embed UnimplementedNamedQueryServiceServer
// for forward compatibility.
type NamedQueryServiceServer interface {
	GetAllNamedQueries(context.Context, *GetAllNamedQueriesRequest) (*GetAllNamedQueriesResponse, error)
	GetAllNamedQueriesActiveDeployment(context.Context, *GetAllNamedQueriesActiveDeploymentRequest) (*GetAllNamedQueriesActiveDeploymentResponse, error)
	GetNamedQueryByName(context.Context, *GetNamedQueryByNameRequest) (*GetNamedQueryByNameResponse, error)
	mustEmbedUnimplementedNamedQueryServiceServer()
}

// UnimplementedNamedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamedQueryServiceServer struct{}

func (UnimplementedNamedQueryServiceServer) GetAllNamedQueries(context.Context, *GetAllNamedQueriesRequest) (*GetAllNamedQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedQueries not implemented")
}
func (UnimplementedNamedQueryServiceServer) GetAllNamedQueriesActiveDeployment(context.Context, *GetAllNamedQueriesActiveDeploymentRequest) (*GetAllNamedQueriesActiveDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamedQueriesActiveDeployment not implemented")
}
func (UnimplementedNamedQueryServiceServer) GetNamedQueryByName(context.Context, *GetNamedQueryByNameRequest) (*GetNamedQueryByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedQueryByName not implemented")
}
func (UnimplementedNamedQueryServiceServer) mustEmbedUnimplementedNamedQueryServiceServer() {}
func (UnimplementedNamedQueryServiceServer) testEmbeddedByValue()                           {}

// UnsafeNamedQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamedQueryServiceServer will
// result in compilation errors.
type UnsafeNamedQueryServiceServer interface {
	mustEmbedUnimplementedNamedQueryServiceServer()
}

func RegisterNamedQueryServiceServer(s grpc.ServiceRegistrar, srv NamedQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedNamedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NamedQueryService_ServiceDesc, srv)
}

func _NamedQueryService_GetAllNamedQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNamedQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedQueryServiceServer).GetAllNamedQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedQueryService_GetAllNamedQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedQueryServiceServer).GetAllNamedQueries(ctx, req.(*GetAllNamedQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedQueryService_GetAllNamedQueriesActiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNamedQueriesActiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedQueryServiceServer).GetAllNamedQueriesActiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedQueryService_GetAllNamedQueriesActiveDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedQueryServiceServer).GetAllNamedQueriesActiveDeployment(ctx, req.(*GetAllNamedQueriesActiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedQueryService_GetNamedQueryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamedQueryByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedQueryServiceServer).GetNamedQueryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedQueryService_GetNamedQueryByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedQueryServiceServer).GetNamedQueryByName(ctx, req.(*GetNamedQueryByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamedQueryService_ServiceDesc is the grpc.ServiceDesc for NamedQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamedQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.server.v1.NamedQueryService",
	HandlerType: (*NamedQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllNamedQueries",
			Handler:    _NamedQueryService_GetAllNamedQueries_Handler,
		},
		{
			MethodName: "GetAllNamedQueriesActiveDeployment",
			Handler:    _NamedQueryService_GetAllNamedQueriesActiveDeployment_Handler,
		},
		{
			MethodName: "GetNamedQueryByName",
			Handler:    _NamedQueryService_GetNamedQueryByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/server/v1/named_query.proto",
}
