// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/server/v1/authtesting.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthTestingService_GetUnauthedTestEndpoint_FullMethodName      = "/chalk.server.v1.AuthTestingService/GetUnauthedTestEndpoint"
	AuthTestingService_GetAuthedTestEndpoint_FullMethodName        = "/chalk.server.v1.AuthTestingService/GetAuthedTestEndpoint"
	AuthTestingService_GetViewerTestEndpoint_FullMethodName        = "/chalk.server.v1.AuthTestingService/GetViewerTestEndpoint"
	AuthTestingService_GetDataScientistTestEndpoint_FullMethodName = "/chalk.server.v1.AuthTestingService/GetDataScientistTestEndpoint"
	AuthTestingService_GetDeveloperTestEndpoint_FullMethodName     = "/chalk.server.v1.AuthTestingService/GetDeveloperTestEndpoint"
	AuthTestingService_GetAdminTestEndpoint_FullMethodName         = "/chalk.server.v1.AuthTestingService/GetAdminTestEndpoint"
	AuthTestingService_GetOwnerTestEndpoint_FullMethodName         = "/chalk.server.v1.AuthTestingService/GetOwnerTestEndpoint"
)

// AuthTestingServiceClient is the client API for AuthTestingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthTestingServiceClient interface {
	GetUnauthedTestEndpoint(ctx context.Context, in *GetUnauthedTestEndpointRequest, opts ...grpc.CallOption) (*GetUnauthedTestEndpointResponse, error)
	GetAuthedTestEndpoint(ctx context.Context, in *GetAuthedTestEndpointRequest, opts ...grpc.CallOption) (*GetAuthedTestEndpointResponse, error)
	GetViewerTestEndpoint(ctx context.Context, in *GetViewerTestEndpointRequest, opts ...grpc.CallOption) (*GetViewerTestEndpointResponse, error)
	GetDataScientistTestEndpoint(ctx context.Context, in *GetDataScientistTestEndpointRequest, opts ...grpc.CallOption) (*GetDataScientistTestEndpointResponse, error)
	GetDeveloperTestEndpoint(ctx context.Context, in *GetDeveloperTestEndpointRequest, opts ...grpc.CallOption) (*GetDeveloperTestEndpointResponse, error)
	GetAdminTestEndpoint(ctx context.Context, in *GetAdminTestEndpointRequest, opts ...grpc.CallOption) (*GetAdminTestEndpointResponse, error)
	GetOwnerTestEndpoint(ctx context.Context, in *GetOwnerTestEndpointRequest, opts ...grpc.CallOption) (*GetOwnerTestEndpointResponse, error)
}

type authTestingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthTestingServiceClient(cc grpc.ClientConnInterface) AuthTestingServiceClient {
	return &authTestingServiceClient{cc}
}

func (c *authTestingServiceClient) GetUnauthedTestEndpoint(ctx context.Context, in *GetUnauthedTestEndpointRequest, opts ...grpc.CallOption) (*GetUnauthedTestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnauthedTestEndpointResponse)
	err := c.cc.Invoke(ctx, AuthTestingService_GetUnauthedTestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTestingServiceClient) GetAuthedTestEndpoint(ctx context.Context, in *GetAuthedTestEndpointRequest, opts ...grpc.CallOption) (*GetAuthedTestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthedTestEndpointResponse)
	err := c.cc.Invoke(ctx, AuthTestingService_GetAuthedTestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTestingServiceClient) GetViewerTestEndpoint(ctx context.Context, in *GetViewerTestEndpointRequest, opts ...grpc.CallOption) (*GetViewerTestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetViewerTestEndpointResponse)
	err := c.cc.Invoke(ctx, AuthTestingService_GetViewerTestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTestingServiceClient) GetDataScientistTestEndpoint(ctx context.Context, in *GetDataScientistTestEndpointRequest, opts ...grpc.CallOption) (*GetDataScientistTestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataScientistTestEndpointResponse)
	err := c.cc.Invoke(ctx, AuthTestingService_GetDataScientistTestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTestingServiceClient) GetDeveloperTestEndpoint(ctx context.Context, in *GetDeveloperTestEndpointRequest, opts ...grpc.CallOption) (*GetDeveloperTestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeveloperTestEndpointResponse)
	err := c.cc.Invoke(ctx, AuthTestingService_GetDeveloperTestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTestingServiceClient) GetAdminTestEndpoint(ctx context.Context, in *GetAdminTestEndpointRequest, opts ...grpc.CallOption) (*GetAdminTestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdminTestEndpointResponse)
	err := c.cc.Invoke(ctx, AuthTestingService_GetAdminTestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTestingServiceClient) GetOwnerTestEndpoint(ctx context.Context, in *GetOwnerTestEndpointRequest, opts ...grpc.CallOption) (*GetOwnerTestEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOwnerTestEndpointResponse)
	err := c.cc.Invoke(ctx, AuthTestingService_GetOwnerTestEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthTestingServiceServer is the server API for AuthTestingService service.
// All implementations must embed UnimplementedAuthTestingServiceServer
// for forward compatibility.
type AuthTestingServiceServer interface {
	GetUnauthedTestEndpoint(context.Context, *GetUnauthedTestEndpointRequest) (*GetUnauthedTestEndpointResponse, error)
	GetAuthedTestEndpoint(context.Context, *GetAuthedTestEndpointRequest) (*GetAuthedTestEndpointResponse, error)
	GetViewerTestEndpoint(context.Context, *GetViewerTestEndpointRequest) (*GetViewerTestEndpointResponse, error)
	GetDataScientistTestEndpoint(context.Context, *GetDataScientistTestEndpointRequest) (*GetDataScientistTestEndpointResponse, error)
	GetDeveloperTestEndpoint(context.Context, *GetDeveloperTestEndpointRequest) (*GetDeveloperTestEndpointResponse, error)
	GetAdminTestEndpoint(context.Context, *GetAdminTestEndpointRequest) (*GetAdminTestEndpointResponse, error)
	GetOwnerTestEndpoint(context.Context, *GetOwnerTestEndpointRequest) (*GetOwnerTestEndpointResponse, error)
	mustEmbedUnimplementedAuthTestingServiceServer()
}

// UnimplementedAuthTestingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthTestingServiceServer struct{}

func (UnimplementedAuthTestingServiceServer) GetUnauthedTestEndpoint(context.Context, *GetUnauthedTestEndpointRequest) (*GetUnauthedTestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnauthedTestEndpoint not implemented")
}
func (UnimplementedAuthTestingServiceServer) GetAuthedTestEndpoint(context.Context, *GetAuthedTestEndpointRequest) (*GetAuthedTestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthedTestEndpoint not implemented")
}
func (UnimplementedAuthTestingServiceServer) GetViewerTestEndpoint(context.Context, *GetViewerTestEndpointRequest) (*GetViewerTestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewerTestEndpoint not implemented")
}
func (UnimplementedAuthTestingServiceServer) GetDataScientistTestEndpoint(context.Context, *GetDataScientistTestEndpointRequest) (*GetDataScientistTestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataScientistTestEndpoint not implemented")
}
func (UnimplementedAuthTestingServiceServer) GetDeveloperTestEndpoint(context.Context, *GetDeveloperTestEndpointRequest) (*GetDeveloperTestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperTestEndpoint not implemented")
}
func (UnimplementedAuthTestingServiceServer) GetAdminTestEndpoint(context.Context, *GetAdminTestEndpointRequest) (*GetAdminTestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminTestEndpoint not implemented")
}
func (UnimplementedAuthTestingServiceServer) GetOwnerTestEndpoint(context.Context, *GetOwnerTestEndpointRequest) (*GetOwnerTestEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerTestEndpoint not implemented")
}
func (UnimplementedAuthTestingServiceServer) mustEmbedUnimplementedAuthTestingServiceServer() {}
func (UnimplementedAuthTestingServiceServer) testEmbeddedByValue()                            {}

// UnsafeAuthTestingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthTestingServiceServer will
// result in compilation errors.
type UnsafeAuthTestingServiceServer interface {
	mustEmbedUnimplementedAuthTestingServiceServer()
}

func RegisterAuthTestingServiceServer(s grpc.ServiceRegistrar, srv AuthTestingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthTestingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthTestingService_ServiceDesc, srv)
}

func _AuthTestingService_GetUnauthedTestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnauthedTestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTestingServiceServer).GetUnauthedTestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTestingService_GetUnauthedTestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTestingServiceServer).GetUnauthedTestEndpoint(ctx, req.(*GetUnauthedTestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTestingService_GetAuthedTestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthedTestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTestingServiceServer).GetAuthedTestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTestingService_GetAuthedTestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTestingServiceServer).GetAuthedTestEndpoint(ctx, req.(*GetAuthedTestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTestingService_GetViewerTestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewerTestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTestingServiceServer).GetViewerTestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTestingService_GetViewerTestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTestingServiceServer).GetViewerTestEndpoint(ctx, req.(*GetViewerTestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTestingService_GetDataScientistTestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataScientistTestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTestingServiceServer).GetDataScientistTestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTestingService_GetDataScientistTestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTestingServiceServer).GetDataScientistTestEndpoint(ctx, req.(*GetDataScientistTestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTestingService_GetDeveloperTestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperTestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTestingServiceServer).GetDeveloperTestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTestingService_GetDeveloperTestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTestingServiceServer).GetDeveloperTestEndpoint(ctx, req.(*GetDeveloperTestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTestingService_GetAdminTestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminTestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTestingServiceServer).GetAdminTestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTestingService_GetAdminTestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTestingServiceServer).GetAdminTestEndpoint(ctx, req.(*GetAdminTestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTestingService_GetOwnerTestEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerTestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTestingServiceServer).GetOwnerTestEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTestingService_GetOwnerTestEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTestingServiceServer).GetOwnerTestEndpoint(ctx, req.(*GetOwnerTestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthTestingService_ServiceDesc is the grpc.ServiceDesc for AuthTestingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthTestingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.server.v1.AuthTestingService",
	HandlerType: (*AuthTestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnauthedTestEndpoint",
			Handler:    _AuthTestingService_GetUnauthedTestEndpoint_Handler,
		},
		{
			MethodName: "GetAuthedTestEndpoint",
			Handler:    _AuthTestingService_GetAuthedTestEndpoint_Handler,
		},
		{
			MethodName: "GetViewerTestEndpoint",
			Handler:    _AuthTestingService_GetViewerTestEndpoint_Handler,
		},
		{
			MethodName: "GetDataScientistTestEndpoint",
			Handler:    _AuthTestingService_GetDataScientistTestEndpoint_Handler,
		},
		{
			MethodName: "GetDeveloperTestEndpoint",
			Handler:    _AuthTestingService_GetDeveloperTestEndpoint_Handler,
		},
		{
			MethodName: "GetAdminTestEndpoint",
			Handler:    _AuthTestingService_GetAdminTestEndpoint_Handler,
		},
		{
			MethodName: "GetOwnerTestEndpoint",
			Handler:    _AuthTestingService_GetOwnerTestEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/server/v1/authtesting.proto",
}
