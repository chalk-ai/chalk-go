// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/dataplanejobqueue.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobQueueState int32

const (
	JobQueueState_JOB_QUEUE_STATE_UNSPECIFIED JobQueueState = 0
	JobQueueState_JOB_QUEUE_STATE_SCHEDULED   JobQueueState = 1
	JobQueueState_JOB_QUEUE_STATE_RUNNING     JobQueueState = 2
	JobQueueState_JOB_QUEUE_STATE_COMPLETED   JobQueueState = 3
	JobQueueState_JOB_QUEUE_STATE_FAILED      JobQueueState = 4
	JobQueueState_JOB_QUEUE_STATE_CANCELED    JobQueueState = 5
	JobQueueState_JOB_QUEUE_STATE_NOT_READY   JobQueueState = 6
)

// Enum value maps for JobQueueState.
var (
	JobQueueState_name = map[int32]string{
		0: "JOB_QUEUE_STATE_UNSPECIFIED",
		1: "JOB_QUEUE_STATE_SCHEDULED",
		2: "JOB_QUEUE_STATE_RUNNING",
		3: "JOB_QUEUE_STATE_COMPLETED",
		4: "JOB_QUEUE_STATE_FAILED",
		5: "JOB_QUEUE_STATE_CANCELED",
		6: "JOB_QUEUE_STATE_NOT_READY",
	}
	JobQueueState_value = map[string]int32{
		"JOB_QUEUE_STATE_UNSPECIFIED": 0,
		"JOB_QUEUE_STATE_SCHEDULED":   1,
		"JOB_QUEUE_STATE_RUNNING":     2,
		"JOB_QUEUE_STATE_COMPLETED":   3,
		"JOB_QUEUE_STATE_FAILED":      4,
		"JOB_QUEUE_STATE_CANCELED":    5,
		"JOB_QUEUE_STATE_NOT_READY":   6,
	}
)

func (x JobQueueState) Enum() *JobQueueState {
	p := new(JobQueueState)
	*p = x
	return p
}

func (x JobQueueState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobQueueState) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_dataplanejobqueue_proto_enumTypes[0].Descriptor()
}

func (JobQueueState) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_dataplanejobqueue_proto_enumTypes[0]
}

func (x JobQueueState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobQueueState.Descriptor instead.
func (JobQueueState) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP(), []int{0}
}

type JobQueueKind int32

const (
	JobQueueKind_JOB_QUEUE_KIND_UNSPECIFIED         JobQueueKind = 0
	JobQueueKind_JOB_QUEUE_KIND_ASYNC_OFFLINE_QUERY JobQueueKind = 1
	JobQueueKind_JOB_QUEUE_KIND_SCHEDULED_QUERY     JobQueueKind = 2
	JobQueueKind_JOB_QUEUE_KIND_SCRIPT_TASK         JobQueueKind = 3
)

// Enum value maps for JobQueueKind.
var (
	JobQueueKind_name = map[int32]string{
		0: "JOB_QUEUE_KIND_UNSPECIFIED",
		1: "JOB_QUEUE_KIND_ASYNC_OFFLINE_QUERY",
		2: "JOB_QUEUE_KIND_SCHEDULED_QUERY",
		3: "JOB_QUEUE_KIND_SCRIPT_TASK",
	}
	JobQueueKind_value = map[string]int32{
		"JOB_QUEUE_KIND_UNSPECIFIED":         0,
		"JOB_QUEUE_KIND_ASYNC_OFFLINE_QUERY": 1,
		"JOB_QUEUE_KIND_SCHEDULED_QUERY":     2,
		"JOB_QUEUE_KIND_SCRIPT_TASK":         3,
	}
)

func (x JobQueueKind) Enum() *JobQueueKind {
	p := new(JobQueueKind)
	*p = x
	return p
}

func (x JobQueueKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobQueueKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_dataplanejobqueue_proto_enumTypes[1].Descriptor()
}

func (JobQueueKind) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_dataplanejobqueue_proto_enumTypes[1]
}

func (x JobQueueKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobQueueKind.Descriptor instead.
func (JobQueueKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP(), []int{1}
}

type JobQueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	EnvironmentId          string                 `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId           string                 `protobuf:"bytes,4,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	JobName                string                 `protobuf:"bytes,5,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	AttemptIdx             int64                  `protobuf:"varint,6,opt,name=attempt_idx,json=attemptIdx,proto3" json:"attempt_idx,omitempty"`
	State                  JobQueueState          `protobuf:"varint,7,opt,name=state,proto3,enum=chalk.server.v1.JobQueueState" json:"state,omitempty"`
	ScheduledAt            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=scheduled_at,json=scheduledAt,proto3,oneof" json:"scheduled_at,omitempty"`
	Kind                   JobQueueKind           `protobuf:"varint,9,opt,name=kind,proto3,enum=chalk.server.v1.JobQueueKind" json:"kind,omitempty"`
	JobArgs                []byte                 `protobuf:"bytes,10,opt,name=job_args,json=jobArgs,proto3" json:"job_args,omitempty"`
	ResourceGroup          string                 `protobuf:"bytes,11,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	FinalizedAt            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=finalized_at,json=finalizedAt,proto3,oneof" json:"finalized_at,omitempty"`
	LastAttemptedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_attempted_at,json=lastAttemptedAt,proto3,oneof" json:"last_attempted_at,omitempty"`
	AttemptedBy            []string               `protobuf:"bytes,14,rep,name=attempted_by,json=attemptedBy,proto3" json:"attempted_by,omitempty"`
	LastHeartbeatAt        *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_heartbeat_at,json=lastHeartbeatAt,proto3,oneof" json:"last_heartbeat_at,omitempty"`
	OperationId            string                 `protobuf:"bytes,16,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	CancelationRequestedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=cancelation_requested_at,json=cancelationRequestedAt,proto3,oneof" json:"cancelation_requested_at,omitempty"`
	MaxAttempts            int64                  `protobuf:"varint,18,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	MainlineDeploymentId   string                 `protobuf:"bytes,19,opt,name=mainline_deployment_id,json=mainlineDeploymentId,proto3" json:"mainline_deployment_id,omitempty"`
}

func (x *JobQueueItem) Reset() {
	*x = JobQueueItem{}
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQueueItem) ProtoMessage() {}

func (x *JobQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQueueItem.ProtoReflect.Descriptor instead.
func (*JobQueueItem) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP(), []int{0}
}

func (x *JobQueueItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobQueueItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *JobQueueItem) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *JobQueueItem) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *JobQueueItem) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *JobQueueItem) GetAttemptIdx() int64 {
	if x != nil {
		return x.AttemptIdx
	}
	return 0
}

func (x *JobQueueItem) GetState() JobQueueState {
	if x != nil {
		return x.State
	}
	return JobQueueState_JOB_QUEUE_STATE_UNSPECIFIED
}

func (x *JobQueueItem) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *JobQueueItem) GetKind() JobQueueKind {
	if x != nil {
		return x.Kind
	}
	return JobQueueKind_JOB_QUEUE_KIND_UNSPECIFIED
}

func (x *JobQueueItem) GetJobArgs() []byte {
	if x != nil {
		return x.JobArgs
	}
	return nil
}

func (x *JobQueueItem) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *JobQueueItem) GetFinalizedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalizedAt
	}
	return nil
}

func (x *JobQueueItem) GetLastAttemptedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAttemptedAt
	}
	return nil
}

func (x *JobQueueItem) GetAttemptedBy() []string {
	if x != nil {
		return x.AttemptedBy
	}
	return nil
}

func (x *JobQueueItem) GetLastHeartbeatAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatAt
	}
	return nil
}

func (x *JobQueueItem) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *JobQueueItem) GetCancelationRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelationRequestedAt
	}
	return nil
}

func (x *JobQueueItem) GetMaxAttempts() int64 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *JobQueueItem) GetMainlineDeploymentId() string {
	if x != nil {
		return x.MainlineDeploymentId
	}
	return ""
}

type GetDataPlaneJobQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDataPlaneJobQueueRequest) Reset() {
	*x = GetDataPlaneJobQueueRequest{}
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataPlaneJobQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataPlaneJobQueueRequest) ProtoMessage() {}

func (x *GetDataPlaneJobQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataPlaneJobQueueRequest.ProtoReflect.Descriptor instead.
func (*GetDataPlaneJobQueueRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataPlaneJobQueueRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetDataPlaneJobQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *JobQueueItem `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetDataPlaneJobQueueResponse) Reset() {
	*x = GetDataPlaneJobQueueResponse{}
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataPlaneJobQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataPlaneJobQueueResponse) ProtoMessage() {}

func (x *GetDataPlaneJobQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataPlaneJobQueueResponse.ProtoReflect.Descriptor instead.
func (*GetDataPlaneJobQueueResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP(), []int{2}
}

func (x *GetDataPlaneJobQueueResponse) GetJob() *JobQueueItem {
	if x != nil {
		return x.Job
	}
	return nil
}

type ListDataPlaneJobQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId string        `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId  string        `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	State         JobQueueState `protobuf:"varint,3,opt,name=state,proto3,enum=chalk.server.v1.JobQueueState" json:"state,omitempty"`
	Kind          JobQueueKind  `protobuf:"varint,4,opt,name=kind,proto3,enum=chalk.server.v1.JobQueueKind" json:"kind,omitempty"`
	Limit         int32         `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32         `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	OperationId   string        `protobuf:"bytes,7,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (x *ListDataPlaneJobQueueRequest) Reset() {
	*x = ListDataPlaneJobQueueRequest{}
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataPlaneJobQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataPlaneJobQueueRequest) ProtoMessage() {}

func (x *ListDataPlaneJobQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataPlaneJobQueueRequest.ProtoReflect.Descriptor instead.
func (*ListDataPlaneJobQueueRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP(), []int{3}
}

func (x *ListDataPlaneJobQueueRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *ListDataPlaneJobQueueRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ListDataPlaneJobQueueRequest) GetState() JobQueueState {
	if x != nil {
		return x.State
	}
	return JobQueueState_JOB_QUEUE_STATE_UNSPECIFIED
}

func (x *ListDataPlaneJobQueueRequest) GetKind() JobQueueKind {
	if x != nil {
		return x.Kind
	}
	return JobQueueKind_JOB_QUEUE_KIND_UNSPECIFIED
}

func (x *ListDataPlaneJobQueueRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDataPlaneJobQueueRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListDataPlaneJobQueueRequest) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type ListDataPlaneJobQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs  []*JobQueueItem `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListDataPlaneJobQueueResponse) Reset() {
	*x = ListDataPlaneJobQueueResponse{}
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataPlaneJobQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataPlaneJobQueueResponse) ProtoMessage() {}

func (x *ListDataPlaneJobQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataPlaneJobQueueResponse.ProtoReflect.Descriptor instead.
func (*ListDataPlaneJobQueueResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP(), []int{4}
}

func (x *ListDataPlaneJobQueueResponse) GetJobs() []*JobQueueItem {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *ListDataPlaneJobQueueResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_chalk_server_v1_dataplanejobqueue_proto protoreflect.FileDescriptor

var file_chalk_server_v1_dataplanejobqueue_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x6a, 0x6f, 0x62, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x08, 0x0a,
	0x0c, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x78,
	0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x41, 0x72, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x42, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x4b, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x04, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x61, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x22, 0xa4, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x2a, 0xe4, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4a,
	0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x06, 0x2a, 0x9a, 0x01, 0x0a, 0x0c, 0x4a,
	0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x4a,
	0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4a,
	0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4a, 0x4f, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4a, 0x4f, 0x42, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x32, 0x97, 0x02, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2c, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x1b, 0x90, 0x02,
	0x01, 0x12, 0x7e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x1b, 0x90, 0x02,
	0x01, 0x42, 0xc6, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x6a, 0x6f, 0x62, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chalk_server_v1_dataplanejobqueue_proto_rawDescOnce sync.Once
	file_chalk_server_v1_dataplanejobqueue_proto_rawDescData = file_chalk_server_v1_dataplanejobqueue_proto_rawDesc
)

func file_chalk_server_v1_dataplanejobqueue_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_dataplanejobqueue_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_dataplanejobqueue_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_dataplanejobqueue_proto_rawDescData)
	})
	return file_chalk_server_v1_dataplanejobqueue_proto_rawDescData
}

var file_chalk_server_v1_dataplanejobqueue_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_server_v1_dataplanejobqueue_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chalk_server_v1_dataplanejobqueue_proto_goTypes = []any{
	(JobQueueState)(0),                    // 0: chalk.server.v1.JobQueueState
	(JobQueueKind)(0),                     // 1: chalk.server.v1.JobQueueKind
	(*JobQueueItem)(nil),                  // 2: chalk.server.v1.JobQueueItem
	(*GetDataPlaneJobQueueRequest)(nil),   // 3: chalk.server.v1.GetDataPlaneJobQueueRequest
	(*GetDataPlaneJobQueueResponse)(nil),  // 4: chalk.server.v1.GetDataPlaneJobQueueResponse
	(*ListDataPlaneJobQueueRequest)(nil),  // 5: chalk.server.v1.ListDataPlaneJobQueueRequest
	(*ListDataPlaneJobQueueResponse)(nil), // 6: chalk.server.v1.ListDataPlaneJobQueueResponse
	(*timestamppb.Timestamp)(nil),         // 7: google.protobuf.Timestamp
}
var file_chalk_server_v1_dataplanejobqueue_proto_depIdxs = []int32{
	7,  // 0: chalk.server.v1.JobQueueItem.created_at:type_name -> google.protobuf.Timestamp
	0,  // 1: chalk.server.v1.JobQueueItem.state:type_name -> chalk.server.v1.JobQueueState
	7,  // 2: chalk.server.v1.JobQueueItem.scheduled_at:type_name -> google.protobuf.Timestamp
	1,  // 3: chalk.server.v1.JobQueueItem.kind:type_name -> chalk.server.v1.JobQueueKind
	7,  // 4: chalk.server.v1.JobQueueItem.finalized_at:type_name -> google.protobuf.Timestamp
	7,  // 5: chalk.server.v1.JobQueueItem.last_attempted_at:type_name -> google.protobuf.Timestamp
	7,  // 6: chalk.server.v1.JobQueueItem.last_heartbeat_at:type_name -> google.protobuf.Timestamp
	7,  // 7: chalk.server.v1.JobQueueItem.cancelation_requested_at:type_name -> google.protobuf.Timestamp
	2,  // 8: chalk.server.v1.GetDataPlaneJobQueueResponse.job:type_name -> chalk.server.v1.JobQueueItem
	0,  // 9: chalk.server.v1.ListDataPlaneJobQueueRequest.state:type_name -> chalk.server.v1.JobQueueState
	1,  // 10: chalk.server.v1.ListDataPlaneJobQueueRequest.kind:type_name -> chalk.server.v1.JobQueueKind
	2,  // 11: chalk.server.v1.ListDataPlaneJobQueueResponse.jobs:type_name -> chalk.server.v1.JobQueueItem
	3,  // 12: chalk.server.v1.DataPlaneJobQueueService.GetDataPlaneJobQueue:input_type -> chalk.server.v1.GetDataPlaneJobQueueRequest
	5,  // 13: chalk.server.v1.DataPlaneJobQueueService.ListDataPlaneJobQueue:input_type -> chalk.server.v1.ListDataPlaneJobQueueRequest
	4,  // 14: chalk.server.v1.DataPlaneJobQueueService.GetDataPlaneJobQueue:output_type -> chalk.server.v1.GetDataPlaneJobQueueResponse
	6,  // 15: chalk.server.v1.DataPlaneJobQueueService.ListDataPlaneJobQueue:output_type -> chalk.server.v1.ListDataPlaneJobQueueResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_dataplanejobqueue_proto_init() }
func file_chalk_server_v1_dataplanejobqueue_proto_init() {
	if File_chalk_server_v1_dataplanejobqueue_proto != nil {
		return
	}
	file_chalk_server_v1_dataplanejobqueue_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_dataplanejobqueue_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_dataplanejobqueue_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_dataplanejobqueue_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_dataplanejobqueue_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_dataplanejobqueue_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_dataplanejobqueue_proto = out.File
	file_chalk_server_v1_dataplanejobqueue_proto_rawDesc = nil
	file_chalk_server_v1_dataplanejobqueue_proto_goTypes = nil
	file_chalk_server_v1_dataplanejobqueue_proto_depIdxs = nil
}
