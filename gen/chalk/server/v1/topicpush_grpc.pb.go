// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/server/v1/topicpush.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TopicPushService_ListJobs_FullMethodName     = "/chalk.server.v1.TopicPushService/ListJobs"
	TopicPushService_CreateJob_FullMethodName    = "/chalk.server.v1.TopicPushService/CreateJob"
	TopicPushService_UpdateJob_FullMethodName    = "/chalk.server.v1.TopicPushService/UpdateJob"
	TopicPushService_DeleteJob_FullMethodName    = "/chalk.server.v1.TopicPushService/DeleteJob"
	TopicPushService_GetJobByName_FullMethodName = "/chalk.server.v1.TopicPushService/GetJobByName"
)

// TopicPushServiceClient is the client API for TopicPushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicPushServiceClient interface {
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	GetJobByName(ctx context.Context, in *GetJobByNameRequest, opts ...grpc.CallOption) (*GetJobByNameResponse, error)
}

type topicPushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicPushServiceClient(cc grpc.ClientConnInterface) TopicPushServiceClient {
	return &topicPushServiceClient{cc}
}

func (c *topicPushServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, TopicPushService_ListJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicPushServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, TopicPushService_CreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicPushServiceClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, TopicPushService_UpdateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicPushServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, TopicPushService_DeleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicPushServiceClient) GetJobByName(ctx context.Context, in *GetJobByNameRequest, opts ...grpc.CallOption) (*GetJobByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobByNameResponse)
	err := c.cc.Invoke(ctx, TopicPushService_GetJobByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicPushServiceServer is the server API for TopicPushService service.
// All implementations must embed UnimplementedTopicPushServiceServer
// for forward compatibility.
type TopicPushServiceServer interface {
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	GetJobByName(context.Context, *GetJobByNameRequest) (*GetJobByNameResponse, error)
	mustEmbedUnimplementedTopicPushServiceServer()
}

// UnimplementedTopicPushServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTopicPushServiceServer struct{}

func (UnimplementedTopicPushServiceServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedTopicPushServiceServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedTopicPushServiceServer) UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedTopicPushServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedTopicPushServiceServer) GetJobByName(context.Context, *GetJobByNameRequest) (*GetJobByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobByName not implemented")
}
func (UnimplementedTopicPushServiceServer) mustEmbedUnimplementedTopicPushServiceServer() {}
func (UnimplementedTopicPushServiceServer) testEmbeddedByValue()                          {}

// UnsafeTopicPushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicPushServiceServer will
// result in compilation errors.
type UnsafeTopicPushServiceServer interface {
	mustEmbedUnimplementedTopicPushServiceServer()
}

func RegisterTopicPushServiceServer(s grpc.ServiceRegistrar, srv TopicPushServiceServer) {
	// If the following call pancis, it indicates UnimplementedTopicPushServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TopicPushService_ServiceDesc, srv)
}

func _TopicPushService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicPushServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicPushService_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicPushServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicPushService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicPushServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicPushService_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicPushServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicPushService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicPushServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicPushService_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicPushServiceServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicPushService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicPushServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicPushService_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicPushServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicPushService_GetJobByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicPushServiceServer).GetJobByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicPushService_GetJobByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicPushServiceServer).GetJobByName(ctx, req.(*GetJobByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopicPushService_ServiceDesc is the grpc.ServiceDesc for TopicPushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopicPushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.server.v1.TopicPushService",
	HandlerType: (*TopicPushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _TopicPushService_ListJobs_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _TopicPushService_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _TopicPushService_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _TopicPushService_DeleteJob_Handler,
		},
		{
			MethodName: "GetJobByName",
			Handler:    _TopicPushService_GetJobByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/server/v1/topicpush.proto",
}
