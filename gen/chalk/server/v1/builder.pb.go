// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/builder.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v1"
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/lsp/v1"
	v12 "github.com/chalk-ai/chalk-go/gen/chalk/nodepools/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeploymentBuildStatus int32

const (
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_UNSPECIFIED    DeploymentBuildStatus = 0
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_UNKNOWN        DeploymentBuildStatus = 1
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_PENDING        DeploymentBuildStatus = 2
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_QUEUED         DeploymentBuildStatus = 3
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_WORKING        DeploymentBuildStatus = 4
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_SUCCESS        DeploymentBuildStatus = 5
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_FAILURE        DeploymentBuildStatus = 6
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_INTERNAL_ERROR DeploymentBuildStatus = 7
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_TIMEOUT        DeploymentBuildStatus = 8
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_CANCELLED      DeploymentBuildStatus = 9
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_EXPIRED        DeploymentBuildStatus = 10
	DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_BOOT_ERRORS    DeploymentBuildStatus = 11
)

// Enum value maps for DeploymentBuildStatus.
var (
	DeploymentBuildStatus_name = map[int32]string{
		0:  "DEPLOYMENT_BUILD_STATUS_UNSPECIFIED",
		1:  "DEPLOYMENT_BUILD_STATUS_UNKNOWN",
		2:  "DEPLOYMENT_BUILD_STATUS_PENDING",
		3:  "DEPLOYMENT_BUILD_STATUS_QUEUED",
		4:  "DEPLOYMENT_BUILD_STATUS_WORKING",
		5:  "DEPLOYMENT_BUILD_STATUS_SUCCESS",
		6:  "DEPLOYMENT_BUILD_STATUS_FAILURE",
		7:  "DEPLOYMENT_BUILD_STATUS_INTERNAL_ERROR",
		8:  "DEPLOYMENT_BUILD_STATUS_TIMEOUT",
		9:  "DEPLOYMENT_BUILD_STATUS_CANCELLED",
		10: "DEPLOYMENT_BUILD_STATUS_EXPIRED",
		11: "DEPLOYMENT_BUILD_STATUS_BOOT_ERRORS",
	}
	DeploymentBuildStatus_value = map[string]int32{
		"DEPLOYMENT_BUILD_STATUS_UNSPECIFIED":    0,
		"DEPLOYMENT_BUILD_STATUS_UNKNOWN":        1,
		"DEPLOYMENT_BUILD_STATUS_PENDING":        2,
		"DEPLOYMENT_BUILD_STATUS_QUEUED":         3,
		"DEPLOYMENT_BUILD_STATUS_WORKING":        4,
		"DEPLOYMENT_BUILD_STATUS_SUCCESS":        5,
		"DEPLOYMENT_BUILD_STATUS_FAILURE":        6,
		"DEPLOYMENT_BUILD_STATUS_INTERNAL_ERROR": 7,
		"DEPLOYMENT_BUILD_STATUS_TIMEOUT":        8,
		"DEPLOYMENT_BUILD_STATUS_CANCELLED":      9,
		"DEPLOYMENT_BUILD_STATUS_EXPIRED":        10,
		"DEPLOYMENT_BUILD_STATUS_BOOT_ERRORS":    11,
	}
)

func (x DeploymentBuildStatus) Enum() *DeploymentBuildStatus {
	p := new(DeploymentBuildStatus)
	*p = x
	return p
}

func (x DeploymentBuildStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentBuildStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_builder_proto_enumTypes[0].Descriptor()
}

func (DeploymentBuildStatus) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_builder_proto_enumTypes[0]
}

func (x DeploymentBuildStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentBuildStatus.Descriptor instead.
func (DeploymentBuildStatus) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{0}
}

type BranchScalingState int32

const (
	BranchScalingState_BRANCH_SCALING_STATE_UNSPECIFIED BranchScalingState = 0
	BranchScalingState_BRANCH_SCALING_STATE_SUCCESS     BranchScalingState = 1
	BranchScalingState_BRANCH_SCALING_STATE_IN_PROGRESS BranchScalingState = 2
)

// Enum value maps for BranchScalingState.
var (
	BranchScalingState_name = map[int32]string{
		0: "BRANCH_SCALING_STATE_UNSPECIFIED",
		1: "BRANCH_SCALING_STATE_SUCCESS",
		2: "BRANCH_SCALING_STATE_IN_PROGRESS",
	}
	BranchScalingState_value = map[string]int32{
		"BRANCH_SCALING_STATE_UNSPECIFIED": 0,
		"BRANCH_SCALING_STATE_SUCCESS":     1,
		"BRANCH_SCALING_STATE_IN_PROGRESS": 2,
	}
)

func (x BranchScalingState) Enum() *BranchScalingState {
	p := new(BranchScalingState)
	*p = x
	return p
}

func (x BranchScalingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchScalingState) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_builder_proto_enumTypes[1].Descriptor()
}

func (BranchScalingState) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_builder_proto_enumTypes[1]
}

func (x BranchScalingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchScalingState.Descriptor instead.
func (BranchScalingState) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{1}
}

type ActivateDeploymentTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceKind       string `protobuf:"bytes,1,opt,name=service_kind,json=serviceKind,proto3" json:"service_kind,omitempty"`
	ResourceGroupName string `protobuf:"bytes,2,opt,name=resource_group_name,json=resourceGroupName,proto3" json:"resource_group_name,omitempty"`
}

func (x *ActivateDeploymentTarget) Reset() {
	*x = ActivateDeploymentTarget{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateDeploymentTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateDeploymentTarget) ProtoMessage() {}

func (x *ActivateDeploymentTarget) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateDeploymentTarget.ProtoReflect.Descriptor instead.
func (*ActivateDeploymentTarget) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{0}
}

func (x *ActivateDeploymentTarget) GetServiceKind() string {
	if x != nil {
		return x.ServiceKind
	}
	return ""
}

func (x *ActivateDeploymentTarget) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

type ActivateDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingDeploymentId string                      `protobuf:"bytes,1,opt,name=existing_deployment_id,json=existingDeploymentId,proto3" json:"existing_deployment_id,omitempty"`
	Targets              []*ActivateDeploymentTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *ActivateDeploymentRequest) Reset() {
	*x = ActivateDeploymentRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateDeploymentRequest) ProtoMessage() {}

func (x *ActivateDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateDeploymentRequest.ProtoReflect.Descriptor instead.
func (*ActivateDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{1}
}

func (x *ActivateDeploymentRequest) GetExistingDeploymentId() string {
	if x != nil {
		return x.ExistingDeploymentId
	}
	return ""
}

func (x *ActivateDeploymentRequest) GetTargets() []*ActivateDeploymentTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

type ActivateDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateDeploymentResponse) Reset() {
	*x = ActivateDeploymentResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateDeploymentResponse) ProtoMessage() {}

func (x *ActivateDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateDeploymentResponse.ProtoReflect.Descriptor instead.
func (*ActivateDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{2}
}

type IndexDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingDeploymentId string `protobuf:"bytes,1,opt,name=existing_deployment_id,json=existingDeploymentId,proto3" json:"existing_deployment_id,omitempty"`
}

func (x *IndexDeploymentRequest) Reset() {
	*x = IndexDeploymentRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDeploymentRequest) ProtoMessage() {}

func (x *IndexDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDeploymentRequest.ProtoReflect.Descriptor instead.
func (*IndexDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{3}
}

func (x *IndexDeploymentRequest) GetExistingDeploymentId() string {
	if x != nil {
		return x.ExistingDeploymentId
	}
	return ""
}

type IndexDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndexDeploymentResponse) Reset() {
	*x = IndexDeploymentResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDeploymentResponse) ProtoMessage() {}

func (x *IndexDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDeploymentResponse.ProtoReflect.Descriptor instead.
func (*IndexDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{4}
}

type DeployKubeComponentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingDeploymentId string                      `protobuf:"bytes,1,opt,name=existing_deployment_id,json=existingDeploymentId,proto3" json:"existing_deployment_id,omitempty"`
	Targets              []*ActivateDeploymentTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *DeployKubeComponentsRequest) Reset() {
	*x = DeployKubeComponentsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployKubeComponentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployKubeComponentsRequest) ProtoMessage() {}

func (x *DeployKubeComponentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployKubeComponentsRequest.ProtoReflect.Descriptor instead.
func (*DeployKubeComponentsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{5}
}

func (x *DeployKubeComponentsRequest) GetExistingDeploymentId() string {
	if x != nil {
		return x.ExistingDeploymentId
	}
	return ""
}

func (x *DeployKubeComponentsRequest) GetTargets() []*ActivateDeploymentTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

type DeployKubeComponentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeployKubeComponentsResponse) Reset() {
	*x = DeployKubeComponentsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployKubeComponentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployKubeComponentsResponse) ProtoMessage() {}

func (x *DeployKubeComponentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployKubeComponentsResponse.ProtoReflect.Descriptor instead.
func (*DeployKubeComponentsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{6}
}

type RebuildDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingDeploymentId string  `protobuf:"bytes,1,opt,name=existing_deployment_id,json=existingDeploymentId,proto3" json:"existing_deployment_id,omitempty"`
	NewImageTag          string  `protobuf:"bytes,2,opt,name=new_image_tag,json=newImageTag,proto3" json:"new_image_tag,omitempty"`
	BaseImageOverride    *string `protobuf:"bytes,3,opt,name=base_image_override,json=baseImageOverride,proto3,oneof" json:"base_image_override,omitempty"`
	EnableProfiling      bool    `protobuf:"varint,4,opt,name=enable_profiling,json=enableProfiling,proto3" json:"enable_profiling,omitempty"`
}

func (x *RebuildDeploymentRequest) Reset() {
	*x = RebuildDeploymentRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildDeploymentRequest) ProtoMessage() {}

func (x *RebuildDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildDeploymentRequest.ProtoReflect.Descriptor instead.
func (*RebuildDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{7}
}

func (x *RebuildDeploymentRequest) GetExistingDeploymentId() string {
	if x != nil {
		return x.ExistingDeploymentId
	}
	return ""
}

func (x *RebuildDeploymentRequest) GetNewImageTag() string {
	if x != nil {
		return x.NewImageTag
	}
	return ""
}

func (x *RebuildDeploymentRequest) GetBaseImageOverride() string {
	if x != nil && x.BaseImageOverride != nil {
		return *x.BaseImageOverride
	}
	return ""
}

func (x *RebuildDeploymentRequest) GetEnableProfiling() bool {
	if x != nil {
		return x.EnableProfiling
	}
	return false
}

type RebuildDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (x *RebuildDeploymentResponse) Reset() {
	*x = RebuildDeploymentResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildDeploymentResponse) ProtoMessage() {}

func (x *RebuildDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildDeploymentResponse.ProtoReflect.Descriptor instead.
func (*RebuildDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{8}
}

func (x *RebuildDeploymentResponse) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

type RedeployDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingDeploymentId string   `protobuf:"bytes,1,opt,name=existing_deployment_id,json=existingDeploymentId,proto3" json:"existing_deployment_id,omitempty"`
	EnableProfiling      bool     `protobuf:"varint,2,opt,name=enable_profiling,json=enableProfiling,proto3" json:"enable_profiling,omitempty"`
	DeploymentTags       []string `protobuf:"bytes,3,rep,name=deployment_tags,json=deploymentTags,proto3" json:"deployment_tags,omitempty"`
	BaseImageOverride    *string  `protobuf:"bytes,4,opt,name=base_image_override,json=baseImageOverride,proto3,oneof" json:"base_image_override,omitempty"`
}

func (x *RedeployDeploymentRequest) Reset() {
	*x = RedeployDeploymentRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeployDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeployDeploymentRequest) ProtoMessage() {}

func (x *RedeployDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeployDeploymentRequest.ProtoReflect.Descriptor instead.
func (*RedeployDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{9}
}

func (x *RedeployDeploymentRequest) GetExistingDeploymentId() string {
	if x != nil {
		return x.ExistingDeploymentId
	}
	return ""
}

func (x *RedeployDeploymentRequest) GetEnableProfiling() bool {
	if x != nil {
		return x.EnableProfiling
	}
	return false
}

func (x *RedeployDeploymentRequest) GetDeploymentTags() []string {
	if x != nil {
		return x.DeploymentTags
	}
	return nil
}

func (x *RedeployDeploymentRequest) GetBaseImageOverride() string {
	if x != nil && x.BaseImageOverride != nil {
		return *x.BaseImageOverride
	}
	return ""
}

type RedeployDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	BuildId      string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"` // don't care about this
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *RedeployDeploymentResponse) Reset() {
	*x = RedeployDeploymentResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedeployDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeployDeploymentResponse) ProtoMessage() {}

func (x *RedeployDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeployDeploymentResponse.ProtoReflect.Descriptor instead.
func (*RedeployDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *RedeployDeploymentResponse) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *RedeployDeploymentResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type UploadSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId      string  `protobuf:"bytes,7,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Archive           []byte  `protobuf:"bytes,1,opt,name=archive,proto3" json:"archive,omitempty"`
	NoPromote         bool    `protobuf:"varint,2,opt,name=no_promote,json=noPromote,proto3" json:"no_promote,omitempty"`
	DependencyHash    *string `protobuf:"bytes,3,opt,name=dependency_hash,json=dependencyHash,proto3,oneof" json:"dependency_hash,omitempty"`
	BaseImageOverride *string `protobuf:"bytes,4,opt,name=base_image_override,json=baseImageOverride,proto3,oneof" json:"base_image_override,omitempty"`
	UseGrpc           bool    `protobuf:"varint,5,opt,name=use_grpc,json=useGrpc,proto3" json:"use_grpc,omitempty"`
	EnableProfiling   bool    `protobuf:"varint,6,opt,name=enable_profiling,json=enableProfiling,proto3" json:"enable_profiling,omitempty"`
}

func (x *UploadSourceRequest) Reset() {
	*x = UploadSourceRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSourceRequest) ProtoMessage() {}

func (x *UploadSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSourceRequest.ProtoReflect.Descriptor instead.
func (*UploadSourceRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{11}
}

func (x *UploadSourceRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *UploadSourceRequest) GetArchive() []byte {
	if x != nil {
		return x.Archive
	}
	return nil
}

func (x *UploadSourceRequest) GetNoPromote() bool {
	if x != nil {
		return x.NoPromote
	}
	return false
}

func (x *UploadSourceRequest) GetDependencyHash() string {
	if x != nil && x.DependencyHash != nil {
		return *x.DependencyHash
	}
	return ""
}

func (x *UploadSourceRequest) GetBaseImageOverride() string {
	if x != nil && x.BaseImageOverride != nil {
		return *x.BaseImageOverride
	}
	return ""
}

func (x *UploadSourceRequest) GetUseGrpc() bool {
	if x != nil {
		return x.UseGrpc
	}
	return false
}

func (x *UploadSourceRequest) GetEnableProfiling() bool {
	if x != nil {
		return x.EnableProfiling
	}
	return false
}

type UploadSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ProgressUrl string `protobuf:"bytes,2,opt,name=progress_url,json=progressUrl,proto3" json:"progress_url,omitempty"`
}

func (x *UploadSourceResponse) Reset() {
	*x = UploadSourceResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSourceResponse) ProtoMessage() {}

func (x *UploadSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSourceResponse.ProtoReflect.Descriptor instead.
func (*UploadSourceResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{12}
}

func (x *UploadSourceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UploadSourceResponse) GetProgressUrl() string {
	if x != nil {
		return x.ProgressUrl
	}
	return ""
}

type LintSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archive []byte `protobuf:"bytes,1,opt,name=archive,proto3" json:"archive,omitempty"`
}

func (x *LintSourceRequest) Reset() {
	*x = LintSourceRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LintSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintSourceRequest) ProtoMessage() {}

func (x *LintSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintSourceRequest.ProtoReflect.Descriptor instead.
func (*LintSourceRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{13}
}

func (x *LintSourceRequest) GetArchive() []byte {
	if x != nil {
		return x.Archive
	}
	return nil
}

type LintSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph *v1.Graph `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Lsp   *v11.LSP  `protobuf:"bytes,2,opt,name=lsp,proto3" json:"lsp,omitempty"`
}

func (x *LintSourceResponse) Reset() {
	*x = LintSourceResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LintSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintSourceResponse) ProtoMessage() {}

func (x *LintSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintSourceResponse.ProtoReflect.Descriptor instead.
func (*LintSourceResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{14}
}

func (x *LintSourceResponse) GetGraph() *v1.Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *LintSourceResponse) GetLsp() *v11.LSP {
	if x != nil {
		return x.Lsp
	}
	return nil
}

type GetDeploymentStepsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *GetDeploymentStepsRequest) Reset() {
	*x = GetDeploymentStepsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentStepsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentStepsRequest) ProtoMessage() {}

func (x *GetDeploymentStepsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentStepsRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentStepsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{15}
}

func (x *GetDeploymentStepsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type DeploymentBuildStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Status      DeploymentBuildStatus  `protobuf:"varint,3,opt,name=status,proto3,enum=chalk.server.v1.DeploymentBuildStatus" json:"status,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *DeploymentBuildStep) Reset() {
	*x = DeploymentBuildStep{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentBuildStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentBuildStep) ProtoMessage() {}

func (x *DeploymentBuildStep) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentBuildStep.ProtoReflect.Descriptor instead.
func (*DeploymentBuildStep) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{16}
}

func (x *DeploymentBuildStep) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeploymentBuildStep) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DeploymentBuildStep) GetStatus() DeploymentBuildStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentBuildStatus_DEPLOYMENT_BUILD_STATUS_UNSPECIFIED
}

func (x *DeploymentBuildStep) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DeploymentBuildStep) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type GetDeploymentStepsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps      []*DeploymentBuildStep `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	Deployment *Deployment            `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GetDeploymentStepsResponse) Reset() {
	*x = GetDeploymentStepsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentStepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentStepsResponse) ProtoMessage() {}

func (x *GetDeploymentStepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentStepsResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentStepsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{17}
}

func (x *GetDeploymentStepsResponse) GetSteps() []*DeploymentBuildStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *GetDeploymentStepsResponse) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type GetDeploymentLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *GetDeploymentLogsRequest) Reset() {
	*x = GetDeploymentLogsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentLogsRequest) ProtoMessage() {}

func (x *GetDeploymentLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentLogsRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentLogsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{18}
}

func (x *GetDeploymentLogsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*LogEntry `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *GetDeploymentLogsResponse) Reset() {
	*x = GetDeploymentLogsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeploymentLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentLogsResponse) ProtoMessage() {}

func (x *GetDeploymentLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentLogsResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentLogsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{19}
}

func (x *GetDeploymentLogsResponse) GetLogs() []*LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

type GetClusterTimescaleDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *GetClusterTimescaleDBRequest) Reset() {
	*x = GetClusterTimescaleDBRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterTimescaleDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterTimescaleDBRequest) ProtoMessage() {}

func (x *GetClusterTimescaleDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterTimescaleDBRequest.ProtoReflect.Descriptor instead.
func (*GetClusterTimescaleDBRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{20}
}

func (x *GetClusterTimescaleDBRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type GetClusterTimescaleDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	SpecsString string                 `protobuf:"bytes,2,opt,name=specs_string,json=specsString,proto3" json:"specs_string,omitempty"` // use specs instead
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Specs       *ClusterTimescaleSpecs `protobuf:"bytes,5,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *GetClusterTimescaleDBResponse) Reset() {
	*x = GetClusterTimescaleDBResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterTimescaleDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterTimescaleDBResponse) ProtoMessage() {}

func (x *GetClusterTimescaleDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterTimescaleDBResponse.ProtoReflect.Descriptor instead.
func (*GetClusterTimescaleDBResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{21}
}

func (x *GetClusterTimescaleDBResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *GetClusterTimescaleDBResponse) GetSpecsString() string {
	if x != nil {
		return x.SpecsString
	}
	return ""
}

func (x *GetClusterTimescaleDBResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetClusterTimescaleDBResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetClusterTimescaleDBResponse) GetSpecs() *ClusterTimescaleSpecs {
	if x != nil {
		return x.Specs
	}
	return nil
}

type GetClusterGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *GetClusterGatewayRequest) Reset() {
	*x = GetClusterGatewayRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterGatewayRequest) ProtoMessage() {}

func (x *GetClusterGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterGatewayRequest.ProtoReflect.Descriptor instead.
func (*GetClusterGatewayRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{22}
}

func (x *GetClusterGatewayRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type GetClusterGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	SpecsString string                 `protobuf:"bytes,2,opt,name=specs_string,json=specsString,proto3" json:"specs_string,omitempty"` // use specs instead
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Specs       *EnvoyGatewaySpecs     `protobuf:"bytes,5,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *GetClusterGatewayResponse) Reset() {
	*x = GetClusterGatewayResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterGatewayResponse) ProtoMessage() {}

func (x *GetClusterGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterGatewayResponse.ProtoReflect.Descriptor instead.
func (*GetClusterGatewayResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{23}
}

func (x *GetClusterGatewayResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *GetClusterGatewayResponse) GetSpecsString() string {
	if x != nil {
		return x.SpecsString
	}
	return ""
}

func (x *GetClusterGatewayResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetClusterGatewayResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetClusterGatewayResponse) GetSpecs() *EnvoyGatewaySpecs {
	if x != nil {
		return x.Specs
	}
	return nil
}

type BackgroundPersistence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	SpecsString string                                `protobuf:"bytes,3,opt,name=specs_string,json=specsString,proto3" json:"specs_string,omitempty"` // use specs instead
	CreatedAt   *timestamppb.Timestamp                `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp                `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Specs       *BackgroundPersistenceDeploymentSpecs `protobuf:"bytes,6,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *BackgroundPersistence) Reset() {
	*x = BackgroundPersistence{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundPersistence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundPersistence) ProtoMessage() {}

func (x *BackgroundPersistence) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundPersistence.ProtoReflect.Descriptor instead.
func (*BackgroundPersistence) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{24}
}

func (x *BackgroundPersistence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BackgroundPersistence) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *BackgroundPersistence) GetSpecsString() string {
	if x != nil {
		return x.SpecsString
	}
	return ""
}

func (x *BackgroundPersistence) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BackgroundPersistence) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *BackgroundPersistence) GetSpecs() *BackgroundPersistenceDeploymentSpecs {
	if x != nil {
		return x.Specs
	}
	return nil
}

type GetClusterBackgroundPersistenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (x *GetClusterBackgroundPersistenceRequest) Reset() {
	*x = GetClusterBackgroundPersistenceRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterBackgroundPersistenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterBackgroundPersistenceRequest) ProtoMessage() {}

func (x *GetClusterBackgroundPersistenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterBackgroundPersistenceRequest.ProtoReflect.Descriptor instead.
func (*GetClusterBackgroundPersistenceRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{25}
}

func (x *GetClusterBackgroundPersistenceRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

type GetClusterBackgroundPersistenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundPersistence *BackgroundPersistence `protobuf:"bytes,1,opt,name=background_persistence,json=backgroundPersistence,proto3" json:"background_persistence,omitempty"`
}

func (x *GetClusterBackgroundPersistenceResponse) Reset() {
	*x = GetClusterBackgroundPersistenceResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterBackgroundPersistenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterBackgroundPersistenceResponse) ProtoMessage() {}

func (x *GetClusterBackgroundPersistenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterBackgroundPersistenceResponse.ProtoReflect.Descriptor instead.
func (*GetClusterBackgroundPersistenceResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{26}
}

func (x *GetClusterBackgroundPersistenceResponse) GetBackgroundPersistence() *BackgroundPersistence {
	if x != nil {
		return x.BackgroundPersistence
	}
	return nil
}

type CreateClusterTimescaleDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	EnvironmentId  []string `protobuf:"bytes,1,rep,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"` // spelling
	EnvironmentIds []string `protobuf:"bytes,3,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	SpecsString string                 `protobuf:"bytes,2,opt,name=specs_string,json=specsString,proto3" json:"specs_string,omitempty"`
	Specs       *ClusterTimescaleSpecs `protobuf:"bytes,4,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *CreateClusterTimescaleDBRequest) Reset() {
	*x = CreateClusterTimescaleDBRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterTimescaleDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterTimescaleDBRequest) ProtoMessage() {}

func (x *CreateClusterTimescaleDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterTimescaleDBRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterTimescaleDBRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{27}
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *CreateClusterTimescaleDBRequest) GetEnvironmentId() []string {
	if x != nil {
		return x.EnvironmentId
	}
	return nil
}

func (x *CreateClusterTimescaleDBRequest) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *CreateClusterTimescaleDBRequest) GetSpecsString() string {
	if x != nil {
		return x.SpecsString
	}
	return ""
}

func (x *CreateClusterTimescaleDBRequest) GetSpecs() *ClusterTimescaleSpecs {
	if x != nil {
		return x.Specs
	}
	return nil
}

type KubeResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu              string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	EphemeralStorage string `protobuf:"bytes,3,opt,name=ephemeral_storage,json=ephemeralStorage,proto3" json:"ephemeral_storage,omitempty"`
	Storage          string `protobuf:"bytes,4,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *KubeResourceConfig) Reset() {
	*x = KubeResourceConfig{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubeResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeResourceConfig) ProtoMessage() {}

func (x *KubeResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeResourceConfig.ProtoReflect.Descriptor instead.
func (*KubeResourceConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{28}
}

func (x *KubeResourceConfig) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *KubeResourceConfig) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *KubeResourceConfig) GetEphemeralStorage() string {
	if x != nil {
		return x.EphemeralStorage
	}
	return ""
}

func (x *KubeResourceConfig) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

type ClusterTimescaleSpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimescaleImage               string              `protobuf:"bytes,1,opt,name=timescale_image,json=timescaleImage,proto3" json:"timescale_image,omitempty"`
	DatabaseName                 string              `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseReplicas             int32               `protobuf:"varint,3,opt,name=database_replicas,json=databaseReplicas,proto3" json:"database_replicas,omitempty"`
	Storage                      string              `protobuf:"bytes,4,opt,name=storage,proto3" json:"storage,omitempty"`
	StorageClass                 *string             `protobuf:"bytes,5,opt,name=storage_class,json=storageClass,proto3,oneof" json:"storage_class,omitempty"`
	Namespace                    string              `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Request                      *KubeResourceConfig `protobuf:"bytes,7,opt,name=request,proto3,oneof" json:"request,omitempty"`
	Limit                        *KubeResourceConfig `protobuf:"bytes,8,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	ConnectionPoolReplicas       int32               `protobuf:"varint,9,opt,name=connection_pool_replicas,json=connectionPoolReplicas,proto3" json:"connection_pool_replicas,omitempty"`
	ConnectionPoolMaxConnections string              `protobuf:"bytes,10,opt,name=connection_pool_max_connections,json=connectionPoolMaxConnections,proto3" json:"connection_pool_max_connections,omitempty"`
	ConnectionPoolSize           string              `protobuf:"bytes,11,opt,name=connection_pool_size,json=connectionPoolSize,proto3" json:"connection_pool_size,omitempty"`
	ConnectionPoolMode           string              `protobuf:"bytes,12,opt,name=connection_pool_mode,json=connectionPoolMode,proto3" json:"connection_pool_mode,omitempty"`
	BackupBucket                 string              `protobuf:"bytes,13,opt,name=backup_bucket,json=backupBucket,proto3" json:"backup_bucket,omitempty"`
	BackupIamRoleArn             string              `protobuf:"bytes,14,opt,name=backup_iam_role_arn,json=backupIamRoleArn,proto3" json:"backup_iam_role_arn,omitempty"`
	SecretName                   string              `protobuf:"bytes,15,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	Internal                     *bool               `protobuf:"varint,16,opt,name=internal,proto3,oneof" json:"internal,omitempty"`
	ServiceType                  *string             `protobuf:"bytes,17,opt,name=service_type,json=serviceType,proto3,oneof" json:"service_type,omitempty"`
	PostgresParameters           map[string]string   `protobuf:"bytes,18,rep,name=postgres_parameters,json=postgresParameters,proto3" json:"postgres_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IncludeChalkNodeSelector     bool                `protobuf:"varint,19,opt,name=include_chalk_node_selector,json=includeChalkNodeSelector,proto3" json:"include_chalk_node_selector,omitempty"`
	BackupGcpServiceAccount      string              `protobuf:"bytes,20,opt,name=backup_gcp_service_account,json=backupGcpServiceAccount,proto3" json:"backup_gcp_service_account,omitempty"`
	InstanceType                 string              `protobuf:"bytes,21,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
}

func (x *ClusterTimescaleSpecs) Reset() {
	*x = ClusterTimescaleSpecs{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterTimescaleSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterTimescaleSpecs) ProtoMessage() {}

func (x *ClusterTimescaleSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterTimescaleSpecs.ProtoReflect.Descriptor instead.
func (*ClusterTimescaleSpecs) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{29}
}

func (x *ClusterTimescaleSpecs) GetTimescaleImage() string {
	if x != nil {
		return x.TimescaleImage
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetDatabaseReplicas() int32 {
	if x != nil {
		return x.DatabaseReplicas
	}
	return 0
}

func (x *ClusterTimescaleSpecs) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetStorageClass() string {
	if x != nil && x.StorageClass != nil {
		return *x.StorageClass
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetRequest() *KubeResourceConfig {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ClusterTimescaleSpecs) GetLimit() *KubeResourceConfig {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ClusterTimescaleSpecs) GetConnectionPoolReplicas() int32 {
	if x != nil {
		return x.ConnectionPoolReplicas
	}
	return 0
}

func (x *ClusterTimescaleSpecs) GetConnectionPoolMaxConnections() string {
	if x != nil {
		return x.ConnectionPoolMaxConnections
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetConnectionPoolSize() string {
	if x != nil {
		return x.ConnectionPoolSize
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetConnectionPoolMode() string {
	if x != nil {
		return x.ConnectionPoolMode
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetBackupBucket() string {
	if x != nil {
		return x.BackupBucket
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetBackupIamRoleArn() string {
	if x != nil {
		return x.BackupIamRoleArn
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetInternal() bool {
	if x != nil && x.Internal != nil {
		return *x.Internal
	}
	return false
}

func (x *ClusterTimescaleSpecs) GetServiceType() string {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetPostgresParameters() map[string]string {
	if x != nil {
		return x.PostgresParameters
	}
	return nil
}

func (x *ClusterTimescaleSpecs) GetIncludeChalkNodeSelector() bool {
	if x != nil {
		return x.IncludeChalkNodeSelector
	}
	return false
}

func (x *ClusterTimescaleSpecs) GetBackupGcpServiceAccount() string {
	if x != nil {
		return x.BackupGcpServiceAccount
	}
	return ""
}

func (x *ClusterTimescaleSpecs) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

type CreateClusterTimescaleDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateClusterTimescaleDBResponse) Reset() {
	*x = CreateClusterTimescaleDBResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterTimescaleDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterTimescaleDBResponse) ProtoMessage() {}

func (x *CreateClusterTimescaleDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterTimescaleDBResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterTimescaleDBResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{30}
}

type MigrateClusterTimescaleDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterTimescaleId string   `protobuf:"bytes,1,opt,name=cluster_timescale_id,json=clusterTimescaleId,proto3" json:"cluster_timescale_id,omitempty"`
	MigrationImage     *string  `protobuf:"bytes,2,opt,name=migration_image,json=migrationImage,proto3,oneof" json:"migration_image,omitempty"`
	EnvironmentIds     []string `protobuf:"bytes,3,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
}

func (x *MigrateClusterTimescaleDBRequest) Reset() {
	*x = MigrateClusterTimescaleDBRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateClusterTimescaleDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateClusterTimescaleDBRequest) ProtoMessage() {}

func (x *MigrateClusterTimescaleDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateClusterTimescaleDBRequest.ProtoReflect.Descriptor instead.
func (*MigrateClusterTimescaleDBRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{31}
}

func (x *MigrateClusterTimescaleDBRequest) GetClusterTimescaleId() string {
	if x != nil {
		return x.ClusterTimescaleId
	}
	return ""
}

func (x *MigrateClusterTimescaleDBRequest) GetMigrationImage() string {
	if x != nil && x.MigrationImage != nil {
		return *x.MigrationImage
	}
	return ""
}

func (x *MigrateClusterTimescaleDBRequest) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

type MigrateClusterTimescaleDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MigrateClusterTimescaleDBResponse) Reset() {
	*x = MigrateClusterTimescaleDBResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateClusterTimescaleDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateClusterTimescaleDBResponse) ProtoMessage() {}

func (x *MigrateClusterTimescaleDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateClusterTimescaleDBResponse.ProtoReflect.Descriptor instead.
func (*MigrateClusterTimescaleDBResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{32}
}

type CreateClusterGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	EnvironmentId  []string `protobuf:"bytes,1,rep,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"` // spelling
	EnvironmentIds []string `protobuf:"bytes,3,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	SpecsString string             `protobuf:"bytes,2,opt,name=specs_string,json=specsString,proto3" json:"specs_string,omitempty"` // use specs instead
	Specs       *EnvoyGatewaySpecs `protobuf:"bytes,4,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *CreateClusterGatewayRequest) Reset() {
	*x = CreateClusterGatewayRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterGatewayRequest) ProtoMessage() {}

func (x *CreateClusterGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterGatewayRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterGatewayRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{33}
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *CreateClusterGatewayRequest) GetEnvironmentId() []string {
	if x != nil {
		return x.EnvironmentId
	}
	return nil
}

func (x *CreateClusterGatewayRequest) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *CreateClusterGatewayRequest) GetSpecsString() string {
	if x != nil {
		return x.SpecsString
	}
	return ""
}

func (x *CreateClusterGatewayRequest) GetSpecs() *EnvoyGatewaySpecs {
	if x != nil {
		return x.Specs
	}
	return nil
}

// name not necessarily reflective of the actual gateway being used
type EnvoyGatewaySpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace                string                  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	GatewayName              string                  `protobuf:"bytes,2,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`
	GatewayClassName         string                  `protobuf:"bytes,3,opt,name=gateway_class_name,json=gatewayClassName,proto3" json:"gateway_class_name,omitempty"`
	Listeners                []*EnvoyGatewayListener `protobuf:"bytes,4,rep,name=listeners,proto3" json:"listeners,omitempty"`
	Config                   *GatewayProviderConfig  `protobuf:"bytes,5,opt,name=config,proto3,oneof" json:"config,omitempty"`
	IncludeChalkNodeSelector bool                    `protobuf:"varint,6,opt,name=include_chalk_node_selector,json=includeChalkNodeSelector,proto3" json:"include_chalk_node_selector,omitempty"`
	// Optional IP allowlist for restricting access to the gateway
	IpAllowlist []string `protobuf:"bytes,7,rep,name=ip_allowlist,json=ipAllowlist,proto3" json:"ip_allowlist,omitempty"`
	// Optional TLS certificate configuration
	TlsCertificate     *TLSCertificateConfig `protobuf:"bytes,8,opt,name=tls_certificate,json=tlsCertificate,proto3,oneof" json:"tls_certificate,omitempty"`
	ServiceAnnotations map[string]string     `protobuf:"bytes,9,rep,name=service_annotations,json=serviceAnnotations,proto3" json:"service_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LoadBalancerClass  *string               `protobuf:"bytes,10,opt,name=load_balancer_class,json=loadBalancerClass,proto3,oneof" json:"load_balancer_class,omitempty"`
}

func (x *EnvoyGatewaySpecs) Reset() {
	*x = EnvoyGatewaySpecs{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvoyGatewaySpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyGatewaySpecs) ProtoMessage() {}

func (x *EnvoyGatewaySpecs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyGatewaySpecs.ProtoReflect.Descriptor instead.
func (*EnvoyGatewaySpecs) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{34}
}

func (x *EnvoyGatewaySpecs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EnvoyGatewaySpecs) GetGatewayName() string {
	if x != nil {
		return x.GatewayName
	}
	return ""
}

func (x *EnvoyGatewaySpecs) GetGatewayClassName() string {
	if x != nil {
		return x.GatewayClassName
	}
	return ""
}

func (x *EnvoyGatewaySpecs) GetListeners() []*EnvoyGatewayListener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *EnvoyGatewaySpecs) GetConfig() *GatewayProviderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EnvoyGatewaySpecs) GetIncludeChalkNodeSelector() bool {
	if x != nil {
		return x.IncludeChalkNodeSelector
	}
	return false
}

func (x *EnvoyGatewaySpecs) GetIpAllowlist() []string {
	if x != nil {
		return x.IpAllowlist
	}
	return nil
}

func (x *EnvoyGatewaySpecs) GetTlsCertificate() *TLSCertificateConfig {
	if x != nil {
		return x.TlsCertificate
	}
	return nil
}

func (x *EnvoyGatewaySpecs) GetServiceAnnotations() map[string]string {
	if x != nil {
		return x.ServiceAnnotations
	}
	return nil
}

func (x *EnvoyGatewaySpecs) GetLoadBalancerClass() string {
	if x != nil && x.LoadBalancerClass != nil {
		return *x.LoadBalancerClass
	}
	return ""
}

type EnvoyGatewayListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          int32                      `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol      string                     `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Name          string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AllowedRoutes *EnvoyGatewayAllowedRoutes `protobuf:"bytes,4,opt,name=allowed_routes,json=allowedRoutes,proto3" json:"allowed_routes,omitempty"`
}

func (x *EnvoyGatewayListener) Reset() {
	*x = EnvoyGatewayListener{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvoyGatewayListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyGatewayListener) ProtoMessage() {}

func (x *EnvoyGatewayListener) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyGatewayListener.ProtoReflect.Descriptor instead.
func (*EnvoyGatewayListener) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{35}
}

func (x *EnvoyGatewayListener) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EnvoyGatewayListener) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *EnvoyGatewayListener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvoyGatewayListener) GetAllowedRoutes() *EnvoyGatewayAllowedRoutes {
	if x != nil {
		return x.AllowedRoutes
	}
	return nil
}

type EnvoyGatewayAllowedRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces *EnvoyGatewayAllowedNamespaces `protobuf:"bytes,1,opt,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (x *EnvoyGatewayAllowedRoutes) Reset() {
	*x = EnvoyGatewayAllowedRoutes{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvoyGatewayAllowedRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyGatewayAllowedRoutes) ProtoMessage() {}

func (x *EnvoyGatewayAllowedRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyGatewayAllowedRoutes.ProtoReflect.Descriptor instead.
func (*EnvoyGatewayAllowedRoutes) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{36}
}

func (x *EnvoyGatewayAllowedRoutes) GetNamespaces() *EnvoyGatewayAllowedNamespaces {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type EnvoyGatewayAllowedNamespaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *EnvoyGatewayAllowedNamespaces) Reset() {
	*x = EnvoyGatewayAllowedNamespaces{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvoyGatewayAllowedNamespaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyGatewayAllowedNamespaces) ProtoMessage() {}

func (x *EnvoyGatewayAllowedNamespaces) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyGatewayAllowedNamespaces.ProtoReflect.Descriptor instead.
func (*EnvoyGatewayAllowedNamespaces) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{37}
}

func (x *EnvoyGatewayAllowedNamespaces) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type GatewayProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*GatewayProviderConfig_Envoy
	//	*GatewayProviderConfig_Gcp
	Config isGatewayProviderConfig_Config `protobuf_oneof:"config"`
}

func (x *GatewayProviderConfig) Reset() {
	*x = GatewayProviderConfig{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayProviderConfig) ProtoMessage() {}

func (x *GatewayProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayProviderConfig.ProtoReflect.Descriptor instead.
func (*GatewayProviderConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{38}
}

func (m *GatewayProviderConfig) GetConfig() isGatewayProviderConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *GatewayProviderConfig) GetEnvoy() *EnvoyGatewayProviderConfig {
	if x, ok := x.GetConfig().(*GatewayProviderConfig_Envoy); ok {
		return x.Envoy
	}
	return nil
}

func (x *GatewayProviderConfig) GetGcp() *GCPGatewayProviderConfig {
	if x, ok := x.GetConfig().(*GatewayProviderConfig_Gcp); ok {
		return x.Gcp
	}
	return nil
}

type isGatewayProviderConfig_Config interface {
	isGatewayProviderConfig_Config()
}

type GatewayProviderConfig_Envoy struct {
	Envoy *EnvoyGatewayProviderConfig `protobuf:"bytes,1,opt,name=envoy,proto3,oneof"`
}

type GatewayProviderConfig_Gcp struct {
	Gcp *GCPGatewayProviderConfig `protobuf:"bytes,2,opt,name=gcp,proto3,oneof"`
}

func (*GatewayProviderConfig_Envoy) isGatewayProviderConfig_Config() {}

func (*GatewayProviderConfig_Gcp) isGatewayProviderConfig_Config() {}

type EnvoyGatewayProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutDuration *string `protobuf:"bytes,1,opt,name=timeout_duration,json=timeoutDuration,proto3,oneof" json:"timeout_duration,omitempty"`
	DnsHostname     *string `protobuf:"bytes,2,opt,name=dns_hostname,json=dnsHostname,proto3,oneof" json:"dns_hostname,omitempty"`
	Replicas        *int32  `protobuf:"varint,3,opt,name=replicas,proto3,oneof" json:"replicas,omitempty"`
	MinAvailable    *int32  `protobuf:"varint,4,opt,name=min_available,json=minAvailable,proto3,oneof" json:"min_available,omitempty"`
}

func (x *EnvoyGatewayProviderConfig) Reset() {
	*x = EnvoyGatewayProviderConfig{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvoyGatewayProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyGatewayProviderConfig) ProtoMessage() {}

func (x *EnvoyGatewayProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyGatewayProviderConfig.ProtoReflect.Descriptor instead.
func (*EnvoyGatewayProviderConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{39}
}

func (x *EnvoyGatewayProviderConfig) GetTimeoutDuration() string {
	if x != nil && x.TimeoutDuration != nil {
		return *x.TimeoutDuration
	}
	return ""
}

func (x *EnvoyGatewayProviderConfig) GetDnsHostname() string {
	if x != nil && x.DnsHostname != nil {
		return *x.DnsHostname
	}
	return ""
}

func (x *EnvoyGatewayProviderConfig) GetReplicas() int32 {
	if x != nil && x.Replicas != nil {
		return *x.Replicas
	}
	return 0
}

func (x *EnvoyGatewayProviderConfig) GetMinAvailable() int32 {
	if x != nil && x.MinAvailable != nil {
		return *x.MinAvailable
	}
	return 0
}

type GCPGatewayProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsHostname string `protobuf:"bytes,1,opt,name=dns_hostname,json=dnsHostname,proto3" json:"dns_hostname,omitempty"`
}

func (x *GCPGatewayProviderConfig) Reset() {
	*x = GCPGatewayProviderConfig{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCPGatewayProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPGatewayProviderConfig) ProtoMessage() {}

func (x *GCPGatewayProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPGatewayProviderConfig.ProtoReflect.Descriptor instead.
func (*GCPGatewayProviderConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{40}
}

func (x *GCPGatewayProviderConfig) GetDnsHostname() string {
	if x != nil {
		return x.DnsHostname
	}
	return ""
}

// TLS certificate configuration with extensible design
type TLSCertificateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CertificateSource:
	//
	//	*TLSCertificateConfig_ManualCertificate
	CertificateSource isTLSCertificateConfig_CertificateSource `protobuf_oneof:"certificate_source"`
}

func (x *TLSCertificateConfig) Reset() {
	*x = TLSCertificateConfig{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSCertificateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificateConfig) ProtoMessage() {}

func (x *TLSCertificateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificateConfig.ProtoReflect.Descriptor instead.
func (*TLSCertificateConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{41}
}

func (m *TLSCertificateConfig) GetCertificateSource() isTLSCertificateConfig_CertificateSource {
	if m != nil {
		return m.CertificateSource
	}
	return nil
}

func (x *TLSCertificateConfig) GetManualCertificate() *TLSManualCertificateRef {
	if x, ok := x.GetCertificateSource().(*TLSCertificateConfig_ManualCertificate); ok {
		return x.ManualCertificate
	}
	return nil
}

type isTLSCertificateConfig_CertificateSource interface {
	isTLSCertificateConfig_CertificateSource()
}

type TLSCertificateConfig_ManualCertificate struct {
	ManualCertificate *TLSManualCertificateRef `protobuf:"bytes,1,opt,name=manual_certificate,json=manualCertificate,proto3,oneof"` // Future: TLSLetsEncryptRef letsencrypt_certificate = 2;
}

func (*TLSCertificateConfig_ManualCertificate) isTLSCertificateConfig_CertificateSource() {}

// Manual certificate referencing a Kubernetes secret
type TLSManualCertificateRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretName      string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	SecretNamespace string `protobuf:"bytes,2,opt,name=secret_namespace,json=secretNamespace,proto3" json:"secret_namespace,omitempty"`
}

func (x *TLSManualCertificateRef) Reset() {
	*x = TLSManualCertificateRef{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSManualCertificateRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSManualCertificateRef) ProtoMessage() {}

func (x *TLSManualCertificateRef) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSManualCertificateRef.ProtoReflect.Descriptor instead.
func (*TLSManualCertificateRef) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{42}
}

func (x *TLSManualCertificateRef) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *TLSManualCertificateRef) GetSecretNamespace() string {
	if x != nil {
		return x.SecretNamespace
	}
	return ""
}

type CreateClusterGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateClusterGatewayResponse) Reset() {
	*x = CreateClusterGatewayResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterGatewayResponse) ProtoMessage() {}

func (x *CreateClusterGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterGatewayResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterGatewayResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{43}
}

type CreateClusterBackgroundPersistenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentIds []string `protobuf:"bytes,1,rep,name=environment_ids,json=environmentIds,proto3" json:"environment_ids,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	SpecsString string                                `protobuf:"bytes,2,opt,name=specs_string,json=specsString,proto3" json:"specs_string,omitempty"` // use specs instead
	Specs       *BackgroundPersistenceDeploymentSpecs `protobuf:"bytes,3,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *CreateClusterBackgroundPersistenceRequest) Reset() {
	*x = CreateClusterBackgroundPersistenceRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterBackgroundPersistenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterBackgroundPersistenceRequest) ProtoMessage() {}

func (x *CreateClusterBackgroundPersistenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterBackgroundPersistenceRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterBackgroundPersistenceRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{44}
}

func (x *CreateClusterBackgroundPersistenceRequest) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *CreateClusterBackgroundPersistenceRequest) GetSpecsString() string {
	if x != nil {
		return x.SpecsString
	}
	return ""
}

func (x *CreateClusterBackgroundPersistenceRequest) GetSpecs() *BackgroundPersistenceDeploymentSpecs {
	if x != nil {
		return x.Specs
	}
	return nil
}

type BackgroundPersistenceCommonSpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace                            string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	BusWriterImageGo                     string `protobuf:"bytes,2,opt,name=bus_writer_image_go,json=busWriterImageGo,proto3" json:"bus_writer_image_go,omitempty"`
	BusWriterImagePython                 string `protobuf:"bytes,3,opt,name=bus_writer_image_python,json=busWriterImagePython,proto3" json:"bus_writer_image_python,omitempty"`
	BusWriterImageBswl                   string `protobuf:"bytes,4,opt,name=bus_writer_image_bswl,json=busWriterImageBswl,proto3" json:"bus_writer_image_bswl,omitempty"`
	ServiceAccountName                   string `protobuf:"bytes,5,opt,name=service_account_name,json=serviceAccountName,proto3" json:"service_account_name,omitempty"`
	BusBackend                           string `protobuf:"bytes,6,opt,name=bus_backend,json=busBackend,proto3" json:"bus_backend,omitempty"`
	SecretClient                         string `protobuf:"bytes,7,opt,name=secret_client,json=secretClient,proto3" json:"secret_client,omitempty"`
	BigqueryParquetUploadSubscriptionId  string `protobuf:"bytes,8,opt,name=bigquery_parquet_upload_subscription_id,json=bigqueryParquetUploadSubscriptionId,proto3" json:"bigquery_parquet_upload_subscription_id,omitempty"`
	BigqueryStreamingWriteSubscriptionId string `protobuf:"bytes,9,opt,name=bigquery_streaming_write_subscription_id,json=bigqueryStreamingWriteSubscriptionId,proto3" json:"bigquery_streaming_write_subscription_id,omitempty"`
	BigqueryStreamingWriteTopic          string `protobuf:"bytes,10,opt,name=bigquery_streaming_write_topic,json=bigqueryStreamingWriteTopic,proto3" json:"bigquery_streaming_write_topic,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	BigqueryUploadBucket string `protobuf:"bytes,11,opt,name=bigquery_upload_bucket,json=bigqueryUploadBucket,proto3" json:"bigquery_upload_bucket,omitempty"` // spelling;
	// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
	BigqueryUploadTopic                 string `protobuf:"bytes,12,opt,name=bigquery_upload_topic,json=bigqueryUploadTopic,proto3" json:"bigquery_upload_topic,omitempty"` // spelling;
	GoogleCloudProject                  string `protobuf:"bytes,13,opt,name=google_cloud_project,json=googleCloudProject,proto3" json:"google_cloud_project,omitempty"`
	KafkaDlqTopic                       string `protobuf:"bytes,14,opt,name=kafka_dlq_topic,json=kafkaDlqTopic,proto3" json:"kafka_dlq_topic,omitempty"`
	MetricsBusSubscriptionId            string `protobuf:"bytes,15,opt,name=metrics_bus_subscription_id,json=metricsBusSubscriptionId,proto3" json:"metrics_bus_subscription_id,omitempty"`
	MetricsBusTopicId                   string `protobuf:"bytes,16,opt,name=metrics_bus_topic_id,json=metricsBusTopicId,proto3" json:"metrics_bus_topic_id,omitempty"`
	OperationSubscriptionId             string `protobuf:"bytes,17,opt,name=operation_subscription_id,json=operationSubscriptionId,proto3" json:"operation_subscription_id,omitempty"`
	QueryLogResultTopic                 string `protobuf:"bytes,18,opt,name=query_log_result_topic,json=queryLogResultTopic,proto3" json:"query_log_result_topic,omitempty"`
	QueryLogSubscriptionId              string `protobuf:"bytes,19,opt,name=query_log_subscription_id,json=queryLogSubscriptionId,proto3" json:"query_log_subscription_id,omitempty"`
	ResultBusMetricsSubscriptionId      string `protobuf:"bytes,20,opt,name=result_bus_metrics_subscription_id,json=resultBusMetricsSubscriptionId,proto3" json:"result_bus_metrics_subscription_id,omitempty"`
	ResultBusOfflineStoreSubscriptionId string `protobuf:"bytes,21,opt,name=result_bus_offline_store_subscription_id,json=resultBusOfflineStoreSubscriptionId,proto3" json:"result_bus_offline_store_subscription_id,omitempty"`
	ResultBusOnlineStoreSubscriptionId  string `protobuf:"bytes,22,opt,name=result_bus_online_store_subscription_id,json=resultBusOnlineStoreSubscriptionId,proto3" json:"result_bus_online_store_subscription_id,omitempty"`
	ResultBusTopicId                    string `protobuf:"bytes,23,opt,name=result_bus_topic_id,json=resultBusTopicId,proto3" json:"result_bus_topic_id,omitempty"`
	UsageBusTopicId                     string `protobuf:"bytes,24,opt,name=usage_bus_topic_id,json=usageBusTopicId,proto3" json:"usage_bus_topic_id,omitempty"`
	UsageEventsSubscriptionId           string `protobuf:"bytes,25,opt,name=usage_events_subscription_id,json=usageEventsSubscriptionId,proto3" json:"usage_events_subscription_id,omitempty"`
	BqUploadBucket                      string `protobuf:"bytes,26,opt,name=bq_upload_bucket,json=bqUploadBucket,proto3" json:"bq_upload_bucket,omitempty"`
	BqUploadTopic                       string `protobuf:"bytes,27,opt,name=bq_upload_topic,json=bqUploadTopic,proto3" json:"bq_upload_topic,omitempty"`
	IncludeChalkNodeSelector            bool   `protobuf:"varint,28,opt,name=include_chalk_node_selector,json=includeChalkNodeSelector,proto3" json:"include_chalk_node_selector,omitempty"`
	BusWriterImageRust                  string `protobuf:"bytes,29,opt,name=bus_writer_image_rust,json=busWriterImageRust,proto3" json:"bus_writer_image_rust,omitempty"`
}

func (x *BackgroundPersistenceCommonSpecs) Reset() {
	*x = BackgroundPersistenceCommonSpecs{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundPersistenceCommonSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundPersistenceCommonSpecs) ProtoMessage() {}

func (x *BackgroundPersistenceCommonSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundPersistenceCommonSpecs.ProtoReflect.Descriptor instead.
func (*BackgroundPersistenceCommonSpecs) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{45}
}

func (x *BackgroundPersistenceCommonSpecs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBusWriterImageGo() string {
	if x != nil {
		return x.BusWriterImageGo
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBusWriterImagePython() string {
	if x != nil {
		return x.BusWriterImagePython
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBusWriterImageBswl() string {
	if x != nil {
		return x.BusWriterImageBswl
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetServiceAccountName() string {
	if x != nil {
		return x.ServiceAccountName
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBusBackend() string {
	if x != nil {
		return x.BusBackend
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetSecretClient() string {
	if x != nil {
		return x.SecretClient
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBigqueryParquetUploadSubscriptionId() string {
	if x != nil {
		return x.BigqueryParquetUploadSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBigqueryStreamingWriteSubscriptionId() string {
	if x != nil {
		return x.BigqueryStreamingWriteSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBigqueryStreamingWriteTopic() string {
	if x != nil {
		return x.BigqueryStreamingWriteTopic
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *BackgroundPersistenceCommonSpecs) GetBigqueryUploadBucket() string {
	if x != nil {
		return x.BigqueryUploadBucket
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/server/v1/builder.proto.
func (x *BackgroundPersistenceCommonSpecs) GetBigqueryUploadTopic() string {
	if x != nil {
		return x.BigqueryUploadTopic
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetGoogleCloudProject() string {
	if x != nil {
		return x.GoogleCloudProject
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetKafkaDlqTopic() string {
	if x != nil {
		return x.KafkaDlqTopic
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetMetricsBusSubscriptionId() string {
	if x != nil {
		return x.MetricsBusSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetMetricsBusTopicId() string {
	if x != nil {
		return x.MetricsBusTopicId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetOperationSubscriptionId() string {
	if x != nil {
		return x.OperationSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetQueryLogResultTopic() string {
	if x != nil {
		return x.QueryLogResultTopic
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetQueryLogSubscriptionId() string {
	if x != nil {
		return x.QueryLogSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetResultBusMetricsSubscriptionId() string {
	if x != nil {
		return x.ResultBusMetricsSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetResultBusOfflineStoreSubscriptionId() string {
	if x != nil {
		return x.ResultBusOfflineStoreSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetResultBusOnlineStoreSubscriptionId() string {
	if x != nil {
		return x.ResultBusOnlineStoreSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetResultBusTopicId() string {
	if x != nil {
		return x.ResultBusTopicId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetUsageBusTopicId() string {
	if x != nil {
		return x.UsageBusTopicId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetUsageEventsSubscriptionId() string {
	if x != nil {
		return x.UsageEventsSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBqUploadBucket() string {
	if x != nil {
		return x.BqUploadBucket
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetBqUploadTopic() string {
	if x != nil {
		return x.BqUploadTopic
	}
	return ""
}

func (x *BackgroundPersistenceCommonSpecs) GetIncludeChalkNodeSelector() bool {
	if x != nil {
		return x.IncludeChalkNodeSelector
	}
	return false
}

func (x *BackgroundPersistenceCommonSpecs) GetBusWriterImageRust() string {
	if x != nil {
		return x.BusWriterImageRust
	}
	return ""
}

type BackgroundPersistenceWriterHpaSpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HpaPubsubSubscriptionId string `protobuf:"bytes,1,opt,name=hpa_pubsub_subscription_id,json=hpaPubsubSubscriptionId,proto3" json:"hpa_pubsub_subscription_id,omitempty"`
	HpaMinReplicas          *int32 `protobuf:"varint,2,opt,name=hpa_min_replicas,json=hpaMinReplicas,proto3,oneof" json:"hpa_min_replicas,omitempty"`
	HpaMaxReplicas          *int32 `protobuf:"varint,3,opt,name=hpa_max_replicas,json=hpaMaxReplicas,proto3,oneof" json:"hpa_max_replicas,omitempty"`
	HpaTargetAverageValue   *int32 `protobuf:"varint,4,opt,name=hpa_target_average_value,json=hpaTargetAverageValue,proto3,oneof" json:"hpa_target_average_value,omitempty"`
}

func (x *BackgroundPersistenceWriterHpaSpecs) Reset() {
	*x = BackgroundPersistenceWriterHpaSpecs{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundPersistenceWriterHpaSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundPersistenceWriterHpaSpecs) ProtoMessage() {}

func (x *BackgroundPersistenceWriterHpaSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundPersistenceWriterHpaSpecs.ProtoReflect.Descriptor instead.
func (*BackgroundPersistenceWriterHpaSpecs) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{46}
}

func (x *BackgroundPersistenceWriterHpaSpecs) GetHpaPubsubSubscriptionId() string {
	if x != nil {
		return x.HpaPubsubSubscriptionId
	}
	return ""
}

func (x *BackgroundPersistenceWriterHpaSpecs) GetHpaMinReplicas() int32 {
	if x != nil && x.HpaMinReplicas != nil {
		return *x.HpaMinReplicas
	}
	return 0
}

func (x *BackgroundPersistenceWriterHpaSpecs) GetHpaMaxReplicas() int32 {
	if x != nil && x.HpaMaxReplicas != nil {
		return *x.HpaMaxReplicas
	}
	return 0
}

func (x *BackgroundPersistenceWriterHpaSpecs) GetHpaTargetAverageValue() int32 {
	if x != nil && x.HpaTargetAverageValue != nil {
		return *x.HpaTargetAverageValue
	}
	return 0
}

type BackgroundPersistenceWriterSpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                     string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImageOverride                            string                               `protobuf:"bytes,2,opt,name=image_override,json=imageOverride,proto3" json:"image_override,omitempty"`
	HpaSpecs                                 *BackgroundPersistenceWriterHpaSpecs `protobuf:"bytes,3,opt,name=hpa_specs,json=hpaSpecs,proto3,oneof" json:"hpa_specs,omitempty"`
	GkeSpot                                  *bool                                `protobuf:"varint,4,opt,name=gke_spot,json=gkeSpot,proto3,oneof" json:"gke_spot,omitempty"`
	LoadWriterConfigmap                      *bool                                `protobuf:"varint,5,opt,name=load_writer_configmap,json=loadWriterConfigmap,proto3,oneof" json:"load_writer_configmap,omitempty"`
	Version                                  string                               `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Request                                  *KubeResourceConfig                  `protobuf:"bytes,7,opt,name=request,proto3,oneof" json:"request,omitempty"`
	Limit                                    *KubeResourceConfig                  `protobuf:"bytes,8,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	BusSubscriberType                        string                               `protobuf:"bytes,9,opt,name=bus_subscriber_type,json=busSubscriberType,proto3" json:"bus_subscriber_type,omitempty"`
	DefaultReplicaCount                      int32                                `protobuf:"varint,10,opt,name=default_replica_count,json=defaultReplicaCount,proto3" json:"default_replica_count,omitempty"`
	KafkaConsumerGroupOverride               string                               `protobuf:"bytes,11,opt,name=kafka_consumer_group_override,json=kafkaConsumerGroupOverride,proto3" json:"kafka_consumer_group_override,omitempty"`
	MaxBatchSize                             *int32                               `protobuf:"varint,12,opt,name=max_batch_size,json=maxBatchSize,proto3,oneof" json:"max_batch_size,omitempty"`
	MessageProcessingConcurrency             *int32                               `protobuf:"varint,13,opt,name=message_processing_concurrency,json=messageProcessingConcurrency,proto3,oneof" json:"message_processing_concurrency,omitempty"`
	MetadataSqlSslCaCertSecret               string                               `protobuf:"bytes,14,opt,name=metadata_sql_ssl_ca_cert_secret,json=metadataSqlSslCaCertSecret,proto3" json:"metadata_sql_ssl_ca_cert_secret,omitempty"`
	MetadataSqlSslClientCertSecret           string                               `protobuf:"bytes,15,opt,name=metadata_sql_ssl_client_cert_secret,json=metadataSqlSslClientCertSecret,proto3" json:"metadata_sql_ssl_client_cert_secret,omitempty"`
	MetadataSqlSslClientKeySecret            string                               `protobuf:"bytes,16,opt,name=metadata_sql_ssl_client_key_secret,json=metadataSqlSslClientKeySecret,proto3" json:"metadata_sql_ssl_client_key_secret,omitempty"`
	MetadataSqlUriSecret                     string                               `protobuf:"bytes,17,opt,name=metadata_sql_uri_secret,json=metadataSqlUriSecret,proto3" json:"metadata_sql_uri_secret,omitempty"`
	OfflineStoreInserterDbType               string                               `protobuf:"bytes,18,opt,name=offline_store_inserter_db_type,json=offlineStoreInserterDbType,proto3" json:"offline_store_inserter_db_type,omitempty"`
	StorageCachePrefix                       string                               `protobuf:"bytes,19,opt,name=storage_cache_prefix,json=storageCachePrefix,proto3" json:"storage_cache_prefix,omitempty"`
	UsageStoreUri                            string                               `protobuf:"bytes,20,opt,name=usage_store_uri,json=usageStoreUri,proto3" json:"usage_store_uri,omitempty"`
	ResultsWriterSkipProducingFeatureMetrics *bool                                `protobuf:"varint,21,opt,name=results_writer_skip_producing_feature_metrics,json=resultsWriterSkipProducingFeatureMetrics,proto3,oneof" json:"results_writer_skip_producing_feature_metrics,omitempty"`
	QueryTableWriteDropRatio                 string                               `protobuf:"bytes,22,opt,name=query_table_write_drop_ratio,json=queryTableWriteDropRatio,proto3" json:"query_table_write_drop_ratio,omitempty"`
}

func (x *BackgroundPersistenceWriterSpecs) Reset() {
	*x = BackgroundPersistenceWriterSpecs{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundPersistenceWriterSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundPersistenceWriterSpecs) ProtoMessage() {}

func (x *BackgroundPersistenceWriterSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundPersistenceWriterSpecs.ProtoReflect.Descriptor instead.
func (*BackgroundPersistenceWriterSpecs) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{47}
}

func (x *BackgroundPersistenceWriterSpecs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetImageOverride() string {
	if x != nil {
		return x.ImageOverride
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetHpaSpecs() *BackgroundPersistenceWriterHpaSpecs {
	if x != nil {
		return x.HpaSpecs
	}
	return nil
}

func (x *BackgroundPersistenceWriterSpecs) GetGkeSpot() bool {
	if x != nil && x.GkeSpot != nil {
		return *x.GkeSpot
	}
	return false
}

func (x *BackgroundPersistenceWriterSpecs) GetLoadWriterConfigmap() bool {
	if x != nil && x.LoadWriterConfigmap != nil {
		return *x.LoadWriterConfigmap
	}
	return false
}

func (x *BackgroundPersistenceWriterSpecs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetRequest() *KubeResourceConfig {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BackgroundPersistenceWriterSpecs) GetLimit() *KubeResourceConfig {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *BackgroundPersistenceWriterSpecs) GetBusSubscriberType() string {
	if x != nil {
		return x.BusSubscriberType
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetDefaultReplicaCount() int32 {
	if x != nil {
		return x.DefaultReplicaCount
	}
	return 0
}

func (x *BackgroundPersistenceWriterSpecs) GetKafkaConsumerGroupOverride() string {
	if x != nil {
		return x.KafkaConsumerGroupOverride
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetMaxBatchSize() int32 {
	if x != nil && x.MaxBatchSize != nil {
		return *x.MaxBatchSize
	}
	return 0
}

func (x *BackgroundPersistenceWriterSpecs) GetMessageProcessingConcurrency() int32 {
	if x != nil && x.MessageProcessingConcurrency != nil {
		return *x.MessageProcessingConcurrency
	}
	return 0
}

func (x *BackgroundPersistenceWriterSpecs) GetMetadataSqlSslCaCertSecret() string {
	if x != nil {
		return x.MetadataSqlSslCaCertSecret
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetMetadataSqlSslClientCertSecret() string {
	if x != nil {
		return x.MetadataSqlSslClientCertSecret
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetMetadataSqlSslClientKeySecret() string {
	if x != nil {
		return x.MetadataSqlSslClientKeySecret
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetMetadataSqlUriSecret() string {
	if x != nil {
		return x.MetadataSqlUriSecret
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetOfflineStoreInserterDbType() string {
	if x != nil {
		return x.OfflineStoreInserterDbType
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetStorageCachePrefix() string {
	if x != nil {
		return x.StorageCachePrefix
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetUsageStoreUri() string {
	if x != nil {
		return x.UsageStoreUri
	}
	return ""
}

func (x *BackgroundPersistenceWriterSpecs) GetResultsWriterSkipProducingFeatureMetrics() bool {
	if x != nil && x.ResultsWriterSkipProducingFeatureMetrics != nil {
		return *x.ResultsWriterSkipProducingFeatureMetrics
	}
	return false
}

func (x *BackgroundPersistenceWriterSpecs) GetQueryTableWriteDropRatio() string {
	if x != nil {
		return x.QueryTableWriteDropRatio
	}
	return ""
}

type BackgroundPersistenceDeploymentSpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonPersistenceSpecs          *BackgroundPersistenceCommonSpecs   `protobuf:"bytes,1,opt,name=common_persistence_specs,json=commonPersistenceSpecs,proto3" json:"common_persistence_specs,omitempty"`
	ApiServerHost                   string                              `protobuf:"bytes,2,opt,name=api_server_host,json=apiServerHost,proto3" json:"api_server_host,omitempty"`
	KafkaSaslSecret                 string                              `protobuf:"bytes,3,opt,name=kafka_sasl_secret,json=kafkaSaslSecret,proto3" json:"kafka_sasl_secret,omitempty"`
	MetadataProvider                string                              `protobuf:"bytes,4,opt,name=metadata_provider,json=metadataProvider,proto3" json:"metadata_provider,omitempty"`
	KafkaBootstrapServers           string                              `protobuf:"bytes,5,opt,name=kafka_bootstrap_servers,json=kafkaBootstrapServers,proto3" json:"kafka_bootstrap_servers,omitempty"`
	KafkaSecurityProtocol           string                              `protobuf:"bytes,6,opt,name=kafka_security_protocol,json=kafkaSecurityProtocol,proto3" json:"kafka_security_protocol,omitempty"`
	KafkaSaslMechanism              string                              `protobuf:"bytes,7,opt,name=kafka_sasl_mechanism,json=kafkaSaslMechanism,proto3" json:"kafka_sasl_mechanism,omitempty"`
	RedisIsClustered                string                              `protobuf:"bytes,8,opt,name=redis_is_clustered,json=redisIsClustered,proto3" json:"redis_is_clustered,omitempty"`
	SnowflakeStorageIntegrationName string                              `protobuf:"bytes,9,opt,name=snowflake_storage_integration_name,json=snowflakeStorageIntegrationName,proto3" json:"snowflake_storage_integration_name,omitempty"`
	RedisLightningSupportsHasMany   bool                                `protobuf:"varint,10,opt,name=redis_lightning_supports_has_many,json=redisLightningSupportsHasMany,proto3" json:"redis_lightning_supports_has_many,omitempty"`
	Insecure                        bool                                `protobuf:"varint,11,opt,name=insecure,proto3" json:"insecure,omitempty"`
	Writers                         []*BackgroundPersistenceWriterSpecs `protobuf:"bytes,12,rep,name=writers,proto3" json:"writers,omitempty"`
}

func (x *BackgroundPersistenceDeploymentSpecs) Reset() {
	*x = BackgroundPersistenceDeploymentSpecs{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundPersistenceDeploymentSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundPersistenceDeploymentSpecs) ProtoMessage() {}

func (x *BackgroundPersistenceDeploymentSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundPersistenceDeploymentSpecs.ProtoReflect.Descriptor instead.
func (*BackgroundPersistenceDeploymentSpecs) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{48}
}

func (x *BackgroundPersistenceDeploymentSpecs) GetCommonPersistenceSpecs() *BackgroundPersistenceCommonSpecs {
	if x != nil {
		return x.CommonPersistenceSpecs
	}
	return nil
}

func (x *BackgroundPersistenceDeploymentSpecs) GetApiServerHost() string {
	if x != nil {
		return x.ApiServerHost
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetKafkaSaslSecret() string {
	if x != nil {
		return x.KafkaSaslSecret
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetMetadataProvider() string {
	if x != nil {
		return x.MetadataProvider
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetKafkaBootstrapServers() string {
	if x != nil {
		return x.KafkaBootstrapServers
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetKafkaSecurityProtocol() string {
	if x != nil {
		return x.KafkaSecurityProtocol
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetKafkaSaslMechanism() string {
	if x != nil {
		return x.KafkaSaslMechanism
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetRedisIsClustered() string {
	if x != nil {
		return x.RedisIsClustered
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetSnowflakeStorageIntegrationName() string {
	if x != nil {
		return x.SnowflakeStorageIntegrationName
	}
	return ""
}

func (x *BackgroundPersistenceDeploymentSpecs) GetRedisLightningSupportsHasMany() bool {
	if x != nil {
		return x.RedisLightningSupportsHasMany
	}
	return false
}

func (x *BackgroundPersistenceDeploymentSpecs) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *BackgroundPersistenceDeploymentSpecs) GetWriters() []*BackgroundPersistenceWriterSpecs {
	if x != nil {
		return x.Writers
	}
	return nil
}

type CreateClusterBackgroundPersistenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateClusterBackgroundPersistenceResponse) Reset() {
	*x = CreateClusterBackgroundPersistenceResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterBackgroundPersistenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterBackgroundPersistenceResponse) ProtoMessage() {}

func (x *CreateClusterBackgroundPersistenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterBackgroundPersistenceResponse.ProtoReflect.Descriptor instead.
func (*CreateClusterBackgroundPersistenceResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{49}
}

type GetSearchConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSearchConfigRequest) Reset() {
	*x = GetSearchConfigRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSearchConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchConfigRequest) ProtoMessage() {}

func (x *GetSearchConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSearchConfigRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{50}
}

type GetSearchConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId     string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TeamApiKey string `protobuf:"bytes,2,opt,name=team_api_key,json=teamApiKey,proto3" json:"team_api_key,omitempty"`
}

func (x *GetSearchConfigResponse) Reset() {
	*x = GetSearchConfigResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSearchConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchConfigResponse) ProtoMessage() {}

func (x *GetSearchConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchConfigResponse.ProtoReflect.Descriptor instead.
func (*GetSearchConfigResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{51}
}

func (x *GetSearchConfigResponse) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *GetSearchConfigResponse) GetTeamApiKey() string {
	if x != nil {
		return x.TeamApiKey
	}
	return ""
}

type UpdateEnvironmentVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentVariables map[string]string `protobuf:"bytes,1,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateEnvironmentVariablesRequest) Reset() {
	*x = UpdateEnvironmentVariablesRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentVariablesRequest) ProtoMessage() {}

func (x *UpdateEnvironmentVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentVariablesRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentVariablesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateEnvironmentVariablesRequest) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

type UpdateEnvironmentVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEnvironmentVariablesResponse) Reset() {
	*x = UpdateEnvironmentVariablesResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEnvironmentVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentVariablesResponse) ProtoMessage() {}

func (x *UpdateEnvironmentVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentVariablesResponse.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentVariablesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{53}
}

type StartBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartBranchRequest) Reset() {
	*x = StartBranchRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBranchRequest) ProtoMessage() {}

func (x *StartBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBranchRequest.ProtoReflect.Descriptor instead.
func (*StartBranchRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{54}
}

type StartBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State BranchScalingState `protobuf:"varint,1,opt,name=state,proto3,enum=chalk.server.v1.BranchScalingState" json:"state,omitempty"`
}

func (x *StartBranchResponse) Reset() {
	*x = StartBranchResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBranchResponse) ProtoMessage() {}

func (x *StartBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBranchResponse.ProtoReflect.Descriptor instead.
func (*StartBranchResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{55}
}

func (x *StartBranchResponse) GetState() BranchScalingState {
	if x != nil {
		return x.State
	}
	return BranchScalingState_BRANCH_SCALING_STATE_UNSPECIFIED
}

type ScaleBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *ScaleBranchRequest) Reset() {
	*x = ScaleBranchRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaleBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleBranchRequest) ProtoMessage() {}

func (x *ScaleBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleBranchRequest.ProtoReflect.Descriptor instead.
func (*ScaleBranchRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{56}
}

func (x *ScaleBranchRequest) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type ScaleBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State BranchScalingState `protobuf:"varint,1,opt,name=state,proto3,enum=chalk.server.v1.BranchScalingState" json:"state,omitempty"`
}

func (x *ScaleBranchResponse) Reset() {
	*x = ScaleBranchResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaleBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleBranchResponse) ProtoMessage() {}

func (x *ScaleBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleBranchResponse.ProtoReflect.Descriptor instead.
func (*ScaleBranchResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{57}
}

func (x *ScaleBranchResponse) GetState() BranchScalingState {
	if x != nil {
		return x.State
	}
	return BranchScalingState_BRANCH_SCALING_STATE_UNSPECIFIED
}

type GetBranchProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBranchProfileRequest) Reset() {
	*x = GetBranchProfileRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBranchProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchProfileRequest) ProtoMessage() {}

func (x *GetBranchProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchProfileRequest.ProtoReflect.Descriptor instead.
func (*GetBranchProfileRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{58}
}

type GetBranchProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId                 *string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3,oneof" json:"environment_id,omitempty"`
	DeploymentId                  *string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	BaseImageSha                  *string `protobuf:"bytes,3,opt,name=base_image_sha,json=baseImageSha,proto3,oneof" json:"base_image_sha,omitempty"`
	SupportsRemoteGraphValidation bool    `protobuf:"varint,4,opt,name=supports_remote_graph_validation,json=supportsRemoteGraphValidation,proto3" json:"supports_remote_graph_validation,omitempty"`
}

func (x *GetBranchProfileResponse) Reset() {
	*x = GetBranchProfileResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBranchProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchProfileResponse) ProtoMessage() {}

func (x *GetBranchProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchProfileResponse.ProtoReflect.Descriptor instead.
func (*GetBranchProfileResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{59}
}

func (x *GetBranchProfileResponse) GetEnvironmentId() string {
	if x != nil && x.EnvironmentId != nil {
		return *x.EnvironmentId
	}
	return ""
}

func (x *GetBranchProfileResponse) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *GetBranchProfileResponse) GetBaseImageSha() string {
	if x != nil && x.BaseImageSha != nil {
		return *x.BaseImageSha
	}
	return ""
}

func (x *GetBranchProfileResponse) GetSupportsRemoteGraphValidation() bool {
	if x != nil {
		return x.SupportsRemoteGraphValidation
	}
	return false
}

type KafkaTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Partitions  int32  `protobuf:"varint,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	Replication *int32 `protobuf:"varint,3,opt,name=replication,proto3,oneof" json:"replication,omitempty"`
	RetentionMs int32  `protobuf:"varint,4,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
}

func (x *KafkaTopic) Reset() {
	*x = KafkaTopic{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTopic) ProtoMessage() {}

func (x *KafkaTopic) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTopic.ProtoReflect.Descriptor instead.
func (*KafkaTopic) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{60}
}

func (x *KafkaTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaTopic) GetPartitions() int32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *KafkaTopic) GetReplication() int32 {
	if x != nil && x.Replication != nil {
		return *x.Replication
	}
	return 0
}

func (x *KafkaTopic) GetRetentionMs() int32 {
	if x != nil {
		return x.RetentionMs
	}
	return 0
}

type CreateKafkaTopicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics []*KafkaTopic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *CreateKafkaTopicsRequest) Reset() {
	*x = CreateKafkaTopicsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKafkaTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKafkaTopicsRequest) ProtoMessage() {}

func (x *CreateKafkaTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKafkaTopicsRequest.ProtoReflect.Descriptor instead.
func (*CreateKafkaTopicsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{61}
}

func (x *CreateKafkaTopicsRequest) GetTopics() []*KafkaTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type CreateKafkaTopicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateKafkaTopicsResponse) Reset() {
	*x = CreateKafkaTopicsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKafkaTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKafkaTopicsResponse) ProtoMessage() {}

func (x *CreateKafkaTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKafkaTopicsResponse.ProtoReflect.Descriptor instead.
func (*CreateKafkaTopicsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{62}
}

type GetKafkaTopicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetKafkaTopicsRequest) Reset() {
	*x = GetKafkaTopicsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaTopicsRequest) ProtoMessage() {}

func (x *GetKafkaTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaTopicsRequest.ProtoReflect.Descriptor instead.
func (*GetKafkaTopicsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{63}
}

type GetKafkaTopicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics []*KafkaTopic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *GetKafkaTopicsResponse) Reset() {
	*x = GetKafkaTopicsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaTopicsResponse) ProtoMessage() {}

func (x *GetKafkaTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaTopicsResponse.ProtoReflect.Descriptor instead.
func (*GetKafkaTopicsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{64}
}

func (x *GetKafkaTopicsResponse) GetTopics() []*KafkaTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type GetNodepoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodepoolsRequest) Reset() {
	*x = GetNodepoolsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodepoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodepoolsRequest) ProtoMessage() {}

func (x *GetNodepoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodepoolsRequest.ProtoReflect.Descriptor instead.
func (*GetNodepoolsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{65}
}

type GetNodepoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KarpenterNodepools []*v12.KarpenterNodepool `protobuf:"bytes,1,rep,name=karpenter_nodepools,json=karpenterNodepools,proto3" json:"karpenter_nodepools,omitempty"`
	GkeNodepools       []*v12.GKENodePool       `protobuf:"bytes,2,rep,name=gke_nodepools,json=gkeNodepools,proto3" json:"gke_nodepools,omitempty"`
}

func (x *GetNodepoolsResponse) Reset() {
	*x = GetNodepoolsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodepoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodepoolsResponse) ProtoMessage() {}

func (x *GetNodepoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodepoolsResponse.ProtoReflect.Descriptor instead.
func (*GetNodepoolsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{66}
}

func (x *GetNodepoolsResponse) GetKarpenterNodepools() []*v12.KarpenterNodepool {
	if x != nil {
		return x.KarpenterNodepools
	}
	return nil
}

func (x *GetNodepoolsResponse) GetGkeNodepools() []*v12.GKENodePool {
	if x != nil {
		return x.GkeNodepools
	}
	return nil
}

type AddNodepoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Nodepool:
	//
	//	*AddNodepoolRequest_KarpenterNodepool
	//	*AddNodepoolRequest_GkeNodepool
	Nodepool isAddNodepoolRequest_Nodepool `protobuf_oneof:"nodepool"`
}

func (x *AddNodepoolRequest) Reset() {
	*x = AddNodepoolRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNodepoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodepoolRequest) ProtoMessage() {}

func (x *AddNodepoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodepoolRequest.ProtoReflect.Descriptor instead.
func (*AddNodepoolRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{67}
}

func (m *AddNodepoolRequest) GetNodepool() isAddNodepoolRequest_Nodepool {
	if m != nil {
		return m.Nodepool
	}
	return nil
}

func (x *AddNodepoolRequest) GetKarpenterNodepool() *v12.KarpenterNodepool {
	if x, ok := x.GetNodepool().(*AddNodepoolRequest_KarpenterNodepool); ok {
		return x.KarpenterNodepool
	}
	return nil
}

func (x *AddNodepoolRequest) GetGkeNodepool() *v12.GKENodePool {
	if x, ok := x.GetNodepool().(*AddNodepoolRequest_GkeNodepool); ok {
		return x.GkeNodepool
	}
	return nil
}

type isAddNodepoolRequest_Nodepool interface {
	isAddNodepoolRequest_Nodepool()
}

type AddNodepoolRequest_KarpenterNodepool struct {
	KarpenterNodepool *v12.KarpenterNodepool `protobuf:"bytes,1,opt,name=karpenter_nodepool,json=karpenterNodepool,proto3,oneof"`
}

type AddNodepoolRequest_GkeNodepool struct {
	GkeNodepool *v12.GKENodePool `protobuf:"bytes,2,opt,name=gke_nodepool,json=gkeNodepool,proto3,oneof"`
}

func (*AddNodepoolRequest_KarpenterNodepool) isAddNodepoolRequest_Nodepool() {}

func (*AddNodepoolRequest_GkeNodepool) isAddNodepoolRequest_Nodepool() {}

type AddNodepoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Nodepool:
	//
	//	*AddNodepoolResponse_KarpenterNodepool
	//	*AddNodepoolResponse_GkeNodepool
	Nodepool isAddNodepoolResponse_Nodepool `protobuf_oneof:"nodepool"`
}

func (x *AddNodepoolResponse) Reset() {
	*x = AddNodepoolResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNodepoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodepoolResponse) ProtoMessage() {}

func (x *AddNodepoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodepoolResponse.ProtoReflect.Descriptor instead.
func (*AddNodepoolResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{68}
}

func (m *AddNodepoolResponse) GetNodepool() isAddNodepoolResponse_Nodepool {
	if m != nil {
		return m.Nodepool
	}
	return nil
}

func (x *AddNodepoolResponse) GetKarpenterNodepool() *v12.KarpenterNodepool {
	if x, ok := x.GetNodepool().(*AddNodepoolResponse_KarpenterNodepool); ok {
		return x.KarpenterNodepool
	}
	return nil
}

func (x *AddNodepoolResponse) GetGkeNodepool() *v12.GKENodePool {
	if x, ok := x.GetNodepool().(*AddNodepoolResponse_GkeNodepool); ok {
		return x.GkeNodepool
	}
	return nil
}

type isAddNodepoolResponse_Nodepool interface {
	isAddNodepoolResponse_Nodepool()
}

type AddNodepoolResponse_KarpenterNodepool struct {
	KarpenterNodepool *v12.KarpenterNodepool `protobuf:"bytes,1,opt,name=karpenter_nodepool,json=karpenterNodepool,proto3,oneof"`
}

type AddNodepoolResponse_GkeNodepool struct {
	GkeNodepool *v12.GKENodePool `protobuf:"bytes,2,opt,name=gke_nodepool,json=gkeNodepool,proto3,oneof"`
}

func (*AddNodepoolResponse_KarpenterNodepool) isAddNodepoolResponse_Nodepool() {}

func (*AddNodepoolResponse_GkeNodepool) isAddNodepoolResponse_Nodepool() {}

type UpdateNodepoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Nodepool:
	//
	//	*UpdateNodepoolRequest_GkeNodepool
	//	*UpdateNodepoolRequest_KarpenterNodepool
	Nodepool isUpdateNodepoolRequest_Nodepool `protobuf_oneof:"nodepool"`
}

func (x *UpdateNodepoolRequest) Reset() {
	*x = UpdateNodepoolRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodepoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodepoolRequest) ProtoMessage() {}

func (x *UpdateNodepoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodepoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodepoolRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{69}
}

func (x *UpdateNodepoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *UpdateNodepoolRequest) GetNodepool() isUpdateNodepoolRequest_Nodepool {
	if m != nil {
		return m.Nodepool
	}
	return nil
}

func (x *UpdateNodepoolRequest) GetGkeNodepool() *v12.GKENodePool {
	if x, ok := x.GetNodepool().(*UpdateNodepoolRequest_GkeNodepool); ok {
		return x.GkeNodepool
	}
	return nil
}

func (x *UpdateNodepoolRequest) GetKarpenterNodepool() *v12.KarpenterNodepool {
	if x, ok := x.GetNodepool().(*UpdateNodepoolRequest_KarpenterNodepool); ok {
		return x.KarpenterNodepool
	}
	return nil
}

type isUpdateNodepoolRequest_Nodepool interface {
	isUpdateNodepoolRequest_Nodepool()
}

type UpdateNodepoolRequest_GkeNodepool struct {
	GkeNodepool *v12.GKENodePool `protobuf:"bytes,2,opt,name=gke_nodepool,json=gkeNodepool,proto3,oneof"`
}

type UpdateNodepoolRequest_KarpenterNodepool struct {
	KarpenterNodepool *v12.KarpenterNodepool `protobuf:"bytes,3,opt,name=karpenter_nodepool,json=karpenterNodepool,proto3,oneof"`
}

func (*UpdateNodepoolRequest_GkeNodepool) isUpdateNodepoolRequest_Nodepool() {}

func (*UpdateNodepoolRequest_KarpenterNodepool) isUpdateNodepoolRequest_Nodepool() {}

type UpdateNodepoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Nodepool:
	//
	//	*UpdateNodepoolResponse_KarpenterNodepool
	//	*UpdateNodepoolResponse_GkeNodepool
	Nodepool isUpdateNodepoolResponse_Nodepool `protobuf_oneof:"nodepool"`
}

func (x *UpdateNodepoolResponse) Reset() {
	*x = UpdateNodepoolResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodepoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodepoolResponse) ProtoMessage() {}

func (x *UpdateNodepoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodepoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodepoolResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{70}
}

func (m *UpdateNodepoolResponse) GetNodepool() isUpdateNodepoolResponse_Nodepool {
	if m != nil {
		return m.Nodepool
	}
	return nil
}

func (x *UpdateNodepoolResponse) GetKarpenterNodepool() *v12.KarpenterNodepool {
	if x, ok := x.GetNodepool().(*UpdateNodepoolResponse_KarpenterNodepool); ok {
		return x.KarpenterNodepool
	}
	return nil
}

func (x *UpdateNodepoolResponse) GetGkeNodepool() *v12.GKENodePool {
	if x, ok := x.GetNodepool().(*UpdateNodepoolResponse_GkeNodepool); ok {
		return x.GkeNodepool
	}
	return nil
}

type isUpdateNodepoolResponse_Nodepool interface {
	isUpdateNodepoolResponse_Nodepool()
}

type UpdateNodepoolResponse_KarpenterNodepool struct {
	KarpenterNodepool *v12.KarpenterNodepool `protobuf:"bytes,1,opt,name=karpenter_nodepool,json=karpenterNodepool,proto3,oneof"`
}

type UpdateNodepoolResponse_GkeNodepool struct {
	GkeNodepool *v12.GKENodePool `protobuf:"bytes,2,opt,name=gke_nodepool,json=gkeNodepool,proto3,oneof"`
}

func (*UpdateNodepoolResponse_KarpenterNodepool) isUpdateNodepoolResponse_Nodepool() {}

func (*UpdateNodepoolResponse_GkeNodepool) isUpdateNodepoolResponse_Nodepool() {}

type DeleteNodepoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteNodepoolRequest) Reset() {
	*x = DeleteNodepoolRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodepoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodepoolRequest) ProtoMessage() {}

func (x *DeleteNodepoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodepoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodepoolRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteNodepoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteNodepoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNodepoolResponse) Reset() {
	*x = DeleteNodepoolResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodepoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodepoolResponse) ProtoMessage() {}

func (x *DeleteNodepoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodepoolResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodepoolResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{72}
}

type GetKarpenterNodepoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetKarpenterNodepoolsRequest) Reset() {
	*x = GetKarpenterNodepoolsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKarpenterNodepoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKarpenterNodepoolsRequest) ProtoMessage() {}

func (x *GetKarpenterNodepoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKarpenterNodepoolsRequest.ProtoReflect.Descriptor instead.
func (*GetKarpenterNodepoolsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{73}
}

type GetKarpenterNodepoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodepools []*v12.KarpenterNodepool `protobuf:"bytes,1,rep,name=nodepools,proto3" json:"nodepools,omitempty"`
}

func (x *GetKarpenterNodepoolsResponse) Reset() {
	*x = GetKarpenterNodepoolsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKarpenterNodepoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKarpenterNodepoolsResponse) ProtoMessage() {}

func (x *GetKarpenterNodepoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKarpenterNodepoolsResponse.ProtoReflect.Descriptor instead.
func (*GetKarpenterNodepoolsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{74}
}

func (x *GetKarpenterNodepoolsResponse) GetNodepools() []*v12.KarpenterNodepool {
	if x != nil {
		return x.Nodepools
	}
	return nil
}

type AddKarpenterNodepoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodepool *v12.KarpenterNodepool `protobuf:"bytes,1,opt,name=nodepool,proto3" json:"nodepool,omitempty"`
}

func (x *AddKarpenterNodepoolRequest) Reset() {
	*x = AddKarpenterNodepoolRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKarpenterNodepoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKarpenterNodepoolRequest) ProtoMessage() {}

func (x *AddKarpenterNodepoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKarpenterNodepoolRequest.ProtoReflect.Descriptor instead.
func (*AddKarpenterNodepoolRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{75}
}

func (x *AddKarpenterNodepoolRequest) GetNodepool() *v12.KarpenterNodepool {
	if x != nil {
		return x.Nodepool
	}
	return nil
}

type AddKarpenterNodepoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodepool *v12.KarpenterNodepool `protobuf:"bytes,1,opt,name=nodepool,proto3" json:"nodepool,omitempty"`
}

func (x *AddKarpenterNodepoolResponse) Reset() {
	*x = AddKarpenterNodepoolResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddKarpenterNodepoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKarpenterNodepoolResponse) ProtoMessage() {}

func (x *AddKarpenterNodepoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKarpenterNodepoolResponse.ProtoReflect.Descriptor instead.
func (*AddKarpenterNodepoolResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{76}
}

func (x *AddKarpenterNodepoolResponse) GetNodepool() *v12.KarpenterNodepool {
	if x != nil {
		return x.Nodepool
	}
	return nil
}

type UpdateKarpenterNodepoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nodepool *v12.KarpenterNodepool `protobuf:"bytes,2,opt,name=nodepool,proto3" json:"nodepool,omitempty"`
}

func (x *UpdateKarpenterNodepoolRequest) Reset() {
	*x = UpdateKarpenterNodepoolRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKarpenterNodepoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKarpenterNodepoolRequest) ProtoMessage() {}

func (x *UpdateKarpenterNodepoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKarpenterNodepoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateKarpenterNodepoolRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateKarpenterNodepoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateKarpenterNodepoolRequest) GetNodepool() *v12.KarpenterNodepool {
	if x != nil {
		return x.Nodepool
	}
	return nil
}

type UpdateKarpenterNodepoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodepool *v12.KarpenterNodepool `protobuf:"bytes,1,opt,name=nodepool,proto3" json:"nodepool,omitempty"`
}

func (x *UpdateKarpenterNodepoolResponse) Reset() {
	*x = UpdateKarpenterNodepoolResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKarpenterNodepoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKarpenterNodepoolResponse) ProtoMessage() {}

func (x *UpdateKarpenterNodepoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKarpenterNodepoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateKarpenterNodepoolResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateKarpenterNodepoolResponse) GetNodepool() *v12.KarpenterNodepool {
	if x != nil {
		return x.Nodepool
	}
	return nil
}

type DeleteKarpenterNodepoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteKarpenterNodepoolRequest) Reset() {
	*x = DeleteKarpenterNodepoolRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKarpenterNodepoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKarpenterNodepoolRequest) ProtoMessage() {}

func (x *DeleteKarpenterNodepoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKarpenterNodepoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteKarpenterNodepoolRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{79}
}

func (x *DeleteKarpenterNodepoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteKarpenterNodepoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteKarpenterNodepoolResponse) Reset() {
	*x = DeleteKarpenterNodepoolResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKarpenterNodepoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKarpenterNodepoolResponse) ProtoMessage() {}

func (x *DeleteKarpenterNodepoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKarpenterNodepoolResponse.ProtoReflect.Descriptor instead.
func (*DeleteKarpenterNodepoolResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{80}
}

type GetKarpenterInstallationMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetKarpenterInstallationMetadataRequest) Reset() {
	*x = GetKarpenterInstallationMetadataRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKarpenterInstallationMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKarpenterInstallationMetadataRequest) ProtoMessage() {}

func (x *GetKarpenterInstallationMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKarpenterInstallationMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetKarpenterInstallationMetadataRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{81}
}

type GetKarpenterInstallationMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentLabels map[string]string `protobuf:"bytes,1,rep,name=deployment_labels,json=deploymentLabels,proto3" json:"deployment_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetKarpenterInstallationMetadataResponse) Reset() {
	*x = GetKarpenterInstallationMetadataResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKarpenterInstallationMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKarpenterInstallationMetadataResponse) ProtoMessage() {}

func (x *GetKarpenterInstallationMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKarpenterInstallationMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetKarpenterInstallationMetadataResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{82}
}

func (x *GetKarpenterInstallationMetadataResponse) GetDeploymentLabels() map[string]string {
	if x != nil {
		return x.DeploymentLabels
	}
	return nil
}

type DeploymentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag          string  `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Weight       *int32  `protobuf:"varint,2,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	DeploymentId *string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	MirrorWeight *int32  `protobuf:"varint,4,opt,name=mirror_weight,json=mirrorWeight,proto3,oneof" json:"mirror_weight,omitempty"`
}

func (x *DeploymentTag) Reset() {
	*x = DeploymentTag{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTag) ProtoMessage() {}

func (x *DeploymentTag) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTag.ProtoReflect.Descriptor instead.
func (*DeploymentTag) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{83}
}

func (x *DeploymentTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DeploymentTag) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *DeploymentTag) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *DeploymentTag) GetMirrorWeight() int32 {
	if x != nil && x.MirrorWeight != nil {
		return *x.MirrorWeight
	}
	return 0
}

type GetTagWeightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTagWeightsRequest) Reset() {
	*x = GetTagWeightsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagWeightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagWeightsRequest) ProtoMessage() {}

func (x *GetTagWeightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagWeightsRequest.ProtoReflect.Descriptor instead.
func (*GetTagWeightsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{84}
}

type GetTagWeightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*DeploymentTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetTagWeightsResponse) Reset() {
	*x = GetTagWeightsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagWeightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagWeightsResponse) ProtoMessage() {}

func (x *GetTagWeightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagWeightsResponse.ProtoReflect.Descriptor instead.
func (*GetTagWeightsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{85}
}

func (x *GetTagWeightsResponse) GetTags() []*DeploymentTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SetTagWeightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*DeploymentTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *SetTagWeightsRequest) Reset() {
	*x = SetTagWeightsRequest{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagWeightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagWeightsRequest) ProtoMessage() {}

func (x *SetTagWeightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagWeightsRequest.ProtoReflect.Descriptor instead.
func (*SetTagWeightsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{86}
}

func (x *SetTagWeightsRequest) GetTags() []*DeploymentTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SetTagWeightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*DeploymentTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *SetTagWeightsResponse) Reset() {
	*x = SetTagWeightsResponse{}
	mi := &file_chalk_server_v1_builder_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagWeightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagWeightsResponse) ProtoMessage() {}

func (x *SetTagWeightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_builder_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagWeightsResponse.ProtoReflect.Descriptor instead.
func (*SetTagWeightsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_builder_proto_rawDescGZIP(), []int{87}
}

func (x *SetTagWeightsResponse) GetTags() []*DeploymentTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_chalk_server_v1_builder_proto protoreflect.FileDescriptor

var file_chalk_server_v1_builder_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x6c, 0x73, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6d, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x1e, 0x0a, 0x1c,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec, 0x01, 0x0a,
	0x18, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x19, 0x52,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x1a, 0x52, 0x65, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x13, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x47, 0x72, 0x70, 0x63, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x2d, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x23, 0x0a, 0x03, 0x6c, 0x73,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x6c, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x53, 0x50, 0x52, 0x03, 0x6c, 0x73, 0x70, 0x22,
	0x40, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x73, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0x41, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22,
	0xa5, 0x02, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0x4f, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x22, 0x85, 0x01, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xba, 0x09, 0x0a, 0x15, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x42, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x45, 0x0a,
	0x1f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x0a,
	0x13, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x67, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x47, 0x63, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x20, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd2, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76,
	0x6f, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0xe3, 0x05, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x6f, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x0e, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x6f, 0x79,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x45, 0x0a,
	0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x14,
	0x45, 0x6e, 0x76, 0x6f, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x19, 0x45,
	0x6e, 0x76, 0x6f, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x6f, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x1d, 0x45, 0x6e, 0x76, 0x6f,
	0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0xa5, 0x01,
	0x0a, 0x15, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x12, 0x3d, 0x0a, 0x03,
	0x67, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x43, 0x50, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x84, 0x02, 0x0a, 0x1a, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x6e,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x18,
	0x47, 0x43, 0x50, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x14,
	0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x17, 0x54, 0x4c, 0x53, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x0a,
	0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0x85, 0x0d, 0x0a, 0x20, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x75,
	0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x73,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x73, 0x77, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x75, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x73, 0x77, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x27, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x56, 0x0a, 0x28, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x24, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38,
	0x0a, 0x16, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x14, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x30, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x64, 0x6c, 0x71, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x44, 0x6c, 0x71, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x42, 0x75, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x19, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x62, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x55, 0x0a, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x73,
	0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x73, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x27, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x75, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x75, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x73, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x71, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x71, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x71, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x3d, 0x0a,
	0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x15,
	0x62, 0x75, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x75, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x73,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x75, 0x73, 0x74, 0x22,
	0xc5, 0x02, 0x0a, 0x23, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x48,
	0x70, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x70, 0x61, 0x5f, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x68, 0x70, 0x61,
	0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x68, 0x70, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0e, 0x68, 0x70, 0x61, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x68, 0x70, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0e, 0x68, 0x70, 0x61, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x68, 0x70, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x15, 0x68, 0x70, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x68, 0x70, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x68, 0x70, 0x61, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x68,
	0x70, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd4, 0x0b, 0x0a, 0x20, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x68, 0x70, 0x61, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x48, 0x70, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x68, 0x70, 0x61, 0x53, 0x70, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x67, 0x6b, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x07, 0x67, 0x6b, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x03, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x06, 0x52, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x71, 0x6c, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x71, 0x6c, 0x53, 0x73, 0x6c, 0x43, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x23, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x71, 0x6c, 0x53, 0x73, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x71, 0x6c, 0x53, 0x73,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x71, 0x6c,
	0x5f, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x71, 0x6c, 0x55, 0x72,
	0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x44, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x55, 0x72, 0x69, 0x12, 0x64, 0x0a, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x28,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x1c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x68, 0x70, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x6b,
	0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x30, 0x0a, 0x2e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xe4,
	0x05, 0x0a, 0x24, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x6b, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x61,
	0x73, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73,
	0x61, 0x73, 0x6c, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x61, 0x73, 0x6c, 0x4d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x69, 0x73, 0x49, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x07, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x22, 0xf0, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x47, 0x0a,
	0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x50, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4f, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x12, 0x6b, 0x61, 0x72, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a,
	0x0d, 0x67, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x4b, 0x45, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x67, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x6b, 0x61,
	0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52,
	0x11, 0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x4b,
	0x45, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6b, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x12,
	0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61,
	0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x48,
	0x00, 0x52, 0x11, 0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x4b, 0x45, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x4b, 0x45, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x56, 0x0a, 0x12, 0x6b, 0x61,
	0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52,
	0x11, 0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0xc2,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x6b, 0x61, 0x72,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x11,
	0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x4b, 0x45,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6b, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x22, 0x60, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f,
	0x6f, 0x6c, 0x22, 0x61, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x77, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x64,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x34, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61,
	0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a,
	0x27, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x16, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4b, 0x0a,
	0x15, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x2a, 0xe3, 0x03, 0x0a, 0x15, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x0b,
	0x2a, 0x82, 0x01, 0x0a, 0x12, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x32, 0x96, 0x1e, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0x80, 0x7d, 0x02, 0x90, 0x02, 0x01, 0x12, 0x78, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0x80, 0x7d, 0x0e, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02,
	0x12, 0x69, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0e, 0x12, 0x7e, 0x0a, 0x14, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x09, 0x80, 0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x12, 0x75, 0x0a, 0x11, 0x52,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0x80, 0x7d, 0x0e, 0x8a, 0xd3, 0x0e, 0x02,
	0x08, 0x02, 0x12, 0x78, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x09, 0x80, 0x7d, 0x0e, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x12, 0x60, 0x0a, 0x0c,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x5a,
	0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x72, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x6f,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12,
	0x7b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x6f, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x99, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x84, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0a,
	0x12, 0x87, 0x01, 0x0a, 0x19, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x12, 0x31,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x42, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0a, 0x12, 0x78, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x80, 0x7d, 0x0a, 0x12, 0xa2, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0a, 0x12, 0x8a, 0x01, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x80, 0x7d, 0x0c, 0x12, 0x5d, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x80, 0x7d, 0x02, 0x12, 0x5d, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x80, 0x7d, 0x0d, 0x12, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80,
	0x7d, 0x02, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x06, 0x80, 0x7d, 0x0b, 0x90, 0x02, 0x01, 0x12, 0x63, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x09, 0x80, 0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x12, 0x6c, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x26,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x09, 0x80, 0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x12, 0x6c, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0x80,
	0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x12, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x06, 0x80, 0x7d, 0x0b, 0x90, 0x02, 0x01, 0x12, 0x7e, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0x80,
	0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x12, 0x87, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x72,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x61,
	0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0x80, 0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02,
	0x08, 0x02, 0x12, 0x87, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61, 0x72,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x2f,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x09, 0x80, 0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x12, 0x9f, 0x01, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x0b, 0x90, 0x02, 0x01, 0x12, 0x63,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x80, 0x7d, 0x0b, 0x12, 0x69, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x09, 0x80, 0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08, 0x02, 0x32, 0xf0,
	0x01, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x29, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0a, 0x12, 0x66, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d,
	0x0a, 0x42, 0xbc, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_builder_proto_rawDescOnce sync.Once
	file_chalk_server_v1_builder_proto_rawDescData = file_chalk_server_v1_builder_proto_rawDesc
)

func file_chalk_server_v1_builder_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_builder_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_builder_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_builder_proto_rawDescData)
	})
	return file_chalk_server_v1_builder_proto_rawDescData
}

var file_chalk_server_v1_builder_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_server_v1_builder_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_chalk_server_v1_builder_proto_goTypes = []any{
	(DeploymentBuildStatus)(0),                         // 0: chalk.server.v1.DeploymentBuildStatus
	(BranchScalingState)(0),                            // 1: chalk.server.v1.BranchScalingState
	(*ActivateDeploymentTarget)(nil),                   // 2: chalk.server.v1.ActivateDeploymentTarget
	(*ActivateDeploymentRequest)(nil),                  // 3: chalk.server.v1.ActivateDeploymentRequest
	(*ActivateDeploymentResponse)(nil),                 // 4: chalk.server.v1.ActivateDeploymentResponse
	(*IndexDeploymentRequest)(nil),                     // 5: chalk.server.v1.IndexDeploymentRequest
	(*IndexDeploymentResponse)(nil),                    // 6: chalk.server.v1.IndexDeploymentResponse
	(*DeployKubeComponentsRequest)(nil),                // 7: chalk.server.v1.DeployKubeComponentsRequest
	(*DeployKubeComponentsResponse)(nil),               // 8: chalk.server.v1.DeployKubeComponentsResponse
	(*RebuildDeploymentRequest)(nil),                   // 9: chalk.server.v1.RebuildDeploymentRequest
	(*RebuildDeploymentResponse)(nil),                  // 10: chalk.server.v1.RebuildDeploymentResponse
	(*RedeployDeploymentRequest)(nil),                  // 11: chalk.server.v1.RedeployDeploymentRequest
	(*RedeployDeploymentResponse)(nil),                 // 12: chalk.server.v1.RedeployDeploymentResponse
	(*UploadSourceRequest)(nil),                        // 13: chalk.server.v1.UploadSourceRequest
	(*UploadSourceResponse)(nil),                       // 14: chalk.server.v1.UploadSourceResponse
	(*LintSourceRequest)(nil),                          // 15: chalk.server.v1.LintSourceRequest
	(*LintSourceResponse)(nil),                         // 16: chalk.server.v1.LintSourceResponse
	(*GetDeploymentStepsRequest)(nil),                  // 17: chalk.server.v1.GetDeploymentStepsRequest
	(*DeploymentBuildStep)(nil),                        // 18: chalk.server.v1.DeploymentBuildStep
	(*GetDeploymentStepsResponse)(nil),                 // 19: chalk.server.v1.GetDeploymentStepsResponse
	(*GetDeploymentLogsRequest)(nil),                   // 20: chalk.server.v1.GetDeploymentLogsRequest
	(*GetDeploymentLogsResponse)(nil),                  // 21: chalk.server.v1.GetDeploymentLogsResponse
	(*GetClusterTimescaleDBRequest)(nil),               // 22: chalk.server.v1.GetClusterTimescaleDBRequest
	(*GetClusterTimescaleDBResponse)(nil),              // 23: chalk.server.v1.GetClusterTimescaleDBResponse
	(*GetClusterGatewayRequest)(nil),                   // 24: chalk.server.v1.GetClusterGatewayRequest
	(*GetClusterGatewayResponse)(nil),                  // 25: chalk.server.v1.GetClusterGatewayResponse
	(*BackgroundPersistence)(nil),                      // 26: chalk.server.v1.BackgroundPersistence
	(*GetClusterBackgroundPersistenceRequest)(nil),     // 27: chalk.server.v1.GetClusterBackgroundPersistenceRequest
	(*GetClusterBackgroundPersistenceResponse)(nil),    // 28: chalk.server.v1.GetClusterBackgroundPersistenceResponse
	(*CreateClusterTimescaleDBRequest)(nil),            // 29: chalk.server.v1.CreateClusterTimescaleDBRequest
	(*KubeResourceConfig)(nil),                         // 30: chalk.server.v1.KubeResourceConfig
	(*ClusterTimescaleSpecs)(nil),                      // 31: chalk.server.v1.ClusterTimescaleSpecs
	(*CreateClusterTimescaleDBResponse)(nil),           // 32: chalk.server.v1.CreateClusterTimescaleDBResponse
	(*MigrateClusterTimescaleDBRequest)(nil),           // 33: chalk.server.v1.MigrateClusterTimescaleDBRequest
	(*MigrateClusterTimescaleDBResponse)(nil),          // 34: chalk.server.v1.MigrateClusterTimescaleDBResponse
	(*CreateClusterGatewayRequest)(nil),                // 35: chalk.server.v1.CreateClusterGatewayRequest
	(*EnvoyGatewaySpecs)(nil),                          // 36: chalk.server.v1.EnvoyGatewaySpecs
	(*EnvoyGatewayListener)(nil),                       // 37: chalk.server.v1.EnvoyGatewayListener
	(*EnvoyGatewayAllowedRoutes)(nil),                  // 38: chalk.server.v1.EnvoyGatewayAllowedRoutes
	(*EnvoyGatewayAllowedNamespaces)(nil),              // 39: chalk.server.v1.EnvoyGatewayAllowedNamespaces
	(*GatewayProviderConfig)(nil),                      // 40: chalk.server.v1.GatewayProviderConfig
	(*EnvoyGatewayProviderConfig)(nil),                 // 41: chalk.server.v1.EnvoyGatewayProviderConfig
	(*GCPGatewayProviderConfig)(nil),                   // 42: chalk.server.v1.GCPGatewayProviderConfig
	(*TLSCertificateConfig)(nil),                       // 43: chalk.server.v1.TLSCertificateConfig
	(*TLSManualCertificateRef)(nil),                    // 44: chalk.server.v1.TLSManualCertificateRef
	(*CreateClusterGatewayResponse)(nil),               // 45: chalk.server.v1.CreateClusterGatewayResponse
	(*CreateClusterBackgroundPersistenceRequest)(nil),  // 46: chalk.server.v1.CreateClusterBackgroundPersistenceRequest
	(*BackgroundPersistenceCommonSpecs)(nil),           // 47: chalk.server.v1.BackgroundPersistenceCommonSpecs
	(*BackgroundPersistenceWriterHpaSpecs)(nil),        // 48: chalk.server.v1.BackgroundPersistenceWriterHpaSpecs
	(*BackgroundPersistenceWriterSpecs)(nil),           // 49: chalk.server.v1.BackgroundPersistenceWriterSpecs
	(*BackgroundPersistenceDeploymentSpecs)(nil),       // 50: chalk.server.v1.BackgroundPersistenceDeploymentSpecs
	(*CreateClusterBackgroundPersistenceResponse)(nil), // 51: chalk.server.v1.CreateClusterBackgroundPersistenceResponse
	(*GetSearchConfigRequest)(nil),                     // 52: chalk.server.v1.GetSearchConfigRequest
	(*GetSearchConfigResponse)(nil),                    // 53: chalk.server.v1.GetSearchConfigResponse
	(*UpdateEnvironmentVariablesRequest)(nil),          // 54: chalk.server.v1.UpdateEnvironmentVariablesRequest
	(*UpdateEnvironmentVariablesResponse)(nil),         // 55: chalk.server.v1.UpdateEnvironmentVariablesResponse
	(*StartBranchRequest)(nil),                         // 56: chalk.server.v1.StartBranchRequest
	(*StartBranchResponse)(nil),                        // 57: chalk.server.v1.StartBranchResponse
	(*ScaleBranchRequest)(nil),                         // 58: chalk.server.v1.ScaleBranchRequest
	(*ScaleBranchResponse)(nil),                        // 59: chalk.server.v1.ScaleBranchResponse
	(*GetBranchProfileRequest)(nil),                    // 60: chalk.server.v1.GetBranchProfileRequest
	(*GetBranchProfileResponse)(nil),                   // 61: chalk.server.v1.GetBranchProfileResponse
	(*KafkaTopic)(nil),                                 // 62: chalk.server.v1.KafkaTopic
	(*CreateKafkaTopicsRequest)(nil),                   // 63: chalk.server.v1.CreateKafkaTopicsRequest
	(*CreateKafkaTopicsResponse)(nil),                  // 64: chalk.server.v1.CreateKafkaTopicsResponse
	(*GetKafkaTopicsRequest)(nil),                      // 65: chalk.server.v1.GetKafkaTopicsRequest
	(*GetKafkaTopicsResponse)(nil),                     // 66: chalk.server.v1.GetKafkaTopicsResponse
	(*GetNodepoolsRequest)(nil),                        // 67: chalk.server.v1.GetNodepoolsRequest
	(*GetNodepoolsResponse)(nil),                       // 68: chalk.server.v1.GetNodepoolsResponse
	(*AddNodepoolRequest)(nil),                         // 69: chalk.server.v1.AddNodepoolRequest
	(*AddNodepoolResponse)(nil),                        // 70: chalk.server.v1.AddNodepoolResponse
	(*UpdateNodepoolRequest)(nil),                      // 71: chalk.server.v1.UpdateNodepoolRequest
	(*UpdateNodepoolResponse)(nil),                     // 72: chalk.server.v1.UpdateNodepoolResponse
	(*DeleteNodepoolRequest)(nil),                      // 73: chalk.server.v1.DeleteNodepoolRequest
	(*DeleteNodepoolResponse)(nil),                     // 74: chalk.server.v1.DeleteNodepoolResponse
	(*GetKarpenterNodepoolsRequest)(nil),               // 75: chalk.server.v1.GetKarpenterNodepoolsRequest
	(*GetKarpenterNodepoolsResponse)(nil),              // 76: chalk.server.v1.GetKarpenterNodepoolsResponse
	(*AddKarpenterNodepoolRequest)(nil),                // 77: chalk.server.v1.AddKarpenterNodepoolRequest
	(*AddKarpenterNodepoolResponse)(nil),               // 78: chalk.server.v1.AddKarpenterNodepoolResponse
	(*UpdateKarpenterNodepoolRequest)(nil),             // 79: chalk.server.v1.UpdateKarpenterNodepoolRequest
	(*UpdateKarpenterNodepoolResponse)(nil),            // 80: chalk.server.v1.UpdateKarpenterNodepoolResponse
	(*DeleteKarpenterNodepoolRequest)(nil),             // 81: chalk.server.v1.DeleteKarpenterNodepoolRequest
	(*DeleteKarpenterNodepoolResponse)(nil),            // 82: chalk.server.v1.DeleteKarpenterNodepoolResponse
	(*GetKarpenterInstallationMetadataRequest)(nil),    // 83: chalk.server.v1.GetKarpenterInstallationMetadataRequest
	(*GetKarpenterInstallationMetadataResponse)(nil),   // 84: chalk.server.v1.GetKarpenterInstallationMetadataResponse
	(*DeploymentTag)(nil),                              // 85: chalk.server.v1.DeploymentTag
	(*GetTagWeightsRequest)(nil),                       // 86: chalk.server.v1.GetTagWeightsRequest
	(*GetTagWeightsResponse)(nil),                      // 87: chalk.server.v1.GetTagWeightsResponse
	(*SetTagWeightsRequest)(nil),                       // 88: chalk.server.v1.SetTagWeightsRequest
	(*SetTagWeightsResponse)(nil),                      // 89: chalk.server.v1.SetTagWeightsResponse
	nil,                                                // 90: chalk.server.v1.ClusterTimescaleSpecs.PostgresParametersEntry
	nil,                                                // 91: chalk.server.v1.EnvoyGatewaySpecs.ServiceAnnotationsEntry
	nil,                                                // 92: chalk.server.v1.UpdateEnvironmentVariablesRequest.EnvironmentVariablesEntry
	nil,                                                // 93: chalk.server.v1.GetKarpenterInstallationMetadataResponse.DeploymentLabelsEntry
	(*v1.Graph)(nil),                                   // 94: chalk.graph.v1.Graph
	(*v11.LSP)(nil),                                    // 95: chalk.lsp.v1.LSP
	(*timestamppb.Timestamp)(nil),                      // 96: google.protobuf.Timestamp
	(*Deployment)(nil),                                 // 97: chalk.server.v1.Deployment
	(*LogEntry)(nil),                                   // 98: chalk.server.v1.LogEntry
	(*v12.KarpenterNodepool)(nil),                      // 99: chalk.nodepools.v1.KarpenterNodepool
	(*v12.GKENodePool)(nil),                            // 100: chalk.nodepools.v1.GKENodePool
}
var file_chalk_server_v1_builder_proto_depIdxs = []int32{
	2,   // 0: chalk.server.v1.ActivateDeploymentRequest.targets:type_name -> chalk.server.v1.ActivateDeploymentTarget
	2,   // 1: chalk.server.v1.DeployKubeComponentsRequest.targets:type_name -> chalk.server.v1.ActivateDeploymentTarget
	94,  // 2: chalk.server.v1.LintSourceResponse.graph:type_name -> chalk.graph.v1.Graph
	95,  // 3: chalk.server.v1.LintSourceResponse.lsp:type_name -> chalk.lsp.v1.LSP
	0,   // 4: chalk.server.v1.DeploymentBuildStep.status:type_name -> chalk.server.v1.DeploymentBuildStatus
	96,  // 5: chalk.server.v1.DeploymentBuildStep.start_time:type_name -> google.protobuf.Timestamp
	96,  // 6: chalk.server.v1.DeploymentBuildStep.end_time:type_name -> google.protobuf.Timestamp
	18,  // 7: chalk.server.v1.GetDeploymentStepsResponse.steps:type_name -> chalk.server.v1.DeploymentBuildStep
	97,  // 8: chalk.server.v1.GetDeploymentStepsResponse.deployment:type_name -> chalk.server.v1.Deployment
	98,  // 9: chalk.server.v1.GetDeploymentLogsResponse.logs:type_name -> chalk.server.v1.LogEntry
	96,  // 10: chalk.server.v1.GetClusterTimescaleDBResponse.created_at:type_name -> google.protobuf.Timestamp
	96,  // 11: chalk.server.v1.GetClusterTimescaleDBResponse.updated_at:type_name -> google.protobuf.Timestamp
	31,  // 12: chalk.server.v1.GetClusterTimescaleDBResponse.specs:type_name -> chalk.server.v1.ClusterTimescaleSpecs
	96,  // 13: chalk.server.v1.GetClusterGatewayResponse.created_at:type_name -> google.protobuf.Timestamp
	96,  // 14: chalk.server.v1.GetClusterGatewayResponse.updated_at:type_name -> google.protobuf.Timestamp
	36,  // 15: chalk.server.v1.GetClusterGatewayResponse.specs:type_name -> chalk.server.v1.EnvoyGatewaySpecs
	96,  // 16: chalk.server.v1.BackgroundPersistence.created_at:type_name -> google.protobuf.Timestamp
	96,  // 17: chalk.server.v1.BackgroundPersistence.updated_at:type_name -> google.protobuf.Timestamp
	50,  // 18: chalk.server.v1.BackgroundPersistence.specs:type_name -> chalk.server.v1.BackgroundPersistenceDeploymentSpecs
	26,  // 19: chalk.server.v1.GetClusterBackgroundPersistenceResponse.background_persistence:type_name -> chalk.server.v1.BackgroundPersistence
	31,  // 20: chalk.server.v1.CreateClusterTimescaleDBRequest.specs:type_name -> chalk.server.v1.ClusterTimescaleSpecs
	30,  // 21: chalk.server.v1.ClusterTimescaleSpecs.request:type_name -> chalk.server.v1.KubeResourceConfig
	30,  // 22: chalk.server.v1.ClusterTimescaleSpecs.limit:type_name -> chalk.server.v1.KubeResourceConfig
	90,  // 23: chalk.server.v1.ClusterTimescaleSpecs.postgres_parameters:type_name -> chalk.server.v1.ClusterTimescaleSpecs.PostgresParametersEntry
	36,  // 24: chalk.server.v1.CreateClusterGatewayRequest.specs:type_name -> chalk.server.v1.EnvoyGatewaySpecs
	37,  // 25: chalk.server.v1.EnvoyGatewaySpecs.listeners:type_name -> chalk.server.v1.EnvoyGatewayListener
	40,  // 26: chalk.server.v1.EnvoyGatewaySpecs.config:type_name -> chalk.server.v1.GatewayProviderConfig
	43,  // 27: chalk.server.v1.EnvoyGatewaySpecs.tls_certificate:type_name -> chalk.server.v1.TLSCertificateConfig
	91,  // 28: chalk.server.v1.EnvoyGatewaySpecs.service_annotations:type_name -> chalk.server.v1.EnvoyGatewaySpecs.ServiceAnnotationsEntry
	38,  // 29: chalk.server.v1.EnvoyGatewayListener.allowed_routes:type_name -> chalk.server.v1.EnvoyGatewayAllowedRoutes
	39,  // 30: chalk.server.v1.EnvoyGatewayAllowedRoutes.namespaces:type_name -> chalk.server.v1.EnvoyGatewayAllowedNamespaces
	41,  // 31: chalk.server.v1.GatewayProviderConfig.envoy:type_name -> chalk.server.v1.EnvoyGatewayProviderConfig
	42,  // 32: chalk.server.v1.GatewayProviderConfig.gcp:type_name -> chalk.server.v1.GCPGatewayProviderConfig
	44,  // 33: chalk.server.v1.TLSCertificateConfig.manual_certificate:type_name -> chalk.server.v1.TLSManualCertificateRef
	50,  // 34: chalk.server.v1.CreateClusterBackgroundPersistenceRequest.specs:type_name -> chalk.server.v1.BackgroundPersistenceDeploymentSpecs
	48,  // 35: chalk.server.v1.BackgroundPersistenceWriterSpecs.hpa_specs:type_name -> chalk.server.v1.BackgroundPersistenceWriterHpaSpecs
	30,  // 36: chalk.server.v1.BackgroundPersistenceWriterSpecs.request:type_name -> chalk.server.v1.KubeResourceConfig
	30,  // 37: chalk.server.v1.BackgroundPersistenceWriterSpecs.limit:type_name -> chalk.server.v1.KubeResourceConfig
	47,  // 38: chalk.server.v1.BackgroundPersistenceDeploymentSpecs.common_persistence_specs:type_name -> chalk.server.v1.BackgroundPersistenceCommonSpecs
	49,  // 39: chalk.server.v1.BackgroundPersistenceDeploymentSpecs.writers:type_name -> chalk.server.v1.BackgroundPersistenceWriterSpecs
	92,  // 40: chalk.server.v1.UpdateEnvironmentVariablesRequest.environment_variables:type_name -> chalk.server.v1.UpdateEnvironmentVariablesRequest.EnvironmentVariablesEntry
	1,   // 41: chalk.server.v1.StartBranchResponse.state:type_name -> chalk.server.v1.BranchScalingState
	1,   // 42: chalk.server.v1.ScaleBranchResponse.state:type_name -> chalk.server.v1.BranchScalingState
	62,  // 43: chalk.server.v1.CreateKafkaTopicsRequest.topics:type_name -> chalk.server.v1.KafkaTopic
	62,  // 44: chalk.server.v1.GetKafkaTopicsResponse.topics:type_name -> chalk.server.v1.KafkaTopic
	99,  // 45: chalk.server.v1.GetNodepoolsResponse.karpenter_nodepools:type_name -> chalk.nodepools.v1.KarpenterNodepool
	100, // 46: chalk.server.v1.GetNodepoolsResponse.gke_nodepools:type_name -> chalk.nodepools.v1.GKENodePool
	99,  // 47: chalk.server.v1.AddNodepoolRequest.karpenter_nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	100, // 48: chalk.server.v1.AddNodepoolRequest.gke_nodepool:type_name -> chalk.nodepools.v1.GKENodePool
	99,  // 49: chalk.server.v1.AddNodepoolResponse.karpenter_nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	100, // 50: chalk.server.v1.AddNodepoolResponse.gke_nodepool:type_name -> chalk.nodepools.v1.GKENodePool
	100, // 51: chalk.server.v1.UpdateNodepoolRequest.gke_nodepool:type_name -> chalk.nodepools.v1.GKENodePool
	99,  // 52: chalk.server.v1.UpdateNodepoolRequest.karpenter_nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	99,  // 53: chalk.server.v1.UpdateNodepoolResponse.karpenter_nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	100, // 54: chalk.server.v1.UpdateNodepoolResponse.gke_nodepool:type_name -> chalk.nodepools.v1.GKENodePool
	99,  // 55: chalk.server.v1.GetKarpenterNodepoolsResponse.nodepools:type_name -> chalk.nodepools.v1.KarpenterNodepool
	99,  // 56: chalk.server.v1.AddKarpenterNodepoolRequest.nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	99,  // 57: chalk.server.v1.AddKarpenterNodepoolResponse.nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	99,  // 58: chalk.server.v1.UpdateKarpenterNodepoolRequest.nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	99,  // 59: chalk.server.v1.UpdateKarpenterNodepoolResponse.nodepool:type_name -> chalk.nodepools.v1.KarpenterNodepool
	93,  // 60: chalk.server.v1.GetKarpenterInstallationMetadataResponse.deployment_labels:type_name -> chalk.server.v1.GetKarpenterInstallationMetadataResponse.DeploymentLabelsEntry
	85,  // 61: chalk.server.v1.GetTagWeightsResponse.tags:type_name -> chalk.server.v1.DeploymentTag
	85,  // 62: chalk.server.v1.SetTagWeightsRequest.tags:type_name -> chalk.server.v1.DeploymentTag
	85,  // 63: chalk.server.v1.SetTagWeightsResponse.tags:type_name -> chalk.server.v1.DeploymentTag
	52,  // 64: chalk.server.v1.BuilderService.GetSearchConfig:input_type -> chalk.server.v1.GetSearchConfigRequest
	3,   // 65: chalk.server.v1.BuilderService.ActivateDeployment:input_type -> chalk.server.v1.ActivateDeploymentRequest
	5,   // 66: chalk.server.v1.BuilderService.IndexDeployment:input_type -> chalk.server.v1.IndexDeploymentRequest
	7,   // 67: chalk.server.v1.BuilderService.DeployKubeComponents:input_type -> chalk.server.v1.DeployKubeComponentsRequest
	9,   // 68: chalk.server.v1.BuilderService.RebuildDeployment:input_type -> chalk.server.v1.RebuildDeploymentRequest
	11,  // 69: chalk.server.v1.BuilderService.RedeployDeployment:input_type -> chalk.server.v1.RedeployDeploymentRequest
	13,  // 70: chalk.server.v1.BuilderService.UploadSource:input_type -> chalk.server.v1.UploadSourceRequest
	15,  // 71: chalk.server.v1.BuilderService.LintSource:input_type -> chalk.server.v1.LintSourceRequest
	17,  // 72: chalk.server.v1.BuilderService.GetDeploymentSteps:input_type -> chalk.server.v1.GetDeploymentStepsRequest
	20,  // 73: chalk.server.v1.BuilderService.GetDeploymentLogs:input_type -> chalk.server.v1.GetDeploymentLogsRequest
	22,  // 74: chalk.server.v1.BuilderService.GetClusterTimescaleDB:input_type -> chalk.server.v1.GetClusterTimescaleDBRequest
	24,  // 75: chalk.server.v1.BuilderService.GetClusterGateway:input_type -> chalk.server.v1.GetClusterGatewayRequest
	27,  // 76: chalk.server.v1.BuilderService.GetClusterBackgroundPersistence:input_type -> chalk.server.v1.GetClusterBackgroundPersistenceRequest
	29,  // 77: chalk.server.v1.BuilderService.CreateClusterTimescaleDB:input_type -> chalk.server.v1.CreateClusterTimescaleDBRequest
	33,  // 78: chalk.server.v1.BuilderService.MigrateClusterTimescaleDB:input_type -> chalk.server.v1.MigrateClusterTimescaleDBRequest
	35,  // 79: chalk.server.v1.BuilderService.CreateClusterGateway:input_type -> chalk.server.v1.CreateClusterGatewayRequest
	46,  // 80: chalk.server.v1.BuilderService.CreateClusterBackgroundPersistence:input_type -> chalk.server.v1.CreateClusterBackgroundPersistenceRequest
	54,  // 81: chalk.server.v1.BuilderService.UpdateEnvironmentVariables:input_type -> chalk.server.v1.UpdateEnvironmentVariablesRequest
	56,  // 82: chalk.server.v1.BuilderService.StartBranch:input_type -> chalk.server.v1.StartBranchRequest
	58,  // 83: chalk.server.v1.BuilderService.ScaleBranch:input_type -> chalk.server.v1.ScaleBranchRequest
	60,  // 84: chalk.server.v1.BuilderService.GetBranchProfile:input_type -> chalk.server.v1.GetBranchProfileRequest
	67,  // 85: chalk.server.v1.BuilderService.GetNodepools:input_type -> chalk.server.v1.GetNodepoolsRequest
	69,  // 86: chalk.server.v1.BuilderService.AddNodepool:input_type -> chalk.server.v1.AddNodepoolRequest
	71,  // 87: chalk.server.v1.BuilderService.UpdateNodepool:input_type -> chalk.server.v1.UpdateNodepoolRequest
	73,  // 88: chalk.server.v1.BuilderService.DeleteNodepool:input_type -> chalk.server.v1.DeleteNodepoolRequest
	75,  // 89: chalk.server.v1.BuilderService.GetKarpenterNodepools:input_type -> chalk.server.v1.GetKarpenterNodepoolsRequest
	77,  // 90: chalk.server.v1.BuilderService.AddKarpenterNodepool:input_type -> chalk.server.v1.AddKarpenterNodepoolRequest
	79,  // 91: chalk.server.v1.BuilderService.UpdateKarpenterNodepool:input_type -> chalk.server.v1.UpdateKarpenterNodepoolRequest
	81,  // 92: chalk.server.v1.BuilderService.DeleteKarpenterNodepool:input_type -> chalk.server.v1.DeleteKarpenterNodepoolRequest
	83,  // 93: chalk.server.v1.BuilderService.GetKarpenterInstallationMetadata:input_type -> chalk.server.v1.GetKarpenterInstallationMetadataRequest
	86,  // 94: chalk.server.v1.BuilderService.GetTagWeights:input_type -> chalk.server.v1.GetTagWeightsRequest
	88,  // 95: chalk.server.v1.BuilderService.SetTagWeights:input_type -> chalk.server.v1.SetTagWeightsRequest
	63,  // 96: chalk.server.v1.ClusterBuilderService.CreateKafkaTopics:input_type -> chalk.server.v1.CreateKafkaTopicsRequest
	65,  // 97: chalk.server.v1.ClusterBuilderService.GetKafkaTopics:input_type -> chalk.server.v1.GetKafkaTopicsRequest
	53,  // 98: chalk.server.v1.BuilderService.GetSearchConfig:output_type -> chalk.server.v1.GetSearchConfigResponse
	4,   // 99: chalk.server.v1.BuilderService.ActivateDeployment:output_type -> chalk.server.v1.ActivateDeploymentResponse
	6,   // 100: chalk.server.v1.BuilderService.IndexDeployment:output_type -> chalk.server.v1.IndexDeploymentResponse
	8,   // 101: chalk.server.v1.BuilderService.DeployKubeComponents:output_type -> chalk.server.v1.DeployKubeComponentsResponse
	10,  // 102: chalk.server.v1.BuilderService.RebuildDeployment:output_type -> chalk.server.v1.RebuildDeploymentResponse
	12,  // 103: chalk.server.v1.BuilderService.RedeployDeployment:output_type -> chalk.server.v1.RedeployDeploymentResponse
	14,  // 104: chalk.server.v1.BuilderService.UploadSource:output_type -> chalk.server.v1.UploadSourceResponse
	16,  // 105: chalk.server.v1.BuilderService.LintSource:output_type -> chalk.server.v1.LintSourceResponse
	19,  // 106: chalk.server.v1.BuilderService.GetDeploymentSteps:output_type -> chalk.server.v1.GetDeploymentStepsResponse
	21,  // 107: chalk.server.v1.BuilderService.GetDeploymentLogs:output_type -> chalk.server.v1.GetDeploymentLogsResponse
	23,  // 108: chalk.server.v1.BuilderService.GetClusterTimescaleDB:output_type -> chalk.server.v1.GetClusterTimescaleDBResponse
	25,  // 109: chalk.server.v1.BuilderService.GetClusterGateway:output_type -> chalk.server.v1.GetClusterGatewayResponse
	28,  // 110: chalk.server.v1.BuilderService.GetClusterBackgroundPersistence:output_type -> chalk.server.v1.GetClusterBackgroundPersistenceResponse
	32,  // 111: chalk.server.v1.BuilderService.CreateClusterTimescaleDB:output_type -> chalk.server.v1.CreateClusterTimescaleDBResponse
	34,  // 112: chalk.server.v1.BuilderService.MigrateClusterTimescaleDB:output_type -> chalk.server.v1.MigrateClusterTimescaleDBResponse
	45,  // 113: chalk.server.v1.BuilderService.CreateClusterGateway:output_type -> chalk.server.v1.CreateClusterGatewayResponse
	51,  // 114: chalk.server.v1.BuilderService.CreateClusterBackgroundPersistence:output_type -> chalk.server.v1.CreateClusterBackgroundPersistenceResponse
	55,  // 115: chalk.server.v1.BuilderService.UpdateEnvironmentVariables:output_type -> chalk.server.v1.UpdateEnvironmentVariablesResponse
	57,  // 116: chalk.server.v1.BuilderService.StartBranch:output_type -> chalk.server.v1.StartBranchResponse
	59,  // 117: chalk.server.v1.BuilderService.ScaleBranch:output_type -> chalk.server.v1.ScaleBranchResponse
	61,  // 118: chalk.server.v1.BuilderService.GetBranchProfile:output_type -> chalk.server.v1.GetBranchProfileResponse
	68,  // 119: chalk.server.v1.BuilderService.GetNodepools:output_type -> chalk.server.v1.GetNodepoolsResponse
	70,  // 120: chalk.server.v1.BuilderService.AddNodepool:output_type -> chalk.server.v1.AddNodepoolResponse
	72,  // 121: chalk.server.v1.BuilderService.UpdateNodepool:output_type -> chalk.server.v1.UpdateNodepoolResponse
	74,  // 122: chalk.server.v1.BuilderService.DeleteNodepool:output_type -> chalk.server.v1.DeleteNodepoolResponse
	76,  // 123: chalk.server.v1.BuilderService.GetKarpenterNodepools:output_type -> chalk.server.v1.GetKarpenterNodepoolsResponse
	78,  // 124: chalk.server.v1.BuilderService.AddKarpenterNodepool:output_type -> chalk.server.v1.AddKarpenterNodepoolResponse
	80,  // 125: chalk.server.v1.BuilderService.UpdateKarpenterNodepool:output_type -> chalk.server.v1.UpdateKarpenterNodepoolResponse
	82,  // 126: chalk.server.v1.BuilderService.DeleteKarpenterNodepool:output_type -> chalk.server.v1.DeleteKarpenterNodepoolResponse
	84,  // 127: chalk.server.v1.BuilderService.GetKarpenterInstallationMetadata:output_type -> chalk.server.v1.GetKarpenterInstallationMetadataResponse
	87,  // 128: chalk.server.v1.BuilderService.GetTagWeights:output_type -> chalk.server.v1.GetTagWeightsResponse
	89,  // 129: chalk.server.v1.BuilderService.SetTagWeights:output_type -> chalk.server.v1.SetTagWeightsResponse
	64,  // 130: chalk.server.v1.ClusterBuilderService.CreateKafkaTopics:output_type -> chalk.server.v1.CreateKafkaTopicsResponse
	66,  // 131: chalk.server.v1.ClusterBuilderService.GetKafkaTopics:output_type -> chalk.server.v1.GetKafkaTopicsResponse
	98,  // [98:132] is the sub-list for method output_type
	64,  // [64:98] is the sub-list for method input_type
	64,  // [64:64] is the sub-list for extension type_name
	64,  // [64:64] is the sub-list for extension extendee
	0,   // [0:64] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_builder_proto_init() }
func file_chalk_server_v1_builder_proto_init() {
	if File_chalk_server_v1_builder_proto != nil {
		return
	}
	file_chalk_server_v1_deployment_proto_init()
	file_chalk_server_v1_log_proto_init()
	file_chalk_server_v1_builder_proto_msgTypes[7].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[9].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[11].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[29].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[31].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[34].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[38].OneofWrappers = []any{
		(*GatewayProviderConfig_Envoy)(nil),
		(*GatewayProviderConfig_Gcp)(nil),
	}
	file_chalk_server_v1_builder_proto_msgTypes[39].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[41].OneofWrappers = []any{
		(*TLSCertificateConfig_ManualCertificate)(nil),
	}
	file_chalk_server_v1_builder_proto_msgTypes[46].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[47].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[59].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[60].OneofWrappers = []any{}
	file_chalk_server_v1_builder_proto_msgTypes[67].OneofWrappers = []any{
		(*AddNodepoolRequest_KarpenterNodepool)(nil),
		(*AddNodepoolRequest_GkeNodepool)(nil),
	}
	file_chalk_server_v1_builder_proto_msgTypes[68].OneofWrappers = []any{
		(*AddNodepoolResponse_KarpenterNodepool)(nil),
		(*AddNodepoolResponse_GkeNodepool)(nil),
	}
	file_chalk_server_v1_builder_proto_msgTypes[69].OneofWrappers = []any{
		(*UpdateNodepoolRequest_GkeNodepool)(nil),
		(*UpdateNodepoolRequest_KarpenterNodepool)(nil),
	}
	file_chalk_server_v1_builder_proto_msgTypes[70].OneofWrappers = []any{
		(*UpdateNodepoolResponse_KarpenterNodepool)(nil),
		(*UpdateNodepoolResponse_GkeNodepool)(nil),
	}
	file_chalk_server_v1_builder_proto_msgTypes[83].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_builder_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   92,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chalk_server_v1_builder_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_builder_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_builder_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_builder_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_builder_proto = out.File
	file_chalk_server_v1_builder_proto_rawDesc = nil
	file_chalk_server_v1_builder_proto_goTypes = nil
	file_chalk_server_v1_builder_proto_depIdxs = nil
}
