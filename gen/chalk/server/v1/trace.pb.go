// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/server/v1/trace.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChalkStatusCode enum matching OpenTelemetry status codes
type ChalkStatusCode int32

const (
	// Default status
	ChalkStatusCode_CHALK_STATUS_CODE_UNSPECIFIED ChalkStatusCode = 0
	// The operation completed successfully
	ChalkStatusCode_CHALK_STATUS_CODE_OK ChalkStatusCode = 1
	// The operation contains an error
	ChalkStatusCode_CHALK_STATUS_CODE_ERROR ChalkStatusCode = 2
)

// Enum value maps for ChalkStatusCode.
var (
	ChalkStatusCode_name = map[int32]string{
		0: "CHALK_STATUS_CODE_UNSPECIFIED",
		1: "CHALK_STATUS_CODE_OK",
		2: "CHALK_STATUS_CODE_ERROR",
	}
	ChalkStatusCode_value = map[string]int32{
		"CHALK_STATUS_CODE_UNSPECIFIED": 0,
		"CHALK_STATUS_CODE_OK":          1,
		"CHALK_STATUS_CODE_ERROR":       2,
	}
)

func (x ChalkStatusCode) Enum() *ChalkStatusCode {
	p := new(ChalkStatusCode)
	*p = x
	return p
}

func (x ChalkStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChalkStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_trace_proto_enumTypes[0].Descriptor()
}

func (ChalkStatusCode) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_trace_proto_enumTypes[0]
}

func (x ChalkStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChalkStatusCode.Descriptor instead.
func (ChalkStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{0}
}

// ChalkSpanKind enum matching OpenTelemetry span kinds
type ChalkSpanKind int32

const (
	// Default value
	ChalkSpanKind_CHALK_SPAN_KIND_UNSPECIFIED ChalkSpanKind = 0
	// Indicates that the span covers server-side handling of a request
	ChalkSpanKind_CHALK_SPAN_KIND_SERVER ChalkSpanKind = 1
	// Indicates that the span covers a client call to a remote service
	ChalkSpanKind_CHALK_SPAN_KIND_CLIENT ChalkSpanKind = 2
	// Indicates that the span describes a producer of a message
	ChalkSpanKind_CHALK_SPAN_KIND_PRODUCER ChalkSpanKind = 3
	// Indicates that the span describes a consumer of a message
	ChalkSpanKind_CHALK_SPAN_KIND_CONSUMER ChalkSpanKind = 4
	// Default value for operations that do not fit the other categories
	ChalkSpanKind_CHALK_SPAN_KIND_INTERNAL ChalkSpanKind = 5
)

// Enum value maps for ChalkSpanKind.
var (
	ChalkSpanKind_name = map[int32]string{
		0: "CHALK_SPAN_KIND_UNSPECIFIED",
		1: "CHALK_SPAN_KIND_SERVER",
		2: "CHALK_SPAN_KIND_CLIENT",
		3: "CHALK_SPAN_KIND_PRODUCER",
		4: "CHALK_SPAN_KIND_CONSUMER",
		5: "CHALK_SPAN_KIND_INTERNAL",
	}
	ChalkSpanKind_value = map[string]int32{
		"CHALK_SPAN_KIND_UNSPECIFIED": 0,
		"CHALK_SPAN_KIND_SERVER":      1,
		"CHALK_SPAN_KIND_CLIENT":      2,
		"CHALK_SPAN_KIND_PRODUCER":    3,
		"CHALK_SPAN_KIND_CONSUMER":    4,
		"CHALK_SPAN_KIND_INTERNAL":    5,
	}
)

func (x ChalkSpanKind) Enum() *ChalkSpanKind {
	p := new(ChalkSpanKind)
	*p = x
	return p
}

func (x ChalkSpanKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChalkSpanKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_trace_proto_enumTypes[1].Descriptor()
}

func (ChalkSpanKind) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_trace_proto_enumTypes[1]
}

func (x ChalkSpanKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChalkSpanKind.Descriptor instead.
func (ChalkSpanKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{1}
}

// ChalkSpan represents a single operation within a trace
type ChalkSpan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the span
	SpanId string `protobuf:"bytes,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// Unique identifier for the trace this span belongs to
	TraceId string `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// Parent span ID, if this span has a parent
	ParentSpanId *string `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3,oneof" json:"parent_span_id,omitempty"`
	// Name of the operation represented by this span
	OperationName string `protobuf:"bytes,4,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	// Start time of the span
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time of the span
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Duration of the span
	Duration *durationpb.Duration `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// Status of the span
	Status *ChalkSpanStatus `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// Key-value attributes associated with the span
	Attributes map[string]string `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Events that occurred during the span
	Events []*ChalkSpanEvent `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	// Links to other spans
	Links []*ChalkSpanLink `protobuf:"bytes,11,rep,name=links,proto3" json:"links,omitempty"`
	// Kind of span (e.g., CLIENT, SERVER, INTERNAL)
	Kind          ChalkSpanKind `protobuf:"varint,12,opt,name=kind,proto3,enum=chalk.server.v1.ChalkSpanKind" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChalkSpan) Reset() {
	*x = ChalkSpan{}
	mi := &file_chalk_server_v1_trace_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkSpan) ProtoMessage() {}

func (x *ChalkSpan) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_trace_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkSpan.ProtoReflect.Descriptor instead.
func (*ChalkSpan) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{0}
}

func (x *ChalkSpan) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *ChalkSpan) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ChalkSpan) GetParentSpanId() string {
	if x != nil && x.ParentSpanId != nil {
		return *x.ParentSpanId
	}
	return ""
}

func (x *ChalkSpan) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *ChalkSpan) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ChalkSpan) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ChalkSpan) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ChalkSpan) GetStatus() *ChalkSpanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ChalkSpan) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ChalkSpan) GetEvents() []*ChalkSpanEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ChalkSpan) GetLinks() []*ChalkSpanLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ChalkSpan) GetKind() ChalkSpanKind {
	if x != nil {
		return x.Kind
	}
	return ChalkSpanKind_CHALK_SPAN_KIND_UNSPECIFIED
}

// ChalkSpanStatus represents the status of a span
type ChalkSpanStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status code
	Code ChalkStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=chalk.server.v1.ChalkStatusCode" json:"code,omitempty"`
	// Optional description of the status
	Description   *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChalkSpanStatus) Reset() {
	*x = ChalkSpanStatus{}
	mi := &file_chalk_server_v1_trace_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkSpanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkSpanStatus) ProtoMessage() {}

func (x *ChalkSpanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_trace_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkSpanStatus.ProtoReflect.Descriptor instead.
func (*ChalkSpanStatus) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{1}
}

func (x *ChalkSpanStatus) GetCode() ChalkStatusCode {
	if x != nil {
		return x.Code
	}
	return ChalkStatusCode_CHALK_STATUS_CODE_UNSPECIFIED
}

func (x *ChalkSpanStatus) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// ChalkSpanEvent represents an event that occurred during a span
type ChalkSpanEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the event
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Timestamp when the event occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Key-value attributes for the event
	Attributes    map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChalkSpanEvent) Reset() {
	*x = ChalkSpanEvent{}
	mi := &file_chalk_server_v1_trace_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkSpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkSpanEvent) ProtoMessage() {}

func (x *ChalkSpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_trace_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkSpanEvent.ProtoReflect.Descriptor instead.
func (*ChalkSpanEvent) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{2}
}

func (x *ChalkSpanEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChalkSpanEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ChalkSpanEvent) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// ChalkSpanLink represents a link to another span
type ChalkSpanLink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trace ID of the linked span
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// Span ID of the linked span
	SpanId string `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// Key-value attributes for the link
	Attributes    map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChalkSpanLink) Reset() {
	*x = ChalkSpanLink{}
	mi := &file_chalk_server_v1_trace_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkSpanLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkSpanLink) ProtoMessage() {}

func (x *ChalkSpanLink) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_trace_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkSpanLink.ProtoReflect.Descriptor instead.
func (*ChalkSpanLink) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{3}
}

func (x *ChalkSpanLink) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ChalkSpanLink) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *ChalkSpanLink) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// ChalkTrace represents a distributed trace
type ChalkTrace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the trace
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// All spans that are part of this trace
	Spans []*ChalkSpan `protobuf:"bytes,2,rep,name=spans,proto3" json:"spans,omitempty"`
	// Root span ID
	RootSpanId *string `protobuf:"bytes,3,opt,name=root_span_id,json=rootSpanId,proto3,oneof" json:"root_span_id,omitempty"`
	// Service name that generated this trace
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Resource attributes for the trace
	ResourceAttributes map[string]string `protobuf:"bytes,5,rep,name=resource_attributes,json=resourceAttributes,proto3" json:"resource_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChalkTrace) Reset() {
	*x = ChalkTrace{}
	mi := &file_chalk_server_v1_trace_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChalkTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkTrace) ProtoMessage() {}

func (x *ChalkTrace) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_trace_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkTrace.ProtoReflect.Descriptor instead.
func (*ChalkTrace) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{4}
}

func (x *ChalkTrace) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ChalkTrace) GetSpans() []*ChalkSpan {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *ChalkTrace) GetRootSpanId() string {
	if x != nil && x.RootSpanId != nil {
		return *x.RootSpanId
	}
	return ""
}

func (x *ChalkTrace) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ChalkTrace) GetResourceAttributes() map[string]string {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

// GetTraceRequest message
type GetTraceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The operation ID to retrieve the trace for
	OperationId   *string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3,oneof" json:"operation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceRequest) Reset() {
	*x = GetTraceRequest{}
	mi := &file_chalk_server_v1_trace_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceRequest) ProtoMessage() {}

func (x *GetTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_trace_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceRequest.ProtoReflect.Descriptor instead.
func (*GetTraceRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{5}
}

func (x *GetTraceRequest) GetOperationId() string {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return ""
}

// GetTraceResponse message
type GetTraceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The trace data
	Trace         *ChalkTrace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTraceResponse) Reset() {
	*x = GetTraceResponse{}
	mi := &file_chalk_server_v1_trace_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceResponse) ProtoMessage() {}

func (x *GetTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_trace_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceResponse.ProtoReflect.Descriptor instead.
func (*GetTraceResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_trace_proto_rawDescGZIP(), []int{6}
}

func (x *GetTraceResponse) GetTrace() *ChalkTrace {
	if x != nil {
		return x.Trace
	}
	return nil
}

var File_chalk_server_v1_trace_proto protoreflect.FileDescriptor

const file_chalk_server_v1_trace_proto_rawDesc = "" +
	"\n" +
	"\x1bchalk/server/v1/trace.proto\x12\x0fchalk.server.v1\x1a\x1fchalk/auth/v1/permissions.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb5\x05\n" +
	"\tChalkSpan\x12\x17\n" +
	"\aspan_id\x18\x01 \x01(\tR\x06spanId\x12\x19\n" +
	"\btrace_id\x18\x02 \x01(\tR\atraceId\x12)\n" +
	"\x0eparent_span_id\x18\x03 \x01(\tH\x00R\fparentSpanId\x88\x01\x01\x12%\n" +
	"\x0eoperation_name\x18\x04 \x01(\tR\roperationName\x129\n" +
	"\n" +
	"start_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x125\n" +
	"\bduration\x18\a \x01(\v2\x19.google.protobuf.DurationR\bduration\x128\n" +
	"\x06status\x18\b \x01(\v2 .chalk.server.v1.ChalkSpanStatusR\x06status\x12J\n" +
	"\n" +
	"attributes\x18\t \x03(\v2*.chalk.server.v1.ChalkSpan.AttributesEntryR\n" +
	"attributes\x127\n" +
	"\x06events\x18\n" +
	" \x03(\v2\x1f.chalk.server.v1.ChalkSpanEventR\x06events\x124\n" +
	"\x05links\x18\v \x03(\v2\x1e.chalk.server.v1.ChalkSpanLinkR\x05links\x122\n" +
	"\x04kind\x18\f \x01(\x0e2\x1e.chalk.server.v1.ChalkSpanKindR\x04kind\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x11\n" +
	"\x0f_parent_span_id\"~\n" +
	"\x0fChalkSpanStatus\x124\n" +
	"\x04code\x18\x01 \x01(\x0e2 .chalk.server.v1.ChalkStatusCodeR\x04code\x12%\n" +
	"\vdescription\x18\x02 \x01(\tH\x00R\vdescription\x88\x01\x01B\x0e\n" +
	"\f_description\"\xee\x01\n" +
	"\x0eChalkSpanEvent\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12O\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2/.chalk.server.v1.ChalkSpanEvent.AttributesEntryR\n" +
	"attributes\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd2\x01\n" +
	"\rChalkSpanLink\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\tR\atraceId\x12\x17\n" +
	"\aspan_id\x18\x02 \x01(\tR\x06spanId\x12N\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2..chalk.server.v1.ChalkSpanLink.AttributesEntryR\n" +
	"attributes\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe1\x02\n" +
	"\n" +
	"ChalkTrace\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\tR\atraceId\x120\n" +
	"\x05spans\x18\x02 \x03(\v2\x1a.chalk.server.v1.ChalkSpanR\x05spans\x12%\n" +
	"\froot_span_id\x18\x03 \x01(\tH\x00R\n" +
	"rootSpanId\x88\x01\x01\x12!\n" +
	"\fservice_name\x18\x04 \x01(\tR\vserviceName\x12d\n" +
	"\x13resource_attributes\x18\x05 \x03(\v23.chalk.server.v1.ChalkTrace.ResourceAttributesEntryR\x12resourceAttributes\x1aE\n" +
	"\x17ResourceAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x0f\n" +
	"\r_root_span_id\"J\n" +
	"\x0fGetTraceRequest\x12&\n" +
	"\foperation_id\x18\x01 \x01(\tH\x00R\voperationId\x88\x01\x01B\x0f\n" +
	"\r_operation_id\"E\n" +
	"\x10GetTraceResponse\x121\n" +
	"\x05trace\x18\x01 \x01(\v2\x1b.chalk.server.v1.ChalkTraceR\x05trace*k\n" +
	"\x0fChalkStatusCode\x12!\n" +
	"\x1dCHALK_STATUS_CODE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14CHALK_STATUS_CODE_OK\x10\x01\x12\x1b\n" +
	"\x17CHALK_STATUS_CODE_ERROR\x10\x02*\xc2\x01\n" +
	"\rChalkSpanKind\x12\x1f\n" +
	"\x1bCHALK_SPAN_KIND_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CHALK_SPAN_KIND_SERVER\x10\x01\x12\x1a\n" +
	"\x16CHALK_SPAN_KIND_CLIENT\x10\x02\x12\x1c\n" +
	"\x18CHALK_SPAN_KIND_PRODUCER\x10\x03\x12\x1c\n" +
	"\x18CHALK_SPAN_KIND_CONSUMER\x10\x04\x12\x1c\n" +
	"\x18CHALK_SPAN_KIND_INTERNAL\x10\x052g\n" +
	"\fTraceService\x12W\n" +
	"\bGetTrace\x12 .chalk.server.v1.GetTraceRequest\x1a!.chalk.server.v1.GetTraceResponse\"\x06\x80}\x06\x90\x02\x01B\xba\x01\n" +
	"\x13com.chalk.server.v1B\n" +
	"TraceProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/server/v1;serverv1\xa2\x02\x03CSX\xaa\x02\x0fChalk.Server.V1\xca\x02\x0fChalk\\Server\\V1\xe2\x02\x1bChalk\\Server\\V1\\GPBMetadata\xea\x02\x11Chalk::Server::V1b\x06proto3"

var (
	file_chalk_server_v1_trace_proto_rawDescOnce sync.Once
	file_chalk_server_v1_trace_proto_rawDescData []byte
)

func file_chalk_server_v1_trace_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_trace_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_trace_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_server_v1_trace_proto_rawDesc), len(file_chalk_server_v1_trace_proto_rawDesc)))
	})
	return file_chalk_server_v1_trace_proto_rawDescData
}

var file_chalk_server_v1_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_server_v1_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_chalk_server_v1_trace_proto_goTypes = []any{
	(ChalkStatusCode)(0),          // 0: chalk.server.v1.ChalkStatusCode
	(ChalkSpanKind)(0),            // 1: chalk.server.v1.ChalkSpanKind
	(*ChalkSpan)(nil),             // 2: chalk.server.v1.ChalkSpan
	(*ChalkSpanStatus)(nil),       // 3: chalk.server.v1.ChalkSpanStatus
	(*ChalkSpanEvent)(nil),        // 4: chalk.server.v1.ChalkSpanEvent
	(*ChalkSpanLink)(nil),         // 5: chalk.server.v1.ChalkSpanLink
	(*ChalkTrace)(nil),            // 6: chalk.server.v1.ChalkTrace
	(*GetTraceRequest)(nil),       // 7: chalk.server.v1.GetTraceRequest
	(*GetTraceResponse)(nil),      // 8: chalk.server.v1.GetTraceResponse
	nil,                           // 9: chalk.server.v1.ChalkSpan.AttributesEntry
	nil,                           // 10: chalk.server.v1.ChalkSpanEvent.AttributesEntry
	nil,                           // 11: chalk.server.v1.ChalkSpanLink.AttributesEntry
	nil,                           // 12: chalk.server.v1.ChalkTrace.ResourceAttributesEntry
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 14: google.protobuf.Duration
}
var file_chalk_server_v1_trace_proto_depIdxs = []int32{
	13, // 0: chalk.server.v1.ChalkSpan.start_time:type_name -> google.protobuf.Timestamp
	13, // 1: chalk.server.v1.ChalkSpan.end_time:type_name -> google.protobuf.Timestamp
	14, // 2: chalk.server.v1.ChalkSpan.duration:type_name -> google.protobuf.Duration
	3,  // 3: chalk.server.v1.ChalkSpan.status:type_name -> chalk.server.v1.ChalkSpanStatus
	9,  // 4: chalk.server.v1.ChalkSpan.attributes:type_name -> chalk.server.v1.ChalkSpan.AttributesEntry
	4,  // 5: chalk.server.v1.ChalkSpan.events:type_name -> chalk.server.v1.ChalkSpanEvent
	5,  // 6: chalk.server.v1.ChalkSpan.links:type_name -> chalk.server.v1.ChalkSpanLink
	1,  // 7: chalk.server.v1.ChalkSpan.kind:type_name -> chalk.server.v1.ChalkSpanKind
	0,  // 8: chalk.server.v1.ChalkSpanStatus.code:type_name -> chalk.server.v1.ChalkStatusCode
	13, // 9: chalk.server.v1.ChalkSpanEvent.timestamp:type_name -> google.protobuf.Timestamp
	10, // 10: chalk.server.v1.ChalkSpanEvent.attributes:type_name -> chalk.server.v1.ChalkSpanEvent.AttributesEntry
	11, // 11: chalk.server.v1.ChalkSpanLink.attributes:type_name -> chalk.server.v1.ChalkSpanLink.AttributesEntry
	2,  // 12: chalk.server.v1.ChalkTrace.spans:type_name -> chalk.server.v1.ChalkSpan
	12, // 13: chalk.server.v1.ChalkTrace.resource_attributes:type_name -> chalk.server.v1.ChalkTrace.ResourceAttributesEntry
	6,  // 14: chalk.server.v1.GetTraceResponse.trace:type_name -> chalk.server.v1.ChalkTrace
	7,  // 15: chalk.server.v1.TraceService.GetTrace:input_type -> chalk.server.v1.GetTraceRequest
	8,  // 16: chalk.server.v1.TraceService.GetTrace:output_type -> chalk.server.v1.GetTraceResponse
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_trace_proto_init() }
func file_chalk_server_v1_trace_proto_init() {
	if File_chalk_server_v1_trace_proto != nil {
		return
	}
	file_chalk_server_v1_trace_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_trace_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_server_v1_trace_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_server_v1_trace_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_server_v1_trace_proto_rawDesc), len(file_chalk_server_v1_trace_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_trace_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_trace_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_trace_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_trace_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_trace_proto = out.File
	file_chalk_server_v1_trace_proto_goTypes = nil
	file_chalk_server_v1_trace_proto_depIdxs = nil
}
