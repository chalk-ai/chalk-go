// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/server/v1/flag.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureFlagService_GetFeatureFlags_FullMethodName = "/chalk.server.v1.FeatureFlagService/GetFeatureFlags"
	FeatureFlagService_SetFeatureFlag_FullMethodName  = "/chalk.server.v1.FeatureFlagService/SetFeatureFlag"
)

// FeatureFlagServiceClient is the client API for FeatureFlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureFlagServiceClient interface {
	GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error)
	SetFeatureFlag(ctx context.Context, in *SetFeatureFlagRequest, opts ...grpc.CallOption) (*SetFeatureFlagResponse, error)
}

type featureFlagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagServiceClient(cc grpc.ClientConnInterface) FeatureFlagServiceClient {
	return &featureFlagServiceClient{cc}
}

func (c *featureFlagServiceClient) GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeatureFlagsResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_GetFeatureFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) SetFeatureFlag(ctx context.Context, in *SetFeatureFlagRequest, opts ...grpc.CallOption) (*SetFeatureFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFeatureFlagResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_SetFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagServiceServer is the server API for FeatureFlagService service.
// All implementations must embed UnimplementedFeatureFlagServiceServer
// for forward compatibility.
type FeatureFlagServiceServer interface {
	GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*GetFeatureFlagsResponse, error)
	SetFeatureFlag(context.Context, *SetFeatureFlagRequest) (*SetFeatureFlagResponse, error)
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

// UnimplementedFeatureFlagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureFlagServiceServer struct{}

func (UnimplementedFeatureFlagServiceServer) GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*GetFeatureFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlags not implemented")
}
func (UnimplementedFeatureFlagServiceServer) SetFeatureFlag(context.Context, *SetFeatureFlagRequest) (*SetFeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeatureFlag not implemented")
}
func (UnimplementedFeatureFlagServiceServer) mustEmbedUnimplementedFeatureFlagServiceServer() {}
func (UnimplementedFeatureFlagServiceServer) testEmbeddedByValue()                            {}

// UnsafeFeatureFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureFlagServiceServer will
// result in compilation errors.
type UnsafeFeatureFlagServiceServer interface {
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

func RegisterFeatureFlagServiceServer(s grpc.ServiceRegistrar, srv FeatureFlagServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeatureFlagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureFlagService_ServiceDesc, srv)
}

func _FeatureFlagService_GetFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).GetFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_GetFeatureFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).GetFeatureFlags(ctx, req.(*GetFeatureFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_SetFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).SetFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_SetFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).SetFeatureFlag(ctx, req.(*SetFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureFlagService_ServiceDesc is the grpc.ServiceDesc for FeatureFlagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureFlagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.server.v1.FeatureFlagService",
	HandlerType: (*FeatureFlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatureFlags",
			Handler:    _FeatureFlagService_GetFeatureFlags_Handler,
		},
		{
			MethodName: "SetFeatureFlag",
			Handler:    _FeatureFlagService_SetFeatureFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/server/v1/flag.proto",
}
