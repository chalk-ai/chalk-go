// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/scheduler.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CronRunTriggerKind int32

const (
	CronRunTriggerKind_CRON_RUN_TRIGGER_KIND_UNSPECIFIED CronRunTriggerKind = 0
	CronRunTriggerKind_CRON_RUN_TRIGGER_KIND_MANUAL      CronRunTriggerKind = 1
	CronRunTriggerKind_CRON_RUN_TRIGGER_KIND_API         CronRunTriggerKind = 2
	CronRunTriggerKind_CRON_RUN_TRIGGER_KIND_CRON        CronRunTriggerKind = 3
)

// Enum value maps for CronRunTriggerKind.
var (
	CronRunTriggerKind_name = map[int32]string{
		0: "CRON_RUN_TRIGGER_KIND_UNSPECIFIED",
		1: "CRON_RUN_TRIGGER_KIND_MANUAL",
		2: "CRON_RUN_TRIGGER_KIND_API",
		3: "CRON_RUN_TRIGGER_KIND_CRON",
	}
	CronRunTriggerKind_value = map[string]int32{
		"CRON_RUN_TRIGGER_KIND_UNSPECIFIED": 0,
		"CRON_RUN_TRIGGER_KIND_MANUAL":      1,
		"CRON_RUN_TRIGGER_KIND_API":         2,
		"CRON_RUN_TRIGGER_KIND_CRON":        3,
	}
)

func (x CronRunTriggerKind) Enum() *CronRunTriggerKind {
	p := new(CronRunTriggerKind)
	*p = x
	return p
}

func (x CronRunTriggerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CronRunTriggerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_scheduler_proto_enumTypes[0].Descriptor()
}

func (CronRunTriggerKind) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_scheduler_proto_enumTypes[0]
}

func (x CronRunTriggerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CronRunTriggerKind.Descriptor instead.
func (CronRunTriggerKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduler_proto_rawDescGZIP(), []int{0}
}

type CronResolverRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId         string                 `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	ResolverFqn           string                 `protobuf:"bytes,3,opt,name=resolver_fqn,json=resolverFqn,proto3" json:"resolver_fqn,omitempty"`
	Kind                  string                 `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	ScheduleReadable      string                 `protobuf:"bytes,5,opt,name=schedule_readable,json=scheduleReadable,proto3" json:"schedule_readable,omitempty"`
	ScheduleResolverValue string                 `protobuf:"bytes,6,opt,name=schedule_resolver_value,json=scheduleResolverValue,proto3" json:"schedule_resolver_value,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeploymentId          *string                `protobuf:"bytes,8,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	End                   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end,proto3,oneof" json:"end,omitempty"`
	Batch                 *BatchOperation        `protobuf:"bytes,10,opt,name=batch,proto3,oneof" json:"batch,omitempty"`
	TriggerKind           CronRunTriggerKind     `protobuf:"varint,11,opt,name=trigger_kind,json=triggerKind,proto3,enum=chalk.server.v1.CronRunTriggerKind" json:"trigger_kind,omitempty"`
	LowerBound            *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	UpperBound            *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	MaxSamples            *int64                 `protobuf:"varint,14,opt,name=max_samples,json=maxSamples,proto3,oneof" json:"max_samples,omitempty"`
}

func (x *CronResolverRun) Reset() {
	*x = CronResolverRun{}
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronResolverRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronResolverRun) ProtoMessage() {}

func (x *CronResolverRun) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronResolverRun.ProtoReflect.Descriptor instead.
func (*CronResolverRun) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *CronResolverRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CronResolverRun) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *CronResolverRun) GetResolverFqn() string {
	if x != nil {
		return x.ResolverFqn
	}
	return ""
}

func (x *CronResolverRun) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CronResolverRun) GetScheduleReadable() string {
	if x != nil {
		return x.ScheduleReadable
	}
	return ""
}

func (x *CronResolverRun) GetScheduleResolverValue() string {
	if x != nil {
		return x.ScheduleResolverValue
	}
	return ""
}

func (x *CronResolverRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CronResolverRun) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *CronResolverRun) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CronResolverRun) GetBatch() *BatchOperation {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *CronResolverRun) GetTriggerKind() CronRunTriggerKind {
	if x != nil {
		return x.TriggerKind
	}
	return CronRunTriggerKind_CRON_RUN_TRIGGER_KIND_UNSPECIFIED
}

func (x *CronResolverRun) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *CronResolverRun) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *CronResolverRun) GetMaxSamples() int64 {
	if x != nil && x.MaxSamples != nil {
		return *x.MaxSamples
	}
	return 0
}

type ManualTriggerCronResolverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolverFqn      string                 `protobuf:"bytes,1,opt,name=resolver_fqn,json=resolverFqn,proto3" json:"resolver_fqn,omitempty"`
	MaxSamples       *int64                 `protobuf:"varint,2,opt,name=max_samples,json=maxSamples,proto3,oneof" json:"max_samples,omitempty"`
	LowerBound       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	UpperBound       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	TimestampingMode *string                `protobuf:"bytes,6,opt,name=timestamping_mode,json=timestampingMode,proto3,oneof" json:"timestamping_mode,omitempty"`
	JobOptions       *string                `protobuf:"bytes,7,opt,name=job_options,json=jobOptions,proto3,oneof" json:"job_options,omitempty"`
}

func (x *ManualTriggerCronResolverRequest) Reset() {
	*x = ManualTriggerCronResolverRequest{}
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualTriggerCronResolverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTriggerCronResolverRequest) ProtoMessage() {}

func (x *ManualTriggerCronResolverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTriggerCronResolverRequest.ProtoReflect.Descriptor instead.
func (*ManualTriggerCronResolverRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *ManualTriggerCronResolverRequest) GetResolverFqn() string {
	if x != nil {
		return x.ResolverFqn
	}
	return ""
}

func (x *ManualTriggerCronResolverRequest) GetMaxSamples() int64 {
	if x != nil && x.MaxSamples != nil {
		return *x.MaxSamples
	}
	return 0
}

func (x *ManualTriggerCronResolverRequest) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *ManualTriggerCronResolverRequest) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *ManualTriggerCronResolverRequest) GetTimestampingMode() string {
	if x != nil && x.TimestampingMode != nil {
		return *x.TimestampingMode
	}
	return ""
}

func (x *ManualTriggerCronResolverRequest) GetJobOptions() string {
	if x != nil && x.JobOptions != nil {
		return *x.JobOptions
	}
	return ""
}

type ManualTriggerCronResolverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronResolverRun *CronResolverRun `protobuf:"bytes,1,opt,name=cron_resolver_run,json=cronResolverRun,proto3" json:"cron_resolver_run,omitempty"`
}

func (x *ManualTriggerCronResolverResponse) Reset() {
	*x = ManualTriggerCronResolverResponse{}
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualTriggerCronResolverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTriggerCronResolverResponse) ProtoMessage() {}

func (x *ManualTriggerCronResolverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTriggerCronResolverResponse.ProtoReflect.Descriptor instead.
func (*ManualTriggerCronResolverResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *ManualTriggerCronResolverResponse) GetCronResolverRun() *CronResolverRun {
	if x != nil {
		return x.CronResolverRun
	}
	return nil
}

type ManualTriggerScheduledQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronQueryId          int64                      `protobuf:"varint,1,opt,name=cron_query_id,json=cronQueryId,proto3" json:"cron_query_id,omitempty"`
	PlannerOptions       map[string]*structpb.Value `protobuf:"bytes,2,rep,name=planner_options,json=plannerOptions,proto3" json:"planner_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IncrementalResolvers []string                   `protobuf:"bytes,3,rep,name=incremental_resolvers,json=incrementalResolvers,proto3" json:"incremental_resolvers,omitempty"`
	MaxSamples           *int64                     `protobuf:"varint,4,opt,name=max_samples,json=maxSamples,proto3,oneof" json:"max_samples,omitempty"`
	EnvOverrides         map[string]string          `protobuf:"bytes,5,rep,name=env_overrides,json=envOverrides,proto3" json:"env_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ManualTriggerScheduledQueryRequest) Reset() {
	*x = ManualTriggerScheduledQueryRequest{}
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualTriggerScheduledQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTriggerScheduledQueryRequest) ProtoMessage() {}

func (x *ManualTriggerScheduledQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTriggerScheduledQueryRequest.ProtoReflect.Descriptor instead.
func (*ManualTriggerScheduledQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *ManualTriggerScheduledQueryRequest) GetCronQueryId() int64 {
	if x != nil {
		return x.CronQueryId
	}
	return 0
}

func (x *ManualTriggerScheduledQueryRequest) GetPlannerOptions() map[string]*structpb.Value {
	if x != nil {
		return x.PlannerOptions
	}
	return nil
}

func (x *ManualTriggerScheduledQueryRequest) GetIncrementalResolvers() []string {
	if x != nil {
		return x.IncrementalResolvers
	}
	return nil
}

func (x *ManualTriggerScheduledQueryRequest) GetMaxSamples() int64 {
	if x != nil && x.MaxSamples != nil {
		return *x.MaxSamples
	}
	return 0
}

func (x *ManualTriggerScheduledQueryRequest) GetEnvOverrides() map[string]string {
	if x != nil {
		return x.EnvOverrides
	}
	return nil
}

type ManualTriggerScheduledQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledQueryRun *ScheduledQueryRun `protobuf:"bytes,1,opt,name=scheduled_query_run,json=scheduledQueryRun,proto3" json:"scheduled_query_run,omitempty"`
}

func (x *ManualTriggerScheduledQueryResponse) Reset() {
	*x = ManualTriggerScheduledQueryResponse{}
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualTriggerScheduledQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualTriggerScheduledQueryResponse) ProtoMessage() {}

func (x *ManualTriggerScheduledQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualTriggerScheduledQueryResponse.ProtoReflect.Descriptor instead.
func (*ManualTriggerScheduledQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *ManualTriggerScheduledQueryResponse) GetScheduledQueryRun() *ScheduledQueryRun {
	if x != nil {
		return x.ScheduledQueryRun
	}
	return nil
}

var File_chalk_server_v1_scheduler_proto protoreflect.FileDescriptor

var file_chalk_server_v1_scheduler_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x05, 0x0a, 0x0f, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x46, 0x71, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a,
	0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03,
	0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x20,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x71, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x46, 0x71, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x21, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x11, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x52, 0x0f, 0x63,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x22, 0xad,
	0x04, 0x0a, 0x22, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x1a, 0x59, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x79,
	0x0a, 0x23, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x2a, 0x9c, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x21, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x52, 0x4f, 0x4e, 0x5f,
	0x52, 0x55, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x4f,
	0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x4f, 0x4e,
	0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x03, 0x32, 0xac, 0x02, 0x0a, 0x10, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x72,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x11, 0x12, 0x8d, 0x01, 0x0a, 0x1b, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x11, 0x42, 0xbe, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42,
	0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_scheduler_proto_rawDescOnce sync.Once
	file_chalk_server_v1_scheduler_proto_rawDescData = file_chalk_server_v1_scheduler_proto_rawDesc
)

func file_chalk_server_v1_scheduler_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_scheduler_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_scheduler_proto_rawDescData)
	})
	return file_chalk_server_v1_scheduler_proto_rawDescData
}

var file_chalk_server_v1_scheduler_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_server_v1_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_chalk_server_v1_scheduler_proto_goTypes = []any{
	(CronRunTriggerKind)(0),                     // 0: chalk.server.v1.CronRunTriggerKind
	(*CronResolverRun)(nil),                     // 1: chalk.server.v1.CronResolverRun
	(*ManualTriggerCronResolverRequest)(nil),    // 2: chalk.server.v1.ManualTriggerCronResolverRequest
	(*ManualTriggerCronResolverResponse)(nil),   // 3: chalk.server.v1.ManualTriggerCronResolverResponse
	(*ManualTriggerScheduledQueryRequest)(nil),  // 4: chalk.server.v1.ManualTriggerScheduledQueryRequest
	(*ManualTriggerScheduledQueryResponse)(nil), // 5: chalk.server.v1.ManualTriggerScheduledQueryResponse
	nil,                           // 6: chalk.server.v1.ManualTriggerScheduledQueryRequest.PlannerOptionsEntry
	nil,                           // 7: chalk.server.v1.ManualTriggerScheduledQueryRequest.EnvOverridesEntry
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*BatchOperation)(nil),        // 9: chalk.server.v1.BatchOperation
	(*ScheduledQueryRun)(nil),     // 10: chalk.server.v1.ScheduledQueryRun
	(*structpb.Value)(nil),        // 11: google.protobuf.Value
}
var file_chalk_server_v1_scheduler_proto_depIdxs = []int32{
	8,  // 0: chalk.server.v1.CronResolverRun.created_at:type_name -> google.protobuf.Timestamp
	8,  // 1: chalk.server.v1.CronResolverRun.end:type_name -> google.protobuf.Timestamp
	9,  // 2: chalk.server.v1.CronResolverRun.batch:type_name -> chalk.server.v1.BatchOperation
	0,  // 3: chalk.server.v1.CronResolverRun.trigger_kind:type_name -> chalk.server.v1.CronRunTriggerKind
	8,  // 4: chalk.server.v1.CronResolverRun.lower_bound:type_name -> google.protobuf.Timestamp
	8,  // 5: chalk.server.v1.CronResolverRun.upper_bound:type_name -> google.protobuf.Timestamp
	8,  // 6: chalk.server.v1.ManualTriggerCronResolverRequest.lower_bound:type_name -> google.protobuf.Timestamp
	8,  // 7: chalk.server.v1.ManualTriggerCronResolverRequest.upper_bound:type_name -> google.protobuf.Timestamp
	1,  // 8: chalk.server.v1.ManualTriggerCronResolverResponse.cron_resolver_run:type_name -> chalk.server.v1.CronResolverRun
	6,  // 9: chalk.server.v1.ManualTriggerScheduledQueryRequest.planner_options:type_name -> chalk.server.v1.ManualTriggerScheduledQueryRequest.PlannerOptionsEntry
	7,  // 10: chalk.server.v1.ManualTriggerScheduledQueryRequest.env_overrides:type_name -> chalk.server.v1.ManualTriggerScheduledQueryRequest.EnvOverridesEntry
	10, // 11: chalk.server.v1.ManualTriggerScheduledQueryResponse.scheduled_query_run:type_name -> chalk.server.v1.ScheduledQueryRun
	11, // 12: chalk.server.v1.ManualTriggerScheduledQueryRequest.PlannerOptionsEntry.value:type_name -> google.protobuf.Value
	2,  // 13: chalk.server.v1.SchedulerService.ManualTriggerCronResolver:input_type -> chalk.server.v1.ManualTriggerCronResolverRequest
	4,  // 14: chalk.server.v1.SchedulerService.ManualTriggerScheduledQuery:input_type -> chalk.server.v1.ManualTriggerScheduledQueryRequest
	3,  // 15: chalk.server.v1.SchedulerService.ManualTriggerCronResolver:output_type -> chalk.server.v1.ManualTriggerCronResolverResponse
	5,  // 16: chalk.server.v1.SchedulerService.ManualTriggerScheduledQuery:output_type -> chalk.server.v1.ManualTriggerScheduledQueryResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_scheduler_proto_init() }
func file_chalk_server_v1_scheduler_proto_init() {
	if File_chalk_server_v1_scheduler_proto != nil {
		return
	}
	file_chalk_server_v1_batch_proto_init()
	file_chalk_server_v1_scheduled_query_run_proto_init()
	file_chalk_server_v1_scheduler_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_scheduler_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_server_v1_scheduler_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_scheduler_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_scheduler_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_scheduler_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_scheduler_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_scheduler_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_scheduler_proto = out.File
	file_chalk_server_v1_scheduler_proto_rawDesc = nil
	file_chalk_server_v1_scheduler_proto_goTypes = nil
	file_chalk_server_v1_scheduler_proto_depIdxs = nil
}
