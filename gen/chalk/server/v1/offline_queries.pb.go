// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/server/v1/offline_queries.proto

package serverv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/aggregate/v1"
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OfflineQueryStatus int32

const (
	OfflineQueryStatus_OFFLINE_QUERY_STATUS_UNSPECIFIED OfflineQueryStatus = 0
	OfflineQueryStatus_OFFLINE_QUERY_STATUS_UNKNOWN     OfflineQueryStatus = 1
	OfflineQueryStatus_OFFLINE_QUERY_STATUS_WORKING     OfflineQueryStatus = 2
	OfflineQueryStatus_OFFLINE_QUERY_STATUS_FAILED      OfflineQueryStatus = 3
	OfflineQueryStatus_OFFLINE_QUERY_STATUS_COMPLETED   OfflineQueryStatus = 4
	OfflineQueryStatus_OFFLINE_QUERY_STATUS_CANCELED    OfflineQueryStatus = 5
	OfflineQueryStatus_OFFLINE_QUERY_STATUS_QUEUED      OfflineQueryStatus = 6
)

// Enum value maps for OfflineQueryStatus.
var (
	OfflineQueryStatus_name = map[int32]string{
		0: "OFFLINE_QUERY_STATUS_UNSPECIFIED",
		1: "OFFLINE_QUERY_STATUS_UNKNOWN",
		2: "OFFLINE_QUERY_STATUS_WORKING",
		3: "OFFLINE_QUERY_STATUS_FAILED",
		4: "OFFLINE_QUERY_STATUS_COMPLETED",
		5: "OFFLINE_QUERY_STATUS_CANCELED",
		6: "OFFLINE_QUERY_STATUS_QUEUED",
	}
	OfflineQueryStatus_value = map[string]int32{
		"OFFLINE_QUERY_STATUS_UNSPECIFIED": 0,
		"OFFLINE_QUERY_STATUS_UNKNOWN":     1,
		"OFFLINE_QUERY_STATUS_WORKING":     2,
		"OFFLINE_QUERY_STATUS_FAILED":      3,
		"OFFLINE_QUERY_STATUS_COMPLETED":   4,
		"OFFLINE_QUERY_STATUS_CANCELED":    5,
		"OFFLINE_QUERY_STATUS_QUEUED":      6,
	}
)

func (x OfflineQueryStatus) Enum() *OfflineQueryStatus {
	p := new(OfflineQueryStatus)
	*p = x
	return p
}

func (x OfflineQueryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfflineQueryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_offline_queries_proto_enumTypes[0].Descriptor()
}

func (OfflineQueryStatus) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_offline_queries_proto_enumTypes[0]
}

func (x OfflineQueryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfflineQueryStatus.Descriptor instead.
func (OfflineQueryStatus) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_offline_queries_proto_rawDescGZIP(), []int{0}
}

type OfflineQueryKind int32

const (
	OfflineQueryKind_OFFLINE_QUERY_KIND_UNSPECIFIED          OfflineQueryKind = 0
	OfflineQueryKind_OFFLINE_QUERY_KIND_UNKNOWN              OfflineQueryKind = 1
	OfflineQueryKind_OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY  OfflineQueryKind = 2
	OfflineQueryKind_OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY   OfflineQueryKind = 3
	OfflineQueryKind_OFFLINE_QUERY_KIND_OFFLINE_QUERY        OfflineQueryKind = 4
	OfflineQueryKind_OFFLINE_QUERY_KIND_DATASET_INGESTION    OfflineQueryKind = 5
	OfflineQueryKind_OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL OfflineQueryKind = 6
)

// Enum value maps for OfflineQueryKind.
var (
	OfflineQueryKind_name = map[int32]string{
		0: "OFFLINE_QUERY_KIND_UNSPECIFIED",
		1: "OFFLINE_QUERY_KIND_UNKNOWN",
		2: "OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY",
		3: "OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY",
		4: "OFFLINE_QUERY_KIND_OFFLINE_QUERY",
		5: "OFFLINE_QUERY_KIND_DATASET_INGESTION",
		6: "OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL",
	}
	OfflineQueryKind_value = map[string]int32{
		"OFFLINE_QUERY_KIND_UNSPECIFIED":          0,
		"OFFLINE_QUERY_KIND_UNKNOWN":              1,
		"OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY":  2,
		"OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY":   3,
		"OFFLINE_QUERY_KIND_OFFLINE_QUERY":        4,
		"OFFLINE_QUERY_KIND_DATASET_INGESTION":    5,
		"OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL": 6,
	}
)

func (x OfflineQueryKind) Enum() *OfflineQueryKind {
	p := new(OfflineQueryKind)
	*p = x
	return p
}

func (x OfflineQueryKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfflineQueryKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_offline_queries_proto_enumTypes[1].Descriptor()
}

func (OfflineQueryKind) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_offline_queries_proto_enumTypes[1]
}

func (x OfflineQueryKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfflineQueryKind.Descriptor instead.
func (OfflineQueryKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_offline_queries_proto_rawDescGZIP(), []int{1}
}

type OfflineQueryMeta struct {
	state                  protoimpl.MessageState              `protogen:"open.v1"`
	Id                     int64                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OperationId            string                              `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	EnvironmentId          string                              `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId           string                              `protobuf:"bytes,4,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	CreatedAt              *timestamppb.Timestamp              `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	QueryMeta              *structpb.Value                     `protobuf:"bytes,6,opt,name=query_meta,json=queryMeta,proto3,oneof" json:"query_meta,omitempty"`
	QueryPlanId            *string                             `protobuf:"bytes,7,opt,name=query_plan_id,json=queryPlanId,proto3,oneof" json:"query_plan_id,omitempty"`
	BranchName             *string                             `protobuf:"bytes,8,opt,name=branch_name,json=branchName,proto3,oneof" json:"branch_name,omitempty"`
	DatasetId              *string                             `protobuf:"bytes,9,opt,name=dataset_id,json=datasetId,proto3,oneof" json:"dataset_id,omitempty"`
	DatasetName            *string                             `protobuf:"bytes,10,opt,name=dataset_name,json=datasetName,proto3,oneof" json:"dataset_name,omitempty"`
	HasErrors              *bool                               `protobuf:"varint,11,opt,name=has_errors,json=hasErrors,proto3,oneof" json:"has_errors,omitempty"`
	AgentId                *string                             `protobuf:"bytes,12,opt,name=agent_id,json=agentId,proto3,oneof" json:"agent_id,omitempty"`
	TraceId                *string                             `protobuf:"bytes,13,opt,name=trace_id,json=traceId,proto3,oneof" json:"trace_id,omitempty"`
	CorrelationId          *string                             `protobuf:"bytes,14,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	CompletedAt            *timestamppb.Timestamp              `protobuf:"bytes,15,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	Status                 *OfflineQueryStatus                 `protobuf:"varint,16,opt,name=status,proto3,enum=chalk.server.v1.OfflineQueryStatus,oneof" json:"status,omitempty"`
	HasPlanStages          bool                                `protobuf:"varint,17,opt,name=has_plan_stages,json=hasPlanStages,proto3" json:"has_plan_stages,omitempty"`
	TotalComputers         *int32                              `protobuf:"varint,18,opt,name=total_computers,json=totalComputers,proto3,oneof" json:"total_computers,omitempty"`
	NumCompletedComputers  *int32                              `protobuf:"varint,19,opt,name=num_completed_computers,json=numCompletedComputers,proto3,oneof" json:"num_completed_computers,omitempty"`
	TotalPartitions        *int32                              `protobuf:"varint,20,opt,name=total_partitions,json=totalPartitions,proto3,oneof" json:"total_partitions,omitempty"`
	NumCompletedPartitions *int32                              `protobuf:"varint,21,opt,name=num_completed_partitions,json=numCompletedPartitions,proto3,oneof" json:"num_completed_partitions,omitempty"`
	RecomputeFeatures      *string                             `protobuf:"bytes,22,opt,name=recompute_features,json=recomputeFeatures,proto3,oneof" json:"recompute_features,omitempty"`
	SpineSqlQuery          *string                             `protobuf:"bytes,23,opt,name=spine_sql_query,json=spineSqlQuery,proto3,oneof" json:"spine_sql_query,omitempty"`
	Filters                *structpb.Value                     `protobuf:"bytes,24,opt,name=filters,proto3,oneof" json:"filters,omitempty"`
	PlannerOptions         *structpb.Value                     `protobuf:"bytes,25,opt,name=planner_options,json=plannerOptions,proto3,oneof" json:"planner_options,omitempty"`
	InvokerOptions         *structpb.Value                     `protobuf:"bytes,26,opt,name=invoker_options,json=invokerOptions,proto3,oneof" json:"invoker_options,omitempty"`
	QueryType              *OfflineQueryKind                   `protobuf:"varint,27,opt,name=query_type,json=queryType,proto3,enum=chalk.server.v1.OfflineQueryKind,oneof" json:"query_type,omitempty"`
	Tags                   []string                            `protobuf:"bytes,28,rep,name=tags,proto3" json:"tags,omitempty"`
	RequiredResolverTags   []string                            `protobuf:"bytes,29,rep,name=required_resolver_tags,json=requiredResolverTags,proto3" json:"required_resolver_tags,omitempty"`
	AggregateBackfillId    *string                             `protobuf:"bytes,30,opt,name=aggregate_backfill_id,json=aggregateBackfillId,proto3,oneof" json:"aggregate_backfill_id,omitempty"`
	Output                 *structpb.Value                     `protobuf:"bytes,31,opt,name=output,proto3,oneof" json:"output,omitempty"`
	RequiredOutput         *structpb.Value                     `protobuf:"bytes,32,opt,name=required_output,json=requiredOutput,proto3,oneof" json:"required_output,omitempty"`
	RawBodyFilename        *string                             `protobuf:"bytes,33,opt,name=raw_body_filename,json=rawBodyFilename,proto3,oneof" json:"raw_body_filename,omitempty"`
	DatasetRevision        *DatasetRevisionMeta                `protobuf:"bytes,34,opt,name=dataset_revision,json=datasetRevision,proto3,oneof" json:"dataset_revision,omitempty"`
	TimeSeries             []*v1.PlanAggregateBackfillResponse `protobuf:"bytes,35,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	EvaluationRunId        *string                             `protobuf:"bytes,36,opt,name=evaluation_run_id,json=evaluationRunId,proto3,oneof" json:"evaluation_run_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *OfflineQueryMeta) Reset() {
	*x = OfflineQueryMeta{}
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OfflineQueryMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineQueryMeta) ProtoMessage() {}

func (x *OfflineQueryMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineQueryMeta.ProtoReflect.Descriptor instead.
func (*OfflineQueryMeta) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_offline_queries_proto_rawDescGZIP(), []int{0}
}

func (x *OfflineQueryMeta) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OfflineQueryMeta) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *OfflineQueryMeta) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *OfflineQueryMeta) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *OfflineQueryMeta) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OfflineQueryMeta) GetQueryMeta() *structpb.Value {
	if x != nil {
		return x.QueryMeta
	}
	return nil
}

func (x *OfflineQueryMeta) GetQueryPlanId() string {
	if x != nil && x.QueryPlanId != nil {
		return *x.QueryPlanId
	}
	return ""
}

func (x *OfflineQueryMeta) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

func (x *OfflineQueryMeta) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *OfflineQueryMeta) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *OfflineQueryMeta) GetHasErrors() bool {
	if x != nil && x.HasErrors != nil {
		return *x.HasErrors
	}
	return false
}

func (x *OfflineQueryMeta) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *OfflineQueryMeta) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *OfflineQueryMeta) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *OfflineQueryMeta) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *OfflineQueryMeta) GetStatus() OfflineQueryStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return OfflineQueryStatus_OFFLINE_QUERY_STATUS_UNSPECIFIED
}

func (x *OfflineQueryMeta) GetHasPlanStages() bool {
	if x != nil {
		return x.HasPlanStages
	}
	return false
}

func (x *OfflineQueryMeta) GetTotalComputers() int32 {
	if x != nil && x.TotalComputers != nil {
		return *x.TotalComputers
	}
	return 0
}

func (x *OfflineQueryMeta) GetNumCompletedComputers() int32 {
	if x != nil && x.NumCompletedComputers != nil {
		return *x.NumCompletedComputers
	}
	return 0
}

func (x *OfflineQueryMeta) GetTotalPartitions() int32 {
	if x != nil && x.TotalPartitions != nil {
		return *x.TotalPartitions
	}
	return 0
}

func (x *OfflineQueryMeta) GetNumCompletedPartitions() int32 {
	if x != nil && x.NumCompletedPartitions != nil {
		return *x.NumCompletedPartitions
	}
	return 0
}

func (x *OfflineQueryMeta) GetRecomputeFeatures() string {
	if x != nil && x.RecomputeFeatures != nil {
		return *x.RecomputeFeatures
	}
	return ""
}

func (x *OfflineQueryMeta) GetSpineSqlQuery() string {
	if x != nil && x.SpineSqlQuery != nil {
		return *x.SpineSqlQuery
	}
	return ""
}

func (x *OfflineQueryMeta) GetFilters() *structpb.Value {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *OfflineQueryMeta) GetPlannerOptions() *structpb.Value {
	if x != nil {
		return x.PlannerOptions
	}
	return nil
}

func (x *OfflineQueryMeta) GetInvokerOptions() *structpb.Value {
	if x != nil {
		return x.InvokerOptions
	}
	return nil
}

func (x *OfflineQueryMeta) GetQueryType() OfflineQueryKind {
	if x != nil && x.QueryType != nil {
		return *x.QueryType
	}
	return OfflineQueryKind_OFFLINE_QUERY_KIND_UNSPECIFIED
}

func (x *OfflineQueryMeta) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OfflineQueryMeta) GetRequiredResolverTags() []string {
	if x != nil {
		return x.RequiredResolverTags
	}
	return nil
}

func (x *OfflineQueryMeta) GetAggregateBackfillId() string {
	if x != nil && x.AggregateBackfillId != nil {
		return *x.AggregateBackfillId
	}
	return ""
}

func (x *OfflineQueryMeta) GetOutput() *structpb.Value {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *OfflineQueryMeta) GetRequiredOutput() *structpb.Value {
	if x != nil {
		return x.RequiredOutput
	}
	return nil
}

func (x *OfflineQueryMeta) GetRawBodyFilename() string {
	if x != nil && x.RawBodyFilename != nil {
		return *x.RawBodyFilename
	}
	return ""
}

func (x *OfflineQueryMeta) GetDatasetRevision() *DatasetRevisionMeta {
	if x != nil {
		return x.DatasetRevision
	}
	return nil
}

func (x *OfflineQueryMeta) GetTimeSeries() []*v1.PlanAggregateBackfillResponse {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *OfflineQueryMeta) GetEvaluationRunId() string {
	if x != nil && x.EvaluationRunId != nil {
		return *x.EvaluationRunId
	}
	return ""
}

type ListOfflineQueriesRequest struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Cursor                      *string                `protobuf:"bytes,1,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	Limit                       *int32                 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	StartDate                   *string                `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate                     *string                `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	IdFilter                    *string                `protobuf:"bytes,5,opt,name=id_filter,json=idFilter,proto3,oneof" json:"id_filter,omitempty"`
	AgentIdFilter               *string                `protobuf:"bytes,6,opt,name=agent_id_filter,json=agentIdFilter,proto3,oneof" json:"agent_id_filter,omitempty"`
	BranchFilter                *string                `protobuf:"bytes,7,opt,name=branch_filter,json=branchFilter,proto3,oneof" json:"branch_filter,omitempty"`
	KindFilter                  *OfflineQueryKind      `protobuf:"varint,8,opt,name=kind_filter,json=kindFilter,proto3,enum=chalk.server.v1.OfflineQueryKind,oneof" json:"kind_filter,omitempty"`
	StatusFilter                *OfflineQueryStatus    `protobuf:"varint,9,opt,name=status_filter,json=statusFilter,proto3,enum=chalk.server.v1.OfflineQueryStatus,oneof" json:"status_filter,omitempty"`
	AggregationBackfillIdFilter *string                `protobuf:"bytes,10,opt,name=aggregation_backfill_id_filter,json=aggregationBackfillIdFilter,proto3,oneof" json:"aggregation_backfill_id_filter,omitempty"`
	EvaluationRunIdFilter       *string                `protobuf:"bytes,11,opt,name=evaluation_run_id_filter,json=evaluationRunIdFilter,proto3,oneof" json:"evaluation_run_id_filter,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ListOfflineQueriesRequest) Reset() {
	*x = ListOfflineQueriesRequest{}
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOfflineQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfflineQueriesRequest) ProtoMessage() {}

func (x *ListOfflineQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfflineQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListOfflineQueriesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_offline_queries_proto_rawDescGZIP(), []int{1}
}

func (x *ListOfflineQueriesRequest) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *ListOfflineQueriesRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListOfflineQueriesRequest) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

func (x *ListOfflineQueriesRequest) GetEndDate() string {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return ""
}

func (x *ListOfflineQueriesRequest) GetIdFilter() string {
	if x != nil && x.IdFilter != nil {
		return *x.IdFilter
	}
	return ""
}

func (x *ListOfflineQueriesRequest) GetAgentIdFilter() string {
	if x != nil && x.AgentIdFilter != nil {
		return *x.AgentIdFilter
	}
	return ""
}

func (x *ListOfflineQueriesRequest) GetBranchFilter() string {
	if x != nil && x.BranchFilter != nil {
		return *x.BranchFilter
	}
	return ""
}

func (x *ListOfflineQueriesRequest) GetKindFilter() OfflineQueryKind {
	if x != nil && x.KindFilter != nil {
		return *x.KindFilter
	}
	return OfflineQueryKind_OFFLINE_QUERY_KIND_UNSPECIFIED
}

func (x *ListOfflineQueriesRequest) GetStatusFilter() OfflineQueryStatus {
	if x != nil && x.StatusFilter != nil {
		return *x.StatusFilter
	}
	return OfflineQueryStatus_OFFLINE_QUERY_STATUS_UNSPECIFIED
}

func (x *ListOfflineQueriesRequest) GetAggregationBackfillIdFilter() string {
	if x != nil && x.AggregationBackfillIdFilter != nil {
		return *x.AggregationBackfillIdFilter
	}
	return ""
}

func (x *ListOfflineQueriesRequest) GetEvaluationRunIdFilter() string {
	if x != nil && x.EvaluationRunIdFilter != nil {
		return *x.EvaluationRunIdFilter
	}
	return ""
}

type ListOfflineQueriesResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OfflineQueries []*OfflineQueryMeta    `protobuf:"bytes,1,rep,name=offline_queries,json=offlineQueries,proto3" json:"offline_queries,omitempty"`
	Cursor         *string                `protobuf:"bytes,2,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListOfflineQueriesResponse) Reset() {
	*x = ListOfflineQueriesResponse{}
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOfflineQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfflineQueriesResponse) ProtoMessage() {}

func (x *ListOfflineQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfflineQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListOfflineQueriesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_offline_queries_proto_rawDescGZIP(), []int{2}
}

func (x *ListOfflineQueriesResponse) GetOfflineQueries() []*OfflineQueryMeta {
	if x != nil {
		return x.OfflineQueries
	}
	return nil
}

func (x *ListOfflineQueriesResponse) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

type GetOfflineQueryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OfflineQueryId string                 `protobuf:"bytes,1,opt,name=offline_query_id,json=offlineQueryId,proto3" json:"offline_query_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOfflineQueryRequest) Reset() {
	*x = GetOfflineQueryRequest{}
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOfflineQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfflineQueryRequest) ProtoMessage() {}

func (x *GetOfflineQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfflineQueryRequest.ProtoReflect.Descriptor instead.
func (*GetOfflineQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_offline_queries_proto_rawDescGZIP(), []int{3}
}

func (x *GetOfflineQueryRequest) GetOfflineQueryId() string {
	if x != nil {
		return x.OfflineQueryId
	}
	return ""
}

type GetOfflineQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OfflineQuery  *OfflineQueryMeta      `protobuf:"bytes,1,opt,name=offline_query,json=offlineQuery,proto3" json:"offline_query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOfflineQueryResponse) Reset() {
	*x = GetOfflineQueryResponse{}
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOfflineQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOfflineQueryResponse) ProtoMessage() {}

func (x *GetOfflineQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_offline_queries_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOfflineQueryResponse.ProtoReflect.Descriptor instead.
func (*GetOfflineQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_offline_queries_proto_rawDescGZIP(), []int{4}
}

func (x *GetOfflineQueryResponse) GetOfflineQuery() *OfflineQueryMeta {
	if x != nil {
		return x.OfflineQuery
	}
	return nil
}

var File_chalk_server_v1_offline_queries_proto protoreflect.FileDescriptor

const file_chalk_server_v1_offline_queries_proto_rawDesc = "" +
	"\n" +
	"%chalk/server/v1/offline_queries.proto\x12\x0fchalk.server.v1\x1a chalk/aggregate/v1/service.proto\x1a\x1fchalk/auth/v1/permissions.proto\x1a\x1echalk/server/v1/datasets.proto\x1a)chalk/server/v1/performance_summary.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8d\x12\n" +
	"\x10OfflineQueryMeta\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12!\n" +
	"\foperation_id\x18\x02 \x01(\tR\voperationId\x12%\n" +
	"\x0eenvironment_id\x18\x03 \x01(\tR\renvironmentId\x12#\n" +
	"\rdeployment_id\x18\x04 \x01(\tR\fdeploymentId\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12:\n" +
	"\n" +
	"query_meta\x18\x06 \x01(\v2\x16.google.protobuf.ValueH\x00R\tqueryMeta\x88\x01\x01\x12'\n" +
	"\rquery_plan_id\x18\a \x01(\tH\x01R\vqueryPlanId\x88\x01\x01\x12$\n" +
	"\vbranch_name\x18\b \x01(\tH\x02R\n" +
	"branchName\x88\x01\x01\x12\"\n" +
	"\n" +
	"dataset_id\x18\t \x01(\tH\x03R\tdatasetId\x88\x01\x01\x12&\n" +
	"\fdataset_name\x18\n" +
	" \x01(\tH\x04R\vdatasetName\x88\x01\x01\x12\"\n" +
	"\n" +
	"has_errors\x18\v \x01(\bH\x05R\thasErrors\x88\x01\x01\x12\x1e\n" +
	"\bagent_id\x18\f \x01(\tH\x06R\aagentId\x88\x01\x01\x12\x1e\n" +
	"\btrace_id\x18\r \x01(\tH\aR\atraceId\x88\x01\x01\x12*\n" +
	"\x0ecorrelation_id\x18\x0e \x01(\tH\bR\rcorrelationId\x88\x01\x01\x12=\n" +
	"\fcompleted_at\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\x12@\n" +
	"\x06status\x18\x10 \x01(\x0e2#.chalk.server.v1.OfflineQueryStatusH\tR\x06status\x88\x01\x01\x12&\n" +
	"\x0fhas_plan_stages\x18\x11 \x01(\bR\rhasPlanStages\x12,\n" +
	"\x0ftotal_computers\x18\x12 \x01(\x05H\n" +
	"R\x0etotalComputers\x88\x01\x01\x12;\n" +
	"\x17num_completed_computers\x18\x13 \x01(\x05H\vR\x15numCompletedComputers\x88\x01\x01\x12.\n" +
	"\x10total_partitions\x18\x14 \x01(\x05H\fR\x0ftotalPartitions\x88\x01\x01\x12=\n" +
	"\x18num_completed_partitions\x18\x15 \x01(\x05H\rR\x16numCompletedPartitions\x88\x01\x01\x122\n" +
	"\x12recompute_features\x18\x16 \x01(\tH\x0eR\x11recomputeFeatures\x88\x01\x01\x12+\n" +
	"\x0fspine_sql_query\x18\x17 \x01(\tH\x0fR\rspineSqlQuery\x88\x01\x01\x125\n" +
	"\afilters\x18\x18 \x01(\v2\x16.google.protobuf.ValueH\x10R\afilters\x88\x01\x01\x12D\n" +
	"\x0fplanner_options\x18\x19 \x01(\v2\x16.google.protobuf.ValueH\x11R\x0eplannerOptions\x88\x01\x01\x12D\n" +
	"\x0finvoker_options\x18\x1a \x01(\v2\x16.google.protobuf.ValueH\x12R\x0einvokerOptions\x88\x01\x01\x12E\n" +
	"\n" +
	"query_type\x18\x1b \x01(\x0e2!.chalk.server.v1.OfflineQueryKindH\x13R\tqueryType\x88\x01\x01\x12\x12\n" +
	"\x04tags\x18\x1c \x03(\tR\x04tags\x124\n" +
	"\x16required_resolver_tags\x18\x1d \x03(\tR\x14requiredResolverTags\x127\n" +
	"\x15aggregate_backfill_id\x18\x1e \x01(\tH\x14R\x13aggregateBackfillId\x88\x01\x01\x123\n" +
	"\x06output\x18\x1f \x01(\v2\x16.google.protobuf.ValueH\x15R\x06output\x88\x01\x01\x12D\n" +
	"\x0frequired_output\x18  \x01(\v2\x16.google.protobuf.ValueH\x16R\x0erequiredOutput\x88\x01\x01\x12/\n" +
	"\x11raw_body_filename\x18! \x01(\tH\x17R\x0frawBodyFilename\x88\x01\x01\x12T\n" +
	"\x10dataset_revision\x18\" \x01(\v2$.chalk.server.v1.DatasetRevisionMetaH\x18R\x0fdatasetRevision\x88\x01\x01\x12R\n" +
	"\vtime_series\x18# \x03(\v21.chalk.aggregate.v1.PlanAggregateBackfillResponseR\n" +
	"timeSeries\x12/\n" +
	"\x11evaluation_run_id\x18$ \x01(\tH\x19R\x0fevaluationRunId\x88\x01\x01B\r\n" +
	"\v_query_metaB\x10\n" +
	"\x0e_query_plan_idB\x0e\n" +
	"\f_branch_nameB\r\n" +
	"\v_dataset_idB\x0f\n" +
	"\r_dataset_nameB\r\n" +
	"\v_has_errorsB\v\n" +
	"\t_agent_idB\v\n" +
	"\t_trace_idB\x11\n" +
	"\x0f_correlation_idB\t\n" +
	"\a_statusB\x12\n" +
	"\x10_total_computersB\x1a\n" +
	"\x18_num_completed_computersB\x13\n" +
	"\x11_total_partitionsB\x1b\n" +
	"\x19_num_completed_partitionsB\x15\n" +
	"\x13_recompute_featuresB\x12\n" +
	"\x10_spine_sql_queryB\n" +
	"\n" +
	"\b_filtersB\x12\n" +
	"\x10_planner_optionsB\x12\n" +
	"\x10_invoker_optionsB\r\n" +
	"\v_query_typeB\x18\n" +
	"\x16_aggregate_backfill_idB\t\n" +
	"\a_outputB\x12\n" +
	"\x10_required_outputB\x14\n" +
	"\x12_raw_body_filenameB\x13\n" +
	"\x11_dataset_revisionB\x14\n" +
	"\x12_evaluation_run_id\"\xf7\x05\n" +
	"\x19ListOfflineQueriesRequest\x12\x1b\n" +
	"\x06cursor\x18\x01 \x01(\tH\x00R\x06cursor\x88\x01\x01\x12\x19\n" +
	"\x05limit\x18\x02 \x01(\x05H\x01R\x05limit\x88\x01\x01\x12\"\n" +
	"\n" +
	"start_date\x18\x03 \x01(\tH\x02R\tstartDate\x88\x01\x01\x12\x1e\n" +
	"\bend_date\x18\x04 \x01(\tH\x03R\aendDate\x88\x01\x01\x12 \n" +
	"\tid_filter\x18\x05 \x01(\tH\x04R\bidFilter\x88\x01\x01\x12+\n" +
	"\x0fagent_id_filter\x18\x06 \x01(\tH\x05R\ragentIdFilter\x88\x01\x01\x12(\n" +
	"\rbranch_filter\x18\a \x01(\tH\x06R\fbranchFilter\x88\x01\x01\x12G\n" +
	"\vkind_filter\x18\b \x01(\x0e2!.chalk.server.v1.OfflineQueryKindH\aR\n" +
	"kindFilter\x88\x01\x01\x12M\n" +
	"\rstatus_filter\x18\t \x01(\x0e2#.chalk.server.v1.OfflineQueryStatusH\bR\fstatusFilter\x88\x01\x01\x12H\n" +
	"\x1eaggregation_backfill_id_filter\x18\n" +
	" \x01(\tH\tR\x1baggregationBackfillIdFilter\x88\x01\x01\x12<\n" +
	"\x18evaluation_run_id_filter\x18\v \x01(\tH\n" +
	"R\x15evaluationRunIdFilter\x88\x01\x01B\t\n" +
	"\a_cursorB\b\n" +
	"\x06_limitB\r\n" +
	"\v_start_dateB\v\n" +
	"\t_end_dateB\f\n" +
	"\n" +
	"_id_filterB\x12\n" +
	"\x10_agent_id_filterB\x10\n" +
	"\x0e_branch_filterB\x0e\n" +
	"\f_kind_filterB\x10\n" +
	"\x0e_status_filterB!\n" +
	"\x1f_aggregation_backfill_id_filterB\x1b\n" +
	"\x19_evaluation_run_id_filter\"\x90\x01\n" +
	"\x1aListOfflineQueriesResponse\x12J\n" +
	"\x0foffline_queries\x18\x01 \x03(\v2!.chalk.server.v1.OfflineQueryMetaR\x0eofflineQueries\x12\x1b\n" +
	"\x06cursor\x18\x02 \x01(\tH\x00R\x06cursor\x88\x01\x01B\t\n" +
	"\a_cursor\"B\n" +
	"\x16GetOfflineQueryRequest\x12(\n" +
	"\x10offline_query_id\x18\x01 \x01(\tR\x0eofflineQueryId\"a\n" +
	"\x17GetOfflineQueryResponse\x12F\n" +
	"\roffline_query\x18\x01 \x01(\v2!.chalk.server.v1.OfflineQueryMetaR\fofflineQuery*\x87\x02\n" +
	"\x12OfflineQueryStatus\x12$\n" +
	" OFFLINE_QUERY_STATUS_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cOFFLINE_QUERY_STATUS_UNKNOWN\x10\x01\x12 \n" +
	"\x1cOFFLINE_QUERY_STATUS_WORKING\x10\x02\x12\x1f\n" +
	"\x1bOFFLINE_QUERY_STATUS_FAILED\x10\x03\x12\"\n" +
	"\x1eOFFLINE_QUERY_STATUS_COMPLETED\x10\x04\x12!\n" +
	"\x1dOFFLINE_QUERY_STATUS_CANCELED\x10\x05\x12\x1f\n" +
	"\x1bOFFLINE_QUERY_STATUS_QUEUED\x10\x06*\xaa\x02\n" +
	"\x10OfflineQueryKind\x12\"\n" +
	"\x1eOFFLINE_QUERY_KIND_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aOFFLINE_QUERY_KIND_UNKNOWN\x10\x01\x12*\n" +
	"&OFFLINE_QUERY_KIND_ASYNC_OFFLINE_QUERY\x10\x02\x12)\n" +
	"%OFFLINE_QUERY_KIND_CRON_OFFLINE_QUERY\x10\x03\x12$\n" +
	" OFFLINE_QUERY_KIND_OFFLINE_QUERY\x10\x04\x12(\n" +
	"$OFFLINE_QUERY_KIND_DATASET_INGESTION\x10\x05\x12+\n" +
	"'OFFLINE_QUERY_KIND_AGGREGATION_BACKFILL\x10\x062\xbf\x03\n" +
	"\x1bOfflineQueryMetadataService\x12u\n" +
	"\x12ListOfflineQueries\x12*.chalk.server.v1.ListOfflineQueriesRequest\x1a+.chalk.server.v1.ListOfflineQueriesResponse\"\x06\x80}\v\x90\x02\x01\x12l\n" +
	"\x0fGetOfflineQuery\x12'.chalk.server.v1.GetOfflineQueryRequest\x1a(.chalk.server.v1.GetOfflineQueryResponse\"\x06\x80}\v\x90\x02\x01\x12\xba\x01\n" +
	")ListOfflineQueryShardPerformanceSummaries\x12A.chalk.server.v1.ListOfflineQueryShardPerformanceSummariesRequest\x1aB.chalk.server.v1.ListOfflineQueryShardPerformanceSummariesResponse\"\x06\x80}\v\x90\x02\x01B\xc3\x01\n" +
	"\x13com.chalk.server.v1B\x13OfflineQueriesProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/server/v1;serverv1\xa2\x02\x03CSX\xaa\x02\x0fChalk.Server.V1\xca\x02\x0fChalk\\Server\\V1\xe2\x02\x1bChalk\\Server\\V1\\GPBMetadata\xea\x02\x11Chalk::Server::V1b\x06proto3"

var (
	file_chalk_server_v1_offline_queries_proto_rawDescOnce sync.Once
	file_chalk_server_v1_offline_queries_proto_rawDescData []byte
)

func file_chalk_server_v1_offline_queries_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_offline_queries_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_offline_queries_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_server_v1_offline_queries_proto_rawDesc), len(file_chalk_server_v1_offline_queries_proto_rawDesc)))
	})
	return file_chalk_server_v1_offline_queries_proto_rawDescData
}

var file_chalk_server_v1_offline_queries_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_server_v1_offline_queries_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chalk_server_v1_offline_queries_proto_goTypes = []any{
	(OfflineQueryStatus)(0),                                   // 0: chalk.server.v1.OfflineQueryStatus
	(OfflineQueryKind)(0),                                     // 1: chalk.server.v1.OfflineQueryKind
	(*OfflineQueryMeta)(nil),                                  // 2: chalk.server.v1.OfflineQueryMeta
	(*ListOfflineQueriesRequest)(nil),                         // 3: chalk.server.v1.ListOfflineQueriesRequest
	(*ListOfflineQueriesResponse)(nil),                        // 4: chalk.server.v1.ListOfflineQueriesResponse
	(*GetOfflineQueryRequest)(nil),                            // 5: chalk.server.v1.GetOfflineQueryRequest
	(*GetOfflineQueryResponse)(nil),                           // 6: chalk.server.v1.GetOfflineQueryResponse
	(*timestamppb.Timestamp)(nil),                             // 7: google.protobuf.Timestamp
	(*structpb.Value)(nil),                                    // 8: google.protobuf.Value
	(*DatasetRevisionMeta)(nil),                               // 9: chalk.server.v1.DatasetRevisionMeta
	(*v1.PlanAggregateBackfillResponse)(nil),                  // 10: chalk.aggregate.v1.PlanAggregateBackfillResponse
	(*ListOfflineQueryShardPerformanceSummariesRequest)(nil),  // 11: chalk.server.v1.ListOfflineQueryShardPerformanceSummariesRequest
	(*ListOfflineQueryShardPerformanceSummariesResponse)(nil), // 12: chalk.server.v1.ListOfflineQueryShardPerformanceSummariesResponse
}
var file_chalk_server_v1_offline_queries_proto_depIdxs = []int32{
	7,  // 0: chalk.server.v1.OfflineQueryMeta.created_at:type_name -> google.protobuf.Timestamp
	8,  // 1: chalk.server.v1.OfflineQueryMeta.query_meta:type_name -> google.protobuf.Value
	7,  // 2: chalk.server.v1.OfflineQueryMeta.completed_at:type_name -> google.protobuf.Timestamp
	0,  // 3: chalk.server.v1.OfflineQueryMeta.status:type_name -> chalk.server.v1.OfflineQueryStatus
	8,  // 4: chalk.server.v1.OfflineQueryMeta.filters:type_name -> google.protobuf.Value
	8,  // 5: chalk.server.v1.OfflineQueryMeta.planner_options:type_name -> google.protobuf.Value
	8,  // 6: chalk.server.v1.OfflineQueryMeta.invoker_options:type_name -> google.protobuf.Value
	1,  // 7: chalk.server.v1.OfflineQueryMeta.query_type:type_name -> chalk.server.v1.OfflineQueryKind
	8,  // 8: chalk.server.v1.OfflineQueryMeta.output:type_name -> google.protobuf.Value
	8,  // 9: chalk.server.v1.OfflineQueryMeta.required_output:type_name -> google.protobuf.Value
	9,  // 10: chalk.server.v1.OfflineQueryMeta.dataset_revision:type_name -> chalk.server.v1.DatasetRevisionMeta
	10, // 11: chalk.server.v1.OfflineQueryMeta.time_series:type_name -> chalk.aggregate.v1.PlanAggregateBackfillResponse
	1,  // 12: chalk.server.v1.ListOfflineQueriesRequest.kind_filter:type_name -> chalk.server.v1.OfflineQueryKind
	0,  // 13: chalk.server.v1.ListOfflineQueriesRequest.status_filter:type_name -> chalk.server.v1.OfflineQueryStatus
	2,  // 14: chalk.server.v1.ListOfflineQueriesResponse.offline_queries:type_name -> chalk.server.v1.OfflineQueryMeta
	2,  // 15: chalk.server.v1.GetOfflineQueryResponse.offline_query:type_name -> chalk.server.v1.OfflineQueryMeta
	3,  // 16: chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueries:input_type -> chalk.server.v1.ListOfflineQueriesRequest
	5,  // 17: chalk.server.v1.OfflineQueryMetadataService.GetOfflineQuery:input_type -> chalk.server.v1.GetOfflineQueryRequest
	11, // 18: chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueryShardPerformanceSummaries:input_type -> chalk.server.v1.ListOfflineQueryShardPerformanceSummariesRequest
	4,  // 19: chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueries:output_type -> chalk.server.v1.ListOfflineQueriesResponse
	6,  // 20: chalk.server.v1.OfflineQueryMetadataService.GetOfflineQuery:output_type -> chalk.server.v1.GetOfflineQueryResponse
	12, // 21: chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueryShardPerformanceSummaries:output_type -> chalk.server.v1.ListOfflineQueryShardPerformanceSummariesResponse
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_offline_queries_proto_init() }
func file_chalk_server_v1_offline_queries_proto_init() {
	if File_chalk_server_v1_offline_queries_proto != nil {
		return
	}
	file_chalk_server_v1_datasets_proto_init()
	file_chalk_server_v1_performance_summary_proto_init()
	file_chalk_server_v1_offline_queries_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_offline_queries_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_server_v1_offline_queries_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_server_v1_offline_queries_proto_rawDesc), len(file_chalk_server_v1_offline_queries_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_offline_queries_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_offline_queries_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_offline_queries_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_offline_queries_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_offline_queries_proto = out.File
	file_chalk_server_v1_offline_queries_proto_goTypes = nil
	file_chalk_server_v1_offline_queries_proto_depIdxs = nil
}
