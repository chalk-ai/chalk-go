// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/manager.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/v2/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagerServiceName is the fully-qualified name of the ManagerService service.
	ManagerServiceName = "chalk.server.v1.ManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagerServiceGetClusterEnvironmentsProcedure is the fully-qualified name of the ManagerService's
	// GetClusterEnvironments RPC.
	ManagerServiceGetClusterEnvironmentsProcedure = "/chalk.server.v1.ManagerService/GetClusterEnvironments"
)

// ManagerServiceClient is a client for the chalk.server.v1.ManagerService service.
type ManagerServiceClient interface {
	// If any checks fail, this request fails.
	GetClusterEnvironments(context.Context, *connect.Request[v1.GetClusterEnvironmentsRequest]) (*connect.Response[v1.GetClusterEnvironmentsResponse], error)
}

// NewManagerServiceClient constructs a client for the chalk.server.v1.ManagerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	managerServiceMethods := v1.File_chalk_server_v1_manager_proto.Services().ByName("ManagerService").Methods()
	return &managerServiceClient{
		getClusterEnvironments: connect.NewClient[v1.GetClusterEnvironmentsRequest, v1.GetClusterEnvironmentsResponse](
			httpClient,
			baseURL+ManagerServiceGetClusterEnvironmentsProcedure,
			connect.WithSchema(managerServiceMethods.ByName("GetClusterEnvironments")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// managerServiceClient implements ManagerServiceClient.
type managerServiceClient struct {
	getClusterEnvironments *connect.Client[v1.GetClusterEnvironmentsRequest, v1.GetClusterEnvironmentsResponse]
}

// GetClusterEnvironments calls chalk.server.v1.ManagerService.GetClusterEnvironments.
func (c *managerServiceClient) GetClusterEnvironments(ctx context.Context, req *connect.Request[v1.GetClusterEnvironmentsRequest]) (*connect.Response[v1.GetClusterEnvironmentsResponse], error) {
	return c.getClusterEnvironments.CallUnary(ctx, req)
}

// ManagerServiceHandler is an implementation of the chalk.server.v1.ManagerService service.
type ManagerServiceHandler interface {
	// If any checks fail, this request fails.
	GetClusterEnvironments(context.Context, *connect.Request[v1.GetClusterEnvironmentsRequest]) (*connect.Response[v1.GetClusterEnvironmentsResponse], error)
}

// NewManagerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagerServiceHandler(svc ManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managerServiceMethods := v1.File_chalk_server_v1_manager_proto.Services().ByName("ManagerService").Methods()
	managerServiceGetClusterEnvironmentsHandler := connect.NewUnaryHandler(
		ManagerServiceGetClusterEnvironmentsProcedure,
		svc.GetClusterEnvironments,
		connect.WithSchema(managerServiceMethods.ByName("GetClusterEnvironments")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.ManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagerServiceGetClusterEnvironmentsProcedure:
			managerServiceGetClusterEnvironmentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagerServiceHandler struct{}

func (UnimplementedManagerServiceHandler) GetClusterEnvironments(context.Context, *connect.Request[v1.GetClusterEnvironmentsRequest]) (*connect.Response[v1.GetClusterEnvironmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ManagerService.GetClusterEnvironments is not implemented"))
}
