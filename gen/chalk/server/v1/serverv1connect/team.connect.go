// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/team.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TeamServiceName is the fully-qualified name of the TeamService service.
	TeamServiceName = "chalk.server.v1.TeamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamServiceGetEnvProcedure is the fully-qualified name of the TeamService's GetEnv RPC.
	TeamServiceGetEnvProcedure = "/chalk.server.v1.TeamService/GetEnv"
	// TeamServiceGetEnvironmentsProcedure is the fully-qualified name of the TeamService's
	// GetEnvironments RPC.
	TeamServiceGetEnvironmentsProcedure = "/chalk.server.v1.TeamService/GetEnvironments"
	// TeamServiceGetAgentProcedure is the fully-qualified name of the TeamService's GetAgent RPC.
	TeamServiceGetAgentProcedure = "/chalk.server.v1.TeamService/GetAgent"
	// TeamServiceGetDisplayAgentProcedure is the fully-qualified name of the TeamService's
	// GetDisplayAgent RPC.
	TeamServiceGetDisplayAgentProcedure = "/chalk.server.v1.TeamService/GetDisplayAgent"
	// TeamServiceGetTeamProcedure is the fully-qualified name of the TeamService's GetTeam RPC.
	TeamServiceGetTeamProcedure = "/chalk.server.v1.TeamService/GetTeam"
	// TeamServiceCreateTeamProcedure is the fully-qualified name of the TeamService's CreateTeam RPC.
	TeamServiceCreateTeamProcedure = "/chalk.server.v1.TeamService/CreateTeam"
	// TeamServiceCreateProjectProcedure is the fully-qualified name of the TeamService's CreateProject
	// RPC.
	TeamServiceCreateProjectProcedure = "/chalk.server.v1.TeamService/CreateProject"
	// TeamServiceUpdateProjectProcedure is the fully-qualified name of the TeamService's UpdateProject
	// RPC.
	TeamServiceUpdateProjectProcedure = "/chalk.server.v1.TeamService/UpdateProject"
	// TeamServiceArchiveProjectProcedure is the fully-qualified name of the TeamService's
	// ArchiveProject RPC.
	TeamServiceArchiveProjectProcedure = "/chalk.server.v1.TeamService/ArchiveProject"
	// TeamServiceCreateEnvironmentProcedure is the fully-qualified name of the TeamService's
	// CreateEnvironment RPC.
	TeamServiceCreateEnvironmentProcedure = "/chalk.server.v1.TeamService/CreateEnvironment"
	// TeamServiceUpdateEnvironmentTeamProcedure is the fully-qualified name of the TeamService's
	// UpdateEnvironmentTeam RPC.
	TeamServiceUpdateEnvironmentTeamProcedure = "/chalk.server.v1.TeamService/UpdateEnvironmentTeam"
	// TeamServiceUpdateEnvironmentProcedure is the fully-qualified name of the TeamService's
	// UpdateEnvironment RPC.
	TeamServiceUpdateEnvironmentProcedure = "/chalk.server.v1.TeamService/UpdateEnvironment"
	// TeamServiceGetAvailablePermissionsProcedure is the fully-qualified name of the TeamService's
	// GetAvailablePermissions RPC.
	TeamServiceGetAvailablePermissionsProcedure = "/chalk.server.v1.TeamService/GetAvailablePermissions"
	// TeamServiceCreateServiceTokenProcedure is the fully-qualified name of the TeamService's
	// CreateServiceToken RPC.
	TeamServiceCreateServiceTokenProcedure = "/chalk.server.v1.TeamService/CreateServiceToken"
	// TeamServiceDeleteServiceTokenProcedure is the fully-qualified name of the TeamService's
	// DeleteServiceToken RPC.
	TeamServiceDeleteServiceTokenProcedure = "/chalk.server.v1.TeamService/DeleteServiceToken"
	// TeamServiceListServiceTokensProcedure is the fully-qualified name of the TeamService's
	// ListServiceTokens RPC.
	TeamServiceListServiceTokensProcedure = "/chalk.server.v1.TeamService/ListServiceTokens"
	// TeamServiceUpdateServiceTokenProcedure is the fully-qualified name of the TeamService's
	// UpdateServiceToken RPC.
	TeamServiceUpdateServiceTokenProcedure = "/chalk.server.v1.TeamService/UpdateServiceToken"
	// TeamServiceInviteTeamMemberProcedure is the fully-qualified name of the TeamService's
	// InviteTeamMember RPC.
	TeamServiceInviteTeamMemberProcedure = "/chalk.server.v1.TeamService/InviteTeamMember"
	// TeamServiceExpireTeamInviteProcedure is the fully-qualified name of the TeamService's
	// ExpireTeamInvite RPC.
	TeamServiceExpireTeamInviteProcedure = "/chalk.server.v1.TeamService/ExpireTeamInvite"
	// TeamServiceListTeamInvitesProcedure is the fully-qualified name of the TeamService's
	// ListTeamInvites RPC.
	TeamServiceListTeamInvitesProcedure = "/chalk.server.v1.TeamService/ListTeamInvites"
	// TeamServiceUpsertFeaturePermissionsProcedure is the fully-qualified name of the TeamService's
	// UpsertFeaturePermissions RPC.
	TeamServiceUpsertFeaturePermissionsProcedure = "/chalk.server.v1.TeamService/UpsertFeaturePermissions"
	// TeamServiceUpdateScimGroupSettingsProcedure is the fully-qualified name of the TeamService's
	// UpdateScimGroupSettings RPC.
	TeamServiceUpdateScimGroupSettingsProcedure = "/chalk.server.v1.TeamService/UpdateScimGroupSettings"
	// TeamServiceGetTeamPermissionsProcedure is the fully-qualified name of the TeamService's
	// GetTeamPermissions RPC.
	TeamServiceGetTeamPermissionsProcedure = "/chalk.server.v1.TeamService/GetTeamPermissions"
	// TeamServiceArchiveEnvironmentProcedure is the fully-qualified name of the TeamService's
	// ArchiveEnvironment RPC.
	TeamServiceArchiveEnvironmentProcedure = "/chalk.server.v1.TeamService/ArchiveEnvironment"
	// TeamServiceDeactivateUserProcedure is the fully-qualified name of the TeamService's
	// DeactivateUser RPC.
	TeamServiceDeactivateUserProcedure = "/chalk.server.v1.TeamService/DeactivateUser"
	// TeamServiceReactivateUserProcedure is the fully-qualified name of the TeamService's
	// ReactivateUser RPC.
	TeamServiceReactivateUserProcedure = "/chalk.server.v1.TeamService/ReactivateUser"
)

// TeamServiceClient is a client for the chalk.server.v1.TeamService service.
type TeamServiceClient interface {
	GetEnv(context.Context, *connect.Request[v1.GetEnvRequest]) (*connect.Response[v1.GetEnvResponse], error)
	GetEnvironments(context.Context, *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error)
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	GetDisplayAgent(context.Context, *connect.Request[v1.GetDisplayAgentRequest]) (*connect.Response[v1.GetDisplayAgentResponse], error)
	GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error)
	CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	ArchiveProject(context.Context, *connect.Request[v1.ArchiveProjectRequest]) (*connect.Response[v1.ArchiveProjectResponse], error)
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error)
	// This is a hack around our team permissions
	UpdateEnvironmentTeam(context.Context, *connect.Request[v1.UpdateEnvironmentTeamRequest]) (*connect.Response[v1.UpdateEnvironmentTeamResponse], error)
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error)
	GetAvailablePermissions(context.Context, *connect.Request[v1.GetAvailablePermissionsRequest]) (*connect.Response[v1.GetAvailablePermissionsResponse], error)
	CreateServiceToken(context.Context, *connect.Request[v1.CreateServiceTokenRequest]) (*connect.Response[v1.CreateServiceTokenResponse], error)
	DeleteServiceToken(context.Context, *connect.Request[v1.DeleteServiceTokenRequest]) (*connect.Response[v1.DeleteServiceTokenResponse], error)
	ListServiceTokens(context.Context, *connect.Request[v1.ListServiceTokensRequest]) (*connect.Response[v1.ListServiceTokensResponse], error)
	UpdateServiceToken(context.Context, *connect.Request[v1.UpdateServiceTokenRequest]) (*connect.Response[v1.UpdateServiceTokenResponse], error)
	InviteTeamMember(context.Context, *connect.Request[v1.InviteTeamMemberRequest]) (*connect.Response[v1.InviteTeamMemberResponse], error)
	ExpireTeamInvite(context.Context, *connect.Request[v1.ExpireTeamInviteRequest]) (*connect.Response[v1.ExpireTeamInviteResponse], error)
	ListTeamInvites(context.Context, *connect.Request[v1.ListTeamInvitesRequest]) (*connect.Response[v1.ListTeamInvitesResponse], error)
	UpsertFeaturePermissions(context.Context, *connect.Request[v1.UpsertFeaturePermissionsRequest]) (*connect.Response[v1.UpsertFeaturePermissionsResponse], error)
	UpdateScimGroupSettings(context.Context, *connect.Request[v1.UpdateScimGroupSettingsRequest]) (*connect.Response[v1.UpdateScimGroupSettingsResponse], error)
	GetTeamPermissions(context.Context, *connect.Request[v1.GetTeamPermissionsRequest]) (*connect.Response[v1.GetTeamPermissionsResponse], error)
	ArchiveEnvironment(context.Context, *connect.Request[v1.ArchiveEnvironmentRequest]) (*connect.Response[v1.ArchiveEnvironmentResponse], error)
	DeactivateUser(context.Context, *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error)
	ReactivateUser(context.Context, *connect.Request[v1.ReactivateUserRequest]) (*connect.Response[v1.ReactivateUserResponse], error)
}

// NewTeamServiceClient constructs a client for the chalk.server.v1.TeamService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	teamServiceMethods := v1.File_chalk_server_v1_team_proto.Services().ByName("TeamService").Methods()
	return &teamServiceClient{
		getEnv: connect.NewClient[v1.GetEnvRequest, v1.GetEnvResponse](
			httpClient,
			baseURL+TeamServiceGetEnvProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetEnv")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getEnvironments: connect.NewClient[v1.GetEnvironmentsRequest, v1.GetEnvironmentsResponse](
			httpClient,
			baseURL+TeamServiceGetEnvironmentsProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetEnvironments")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAgent: connect.NewClient[v1.GetAgentRequest, v1.GetAgentResponse](
			httpClient,
			baseURL+TeamServiceGetAgentProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetAgent")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getDisplayAgent: connect.NewClient[v1.GetDisplayAgentRequest, v1.GetDisplayAgentResponse](
			httpClient,
			baseURL+TeamServiceGetDisplayAgentProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetDisplayAgent")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTeam: connect.NewClient[v1.GetTeamRequest, v1.GetTeamResponse](
			httpClient,
			baseURL+TeamServiceGetTeamProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetTeam")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createTeam: connect.NewClient[v1.CreateTeamRequest, v1.CreateTeamResponse](
			httpClient,
			baseURL+TeamServiceCreateTeamProcedure,
			connect.WithSchema(teamServiceMethods.ByName("CreateTeam")),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+TeamServiceCreateProjectProcedure,
			connect.WithSchema(teamServiceMethods.ByName("CreateProject")),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+TeamServiceUpdateProjectProcedure,
			connect.WithSchema(teamServiceMethods.ByName("UpdateProject")),
			connect.WithClientOptions(opts...),
		),
		archiveProject: connect.NewClient[v1.ArchiveProjectRequest, v1.ArchiveProjectResponse](
			httpClient,
			baseURL+TeamServiceArchiveProjectProcedure,
			connect.WithSchema(teamServiceMethods.ByName("ArchiveProject")),
			connect.WithClientOptions(opts...),
		),
		createEnvironment: connect.NewClient[v1.CreateEnvironmentRequest, v1.CreateEnvironmentResponse](
			httpClient,
			baseURL+TeamServiceCreateEnvironmentProcedure,
			connect.WithSchema(teamServiceMethods.ByName("CreateEnvironment")),
			connect.WithClientOptions(opts...),
		),
		updateEnvironmentTeam: connect.NewClient[v1.UpdateEnvironmentTeamRequest, v1.UpdateEnvironmentTeamResponse](
			httpClient,
			baseURL+TeamServiceUpdateEnvironmentTeamProcedure,
			connect.WithSchema(teamServiceMethods.ByName("UpdateEnvironmentTeam")),
			connect.WithClientOptions(opts...),
		),
		updateEnvironment: connect.NewClient[v1.UpdateEnvironmentRequest, v1.UpdateEnvironmentResponse](
			httpClient,
			baseURL+TeamServiceUpdateEnvironmentProcedure,
			connect.WithSchema(teamServiceMethods.ByName("UpdateEnvironment")),
			connect.WithClientOptions(opts...),
		),
		getAvailablePermissions: connect.NewClient[v1.GetAvailablePermissionsRequest, v1.GetAvailablePermissionsResponse](
			httpClient,
			baseURL+TeamServiceGetAvailablePermissionsProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetAvailablePermissions")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createServiceToken: connect.NewClient[v1.CreateServiceTokenRequest, v1.CreateServiceTokenResponse](
			httpClient,
			baseURL+TeamServiceCreateServiceTokenProcedure,
			connect.WithSchema(teamServiceMethods.ByName("CreateServiceToken")),
			connect.WithClientOptions(opts...),
		),
		deleteServiceToken: connect.NewClient[v1.DeleteServiceTokenRequest, v1.DeleteServiceTokenResponse](
			httpClient,
			baseURL+TeamServiceDeleteServiceTokenProcedure,
			connect.WithSchema(teamServiceMethods.ByName("DeleteServiceToken")),
			connect.WithClientOptions(opts...),
		),
		listServiceTokens: connect.NewClient[v1.ListServiceTokensRequest, v1.ListServiceTokensResponse](
			httpClient,
			baseURL+TeamServiceListServiceTokensProcedure,
			connect.WithSchema(teamServiceMethods.ByName("ListServiceTokens")),
			connect.WithClientOptions(opts...),
		),
		updateServiceToken: connect.NewClient[v1.UpdateServiceTokenRequest, v1.UpdateServiceTokenResponse](
			httpClient,
			baseURL+TeamServiceUpdateServiceTokenProcedure,
			connect.WithSchema(teamServiceMethods.ByName("UpdateServiceToken")),
			connect.WithClientOptions(opts...),
		),
		inviteTeamMember: connect.NewClient[v1.InviteTeamMemberRequest, v1.InviteTeamMemberResponse](
			httpClient,
			baseURL+TeamServiceInviteTeamMemberProcedure,
			connect.WithSchema(teamServiceMethods.ByName("InviteTeamMember")),
			connect.WithClientOptions(opts...),
		),
		expireTeamInvite: connect.NewClient[v1.ExpireTeamInviteRequest, v1.ExpireTeamInviteResponse](
			httpClient,
			baseURL+TeamServiceExpireTeamInviteProcedure,
			connect.WithSchema(teamServiceMethods.ByName("ExpireTeamInvite")),
			connect.WithClientOptions(opts...),
		),
		listTeamInvites: connect.NewClient[v1.ListTeamInvitesRequest, v1.ListTeamInvitesResponse](
			httpClient,
			baseURL+TeamServiceListTeamInvitesProcedure,
			connect.WithSchema(teamServiceMethods.ByName("ListTeamInvites")),
			connect.WithClientOptions(opts...),
		),
		upsertFeaturePermissions: connect.NewClient[v1.UpsertFeaturePermissionsRequest, v1.UpsertFeaturePermissionsResponse](
			httpClient,
			baseURL+TeamServiceUpsertFeaturePermissionsProcedure,
			connect.WithSchema(teamServiceMethods.ByName("UpsertFeaturePermissions")),
			connect.WithClientOptions(opts...),
		),
		updateScimGroupSettings: connect.NewClient[v1.UpdateScimGroupSettingsRequest, v1.UpdateScimGroupSettingsResponse](
			httpClient,
			baseURL+TeamServiceUpdateScimGroupSettingsProcedure,
			connect.WithSchema(teamServiceMethods.ByName("UpdateScimGroupSettings")),
			connect.WithClientOptions(opts...),
		),
		getTeamPermissions: connect.NewClient[v1.GetTeamPermissionsRequest, v1.GetTeamPermissionsResponse](
			httpClient,
			baseURL+TeamServiceGetTeamPermissionsProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetTeamPermissions")),
			connect.WithClientOptions(opts...),
		),
		archiveEnvironment: connect.NewClient[v1.ArchiveEnvironmentRequest, v1.ArchiveEnvironmentResponse](
			httpClient,
			baseURL+TeamServiceArchiveEnvironmentProcedure,
			connect.WithSchema(teamServiceMethods.ByName("ArchiveEnvironment")),
			connect.WithClientOptions(opts...),
		),
		deactivateUser: connect.NewClient[v1.DeactivateUserRequest, v1.DeactivateUserResponse](
			httpClient,
			baseURL+TeamServiceDeactivateUserProcedure,
			connect.WithSchema(teamServiceMethods.ByName("DeactivateUser")),
			connect.WithClientOptions(opts...),
		),
		reactivateUser: connect.NewClient[v1.ReactivateUserRequest, v1.ReactivateUserResponse](
			httpClient,
			baseURL+TeamServiceReactivateUserProcedure,
			connect.WithSchema(teamServiceMethods.ByName("ReactivateUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// teamServiceClient implements TeamServiceClient.
type teamServiceClient struct {
	getEnv                   *connect.Client[v1.GetEnvRequest, v1.GetEnvResponse]
	getEnvironments          *connect.Client[v1.GetEnvironmentsRequest, v1.GetEnvironmentsResponse]
	getAgent                 *connect.Client[v1.GetAgentRequest, v1.GetAgentResponse]
	getDisplayAgent          *connect.Client[v1.GetDisplayAgentRequest, v1.GetDisplayAgentResponse]
	getTeam                  *connect.Client[v1.GetTeamRequest, v1.GetTeamResponse]
	createTeam               *connect.Client[v1.CreateTeamRequest, v1.CreateTeamResponse]
	createProject            *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	updateProject            *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	archiveProject           *connect.Client[v1.ArchiveProjectRequest, v1.ArchiveProjectResponse]
	createEnvironment        *connect.Client[v1.CreateEnvironmentRequest, v1.CreateEnvironmentResponse]
	updateEnvironmentTeam    *connect.Client[v1.UpdateEnvironmentTeamRequest, v1.UpdateEnvironmentTeamResponse]
	updateEnvironment        *connect.Client[v1.UpdateEnvironmentRequest, v1.UpdateEnvironmentResponse]
	getAvailablePermissions  *connect.Client[v1.GetAvailablePermissionsRequest, v1.GetAvailablePermissionsResponse]
	createServiceToken       *connect.Client[v1.CreateServiceTokenRequest, v1.CreateServiceTokenResponse]
	deleteServiceToken       *connect.Client[v1.DeleteServiceTokenRequest, v1.DeleteServiceTokenResponse]
	listServiceTokens        *connect.Client[v1.ListServiceTokensRequest, v1.ListServiceTokensResponse]
	updateServiceToken       *connect.Client[v1.UpdateServiceTokenRequest, v1.UpdateServiceTokenResponse]
	inviteTeamMember         *connect.Client[v1.InviteTeamMemberRequest, v1.InviteTeamMemberResponse]
	expireTeamInvite         *connect.Client[v1.ExpireTeamInviteRequest, v1.ExpireTeamInviteResponse]
	listTeamInvites          *connect.Client[v1.ListTeamInvitesRequest, v1.ListTeamInvitesResponse]
	upsertFeaturePermissions *connect.Client[v1.UpsertFeaturePermissionsRequest, v1.UpsertFeaturePermissionsResponse]
	updateScimGroupSettings  *connect.Client[v1.UpdateScimGroupSettingsRequest, v1.UpdateScimGroupSettingsResponse]
	getTeamPermissions       *connect.Client[v1.GetTeamPermissionsRequest, v1.GetTeamPermissionsResponse]
	archiveEnvironment       *connect.Client[v1.ArchiveEnvironmentRequest, v1.ArchiveEnvironmentResponse]
	deactivateUser           *connect.Client[v1.DeactivateUserRequest, v1.DeactivateUserResponse]
	reactivateUser           *connect.Client[v1.ReactivateUserRequest, v1.ReactivateUserResponse]
}

// GetEnv calls chalk.server.v1.TeamService.GetEnv.
func (c *teamServiceClient) GetEnv(ctx context.Context, req *connect.Request[v1.GetEnvRequest]) (*connect.Response[v1.GetEnvResponse], error) {
	return c.getEnv.CallUnary(ctx, req)
}

// GetEnvironments calls chalk.server.v1.TeamService.GetEnvironments.
func (c *teamServiceClient) GetEnvironments(ctx context.Context, req *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error) {
	return c.getEnvironments.CallUnary(ctx, req)
}

// GetAgent calls chalk.server.v1.TeamService.GetAgent.
func (c *teamServiceClient) GetAgent(ctx context.Context, req *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// GetDisplayAgent calls chalk.server.v1.TeamService.GetDisplayAgent.
func (c *teamServiceClient) GetDisplayAgent(ctx context.Context, req *connect.Request[v1.GetDisplayAgentRequest]) (*connect.Response[v1.GetDisplayAgentResponse], error) {
	return c.getDisplayAgent.CallUnary(ctx, req)
}

// GetTeam calls chalk.server.v1.TeamService.GetTeam.
func (c *teamServiceClient) GetTeam(ctx context.Context, req *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error) {
	return c.getTeam.CallUnary(ctx, req)
}

// CreateTeam calls chalk.server.v1.TeamService.CreateTeam.
func (c *teamServiceClient) CreateTeam(ctx context.Context, req *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error) {
	return c.createTeam.CallUnary(ctx, req)
}

// CreateProject calls chalk.server.v1.TeamService.CreateProject.
func (c *teamServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls chalk.server.v1.TeamService.UpdateProject.
func (c *teamServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// ArchiveProject calls chalk.server.v1.TeamService.ArchiveProject.
func (c *teamServiceClient) ArchiveProject(ctx context.Context, req *connect.Request[v1.ArchiveProjectRequest]) (*connect.Response[v1.ArchiveProjectResponse], error) {
	return c.archiveProject.CallUnary(ctx, req)
}

// CreateEnvironment calls chalk.server.v1.TeamService.CreateEnvironment.
func (c *teamServiceClient) CreateEnvironment(ctx context.Context, req *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	return c.createEnvironment.CallUnary(ctx, req)
}

// UpdateEnvironmentTeam calls chalk.server.v1.TeamService.UpdateEnvironmentTeam.
func (c *teamServiceClient) UpdateEnvironmentTeam(ctx context.Context, req *connect.Request[v1.UpdateEnvironmentTeamRequest]) (*connect.Response[v1.UpdateEnvironmentTeamResponse], error) {
	return c.updateEnvironmentTeam.CallUnary(ctx, req)
}

// UpdateEnvironment calls chalk.server.v1.TeamService.UpdateEnvironment.
func (c *teamServiceClient) UpdateEnvironment(ctx context.Context, req *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	return c.updateEnvironment.CallUnary(ctx, req)
}

// GetAvailablePermissions calls chalk.server.v1.TeamService.GetAvailablePermissions.
func (c *teamServiceClient) GetAvailablePermissions(ctx context.Context, req *connect.Request[v1.GetAvailablePermissionsRequest]) (*connect.Response[v1.GetAvailablePermissionsResponse], error) {
	return c.getAvailablePermissions.CallUnary(ctx, req)
}

// CreateServiceToken calls chalk.server.v1.TeamService.CreateServiceToken.
func (c *teamServiceClient) CreateServiceToken(ctx context.Context, req *connect.Request[v1.CreateServiceTokenRequest]) (*connect.Response[v1.CreateServiceTokenResponse], error) {
	return c.createServiceToken.CallUnary(ctx, req)
}

// DeleteServiceToken calls chalk.server.v1.TeamService.DeleteServiceToken.
func (c *teamServiceClient) DeleteServiceToken(ctx context.Context, req *connect.Request[v1.DeleteServiceTokenRequest]) (*connect.Response[v1.DeleteServiceTokenResponse], error) {
	return c.deleteServiceToken.CallUnary(ctx, req)
}

// ListServiceTokens calls chalk.server.v1.TeamService.ListServiceTokens.
func (c *teamServiceClient) ListServiceTokens(ctx context.Context, req *connect.Request[v1.ListServiceTokensRequest]) (*connect.Response[v1.ListServiceTokensResponse], error) {
	return c.listServiceTokens.CallUnary(ctx, req)
}

// UpdateServiceToken calls chalk.server.v1.TeamService.UpdateServiceToken.
func (c *teamServiceClient) UpdateServiceToken(ctx context.Context, req *connect.Request[v1.UpdateServiceTokenRequest]) (*connect.Response[v1.UpdateServiceTokenResponse], error) {
	return c.updateServiceToken.CallUnary(ctx, req)
}

// InviteTeamMember calls chalk.server.v1.TeamService.InviteTeamMember.
func (c *teamServiceClient) InviteTeamMember(ctx context.Context, req *connect.Request[v1.InviteTeamMemberRequest]) (*connect.Response[v1.InviteTeamMemberResponse], error) {
	return c.inviteTeamMember.CallUnary(ctx, req)
}

// ExpireTeamInvite calls chalk.server.v1.TeamService.ExpireTeamInvite.
func (c *teamServiceClient) ExpireTeamInvite(ctx context.Context, req *connect.Request[v1.ExpireTeamInviteRequest]) (*connect.Response[v1.ExpireTeamInviteResponse], error) {
	return c.expireTeamInvite.CallUnary(ctx, req)
}

// ListTeamInvites calls chalk.server.v1.TeamService.ListTeamInvites.
func (c *teamServiceClient) ListTeamInvites(ctx context.Context, req *connect.Request[v1.ListTeamInvitesRequest]) (*connect.Response[v1.ListTeamInvitesResponse], error) {
	return c.listTeamInvites.CallUnary(ctx, req)
}

// UpsertFeaturePermissions calls chalk.server.v1.TeamService.UpsertFeaturePermissions.
func (c *teamServiceClient) UpsertFeaturePermissions(ctx context.Context, req *connect.Request[v1.UpsertFeaturePermissionsRequest]) (*connect.Response[v1.UpsertFeaturePermissionsResponse], error) {
	return c.upsertFeaturePermissions.CallUnary(ctx, req)
}

// UpdateScimGroupSettings calls chalk.server.v1.TeamService.UpdateScimGroupSettings.
func (c *teamServiceClient) UpdateScimGroupSettings(ctx context.Context, req *connect.Request[v1.UpdateScimGroupSettingsRequest]) (*connect.Response[v1.UpdateScimGroupSettingsResponse], error) {
	return c.updateScimGroupSettings.CallUnary(ctx, req)
}

// GetTeamPermissions calls chalk.server.v1.TeamService.GetTeamPermissions.
func (c *teamServiceClient) GetTeamPermissions(ctx context.Context, req *connect.Request[v1.GetTeamPermissionsRequest]) (*connect.Response[v1.GetTeamPermissionsResponse], error) {
	return c.getTeamPermissions.CallUnary(ctx, req)
}

// ArchiveEnvironment calls chalk.server.v1.TeamService.ArchiveEnvironment.
func (c *teamServiceClient) ArchiveEnvironment(ctx context.Context, req *connect.Request[v1.ArchiveEnvironmentRequest]) (*connect.Response[v1.ArchiveEnvironmentResponse], error) {
	return c.archiveEnvironment.CallUnary(ctx, req)
}

// DeactivateUser calls chalk.server.v1.TeamService.DeactivateUser.
func (c *teamServiceClient) DeactivateUser(ctx context.Context, req *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error) {
	return c.deactivateUser.CallUnary(ctx, req)
}

// ReactivateUser calls chalk.server.v1.TeamService.ReactivateUser.
func (c *teamServiceClient) ReactivateUser(ctx context.Context, req *connect.Request[v1.ReactivateUserRequest]) (*connect.Response[v1.ReactivateUserResponse], error) {
	return c.reactivateUser.CallUnary(ctx, req)
}

// TeamServiceHandler is an implementation of the chalk.server.v1.TeamService service.
type TeamServiceHandler interface {
	GetEnv(context.Context, *connect.Request[v1.GetEnvRequest]) (*connect.Response[v1.GetEnvResponse], error)
	GetEnvironments(context.Context, *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error)
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	GetDisplayAgent(context.Context, *connect.Request[v1.GetDisplayAgentRequest]) (*connect.Response[v1.GetDisplayAgentResponse], error)
	GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error)
	CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	ArchiveProject(context.Context, *connect.Request[v1.ArchiveProjectRequest]) (*connect.Response[v1.ArchiveProjectResponse], error)
	CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error)
	// This is a hack around our team permissions
	UpdateEnvironmentTeam(context.Context, *connect.Request[v1.UpdateEnvironmentTeamRequest]) (*connect.Response[v1.UpdateEnvironmentTeamResponse], error)
	UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error)
	GetAvailablePermissions(context.Context, *connect.Request[v1.GetAvailablePermissionsRequest]) (*connect.Response[v1.GetAvailablePermissionsResponse], error)
	CreateServiceToken(context.Context, *connect.Request[v1.CreateServiceTokenRequest]) (*connect.Response[v1.CreateServiceTokenResponse], error)
	DeleteServiceToken(context.Context, *connect.Request[v1.DeleteServiceTokenRequest]) (*connect.Response[v1.DeleteServiceTokenResponse], error)
	ListServiceTokens(context.Context, *connect.Request[v1.ListServiceTokensRequest]) (*connect.Response[v1.ListServiceTokensResponse], error)
	UpdateServiceToken(context.Context, *connect.Request[v1.UpdateServiceTokenRequest]) (*connect.Response[v1.UpdateServiceTokenResponse], error)
	InviteTeamMember(context.Context, *connect.Request[v1.InviteTeamMemberRequest]) (*connect.Response[v1.InviteTeamMemberResponse], error)
	ExpireTeamInvite(context.Context, *connect.Request[v1.ExpireTeamInviteRequest]) (*connect.Response[v1.ExpireTeamInviteResponse], error)
	ListTeamInvites(context.Context, *connect.Request[v1.ListTeamInvitesRequest]) (*connect.Response[v1.ListTeamInvitesResponse], error)
	UpsertFeaturePermissions(context.Context, *connect.Request[v1.UpsertFeaturePermissionsRequest]) (*connect.Response[v1.UpsertFeaturePermissionsResponse], error)
	UpdateScimGroupSettings(context.Context, *connect.Request[v1.UpdateScimGroupSettingsRequest]) (*connect.Response[v1.UpdateScimGroupSettingsResponse], error)
	GetTeamPermissions(context.Context, *connect.Request[v1.GetTeamPermissionsRequest]) (*connect.Response[v1.GetTeamPermissionsResponse], error)
	ArchiveEnvironment(context.Context, *connect.Request[v1.ArchiveEnvironmentRequest]) (*connect.Response[v1.ArchiveEnvironmentResponse], error)
	DeactivateUser(context.Context, *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error)
	ReactivateUser(context.Context, *connect.Request[v1.ReactivateUserRequest]) (*connect.Response[v1.ReactivateUserResponse], error)
}

// NewTeamServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamServiceHandler(svc TeamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teamServiceMethods := v1.File_chalk_server_v1_team_proto.Services().ByName("TeamService").Methods()
	teamServiceGetEnvHandler := connect.NewUnaryHandler(
		TeamServiceGetEnvProcedure,
		svc.GetEnv,
		connect.WithSchema(teamServiceMethods.ByName("GetEnv")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetEnvironmentsHandler := connect.NewUnaryHandler(
		TeamServiceGetEnvironmentsProcedure,
		svc.GetEnvironments,
		connect.WithSchema(teamServiceMethods.ByName("GetEnvironments")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetAgentHandler := connect.NewUnaryHandler(
		TeamServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(teamServiceMethods.ByName("GetAgent")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetDisplayAgentHandler := connect.NewUnaryHandler(
		TeamServiceGetDisplayAgentProcedure,
		svc.GetDisplayAgent,
		connect.WithSchema(teamServiceMethods.ByName("GetDisplayAgent")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetTeamHandler := connect.NewUnaryHandler(
		TeamServiceGetTeamProcedure,
		svc.GetTeam,
		connect.WithSchema(teamServiceMethods.ByName("GetTeam")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceCreateTeamHandler := connect.NewUnaryHandler(
		TeamServiceCreateTeamProcedure,
		svc.CreateTeam,
		connect.WithSchema(teamServiceMethods.ByName("CreateTeam")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceCreateProjectHandler := connect.NewUnaryHandler(
		TeamServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(teamServiceMethods.ByName("CreateProject")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceUpdateProjectHandler := connect.NewUnaryHandler(
		TeamServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(teamServiceMethods.ByName("UpdateProject")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceArchiveProjectHandler := connect.NewUnaryHandler(
		TeamServiceArchiveProjectProcedure,
		svc.ArchiveProject,
		connect.WithSchema(teamServiceMethods.ByName("ArchiveProject")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceCreateEnvironmentHandler := connect.NewUnaryHandler(
		TeamServiceCreateEnvironmentProcedure,
		svc.CreateEnvironment,
		connect.WithSchema(teamServiceMethods.ByName("CreateEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceUpdateEnvironmentTeamHandler := connect.NewUnaryHandler(
		TeamServiceUpdateEnvironmentTeamProcedure,
		svc.UpdateEnvironmentTeam,
		connect.WithSchema(teamServiceMethods.ByName("UpdateEnvironmentTeam")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceUpdateEnvironmentHandler := connect.NewUnaryHandler(
		TeamServiceUpdateEnvironmentProcedure,
		svc.UpdateEnvironment,
		connect.WithSchema(teamServiceMethods.ByName("UpdateEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetAvailablePermissionsHandler := connect.NewUnaryHandler(
		TeamServiceGetAvailablePermissionsProcedure,
		svc.GetAvailablePermissions,
		connect.WithSchema(teamServiceMethods.ByName("GetAvailablePermissions")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceCreateServiceTokenHandler := connect.NewUnaryHandler(
		TeamServiceCreateServiceTokenProcedure,
		svc.CreateServiceToken,
		connect.WithSchema(teamServiceMethods.ByName("CreateServiceToken")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceDeleteServiceTokenHandler := connect.NewUnaryHandler(
		TeamServiceDeleteServiceTokenProcedure,
		svc.DeleteServiceToken,
		connect.WithSchema(teamServiceMethods.ByName("DeleteServiceToken")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceListServiceTokensHandler := connect.NewUnaryHandler(
		TeamServiceListServiceTokensProcedure,
		svc.ListServiceTokens,
		connect.WithSchema(teamServiceMethods.ByName("ListServiceTokens")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceUpdateServiceTokenHandler := connect.NewUnaryHandler(
		TeamServiceUpdateServiceTokenProcedure,
		svc.UpdateServiceToken,
		connect.WithSchema(teamServiceMethods.ByName("UpdateServiceToken")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceInviteTeamMemberHandler := connect.NewUnaryHandler(
		TeamServiceInviteTeamMemberProcedure,
		svc.InviteTeamMember,
		connect.WithSchema(teamServiceMethods.ByName("InviteTeamMember")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceExpireTeamInviteHandler := connect.NewUnaryHandler(
		TeamServiceExpireTeamInviteProcedure,
		svc.ExpireTeamInvite,
		connect.WithSchema(teamServiceMethods.ByName("ExpireTeamInvite")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceListTeamInvitesHandler := connect.NewUnaryHandler(
		TeamServiceListTeamInvitesProcedure,
		svc.ListTeamInvites,
		connect.WithSchema(teamServiceMethods.ByName("ListTeamInvites")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceUpsertFeaturePermissionsHandler := connect.NewUnaryHandler(
		TeamServiceUpsertFeaturePermissionsProcedure,
		svc.UpsertFeaturePermissions,
		connect.WithSchema(teamServiceMethods.ByName("UpsertFeaturePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceUpdateScimGroupSettingsHandler := connect.NewUnaryHandler(
		TeamServiceUpdateScimGroupSettingsProcedure,
		svc.UpdateScimGroupSettings,
		connect.WithSchema(teamServiceMethods.ByName("UpdateScimGroupSettings")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetTeamPermissionsHandler := connect.NewUnaryHandler(
		TeamServiceGetTeamPermissionsProcedure,
		svc.GetTeamPermissions,
		connect.WithSchema(teamServiceMethods.ByName("GetTeamPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceArchiveEnvironmentHandler := connect.NewUnaryHandler(
		TeamServiceArchiveEnvironmentProcedure,
		svc.ArchiveEnvironment,
		connect.WithSchema(teamServiceMethods.ByName("ArchiveEnvironment")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceDeactivateUserHandler := connect.NewUnaryHandler(
		TeamServiceDeactivateUserProcedure,
		svc.DeactivateUser,
		connect.WithSchema(teamServiceMethods.ByName("DeactivateUser")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceReactivateUserHandler := connect.NewUnaryHandler(
		TeamServiceReactivateUserProcedure,
		svc.ReactivateUser,
		connect.WithSchema(teamServiceMethods.ByName("ReactivateUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.TeamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamServiceGetEnvProcedure:
			teamServiceGetEnvHandler.ServeHTTP(w, r)
		case TeamServiceGetEnvironmentsProcedure:
			teamServiceGetEnvironmentsHandler.ServeHTTP(w, r)
		case TeamServiceGetAgentProcedure:
			teamServiceGetAgentHandler.ServeHTTP(w, r)
		case TeamServiceGetDisplayAgentProcedure:
			teamServiceGetDisplayAgentHandler.ServeHTTP(w, r)
		case TeamServiceGetTeamProcedure:
			teamServiceGetTeamHandler.ServeHTTP(w, r)
		case TeamServiceCreateTeamProcedure:
			teamServiceCreateTeamHandler.ServeHTTP(w, r)
		case TeamServiceCreateProjectProcedure:
			teamServiceCreateProjectHandler.ServeHTTP(w, r)
		case TeamServiceUpdateProjectProcedure:
			teamServiceUpdateProjectHandler.ServeHTTP(w, r)
		case TeamServiceArchiveProjectProcedure:
			teamServiceArchiveProjectHandler.ServeHTTP(w, r)
		case TeamServiceCreateEnvironmentProcedure:
			teamServiceCreateEnvironmentHandler.ServeHTTP(w, r)
		case TeamServiceUpdateEnvironmentTeamProcedure:
			teamServiceUpdateEnvironmentTeamHandler.ServeHTTP(w, r)
		case TeamServiceUpdateEnvironmentProcedure:
			teamServiceUpdateEnvironmentHandler.ServeHTTP(w, r)
		case TeamServiceGetAvailablePermissionsProcedure:
			teamServiceGetAvailablePermissionsHandler.ServeHTTP(w, r)
		case TeamServiceCreateServiceTokenProcedure:
			teamServiceCreateServiceTokenHandler.ServeHTTP(w, r)
		case TeamServiceDeleteServiceTokenProcedure:
			teamServiceDeleteServiceTokenHandler.ServeHTTP(w, r)
		case TeamServiceListServiceTokensProcedure:
			teamServiceListServiceTokensHandler.ServeHTTP(w, r)
		case TeamServiceUpdateServiceTokenProcedure:
			teamServiceUpdateServiceTokenHandler.ServeHTTP(w, r)
		case TeamServiceInviteTeamMemberProcedure:
			teamServiceInviteTeamMemberHandler.ServeHTTP(w, r)
		case TeamServiceExpireTeamInviteProcedure:
			teamServiceExpireTeamInviteHandler.ServeHTTP(w, r)
		case TeamServiceListTeamInvitesProcedure:
			teamServiceListTeamInvitesHandler.ServeHTTP(w, r)
		case TeamServiceUpsertFeaturePermissionsProcedure:
			teamServiceUpsertFeaturePermissionsHandler.ServeHTTP(w, r)
		case TeamServiceUpdateScimGroupSettingsProcedure:
			teamServiceUpdateScimGroupSettingsHandler.ServeHTTP(w, r)
		case TeamServiceGetTeamPermissionsProcedure:
			teamServiceGetTeamPermissionsHandler.ServeHTTP(w, r)
		case TeamServiceArchiveEnvironmentProcedure:
			teamServiceArchiveEnvironmentHandler.ServeHTTP(w, r)
		case TeamServiceDeactivateUserProcedure:
			teamServiceDeactivateUserHandler.ServeHTTP(w, r)
		case TeamServiceReactivateUserProcedure:
			teamServiceReactivateUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamServiceHandler struct{}

func (UnimplementedTeamServiceHandler) GetEnv(context.Context, *connect.Request[v1.GetEnvRequest]) (*connect.Response[v1.GetEnvResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.GetEnv is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetEnvironments(context.Context, *connect.Request[v1.GetEnvironmentsRequest]) (*connect.Response[v1.GetEnvironmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.GetEnvironments is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.GetAgent is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetDisplayAgent(context.Context, *connect.Request[v1.GetDisplayAgentRequest]) (*connect.Response[v1.GetDisplayAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.GetDisplayAgent is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.GetTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.CreateTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.CreateProject is not implemented"))
}

func (UnimplementedTeamServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.UpdateProject is not implemented"))
}

func (UnimplementedTeamServiceHandler) ArchiveProject(context.Context, *connect.Request[v1.ArchiveProjectRequest]) (*connect.Response[v1.ArchiveProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.ArchiveProject is not implemented"))
}

func (UnimplementedTeamServiceHandler) CreateEnvironment(context.Context, *connect.Request[v1.CreateEnvironmentRequest]) (*connect.Response[v1.CreateEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.CreateEnvironment is not implemented"))
}

func (UnimplementedTeamServiceHandler) UpdateEnvironmentTeam(context.Context, *connect.Request[v1.UpdateEnvironmentTeamRequest]) (*connect.Response[v1.UpdateEnvironmentTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.UpdateEnvironmentTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) UpdateEnvironment(context.Context, *connect.Request[v1.UpdateEnvironmentRequest]) (*connect.Response[v1.UpdateEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.UpdateEnvironment is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetAvailablePermissions(context.Context, *connect.Request[v1.GetAvailablePermissionsRequest]) (*connect.Response[v1.GetAvailablePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.GetAvailablePermissions is not implemented"))
}

func (UnimplementedTeamServiceHandler) CreateServiceToken(context.Context, *connect.Request[v1.CreateServiceTokenRequest]) (*connect.Response[v1.CreateServiceTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.CreateServiceToken is not implemented"))
}

func (UnimplementedTeamServiceHandler) DeleteServiceToken(context.Context, *connect.Request[v1.DeleteServiceTokenRequest]) (*connect.Response[v1.DeleteServiceTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.DeleteServiceToken is not implemented"))
}

func (UnimplementedTeamServiceHandler) ListServiceTokens(context.Context, *connect.Request[v1.ListServiceTokensRequest]) (*connect.Response[v1.ListServiceTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.ListServiceTokens is not implemented"))
}

func (UnimplementedTeamServiceHandler) UpdateServiceToken(context.Context, *connect.Request[v1.UpdateServiceTokenRequest]) (*connect.Response[v1.UpdateServiceTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.UpdateServiceToken is not implemented"))
}

func (UnimplementedTeamServiceHandler) InviteTeamMember(context.Context, *connect.Request[v1.InviteTeamMemberRequest]) (*connect.Response[v1.InviteTeamMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.InviteTeamMember is not implemented"))
}

func (UnimplementedTeamServiceHandler) ExpireTeamInvite(context.Context, *connect.Request[v1.ExpireTeamInviteRequest]) (*connect.Response[v1.ExpireTeamInviteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.ExpireTeamInvite is not implemented"))
}

func (UnimplementedTeamServiceHandler) ListTeamInvites(context.Context, *connect.Request[v1.ListTeamInvitesRequest]) (*connect.Response[v1.ListTeamInvitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.ListTeamInvites is not implemented"))
}

func (UnimplementedTeamServiceHandler) UpsertFeaturePermissions(context.Context, *connect.Request[v1.UpsertFeaturePermissionsRequest]) (*connect.Response[v1.UpsertFeaturePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.UpsertFeaturePermissions is not implemented"))
}

func (UnimplementedTeamServiceHandler) UpdateScimGroupSettings(context.Context, *connect.Request[v1.UpdateScimGroupSettingsRequest]) (*connect.Response[v1.UpdateScimGroupSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.UpdateScimGroupSettings is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetTeamPermissions(context.Context, *connect.Request[v1.GetTeamPermissionsRequest]) (*connect.Response[v1.GetTeamPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.GetTeamPermissions is not implemented"))
}

func (UnimplementedTeamServiceHandler) ArchiveEnvironment(context.Context, *connect.Request[v1.ArchiveEnvironmentRequest]) (*connect.Response[v1.ArchiveEnvironmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.ArchiveEnvironment is not implemented"))
}

func (UnimplementedTeamServiceHandler) DeactivateUser(context.Context, *connect.Request[v1.DeactivateUserRequest]) (*connect.Response[v1.DeactivateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.DeactivateUser is not implemented"))
}

func (UnimplementedTeamServiceHandler) ReactivateUser(context.Context, *connect.Request[v1.ReactivateUserRequest]) (*connect.Response[v1.ReactivateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TeamService.ReactivateUser is not implemented"))
}
