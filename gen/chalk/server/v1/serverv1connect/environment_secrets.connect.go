// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/environment_secrets.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnvironmentSecretsServiceName is the fully-qualified name of the EnvironmentSecretsService
	// service.
	EnvironmentSecretsServiceName = "chalk.server.v1.EnvironmentSecretsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnvironmentSecretsServiceListSecretsProcedure is the fully-qualified name of the
	// EnvironmentSecretsService's ListSecrets RPC.
	EnvironmentSecretsServiceListSecretsProcedure = "/chalk.server.v1.EnvironmentSecretsService/ListSecrets"
	// EnvironmentSecretsServiceGetSecretValueProcedure is the fully-qualified name of the
	// EnvironmentSecretsService's GetSecretValue RPC.
	EnvironmentSecretsServiceGetSecretValueProcedure = "/chalk.server.v1.EnvironmentSecretsService/GetSecretValue"
	// EnvironmentSecretsServiceUpsertSecretProcedure is the fully-qualified name of the
	// EnvironmentSecretsService's UpsertSecret RPC.
	EnvironmentSecretsServiceUpsertSecretProcedure = "/chalk.server.v1.EnvironmentSecretsService/UpsertSecret"
	// EnvironmentSecretsServiceDeleteSecretProcedure is the fully-qualified name of the
	// EnvironmentSecretsService's DeleteSecret RPC.
	EnvironmentSecretsServiceDeleteSecretProcedure = "/chalk.server.v1.EnvironmentSecretsService/DeleteSecret"
)

// EnvironmentSecretsServiceClient is a client for the chalk.server.v1.EnvironmentSecretsService
// service.
type EnvironmentSecretsServiceClient interface {
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	GetSecretValue(context.Context, *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error)
	UpsertSecret(context.Context, *connect.Request[v1.UpsertSecretRequest]) (*connect.Response[v1.UpsertSecretResponse], error)
	DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error)
}

// NewEnvironmentSecretsServiceClient constructs a client for the
// chalk.server.v1.EnvironmentSecretsService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnvironmentSecretsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnvironmentSecretsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	environmentSecretsServiceMethods := v1.File_chalk_server_v1_environment_secrets_proto.Services().ByName("EnvironmentSecretsService").Methods()
	return &environmentSecretsServiceClient{
		listSecrets: connect.NewClient[v1.ListSecretsRequest, v1.ListSecretsResponse](
			httpClient,
			baseURL+EnvironmentSecretsServiceListSecretsProcedure,
			connect.WithSchema(environmentSecretsServiceMethods.ByName("ListSecrets")),
			connect.WithClientOptions(opts...),
		),
		getSecretValue: connect.NewClient[v1.GetSecretValueRequest, v1.GetSecretValueResponse](
			httpClient,
			baseURL+EnvironmentSecretsServiceGetSecretValueProcedure,
			connect.WithSchema(environmentSecretsServiceMethods.ByName("GetSecretValue")),
			connect.WithClientOptions(opts...),
		),
		upsertSecret: connect.NewClient[v1.UpsertSecretRequest, v1.UpsertSecretResponse](
			httpClient,
			baseURL+EnvironmentSecretsServiceUpsertSecretProcedure,
			connect.WithSchema(environmentSecretsServiceMethods.ByName("UpsertSecret")),
			connect.WithClientOptions(opts...),
		),
		deleteSecret: connect.NewClient[v1.DeleteSecretRequest, v1.DeleteSecretResponse](
			httpClient,
			baseURL+EnvironmentSecretsServiceDeleteSecretProcedure,
			connect.WithSchema(environmentSecretsServiceMethods.ByName("DeleteSecret")),
			connect.WithClientOptions(opts...),
		),
	}
}

// environmentSecretsServiceClient implements EnvironmentSecretsServiceClient.
type environmentSecretsServiceClient struct {
	listSecrets    *connect.Client[v1.ListSecretsRequest, v1.ListSecretsResponse]
	getSecretValue *connect.Client[v1.GetSecretValueRequest, v1.GetSecretValueResponse]
	upsertSecret   *connect.Client[v1.UpsertSecretRequest, v1.UpsertSecretResponse]
	deleteSecret   *connect.Client[v1.DeleteSecretRequest, v1.DeleteSecretResponse]
}

// ListSecrets calls chalk.server.v1.EnvironmentSecretsService.ListSecrets.
func (c *environmentSecretsServiceClient) ListSecrets(ctx context.Context, req *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// GetSecretValue calls chalk.server.v1.EnvironmentSecretsService.GetSecretValue.
func (c *environmentSecretsServiceClient) GetSecretValue(ctx context.Context, req *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error) {
	return c.getSecretValue.CallUnary(ctx, req)
}

// UpsertSecret calls chalk.server.v1.EnvironmentSecretsService.UpsertSecret.
func (c *environmentSecretsServiceClient) UpsertSecret(ctx context.Context, req *connect.Request[v1.UpsertSecretRequest]) (*connect.Response[v1.UpsertSecretResponse], error) {
	return c.upsertSecret.CallUnary(ctx, req)
}

// DeleteSecret calls chalk.server.v1.EnvironmentSecretsService.DeleteSecret.
func (c *environmentSecretsServiceClient) DeleteSecret(ctx context.Context, req *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	return c.deleteSecret.CallUnary(ctx, req)
}

// EnvironmentSecretsServiceHandler is an implementation of the
// chalk.server.v1.EnvironmentSecretsService service.
type EnvironmentSecretsServiceHandler interface {
	ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error)
	GetSecretValue(context.Context, *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error)
	UpsertSecret(context.Context, *connect.Request[v1.UpsertSecretRequest]) (*connect.Response[v1.UpsertSecretResponse], error)
	DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error)
}

// NewEnvironmentSecretsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnvironmentSecretsServiceHandler(svc EnvironmentSecretsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	environmentSecretsServiceMethods := v1.File_chalk_server_v1_environment_secrets_proto.Services().ByName("EnvironmentSecretsService").Methods()
	environmentSecretsServiceListSecretsHandler := connect.NewUnaryHandler(
		EnvironmentSecretsServiceListSecretsProcedure,
		svc.ListSecrets,
		connect.WithSchema(environmentSecretsServiceMethods.ByName("ListSecrets")),
		connect.WithHandlerOptions(opts...),
	)
	environmentSecretsServiceGetSecretValueHandler := connect.NewUnaryHandler(
		EnvironmentSecretsServiceGetSecretValueProcedure,
		svc.GetSecretValue,
		connect.WithSchema(environmentSecretsServiceMethods.ByName("GetSecretValue")),
		connect.WithHandlerOptions(opts...),
	)
	environmentSecretsServiceUpsertSecretHandler := connect.NewUnaryHandler(
		EnvironmentSecretsServiceUpsertSecretProcedure,
		svc.UpsertSecret,
		connect.WithSchema(environmentSecretsServiceMethods.ByName("UpsertSecret")),
		connect.WithHandlerOptions(opts...),
	)
	environmentSecretsServiceDeleteSecretHandler := connect.NewUnaryHandler(
		EnvironmentSecretsServiceDeleteSecretProcedure,
		svc.DeleteSecret,
		connect.WithSchema(environmentSecretsServiceMethods.ByName("DeleteSecret")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.EnvironmentSecretsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnvironmentSecretsServiceListSecretsProcedure:
			environmentSecretsServiceListSecretsHandler.ServeHTTP(w, r)
		case EnvironmentSecretsServiceGetSecretValueProcedure:
			environmentSecretsServiceGetSecretValueHandler.ServeHTTP(w, r)
		case EnvironmentSecretsServiceUpsertSecretProcedure:
			environmentSecretsServiceUpsertSecretHandler.ServeHTTP(w, r)
		case EnvironmentSecretsServiceDeleteSecretProcedure:
			environmentSecretsServiceDeleteSecretHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnvironmentSecretsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnvironmentSecretsServiceHandler struct{}

func (UnimplementedEnvironmentSecretsServiceHandler) ListSecrets(context.Context, *connect.Request[v1.ListSecretsRequest]) (*connect.Response[v1.ListSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.EnvironmentSecretsService.ListSecrets is not implemented"))
}

func (UnimplementedEnvironmentSecretsServiceHandler) GetSecretValue(context.Context, *connect.Request[v1.GetSecretValueRequest]) (*connect.Response[v1.GetSecretValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.EnvironmentSecretsService.GetSecretValue is not implemented"))
}

func (UnimplementedEnvironmentSecretsServiceHandler) UpsertSecret(context.Context, *connect.Request[v1.UpsertSecretRequest]) (*connect.Response[v1.UpsertSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.EnvironmentSecretsService.UpsertSecret is not implemented"))
}

func (UnimplementedEnvironmentSecretsServiceHandler) DeleteSecret(context.Context, *connect.Request[v1.DeleteSecretRequest]) (*connect.Response[v1.DeleteSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.EnvironmentSecretsService.DeleteSecret is not implemented"))
}
