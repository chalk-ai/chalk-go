// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/feature_metadata.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FeatureMetadataServiceName is the fully-qualified name of the FeatureMetadataService service.
	FeatureMetadataServiceName = "chalk.server.v1.FeatureMetadataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeatureMetadataServiceDropFeatureVersionsProcedure is the fully-qualified name of the
	// FeatureMetadataService's DropFeatureVersions RPC.
	FeatureMetadataServiceDropFeatureVersionsProcedure = "/chalk.server.v1.FeatureMetadataService/DropFeatureVersions"
	// FeatureMetadataServiceFeatureMigrateTypeProcedure is the fully-qualified name of the
	// FeatureMetadataService's FeatureMigrateType RPC.
	FeatureMetadataServiceFeatureMigrateTypeProcedure = "/chalk.server.v1.FeatureMetadataService/FeatureMigrateType"
)

// FeatureMetadataServiceClient is a client for the chalk.server.v1.FeatureMetadataService service.
type FeatureMetadataServiceClient interface {
	DropFeatureVersions(context.Context, *connect.Request[v1.DropFeatureVersionsRequest]) (*connect.Response[v1.DropFeatureVersionsResponse], error)
	FeatureMigrateType(context.Context, *connect.Request[v1.FeatureMigrateTypeRequest]) (*connect.Response[v1.FeatureMigrateTypeResponse], error)
}

// NewFeatureMetadataServiceClient constructs a client for the
// chalk.server.v1.FeatureMetadataService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeatureMetadataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FeatureMetadataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	featureMetadataServiceMethods := v1.File_chalk_server_v1_feature_metadata_proto.Services().ByName("FeatureMetadataService").Methods()
	return &featureMetadataServiceClient{
		dropFeatureVersions: connect.NewClient[v1.DropFeatureVersionsRequest, v1.DropFeatureVersionsResponse](
			httpClient,
			baseURL+FeatureMetadataServiceDropFeatureVersionsProcedure,
			connect.WithSchema(featureMetadataServiceMethods.ByName("DropFeatureVersions")),
			connect.WithClientOptions(opts...),
		),
		featureMigrateType: connect.NewClient[v1.FeatureMigrateTypeRequest, v1.FeatureMigrateTypeResponse](
			httpClient,
			baseURL+FeatureMetadataServiceFeatureMigrateTypeProcedure,
			connect.WithSchema(featureMetadataServiceMethods.ByName("FeatureMigrateType")),
			connect.WithClientOptions(opts...),
		),
	}
}

// featureMetadataServiceClient implements FeatureMetadataServiceClient.
type featureMetadataServiceClient struct {
	dropFeatureVersions *connect.Client[v1.DropFeatureVersionsRequest, v1.DropFeatureVersionsResponse]
	featureMigrateType  *connect.Client[v1.FeatureMigrateTypeRequest, v1.FeatureMigrateTypeResponse]
}

// DropFeatureVersions calls chalk.server.v1.FeatureMetadataService.DropFeatureVersions.
func (c *featureMetadataServiceClient) DropFeatureVersions(ctx context.Context, req *connect.Request[v1.DropFeatureVersionsRequest]) (*connect.Response[v1.DropFeatureVersionsResponse], error) {
	return c.dropFeatureVersions.CallUnary(ctx, req)
}

// FeatureMigrateType calls chalk.server.v1.FeatureMetadataService.FeatureMigrateType.
func (c *featureMetadataServiceClient) FeatureMigrateType(ctx context.Context, req *connect.Request[v1.FeatureMigrateTypeRequest]) (*connect.Response[v1.FeatureMigrateTypeResponse], error) {
	return c.featureMigrateType.CallUnary(ctx, req)
}

// FeatureMetadataServiceHandler is an implementation of the chalk.server.v1.FeatureMetadataService
// service.
type FeatureMetadataServiceHandler interface {
	DropFeatureVersions(context.Context, *connect.Request[v1.DropFeatureVersionsRequest]) (*connect.Response[v1.DropFeatureVersionsResponse], error)
	FeatureMigrateType(context.Context, *connect.Request[v1.FeatureMigrateTypeRequest]) (*connect.Response[v1.FeatureMigrateTypeResponse], error)
}

// NewFeatureMetadataServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeatureMetadataServiceHandler(svc FeatureMetadataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	featureMetadataServiceMethods := v1.File_chalk_server_v1_feature_metadata_proto.Services().ByName("FeatureMetadataService").Methods()
	featureMetadataServiceDropFeatureVersionsHandler := connect.NewUnaryHandler(
		FeatureMetadataServiceDropFeatureVersionsProcedure,
		svc.DropFeatureVersions,
		connect.WithSchema(featureMetadataServiceMethods.ByName("DropFeatureVersions")),
		connect.WithHandlerOptions(opts...),
	)
	featureMetadataServiceFeatureMigrateTypeHandler := connect.NewUnaryHandler(
		FeatureMetadataServiceFeatureMigrateTypeProcedure,
		svc.FeatureMigrateType,
		connect.WithSchema(featureMetadataServiceMethods.ByName("FeatureMigrateType")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.FeatureMetadataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FeatureMetadataServiceDropFeatureVersionsProcedure:
			featureMetadataServiceDropFeatureVersionsHandler.ServeHTTP(w, r)
		case FeatureMetadataServiceFeatureMigrateTypeProcedure:
			featureMetadataServiceFeatureMigrateTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFeatureMetadataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeatureMetadataServiceHandler struct{}

func (UnimplementedFeatureMetadataServiceHandler) DropFeatureVersions(context.Context, *connect.Request[v1.DropFeatureVersionsRequest]) (*connect.Response[v1.DropFeatureVersionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.FeatureMetadataService.DropFeatureVersions is not implemented"))
}

func (UnimplementedFeatureMetadataServiceHandler) FeatureMigrateType(context.Context, *connect.Request[v1.FeatureMigrateTypeRequest]) (*connect.Response[v1.FeatureMigrateTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.FeatureMetadataService.FeatureMigrateType is not implemented"))
}
