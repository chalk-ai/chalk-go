// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/cloud_credentials.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CloudAccountCredentialsServiceName is the fully-qualified name of the
	// CloudAccountCredentialsService service.
	CloudAccountCredentialsServiceName = "chalk.server.v1.CloudAccountCredentialsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CloudAccountCredentialsServiceListCloudCredentialsProcedure is the fully-qualified name of the
	// CloudAccountCredentialsService's ListCloudCredentials RPC.
	CloudAccountCredentialsServiceListCloudCredentialsProcedure = "/chalk.server.v1.CloudAccountCredentialsService/ListCloudCredentials"
	// CloudAccountCredentialsServiceGetCloudCredentialsProcedure is the fully-qualified name of the
	// CloudAccountCredentialsService's GetCloudCredentials RPC.
	CloudAccountCredentialsServiceGetCloudCredentialsProcedure = "/chalk.server.v1.CloudAccountCredentialsService/GetCloudCredentials"
	// CloudAccountCredentialsServiceCreateCloudCredentialsProcedure is the fully-qualified name of the
	// CloudAccountCredentialsService's CreateCloudCredentials RPC.
	CloudAccountCredentialsServiceCreateCloudCredentialsProcedure = "/chalk.server.v1.CloudAccountCredentialsService/CreateCloudCredentials"
	// CloudAccountCredentialsServiceDeleteCloudCredentialsProcedure is the fully-qualified name of the
	// CloudAccountCredentialsService's DeleteCloudCredentials RPC.
	CloudAccountCredentialsServiceDeleteCloudCredentialsProcedure = "/chalk.server.v1.CloudAccountCredentialsService/DeleteCloudCredentials"
)

// CloudAccountCredentialsServiceClient is a client for the
// chalk.server.v1.CloudAccountCredentialsService service.
type CloudAccountCredentialsServiceClient interface {
	ListCloudCredentials(context.Context, *connect.Request[v1.ListCloudCredentialsRequest]) (*connect.Response[v1.ListCloudCredentialsResponse], error)
	GetCloudCredentials(context.Context, *connect.Request[v1.GetCloudCredentialsRequest]) (*connect.Response[v1.GetCloudCredentialsResponse], error)
	CreateCloudCredentials(context.Context, *connect.Request[v1.CreateCloudCredentialsRequest]) (*connect.Response[v1.CreateCloudCredentialsResponse], error)
	DeleteCloudCredentials(context.Context, *connect.Request[v1.DeleteCloudCredentialsRequest]) (*connect.Response[v1.DeleteCloudCredentialsResponse], error)
}

// NewCloudAccountCredentialsServiceClient constructs a client for the
// chalk.server.v1.CloudAccountCredentialsService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCloudAccountCredentialsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CloudAccountCredentialsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cloudAccountCredentialsServiceMethods := v1.File_chalk_server_v1_cloud_credentials_proto.Services().ByName("CloudAccountCredentialsService").Methods()
	return &cloudAccountCredentialsServiceClient{
		listCloudCredentials: connect.NewClient[v1.ListCloudCredentialsRequest, v1.ListCloudCredentialsResponse](
			httpClient,
			baseURL+CloudAccountCredentialsServiceListCloudCredentialsProcedure,
			connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("ListCloudCredentials")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getCloudCredentials: connect.NewClient[v1.GetCloudCredentialsRequest, v1.GetCloudCredentialsResponse](
			httpClient,
			baseURL+CloudAccountCredentialsServiceGetCloudCredentialsProcedure,
			connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("GetCloudCredentials")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createCloudCredentials: connect.NewClient[v1.CreateCloudCredentialsRequest, v1.CreateCloudCredentialsResponse](
			httpClient,
			baseURL+CloudAccountCredentialsServiceCreateCloudCredentialsProcedure,
			connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("CreateCloudCredentials")),
			connect.WithClientOptions(opts...),
		),
		deleteCloudCredentials: connect.NewClient[v1.DeleteCloudCredentialsRequest, v1.DeleteCloudCredentialsResponse](
			httpClient,
			baseURL+CloudAccountCredentialsServiceDeleteCloudCredentialsProcedure,
			connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("DeleteCloudCredentials")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cloudAccountCredentialsServiceClient implements CloudAccountCredentialsServiceClient.
type cloudAccountCredentialsServiceClient struct {
	listCloudCredentials   *connect.Client[v1.ListCloudCredentialsRequest, v1.ListCloudCredentialsResponse]
	getCloudCredentials    *connect.Client[v1.GetCloudCredentialsRequest, v1.GetCloudCredentialsResponse]
	createCloudCredentials *connect.Client[v1.CreateCloudCredentialsRequest, v1.CreateCloudCredentialsResponse]
	deleteCloudCredentials *connect.Client[v1.DeleteCloudCredentialsRequest, v1.DeleteCloudCredentialsResponse]
}

// ListCloudCredentials calls chalk.server.v1.CloudAccountCredentialsService.ListCloudCredentials.
func (c *cloudAccountCredentialsServiceClient) ListCloudCredentials(ctx context.Context, req *connect.Request[v1.ListCloudCredentialsRequest]) (*connect.Response[v1.ListCloudCredentialsResponse], error) {
	return c.listCloudCredentials.CallUnary(ctx, req)
}

// GetCloudCredentials calls chalk.server.v1.CloudAccountCredentialsService.GetCloudCredentials.
func (c *cloudAccountCredentialsServiceClient) GetCloudCredentials(ctx context.Context, req *connect.Request[v1.GetCloudCredentialsRequest]) (*connect.Response[v1.GetCloudCredentialsResponse], error) {
	return c.getCloudCredentials.CallUnary(ctx, req)
}

// CreateCloudCredentials calls
// chalk.server.v1.CloudAccountCredentialsService.CreateCloudCredentials.
func (c *cloudAccountCredentialsServiceClient) CreateCloudCredentials(ctx context.Context, req *connect.Request[v1.CreateCloudCredentialsRequest]) (*connect.Response[v1.CreateCloudCredentialsResponse], error) {
	return c.createCloudCredentials.CallUnary(ctx, req)
}

// DeleteCloudCredentials calls
// chalk.server.v1.CloudAccountCredentialsService.DeleteCloudCredentials.
func (c *cloudAccountCredentialsServiceClient) DeleteCloudCredentials(ctx context.Context, req *connect.Request[v1.DeleteCloudCredentialsRequest]) (*connect.Response[v1.DeleteCloudCredentialsResponse], error) {
	return c.deleteCloudCredentials.CallUnary(ctx, req)
}

// CloudAccountCredentialsServiceHandler is an implementation of the
// chalk.server.v1.CloudAccountCredentialsService service.
type CloudAccountCredentialsServiceHandler interface {
	ListCloudCredentials(context.Context, *connect.Request[v1.ListCloudCredentialsRequest]) (*connect.Response[v1.ListCloudCredentialsResponse], error)
	GetCloudCredentials(context.Context, *connect.Request[v1.GetCloudCredentialsRequest]) (*connect.Response[v1.GetCloudCredentialsResponse], error)
	CreateCloudCredentials(context.Context, *connect.Request[v1.CreateCloudCredentialsRequest]) (*connect.Response[v1.CreateCloudCredentialsResponse], error)
	DeleteCloudCredentials(context.Context, *connect.Request[v1.DeleteCloudCredentialsRequest]) (*connect.Response[v1.DeleteCloudCredentialsResponse], error)
}

// NewCloudAccountCredentialsServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCloudAccountCredentialsServiceHandler(svc CloudAccountCredentialsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cloudAccountCredentialsServiceMethods := v1.File_chalk_server_v1_cloud_credentials_proto.Services().ByName("CloudAccountCredentialsService").Methods()
	cloudAccountCredentialsServiceListCloudCredentialsHandler := connect.NewUnaryHandler(
		CloudAccountCredentialsServiceListCloudCredentialsProcedure,
		svc.ListCloudCredentials,
		connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("ListCloudCredentials")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cloudAccountCredentialsServiceGetCloudCredentialsHandler := connect.NewUnaryHandler(
		CloudAccountCredentialsServiceGetCloudCredentialsProcedure,
		svc.GetCloudCredentials,
		connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("GetCloudCredentials")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cloudAccountCredentialsServiceCreateCloudCredentialsHandler := connect.NewUnaryHandler(
		CloudAccountCredentialsServiceCreateCloudCredentialsProcedure,
		svc.CreateCloudCredentials,
		connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("CreateCloudCredentials")),
		connect.WithHandlerOptions(opts...),
	)
	cloudAccountCredentialsServiceDeleteCloudCredentialsHandler := connect.NewUnaryHandler(
		CloudAccountCredentialsServiceDeleteCloudCredentialsProcedure,
		svc.DeleteCloudCredentials,
		connect.WithSchema(cloudAccountCredentialsServiceMethods.ByName("DeleteCloudCredentials")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.CloudAccountCredentialsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CloudAccountCredentialsServiceListCloudCredentialsProcedure:
			cloudAccountCredentialsServiceListCloudCredentialsHandler.ServeHTTP(w, r)
		case CloudAccountCredentialsServiceGetCloudCredentialsProcedure:
			cloudAccountCredentialsServiceGetCloudCredentialsHandler.ServeHTTP(w, r)
		case CloudAccountCredentialsServiceCreateCloudCredentialsProcedure:
			cloudAccountCredentialsServiceCreateCloudCredentialsHandler.ServeHTTP(w, r)
		case CloudAccountCredentialsServiceDeleteCloudCredentialsProcedure:
			cloudAccountCredentialsServiceDeleteCloudCredentialsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCloudAccountCredentialsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCloudAccountCredentialsServiceHandler struct{}

func (UnimplementedCloudAccountCredentialsServiceHandler) ListCloudCredentials(context.Context, *connect.Request[v1.ListCloudCredentialsRequest]) (*connect.Response[v1.ListCloudCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudAccountCredentialsService.ListCloudCredentials is not implemented"))
}

func (UnimplementedCloudAccountCredentialsServiceHandler) GetCloudCredentials(context.Context, *connect.Request[v1.GetCloudCredentialsRequest]) (*connect.Response[v1.GetCloudCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudAccountCredentialsService.GetCloudCredentials is not implemented"))
}

func (UnimplementedCloudAccountCredentialsServiceHandler) CreateCloudCredentials(context.Context, *connect.Request[v1.CreateCloudCredentialsRequest]) (*connect.Response[v1.CreateCloudCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudAccountCredentialsService.CreateCloudCredentials is not implemented"))
}

func (UnimplementedCloudAccountCredentialsServiceHandler) DeleteCloudCredentials(context.Context, *connect.Request[v1.DeleteCloudCredentialsRequest]) (*connect.Response[v1.DeleteCloudCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudAccountCredentialsService.DeleteCloudCredentials is not implemented"))
}
