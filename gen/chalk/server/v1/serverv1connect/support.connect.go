// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/support.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SupportServiceName is the fully-qualified name of the SupportService service.
	SupportServiceName = "chalk.server.v1.SupportService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SupportServiceCreateCustomerIncidentProcedure is the fully-qualified name of the SupportService's
	// CreateCustomerIncident RPC.
	SupportServiceCreateCustomerIncidentProcedure = "/chalk.server.v1.SupportService/CreateCustomerIncident"
)

// SupportServiceClient is a client for the chalk.server.v1.SupportService service.
type SupportServiceClient interface {
	CreateCustomerIncident(context.Context, *connect.Request[v1.CreateCustomerIncidentRequest]) (*connect.Response[v1.CreateCustomerIncidentResponse], error)
}

// NewSupportServiceClient constructs a client for the chalk.server.v1.SupportService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSupportServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SupportServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	supportServiceMethods := v1.File_chalk_server_v1_support_proto.Services().ByName("SupportService").Methods()
	return &supportServiceClient{
		createCustomerIncident: connect.NewClient[v1.CreateCustomerIncidentRequest, v1.CreateCustomerIncidentResponse](
			httpClient,
			baseURL+SupportServiceCreateCustomerIncidentProcedure,
			connect.WithSchema(supportServiceMethods.ByName("CreateCustomerIncident")),
			connect.WithClientOptions(opts...),
		),
	}
}

// supportServiceClient implements SupportServiceClient.
type supportServiceClient struct {
	createCustomerIncident *connect.Client[v1.CreateCustomerIncidentRequest, v1.CreateCustomerIncidentResponse]
}

// CreateCustomerIncident calls chalk.server.v1.SupportService.CreateCustomerIncident.
func (c *supportServiceClient) CreateCustomerIncident(ctx context.Context, req *connect.Request[v1.CreateCustomerIncidentRequest]) (*connect.Response[v1.CreateCustomerIncidentResponse], error) {
	return c.createCustomerIncident.CallUnary(ctx, req)
}

// SupportServiceHandler is an implementation of the chalk.server.v1.SupportService service.
type SupportServiceHandler interface {
	CreateCustomerIncident(context.Context, *connect.Request[v1.CreateCustomerIncidentRequest]) (*connect.Response[v1.CreateCustomerIncidentResponse], error)
}

// NewSupportServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSupportServiceHandler(svc SupportServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	supportServiceMethods := v1.File_chalk_server_v1_support_proto.Services().ByName("SupportService").Methods()
	supportServiceCreateCustomerIncidentHandler := connect.NewUnaryHandler(
		SupportServiceCreateCustomerIncidentProcedure,
		svc.CreateCustomerIncident,
		connect.WithSchema(supportServiceMethods.ByName("CreateCustomerIncident")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.SupportService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SupportServiceCreateCustomerIncidentProcedure:
			supportServiceCreateCustomerIncidentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSupportServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSupportServiceHandler struct{}

func (UnimplementedSupportServiceHandler) CreateCustomerIncident(context.Context, *connect.Request[v1.CreateCustomerIncidentRequest]) (*connect.Response[v1.CreateCustomerIncidentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.SupportService.CreateCustomerIncident is not implemented"))
}
