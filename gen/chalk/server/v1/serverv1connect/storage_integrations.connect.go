// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/storage_integrations.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ObjectStorageIntegrationServiceName is the fully-qualified name of the
	// ObjectStorageIntegrationService service.
	ObjectStorageIntegrationServiceName = "chalk.server.v1.ObjectStorageIntegrationService"
	// OfflineStoreIntegrationServiceName is the fully-qualified name of the
	// OfflineStoreIntegrationService service.
	OfflineStoreIntegrationServiceName = "chalk.server.v1.OfflineStoreIntegrationService"
	// OnlineStoreIntegrationServiceName is the fully-qualified name of the
	// OnlineStoreIntegrationService service.
	OnlineStoreIntegrationServiceName = "chalk.server.v1.OnlineStoreIntegrationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ObjectStorageIntegrationServiceCreateObjectStorageIntegrationProcedure is the fully-qualified
	// name of the ObjectStorageIntegrationService's CreateObjectStorageIntegration RPC.
	ObjectStorageIntegrationServiceCreateObjectStorageIntegrationProcedure = "/chalk.server.v1.ObjectStorageIntegrationService/CreateObjectStorageIntegration"
	// ObjectStorageIntegrationServiceListObjectStorageIntegrationsProcedure is the fully-qualified name
	// of the ObjectStorageIntegrationService's ListObjectStorageIntegrations RPC.
	ObjectStorageIntegrationServiceListObjectStorageIntegrationsProcedure = "/chalk.server.v1.ObjectStorageIntegrationService/ListObjectStorageIntegrations"
	// ObjectStorageIntegrationServiceUpdateObjectStorageIntegrationProcedure is the fully-qualified
	// name of the ObjectStorageIntegrationService's UpdateObjectStorageIntegration RPC.
	ObjectStorageIntegrationServiceUpdateObjectStorageIntegrationProcedure = "/chalk.server.v1.ObjectStorageIntegrationService/UpdateObjectStorageIntegration"
	// ObjectStorageIntegrationServiceDeleteObjectStorageIntegrationProcedure is the fully-qualified
	// name of the ObjectStorageIntegrationService's DeleteObjectStorageIntegration RPC.
	ObjectStorageIntegrationServiceDeleteObjectStorageIntegrationProcedure = "/chalk.server.v1.ObjectStorageIntegrationService/DeleteObjectStorageIntegration"
	// OfflineStoreIntegrationServiceCreateOfflineStoreIntegrationProcedure is the fully-qualified name
	// of the OfflineStoreIntegrationService's CreateOfflineStoreIntegration RPC.
	OfflineStoreIntegrationServiceCreateOfflineStoreIntegrationProcedure = "/chalk.server.v1.OfflineStoreIntegrationService/CreateOfflineStoreIntegration"
	// OfflineStoreIntegrationServiceListOfflineStoreIntegrationsProcedure is the fully-qualified name
	// of the OfflineStoreIntegrationService's ListOfflineStoreIntegrations RPC.
	OfflineStoreIntegrationServiceListOfflineStoreIntegrationsProcedure = "/chalk.server.v1.OfflineStoreIntegrationService/ListOfflineStoreIntegrations"
	// OfflineStoreIntegrationServiceUpdateOfflineStoreIntegrationProcedure is the fully-qualified name
	// of the OfflineStoreIntegrationService's UpdateOfflineStoreIntegration RPC.
	OfflineStoreIntegrationServiceUpdateOfflineStoreIntegrationProcedure = "/chalk.server.v1.OfflineStoreIntegrationService/UpdateOfflineStoreIntegration"
	// OfflineStoreIntegrationServiceDeleteOfflineStoreIntegrationProcedure is the fully-qualified name
	// of the OfflineStoreIntegrationService's DeleteOfflineStoreIntegration RPC.
	OfflineStoreIntegrationServiceDeleteOfflineStoreIntegrationProcedure = "/chalk.server.v1.OfflineStoreIntegrationService/DeleteOfflineStoreIntegration"
	// OnlineStoreIntegrationServiceCreateOnlineStoreIntegrationProcedure is the fully-qualified name of
	// the OnlineStoreIntegrationService's CreateOnlineStoreIntegration RPC.
	OnlineStoreIntegrationServiceCreateOnlineStoreIntegrationProcedure = "/chalk.server.v1.OnlineStoreIntegrationService/CreateOnlineStoreIntegration"
	// OnlineStoreIntegrationServiceListOnlineStoreIntegrationsProcedure is the fully-qualified name of
	// the OnlineStoreIntegrationService's ListOnlineStoreIntegrations RPC.
	OnlineStoreIntegrationServiceListOnlineStoreIntegrationsProcedure = "/chalk.server.v1.OnlineStoreIntegrationService/ListOnlineStoreIntegrations"
	// OnlineStoreIntegrationServiceUpdateOnlineStoreIntegrationProcedure is the fully-qualified name of
	// the OnlineStoreIntegrationService's UpdateOnlineStoreIntegration RPC.
	OnlineStoreIntegrationServiceUpdateOnlineStoreIntegrationProcedure = "/chalk.server.v1.OnlineStoreIntegrationService/UpdateOnlineStoreIntegration"
	// OnlineStoreIntegrationServiceDeleteOnlineStoreIntegrationProcedure is the fully-qualified name of
	// the OnlineStoreIntegrationService's DeleteOnlineStoreIntegration RPC.
	OnlineStoreIntegrationServiceDeleteOnlineStoreIntegrationProcedure = "/chalk.server.v1.OnlineStoreIntegrationService/DeleteOnlineStoreIntegration"
)

// ObjectStorageIntegrationServiceClient is a client for the
// chalk.server.v1.ObjectStorageIntegrationService service.
type ObjectStorageIntegrationServiceClient interface {
	CreateObjectStorageIntegration(context.Context, *connect.Request[v1.CreateObjectStorageIntegrationRequest]) (*connect.Response[v1.CreateObjectStorageIntegrationResponse], error)
	ListObjectStorageIntegrations(context.Context, *connect.Request[v1.ListObjectStorageIntegrationsRequest]) (*connect.Response[v1.ListObjectStorageIntegrationsResponse], error)
	UpdateObjectStorageIntegration(context.Context, *connect.Request[v1.UpdateObjectStorageIntegrationRequest]) (*connect.Response[v1.UpdateObjectStorageIntegrationResponse], error)
	DeleteObjectStorageIntegration(context.Context, *connect.Request[v1.DeleteObjectStorageIntegrationRequest]) (*connect.Response[v1.DeleteObjectStorageIntegrationResponse], error)
}

// NewObjectStorageIntegrationServiceClient constructs a client for the
// chalk.server.v1.ObjectStorageIntegrationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewObjectStorageIntegrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ObjectStorageIntegrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	objectStorageIntegrationServiceMethods := v1.File_chalk_server_v1_storage_integrations_proto.Services().ByName("ObjectStorageIntegrationService").Methods()
	return &objectStorageIntegrationServiceClient{
		createObjectStorageIntegration: connect.NewClient[v1.CreateObjectStorageIntegrationRequest, v1.CreateObjectStorageIntegrationResponse](
			httpClient,
			baseURL+ObjectStorageIntegrationServiceCreateObjectStorageIntegrationProcedure,
			connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("CreateObjectStorageIntegration")),
			connect.WithClientOptions(opts...),
		),
		listObjectStorageIntegrations: connect.NewClient[v1.ListObjectStorageIntegrationsRequest, v1.ListObjectStorageIntegrationsResponse](
			httpClient,
			baseURL+ObjectStorageIntegrationServiceListObjectStorageIntegrationsProcedure,
			connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("ListObjectStorageIntegrations")),
			connect.WithClientOptions(opts...),
		),
		updateObjectStorageIntegration: connect.NewClient[v1.UpdateObjectStorageIntegrationRequest, v1.UpdateObjectStorageIntegrationResponse](
			httpClient,
			baseURL+ObjectStorageIntegrationServiceUpdateObjectStorageIntegrationProcedure,
			connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("UpdateObjectStorageIntegration")),
			connect.WithClientOptions(opts...),
		),
		deleteObjectStorageIntegration: connect.NewClient[v1.DeleteObjectStorageIntegrationRequest, v1.DeleteObjectStorageIntegrationResponse](
			httpClient,
			baseURL+ObjectStorageIntegrationServiceDeleteObjectStorageIntegrationProcedure,
			connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("DeleteObjectStorageIntegration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// objectStorageIntegrationServiceClient implements ObjectStorageIntegrationServiceClient.
type objectStorageIntegrationServiceClient struct {
	createObjectStorageIntegration *connect.Client[v1.CreateObjectStorageIntegrationRequest, v1.CreateObjectStorageIntegrationResponse]
	listObjectStorageIntegrations  *connect.Client[v1.ListObjectStorageIntegrationsRequest, v1.ListObjectStorageIntegrationsResponse]
	updateObjectStorageIntegration *connect.Client[v1.UpdateObjectStorageIntegrationRequest, v1.UpdateObjectStorageIntegrationResponse]
	deleteObjectStorageIntegration *connect.Client[v1.DeleteObjectStorageIntegrationRequest, v1.DeleteObjectStorageIntegrationResponse]
}

// CreateObjectStorageIntegration calls
// chalk.server.v1.ObjectStorageIntegrationService.CreateObjectStorageIntegration.
func (c *objectStorageIntegrationServiceClient) CreateObjectStorageIntegration(ctx context.Context, req *connect.Request[v1.CreateObjectStorageIntegrationRequest]) (*connect.Response[v1.CreateObjectStorageIntegrationResponse], error) {
	return c.createObjectStorageIntegration.CallUnary(ctx, req)
}

// ListObjectStorageIntegrations calls
// chalk.server.v1.ObjectStorageIntegrationService.ListObjectStorageIntegrations.
func (c *objectStorageIntegrationServiceClient) ListObjectStorageIntegrations(ctx context.Context, req *connect.Request[v1.ListObjectStorageIntegrationsRequest]) (*connect.Response[v1.ListObjectStorageIntegrationsResponse], error) {
	return c.listObjectStorageIntegrations.CallUnary(ctx, req)
}

// UpdateObjectStorageIntegration calls
// chalk.server.v1.ObjectStorageIntegrationService.UpdateObjectStorageIntegration.
func (c *objectStorageIntegrationServiceClient) UpdateObjectStorageIntegration(ctx context.Context, req *connect.Request[v1.UpdateObjectStorageIntegrationRequest]) (*connect.Response[v1.UpdateObjectStorageIntegrationResponse], error) {
	return c.updateObjectStorageIntegration.CallUnary(ctx, req)
}

// DeleteObjectStorageIntegration calls
// chalk.server.v1.ObjectStorageIntegrationService.DeleteObjectStorageIntegration.
func (c *objectStorageIntegrationServiceClient) DeleteObjectStorageIntegration(ctx context.Context, req *connect.Request[v1.DeleteObjectStorageIntegrationRequest]) (*connect.Response[v1.DeleteObjectStorageIntegrationResponse], error) {
	return c.deleteObjectStorageIntegration.CallUnary(ctx, req)
}

// ObjectStorageIntegrationServiceHandler is an implementation of the
// chalk.server.v1.ObjectStorageIntegrationService service.
type ObjectStorageIntegrationServiceHandler interface {
	CreateObjectStorageIntegration(context.Context, *connect.Request[v1.CreateObjectStorageIntegrationRequest]) (*connect.Response[v1.CreateObjectStorageIntegrationResponse], error)
	ListObjectStorageIntegrations(context.Context, *connect.Request[v1.ListObjectStorageIntegrationsRequest]) (*connect.Response[v1.ListObjectStorageIntegrationsResponse], error)
	UpdateObjectStorageIntegration(context.Context, *connect.Request[v1.UpdateObjectStorageIntegrationRequest]) (*connect.Response[v1.UpdateObjectStorageIntegrationResponse], error)
	DeleteObjectStorageIntegration(context.Context, *connect.Request[v1.DeleteObjectStorageIntegrationRequest]) (*connect.Response[v1.DeleteObjectStorageIntegrationResponse], error)
}

// NewObjectStorageIntegrationServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewObjectStorageIntegrationServiceHandler(svc ObjectStorageIntegrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	objectStorageIntegrationServiceMethods := v1.File_chalk_server_v1_storage_integrations_proto.Services().ByName("ObjectStorageIntegrationService").Methods()
	objectStorageIntegrationServiceCreateObjectStorageIntegrationHandler := connect.NewUnaryHandler(
		ObjectStorageIntegrationServiceCreateObjectStorageIntegrationProcedure,
		svc.CreateObjectStorageIntegration,
		connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("CreateObjectStorageIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	objectStorageIntegrationServiceListObjectStorageIntegrationsHandler := connect.NewUnaryHandler(
		ObjectStorageIntegrationServiceListObjectStorageIntegrationsProcedure,
		svc.ListObjectStorageIntegrations,
		connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("ListObjectStorageIntegrations")),
		connect.WithHandlerOptions(opts...),
	)
	objectStorageIntegrationServiceUpdateObjectStorageIntegrationHandler := connect.NewUnaryHandler(
		ObjectStorageIntegrationServiceUpdateObjectStorageIntegrationProcedure,
		svc.UpdateObjectStorageIntegration,
		connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("UpdateObjectStorageIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	objectStorageIntegrationServiceDeleteObjectStorageIntegrationHandler := connect.NewUnaryHandler(
		ObjectStorageIntegrationServiceDeleteObjectStorageIntegrationProcedure,
		svc.DeleteObjectStorageIntegration,
		connect.WithSchema(objectStorageIntegrationServiceMethods.ByName("DeleteObjectStorageIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.ObjectStorageIntegrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ObjectStorageIntegrationServiceCreateObjectStorageIntegrationProcedure:
			objectStorageIntegrationServiceCreateObjectStorageIntegrationHandler.ServeHTTP(w, r)
		case ObjectStorageIntegrationServiceListObjectStorageIntegrationsProcedure:
			objectStorageIntegrationServiceListObjectStorageIntegrationsHandler.ServeHTTP(w, r)
		case ObjectStorageIntegrationServiceUpdateObjectStorageIntegrationProcedure:
			objectStorageIntegrationServiceUpdateObjectStorageIntegrationHandler.ServeHTTP(w, r)
		case ObjectStorageIntegrationServiceDeleteObjectStorageIntegrationProcedure:
			objectStorageIntegrationServiceDeleteObjectStorageIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedObjectStorageIntegrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedObjectStorageIntegrationServiceHandler struct{}

func (UnimplementedObjectStorageIntegrationServiceHandler) CreateObjectStorageIntegration(context.Context, *connect.Request[v1.CreateObjectStorageIntegrationRequest]) (*connect.Response[v1.CreateObjectStorageIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ObjectStorageIntegrationService.CreateObjectStorageIntegration is not implemented"))
}

func (UnimplementedObjectStorageIntegrationServiceHandler) ListObjectStorageIntegrations(context.Context, *connect.Request[v1.ListObjectStorageIntegrationsRequest]) (*connect.Response[v1.ListObjectStorageIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ObjectStorageIntegrationService.ListObjectStorageIntegrations is not implemented"))
}

func (UnimplementedObjectStorageIntegrationServiceHandler) UpdateObjectStorageIntegration(context.Context, *connect.Request[v1.UpdateObjectStorageIntegrationRequest]) (*connect.Response[v1.UpdateObjectStorageIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ObjectStorageIntegrationService.UpdateObjectStorageIntegration is not implemented"))
}

func (UnimplementedObjectStorageIntegrationServiceHandler) DeleteObjectStorageIntegration(context.Context, *connect.Request[v1.DeleteObjectStorageIntegrationRequest]) (*connect.Response[v1.DeleteObjectStorageIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ObjectStorageIntegrationService.DeleteObjectStorageIntegration is not implemented"))
}

// OfflineStoreIntegrationServiceClient is a client for the
// chalk.server.v1.OfflineStoreIntegrationService service.
type OfflineStoreIntegrationServiceClient interface {
	CreateOfflineStoreIntegration(context.Context, *connect.Request[v1.CreateOfflineStoreIntegrationRequest]) (*connect.Response[v1.CreateOfflineStoreIntegrationResponse], error)
	ListOfflineStoreIntegrations(context.Context, *connect.Request[v1.ListOfflineStoreIntegrationsRequest]) (*connect.Response[v1.ListOfflineStoreIntegrationsResponse], error)
	UpdateOfflineStoreIntegration(context.Context, *connect.Request[v1.UpdateOfflineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOfflineStoreIntegrationResponse], error)
	DeleteOfflineStoreIntegration(context.Context, *connect.Request[v1.DeleteOfflineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOfflineStoreIntegrationResponse], error)
}

// NewOfflineStoreIntegrationServiceClient constructs a client for the
// chalk.server.v1.OfflineStoreIntegrationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOfflineStoreIntegrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OfflineStoreIntegrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	offlineStoreIntegrationServiceMethods := v1.File_chalk_server_v1_storage_integrations_proto.Services().ByName("OfflineStoreIntegrationService").Methods()
	return &offlineStoreIntegrationServiceClient{
		createOfflineStoreIntegration: connect.NewClient[v1.CreateOfflineStoreIntegrationRequest, v1.CreateOfflineStoreIntegrationResponse](
			httpClient,
			baseURL+OfflineStoreIntegrationServiceCreateOfflineStoreIntegrationProcedure,
			connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("CreateOfflineStoreIntegration")),
			connect.WithClientOptions(opts...),
		),
		listOfflineStoreIntegrations: connect.NewClient[v1.ListOfflineStoreIntegrationsRequest, v1.ListOfflineStoreIntegrationsResponse](
			httpClient,
			baseURL+OfflineStoreIntegrationServiceListOfflineStoreIntegrationsProcedure,
			connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("ListOfflineStoreIntegrations")),
			connect.WithClientOptions(opts...),
		),
		updateOfflineStoreIntegration: connect.NewClient[v1.UpdateOfflineStoreIntegrationRequest, v1.UpdateOfflineStoreIntegrationResponse](
			httpClient,
			baseURL+OfflineStoreIntegrationServiceUpdateOfflineStoreIntegrationProcedure,
			connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("UpdateOfflineStoreIntegration")),
			connect.WithClientOptions(opts...),
		),
		deleteOfflineStoreIntegration: connect.NewClient[v1.DeleteOfflineStoreIntegrationRequest, v1.DeleteOfflineStoreIntegrationResponse](
			httpClient,
			baseURL+OfflineStoreIntegrationServiceDeleteOfflineStoreIntegrationProcedure,
			connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("DeleteOfflineStoreIntegration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// offlineStoreIntegrationServiceClient implements OfflineStoreIntegrationServiceClient.
type offlineStoreIntegrationServiceClient struct {
	createOfflineStoreIntegration *connect.Client[v1.CreateOfflineStoreIntegrationRequest, v1.CreateOfflineStoreIntegrationResponse]
	listOfflineStoreIntegrations  *connect.Client[v1.ListOfflineStoreIntegrationsRequest, v1.ListOfflineStoreIntegrationsResponse]
	updateOfflineStoreIntegration *connect.Client[v1.UpdateOfflineStoreIntegrationRequest, v1.UpdateOfflineStoreIntegrationResponse]
	deleteOfflineStoreIntegration *connect.Client[v1.DeleteOfflineStoreIntegrationRequest, v1.DeleteOfflineStoreIntegrationResponse]
}

// CreateOfflineStoreIntegration calls
// chalk.server.v1.OfflineStoreIntegrationService.CreateOfflineStoreIntegration.
func (c *offlineStoreIntegrationServiceClient) CreateOfflineStoreIntegration(ctx context.Context, req *connect.Request[v1.CreateOfflineStoreIntegrationRequest]) (*connect.Response[v1.CreateOfflineStoreIntegrationResponse], error) {
	return c.createOfflineStoreIntegration.CallUnary(ctx, req)
}

// ListOfflineStoreIntegrations calls
// chalk.server.v1.OfflineStoreIntegrationService.ListOfflineStoreIntegrations.
func (c *offlineStoreIntegrationServiceClient) ListOfflineStoreIntegrations(ctx context.Context, req *connect.Request[v1.ListOfflineStoreIntegrationsRequest]) (*connect.Response[v1.ListOfflineStoreIntegrationsResponse], error) {
	return c.listOfflineStoreIntegrations.CallUnary(ctx, req)
}

// UpdateOfflineStoreIntegration calls
// chalk.server.v1.OfflineStoreIntegrationService.UpdateOfflineStoreIntegration.
func (c *offlineStoreIntegrationServiceClient) UpdateOfflineStoreIntegration(ctx context.Context, req *connect.Request[v1.UpdateOfflineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOfflineStoreIntegrationResponse], error) {
	return c.updateOfflineStoreIntegration.CallUnary(ctx, req)
}

// DeleteOfflineStoreIntegration calls
// chalk.server.v1.OfflineStoreIntegrationService.DeleteOfflineStoreIntegration.
func (c *offlineStoreIntegrationServiceClient) DeleteOfflineStoreIntegration(ctx context.Context, req *connect.Request[v1.DeleteOfflineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOfflineStoreIntegrationResponse], error) {
	return c.deleteOfflineStoreIntegration.CallUnary(ctx, req)
}

// OfflineStoreIntegrationServiceHandler is an implementation of the
// chalk.server.v1.OfflineStoreIntegrationService service.
type OfflineStoreIntegrationServiceHandler interface {
	CreateOfflineStoreIntegration(context.Context, *connect.Request[v1.CreateOfflineStoreIntegrationRequest]) (*connect.Response[v1.CreateOfflineStoreIntegrationResponse], error)
	ListOfflineStoreIntegrations(context.Context, *connect.Request[v1.ListOfflineStoreIntegrationsRequest]) (*connect.Response[v1.ListOfflineStoreIntegrationsResponse], error)
	UpdateOfflineStoreIntegration(context.Context, *connect.Request[v1.UpdateOfflineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOfflineStoreIntegrationResponse], error)
	DeleteOfflineStoreIntegration(context.Context, *connect.Request[v1.DeleteOfflineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOfflineStoreIntegrationResponse], error)
}

// NewOfflineStoreIntegrationServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOfflineStoreIntegrationServiceHandler(svc OfflineStoreIntegrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	offlineStoreIntegrationServiceMethods := v1.File_chalk_server_v1_storage_integrations_proto.Services().ByName("OfflineStoreIntegrationService").Methods()
	offlineStoreIntegrationServiceCreateOfflineStoreIntegrationHandler := connect.NewUnaryHandler(
		OfflineStoreIntegrationServiceCreateOfflineStoreIntegrationProcedure,
		svc.CreateOfflineStoreIntegration,
		connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("CreateOfflineStoreIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	offlineStoreIntegrationServiceListOfflineStoreIntegrationsHandler := connect.NewUnaryHandler(
		OfflineStoreIntegrationServiceListOfflineStoreIntegrationsProcedure,
		svc.ListOfflineStoreIntegrations,
		connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("ListOfflineStoreIntegrations")),
		connect.WithHandlerOptions(opts...),
	)
	offlineStoreIntegrationServiceUpdateOfflineStoreIntegrationHandler := connect.NewUnaryHandler(
		OfflineStoreIntegrationServiceUpdateOfflineStoreIntegrationProcedure,
		svc.UpdateOfflineStoreIntegration,
		connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("UpdateOfflineStoreIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	offlineStoreIntegrationServiceDeleteOfflineStoreIntegrationHandler := connect.NewUnaryHandler(
		OfflineStoreIntegrationServiceDeleteOfflineStoreIntegrationProcedure,
		svc.DeleteOfflineStoreIntegration,
		connect.WithSchema(offlineStoreIntegrationServiceMethods.ByName("DeleteOfflineStoreIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.OfflineStoreIntegrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OfflineStoreIntegrationServiceCreateOfflineStoreIntegrationProcedure:
			offlineStoreIntegrationServiceCreateOfflineStoreIntegrationHandler.ServeHTTP(w, r)
		case OfflineStoreIntegrationServiceListOfflineStoreIntegrationsProcedure:
			offlineStoreIntegrationServiceListOfflineStoreIntegrationsHandler.ServeHTTP(w, r)
		case OfflineStoreIntegrationServiceUpdateOfflineStoreIntegrationProcedure:
			offlineStoreIntegrationServiceUpdateOfflineStoreIntegrationHandler.ServeHTTP(w, r)
		case OfflineStoreIntegrationServiceDeleteOfflineStoreIntegrationProcedure:
			offlineStoreIntegrationServiceDeleteOfflineStoreIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOfflineStoreIntegrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOfflineStoreIntegrationServiceHandler struct{}

func (UnimplementedOfflineStoreIntegrationServiceHandler) CreateOfflineStoreIntegration(context.Context, *connect.Request[v1.CreateOfflineStoreIntegrationRequest]) (*connect.Response[v1.CreateOfflineStoreIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineStoreIntegrationService.CreateOfflineStoreIntegration is not implemented"))
}

func (UnimplementedOfflineStoreIntegrationServiceHandler) ListOfflineStoreIntegrations(context.Context, *connect.Request[v1.ListOfflineStoreIntegrationsRequest]) (*connect.Response[v1.ListOfflineStoreIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineStoreIntegrationService.ListOfflineStoreIntegrations is not implemented"))
}

func (UnimplementedOfflineStoreIntegrationServiceHandler) UpdateOfflineStoreIntegration(context.Context, *connect.Request[v1.UpdateOfflineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOfflineStoreIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineStoreIntegrationService.UpdateOfflineStoreIntegration is not implemented"))
}

func (UnimplementedOfflineStoreIntegrationServiceHandler) DeleteOfflineStoreIntegration(context.Context, *connect.Request[v1.DeleteOfflineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOfflineStoreIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineStoreIntegrationService.DeleteOfflineStoreIntegration is not implemented"))
}

// OnlineStoreIntegrationServiceClient is a client for the
// chalk.server.v1.OnlineStoreIntegrationService service.
type OnlineStoreIntegrationServiceClient interface {
	CreateOnlineStoreIntegration(context.Context, *connect.Request[v1.CreateOnlineStoreIntegrationRequest]) (*connect.Response[v1.CreateOnlineStoreIntegrationResponse], error)
	ListOnlineStoreIntegrations(context.Context, *connect.Request[v1.ListOnlineStoreIntegrationsRequest]) (*connect.Response[v1.ListOnlineStoreIntegrationsResponse], error)
	UpdateOnlineStoreIntegration(context.Context, *connect.Request[v1.UpdateOnlineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOnlineStoreIntegrationResponse], error)
	DeleteOnlineStoreIntegration(context.Context, *connect.Request[v1.DeleteOnlineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOnlineStoreIntegrationResponse], error)
}

// NewOnlineStoreIntegrationServiceClient constructs a client for the
// chalk.server.v1.OnlineStoreIntegrationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOnlineStoreIntegrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OnlineStoreIntegrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	onlineStoreIntegrationServiceMethods := v1.File_chalk_server_v1_storage_integrations_proto.Services().ByName("OnlineStoreIntegrationService").Methods()
	return &onlineStoreIntegrationServiceClient{
		createOnlineStoreIntegration: connect.NewClient[v1.CreateOnlineStoreIntegrationRequest, v1.CreateOnlineStoreIntegrationResponse](
			httpClient,
			baseURL+OnlineStoreIntegrationServiceCreateOnlineStoreIntegrationProcedure,
			connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("CreateOnlineStoreIntegration")),
			connect.WithClientOptions(opts...),
		),
		listOnlineStoreIntegrations: connect.NewClient[v1.ListOnlineStoreIntegrationsRequest, v1.ListOnlineStoreIntegrationsResponse](
			httpClient,
			baseURL+OnlineStoreIntegrationServiceListOnlineStoreIntegrationsProcedure,
			connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("ListOnlineStoreIntegrations")),
			connect.WithClientOptions(opts...),
		),
		updateOnlineStoreIntegration: connect.NewClient[v1.UpdateOnlineStoreIntegrationRequest, v1.UpdateOnlineStoreIntegrationResponse](
			httpClient,
			baseURL+OnlineStoreIntegrationServiceUpdateOnlineStoreIntegrationProcedure,
			connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("UpdateOnlineStoreIntegration")),
			connect.WithClientOptions(opts...),
		),
		deleteOnlineStoreIntegration: connect.NewClient[v1.DeleteOnlineStoreIntegrationRequest, v1.DeleteOnlineStoreIntegrationResponse](
			httpClient,
			baseURL+OnlineStoreIntegrationServiceDeleteOnlineStoreIntegrationProcedure,
			connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("DeleteOnlineStoreIntegration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// onlineStoreIntegrationServiceClient implements OnlineStoreIntegrationServiceClient.
type onlineStoreIntegrationServiceClient struct {
	createOnlineStoreIntegration *connect.Client[v1.CreateOnlineStoreIntegrationRequest, v1.CreateOnlineStoreIntegrationResponse]
	listOnlineStoreIntegrations  *connect.Client[v1.ListOnlineStoreIntegrationsRequest, v1.ListOnlineStoreIntegrationsResponse]
	updateOnlineStoreIntegration *connect.Client[v1.UpdateOnlineStoreIntegrationRequest, v1.UpdateOnlineStoreIntegrationResponse]
	deleteOnlineStoreIntegration *connect.Client[v1.DeleteOnlineStoreIntegrationRequest, v1.DeleteOnlineStoreIntegrationResponse]
}

// CreateOnlineStoreIntegration calls
// chalk.server.v1.OnlineStoreIntegrationService.CreateOnlineStoreIntegration.
func (c *onlineStoreIntegrationServiceClient) CreateOnlineStoreIntegration(ctx context.Context, req *connect.Request[v1.CreateOnlineStoreIntegrationRequest]) (*connect.Response[v1.CreateOnlineStoreIntegrationResponse], error) {
	return c.createOnlineStoreIntegration.CallUnary(ctx, req)
}

// ListOnlineStoreIntegrations calls
// chalk.server.v1.OnlineStoreIntegrationService.ListOnlineStoreIntegrations.
func (c *onlineStoreIntegrationServiceClient) ListOnlineStoreIntegrations(ctx context.Context, req *connect.Request[v1.ListOnlineStoreIntegrationsRequest]) (*connect.Response[v1.ListOnlineStoreIntegrationsResponse], error) {
	return c.listOnlineStoreIntegrations.CallUnary(ctx, req)
}

// UpdateOnlineStoreIntegration calls
// chalk.server.v1.OnlineStoreIntegrationService.UpdateOnlineStoreIntegration.
func (c *onlineStoreIntegrationServiceClient) UpdateOnlineStoreIntegration(ctx context.Context, req *connect.Request[v1.UpdateOnlineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOnlineStoreIntegrationResponse], error) {
	return c.updateOnlineStoreIntegration.CallUnary(ctx, req)
}

// DeleteOnlineStoreIntegration calls
// chalk.server.v1.OnlineStoreIntegrationService.DeleteOnlineStoreIntegration.
func (c *onlineStoreIntegrationServiceClient) DeleteOnlineStoreIntegration(ctx context.Context, req *connect.Request[v1.DeleteOnlineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOnlineStoreIntegrationResponse], error) {
	return c.deleteOnlineStoreIntegration.CallUnary(ctx, req)
}

// OnlineStoreIntegrationServiceHandler is an implementation of the
// chalk.server.v1.OnlineStoreIntegrationService service.
type OnlineStoreIntegrationServiceHandler interface {
	CreateOnlineStoreIntegration(context.Context, *connect.Request[v1.CreateOnlineStoreIntegrationRequest]) (*connect.Response[v1.CreateOnlineStoreIntegrationResponse], error)
	ListOnlineStoreIntegrations(context.Context, *connect.Request[v1.ListOnlineStoreIntegrationsRequest]) (*connect.Response[v1.ListOnlineStoreIntegrationsResponse], error)
	UpdateOnlineStoreIntegration(context.Context, *connect.Request[v1.UpdateOnlineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOnlineStoreIntegrationResponse], error)
	DeleteOnlineStoreIntegration(context.Context, *connect.Request[v1.DeleteOnlineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOnlineStoreIntegrationResponse], error)
}

// NewOnlineStoreIntegrationServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOnlineStoreIntegrationServiceHandler(svc OnlineStoreIntegrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	onlineStoreIntegrationServiceMethods := v1.File_chalk_server_v1_storage_integrations_proto.Services().ByName("OnlineStoreIntegrationService").Methods()
	onlineStoreIntegrationServiceCreateOnlineStoreIntegrationHandler := connect.NewUnaryHandler(
		OnlineStoreIntegrationServiceCreateOnlineStoreIntegrationProcedure,
		svc.CreateOnlineStoreIntegration,
		connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("CreateOnlineStoreIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	onlineStoreIntegrationServiceListOnlineStoreIntegrationsHandler := connect.NewUnaryHandler(
		OnlineStoreIntegrationServiceListOnlineStoreIntegrationsProcedure,
		svc.ListOnlineStoreIntegrations,
		connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("ListOnlineStoreIntegrations")),
		connect.WithHandlerOptions(opts...),
	)
	onlineStoreIntegrationServiceUpdateOnlineStoreIntegrationHandler := connect.NewUnaryHandler(
		OnlineStoreIntegrationServiceUpdateOnlineStoreIntegrationProcedure,
		svc.UpdateOnlineStoreIntegration,
		connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("UpdateOnlineStoreIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	onlineStoreIntegrationServiceDeleteOnlineStoreIntegrationHandler := connect.NewUnaryHandler(
		OnlineStoreIntegrationServiceDeleteOnlineStoreIntegrationProcedure,
		svc.DeleteOnlineStoreIntegration,
		connect.WithSchema(onlineStoreIntegrationServiceMethods.ByName("DeleteOnlineStoreIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.OnlineStoreIntegrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OnlineStoreIntegrationServiceCreateOnlineStoreIntegrationProcedure:
			onlineStoreIntegrationServiceCreateOnlineStoreIntegrationHandler.ServeHTTP(w, r)
		case OnlineStoreIntegrationServiceListOnlineStoreIntegrationsProcedure:
			onlineStoreIntegrationServiceListOnlineStoreIntegrationsHandler.ServeHTTP(w, r)
		case OnlineStoreIntegrationServiceUpdateOnlineStoreIntegrationProcedure:
			onlineStoreIntegrationServiceUpdateOnlineStoreIntegrationHandler.ServeHTTP(w, r)
		case OnlineStoreIntegrationServiceDeleteOnlineStoreIntegrationProcedure:
			onlineStoreIntegrationServiceDeleteOnlineStoreIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOnlineStoreIntegrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOnlineStoreIntegrationServiceHandler struct{}

func (UnimplementedOnlineStoreIntegrationServiceHandler) CreateOnlineStoreIntegration(context.Context, *connect.Request[v1.CreateOnlineStoreIntegrationRequest]) (*connect.Response[v1.CreateOnlineStoreIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OnlineStoreIntegrationService.CreateOnlineStoreIntegration is not implemented"))
}

func (UnimplementedOnlineStoreIntegrationServiceHandler) ListOnlineStoreIntegrations(context.Context, *connect.Request[v1.ListOnlineStoreIntegrationsRequest]) (*connect.Response[v1.ListOnlineStoreIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OnlineStoreIntegrationService.ListOnlineStoreIntegrations is not implemented"))
}

func (UnimplementedOnlineStoreIntegrationServiceHandler) UpdateOnlineStoreIntegration(context.Context, *connect.Request[v1.UpdateOnlineStoreIntegrationRequest]) (*connect.Response[v1.UpdateOnlineStoreIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OnlineStoreIntegrationService.UpdateOnlineStoreIntegration is not implemented"))
}

func (UnimplementedOnlineStoreIntegrationServiceHandler) DeleteOnlineStoreIntegration(context.Context, *connect.Request[v1.DeleteOnlineStoreIntegrationRequest]) (*connect.Response[v1.DeleteOnlineStoreIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OnlineStoreIntegrationService.DeleteOnlineStoreIntegration is not implemented"))
}
