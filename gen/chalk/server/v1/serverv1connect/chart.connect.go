// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/chart.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChartsServiceName is the fully-qualified name of the ChartsService service.
	ChartsServiceName = "chalk.server.v1.ChartsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChartsServiceListChartsProcedure is the fully-qualified name of the ChartsService's ListCharts
	// RPC.
	ChartsServiceListChartsProcedure = "/chalk.server.v1.ChartsService/ListCharts"
)

// ChartsServiceClient is a client for the chalk.server.v1.ChartsService service.
type ChartsServiceClient interface {
	ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error)
}

// NewChartsServiceClient constructs a client for the chalk.server.v1.ChartsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChartsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChartsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chartsServiceMethods := v1.File_chalk_server_v1_chart_proto.Services().ByName("ChartsService").Methods()
	return &chartsServiceClient{
		listCharts: connect.NewClient[v1.ListChartsRequest, v1.ListChartsResponse](
			httpClient,
			baseURL+ChartsServiceListChartsProcedure,
			connect.WithSchema(chartsServiceMethods.ByName("ListCharts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chartsServiceClient implements ChartsServiceClient.
type chartsServiceClient struct {
	listCharts *connect.Client[v1.ListChartsRequest, v1.ListChartsResponse]
}

// ListCharts calls chalk.server.v1.ChartsService.ListCharts.
func (c *chartsServiceClient) ListCharts(ctx context.Context, req *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error) {
	return c.listCharts.CallUnary(ctx, req)
}

// ChartsServiceHandler is an implementation of the chalk.server.v1.ChartsService service.
type ChartsServiceHandler interface {
	ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error)
}

// NewChartsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChartsServiceHandler(svc ChartsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chartsServiceMethods := v1.File_chalk_server_v1_chart_proto.Services().ByName("ChartsService").Methods()
	chartsServiceListChartsHandler := connect.NewUnaryHandler(
		ChartsServiceListChartsProcedure,
		svc.ListCharts,
		connect.WithSchema(chartsServiceMethods.ByName("ListCharts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.ChartsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChartsServiceListChartsProcedure:
			chartsServiceListChartsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChartsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChartsServiceHandler struct{}

func (UnimplementedChartsServiceHandler) ListCharts(context.Context, *connect.Request[v1.ListChartsRequest]) (*connect.Response[v1.ListChartsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ChartsService.ListCharts is not implemented"))
}
