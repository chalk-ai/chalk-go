// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/cloud_components.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CloudComponentsServiceName is the fully-qualified name of the CloudComponentsService service.
	CloudComponentsServiceName = "chalk.server.v1.CloudComponentsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CloudComponentsServiceCreateCloudComponentVpcProcedure is the fully-qualified name of the
	// CloudComponentsService's CreateCloudComponentVpc RPC.
	CloudComponentsServiceCreateCloudComponentVpcProcedure = "/chalk.server.v1.CloudComponentsService/CreateCloudComponentVpc"
	// CloudComponentsServiceGetCloudComponentVpcProcedure is the fully-qualified name of the
	// CloudComponentsService's GetCloudComponentVpc RPC.
	CloudComponentsServiceGetCloudComponentVpcProcedure = "/chalk.server.v1.CloudComponentsService/GetCloudComponentVpc"
	// CloudComponentsServiceDeleteCloudComponentVpcProcedure is the fully-qualified name of the
	// CloudComponentsService's DeleteCloudComponentVpc RPC.
	CloudComponentsServiceDeleteCloudComponentVpcProcedure = "/chalk.server.v1.CloudComponentsService/DeleteCloudComponentVpc"
	// CloudComponentsServiceCreateCloudComponentClusterProcedure is the fully-qualified name of the
	// CloudComponentsService's CreateCloudComponentCluster RPC.
	CloudComponentsServiceCreateCloudComponentClusterProcedure = "/chalk.server.v1.CloudComponentsService/CreateCloudComponentCluster"
	// CloudComponentsServiceUpdateCloudComponentClusterProcedure is the fully-qualified name of the
	// CloudComponentsService's UpdateCloudComponentCluster RPC.
	CloudComponentsServiceUpdateCloudComponentClusterProcedure = "/chalk.server.v1.CloudComponentsService/UpdateCloudComponentCluster"
	// CloudComponentsServiceGetCloudComponentClusterProcedure is the fully-qualified name of the
	// CloudComponentsService's GetCloudComponentCluster RPC.
	CloudComponentsServiceGetCloudComponentClusterProcedure = "/chalk.server.v1.CloudComponentsService/GetCloudComponentCluster"
	// CloudComponentsServiceDeleteCloudComponentClusterProcedure is the fully-qualified name of the
	// CloudComponentsService's DeleteCloudComponentCluster RPC.
	CloudComponentsServiceDeleteCloudComponentClusterProcedure = "/chalk.server.v1.CloudComponentsService/DeleteCloudComponentCluster"
	// CloudComponentsServiceCreateCloudComponentStorageProcedure is the fully-qualified name of the
	// CloudComponentsService's CreateCloudComponentStorage RPC.
	CloudComponentsServiceCreateCloudComponentStorageProcedure = "/chalk.server.v1.CloudComponentsService/CreateCloudComponentStorage"
	// CloudComponentsServiceGetCloudComponentStorageProcedure is the fully-qualified name of the
	// CloudComponentsService's GetCloudComponentStorage RPC.
	CloudComponentsServiceGetCloudComponentStorageProcedure = "/chalk.server.v1.CloudComponentsService/GetCloudComponentStorage"
	// CloudComponentsServiceDeleteCloudComponentStorageProcedure is the fully-qualified name of the
	// CloudComponentsService's DeleteCloudComponentStorage RPC.
	CloudComponentsServiceDeleteCloudComponentStorageProcedure = "/chalk.server.v1.CloudComponentsService/DeleteCloudComponentStorage"
)

// CloudComponentsServiceClient is a client for the chalk.server.v1.CloudComponentsService service.
type CloudComponentsServiceClient interface {
	CreateCloudComponentVpc(context.Context, *connect.Request[v1.CreateCloudComponentVpcRequest]) (*connect.Response[v1.CreateCloudComponentVpcResponse], error)
	GetCloudComponentVpc(context.Context, *connect.Request[v1.GetCloudComponentVpcRequest]) (*connect.Response[v1.GetCloudComponentVpcResponse], error)
	DeleteCloudComponentVpc(context.Context, *connect.Request[v1.DeleteCloudComponentVpcRequest]) (*connect.Response[v1.DeleteCloudComponentVpcResponse], error)
	CreateCloudComponentCluster(context.Context, *connect.Request[v1.CreateCloudComponentClusterRequest]) (*connect.Response[v1.CreateCloudComponentClusterResponse], error)
	UpdateCloudComponentCluster(context.Context, *connect.Request[v1.UpdateCloudComponentClusterRequest]) (*connect.Response[v1.UpdateCloudComponentClusterResponse], error)
	GetCloudComponentCluster(context.Context, *connect.Request[v1.GetCloudComponentClusterRequest]) (*connect.Response[v1.GetCloudComponentClusterResponse], error)
	DeleteCloudComponentCluster(context.Context, *connect.Request[v1.DeleteCloudComponentClusterRequest]) (*connect.Response[v1.DeleteCloudComponentClusterResponse], error)
	CreateCloudComponentStorage(context.Context, *connect.Request[v1.CreateCloudComponentStorageRequest]) (*connect.Response[v1.CreateCloudComponentStorageResponse], error)
	GetCloudComponentStorage(context.Context, *connect.Request[v1.GetCloudComponentStorageRequest]) (*connect.Response[v1.GetCloudComponentStorageResponse], error)
	DeleteCloudComponentStorage(context.Context, *connect.Request[v1.DeleteCloudComponentStorageRequest]) (*connect.Response[v1.DeleteCloudComponentStorageResponse], error)
}

// NewCloudComponentsServiceClient constructs a client for the
// chalk.server.v1.CloudComponentsService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCloudComponentsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CloudComponentsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cloudComponentsServiceMethods := v1.File_chalk_server_v1_cloud_components_proto.Services().ByName("CloudComponentsService").Methods()
	return &cloudComponentsServiceClient{
		createCloudComponentVpc: connect.NewClient[v1.CreateCloudComponentVpcRequest, v1.CreateCloudComponentVpcResponse](
			httpClient,
			baseURL+CloudComponentsServiceCreateCloudComponentVpcProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("CreateCloudComponentVpc")),
			connect.WithClientOptions(opts...),
		),
		getCloudComponentVpc: connect.NewClient[v1.GetCloudComponentVpcRequest, v1.GetCloudComponentVpcResponse](
			httpClient,
			baseURL+CloudComponentsServiceGetCloudComponentVpcProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("GetCloudComponentVpc")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteCloudComponentVpc: connect.NewClient[v1.DeleteCloudComponentVpcRequest, v1.DeleteCloudComponentVpcResponse](
			httpClient,
			baseURL+CloudComponentsServiceDeleteCloudComponentVpcProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("DeleteCloudComponentVpc")),
			connect.WithClientOptions(opts...),
		),
		createCloudComponentCluster: connect.NewClient[v1.CreateCloudComponentClusterRequest, v1.CreateCloudComponentClusterResponse](
			httpClient,
			baseURL+CloudComponentsServiceCreateCloudComponentClusterProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("CreateCloudComponentCluster")),
			connect.WithClientOptions(opts...),
		),
		updateCloudComponentCluster: connect.NewClient[v1.UpdateCloudComponentClusterRequest, v1.UpdateCloudComponentClusterResponse](
			httpClient,
			baseURL+CloudComponentsServiceUpdateCloudComponentClusterProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("UpdateCloudComponentCluster")),
			connect.WithClientOptions(opts...),
		),
		getCloudComponentCluster: connect.NewClient[v1.GetCloudComponentClusterRequest, v1.GetCloudComponentClusterResponse](
			httpClient,
			baseURL+CloudComponentsServiceGetCloudComponentClusterProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("GetCloudComponentCluster")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteCloudComponentCluster: connect.NewClient[v1.DeleteCloudComponentClusterRequest, v1.DeleteCloudComponentClusterResponse](
			httpClient,
			baseURL+CloudComponentsServiceDeleteCloudComponentClusterProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("DeleteCloudComponentCluster")),
			connect.WithClientOptions(opts...),
		),
		createCloudComponentStorage: connect.NewClient[v1.CreateCloudComponentStorageRequest, v1.CreateCloudComponentStorageResponse](
			httpClient,
			baseURL+CloudComponentsServiceCreateCloudComponentStorageProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("CreateCloudComponentStorage")),
			connect.WithClientOptions(opts...),
		),
		getCloudComponentStorage: connect.NewClient[v1.GetCloudComponentStorageRequest, v1.GetCloudComponentStorageResponse](
			httpClient,
			baseURL+CloudComponentsServiceGetCloudComponentStorageProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("GetCloudComponentStorage")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteCloudComponentStorage: connect.NewClient[v1.DeleteCloudComponentStorageRequest, v1.DeleteCloudComponentStorageResponse](
			httpClient,
			baseURL+CloudComponentsServiceDeleteCloudComponentStorageProcedure,
			connect.WithSchema(cloudComponentsServiceMethods.ByName("DeleteCloudComponentStorage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cloudComponentsServiceClient implements CloudComponentsServiceClient.
type cloudComponentsServiceClient struct {
	createCloudComponentVpc     *connect.Client[v1.CreateCloudComponentVpcRequest, v1.CreateCloudComponentVpcResponse]
	getCloudComponentVpc        *connect.Client[v1.GetCloudComponentVpcRequest, v1.GetCloudComponentVpcResponse]
	deleteCloudComponentVpc     *connect.Client[v1.DeleteCloudComponentVpcRequest, v1.DeleteCloudComponentVpcResponse]
	createCloudComponentCluster *connect.Client[v1.CreateCloudComponentClusterRequest, v1.CreateCloudComponentClusterResponse]
	updateCloudComponentCluster *connect.Client[v1.UpdateCloudComponentClusterRequest, v1.UpdateCloudComponentClusterResponse]
	getCloudComponentCluster    *connect.Client[v1.GetCloudComponentClusterRequest, v1.GetCloudComponentClusterResponse]
	deleteCloudComponentCluster *connect.Client[v1.DeleteCloudComponentClusterRequest, v1.DeleteCloudComponentClusterResponse]
	createCloudComponentStorage *connect.Client[v1.CreateCloudComponentStorageRequest, v1.CreateCloudComponentStorageResponse]
	getCloudComponentStorage    *connect.Client[v1.GetCloudComponentStorageRequest, v1.GetCloudComponentStorageResponse]
	deleteCloudComponentStorage *connect.Client[v1.DeleteCloudComponentStorageRequest, v1.DeleteCloudComponentStorageResponse]
}

// CreateCloudComponentVpc calls chalk.server.v1.CloudComponentsService.CreateCloudComponentVpc.
func (c *cloudComponentsServiceClient) CreateCloudComponentVpc(ctx context.Context, req *connect.Request[v1.CreateCloudComponentVpcRequest]) (*connect.Response[v1.CreateCloudComponentVpcResponse], error) {
	return c.createCloudComponentVpc.CallUnary(ctx, req)
}

// GetCloudComponentVpc calls chalk.server.v1.CloudComponentsService.GetCloudComponentVpc.
func (c *cloudComponentsServiceClient) GetCloudComponentVpc(ctx context.Context, req *connect.Request[v1.GetCloudComponentVpcRequest]) (*connect.Response[v1.GetCloudComponentVpcResponse], error) {
	return c.getCloudComponentVpc.CallUnary(ctx, req)
}

// DeleteCloudComponentVpc calls chalk.server.v1.CloudComponentsService.DeleteCloudComponentVpc.
func (c *cloudComponentsServiceClient) DeleteCloudComponentVpc(ctx context.Context, req *connect.Request[v1.DeleteCloudComponentVpcRequest]) (*connect.Response[v1.DeleteCloudComponentVpcResponse], error) {
	return c.deleteCloudComponentVpc.CallUnary(ctx, req)
}

// CreateCloudComponentCluster calls
// chalk.server.v1.CloudComponentsService.CreateCloudComponentCluster.
func (c *cloudComponentsServiceClient) CreateCloudComponentCluster(ctx context.Context, req *connect.Request[v1.CreateCloudComponentClusterRequest]) (*connect.Response[v1.CreateCloudComponentClusterResponse], error) {
	return c.createCloudComponentCluster.CallUnary(ctx, req)
}

// UpdateCloudComponentCluster calls
// chalk.server.v1.CloudComponentsService.UpdateCloudComponentCluster.
func (c *cloudComponentsServiceClient) UpdateCloudComponentCluster(ctx context.Context, req *connect.Request[v1.UpdateCloudComponentClusterRequest]) (*connect.Response[v1.UpdateCloudComponentClusterResponse], error) {
	return c.updateCloudComponentCluster.CallUnary(ctx, req)
}

// GetCloudComponentCluster calls chalk.server.v1.CloudComponentsService.GetCloudComponentCluster.
func (c *cloudComponentsServiceClient) GetCloudComponentCluster(ctx context.Context, req *connect.Request[v1.GetCloudComponentClusterRequest]) (*connect.Response[v1.GetCloudComponentClusterResponse], error) {
	return c.getCloudComponentCluster.CallUnary(ctx, req)
}

// DeleteCloudComponentCluster calls
// chalk.server.v1.CloudComponentsService.DeleteCloudComponentCluster.
func (c *cloudComponentsServiceClient) DeleteCloudComponentCluster(ctx context.Context, req *connect.Request[v1.DeleteCloudComponentClusterRequest]) (*connect.Response[v1.DeleteCloudComponentClusterResponse], error) {
	return c.deleteCloudComponentCluster.CallUnary(ctx, req)
}

// CreateCloudComponentStorage calls
// chalk.server.v1.CloudComponentsService.CreateCloudComponentStorage.
func (c *cloudComponentsServiceClient) CreateCloudComponentStorage(ctx context.Context, req *connect.Request[v1.CreateCloudComponentStorageRequest]) (*connect.Response[v1.CreateCloudComponentStorageResponse], error) {
	return c.createCloudComponentStorage.CallUnary(ctx, req)
}

// GetCloudComponentStorage calls chalk.server.v1.CloudComponentsService.GetCloudComponentStorage.
func (c *cloudComponentsServiceClient) GetCloudComponentStorage(ctx context.Context, req *connect.Request[v1.GetCloudComponentStorageRequest]) (*connect.Response[v1.GetCloudComponentStorageResponse], error) {
	return c.getCloudComponentStorage.CallUnary(ctx, req)
}

// DeleteCloudComponentStorage calls
// chalk.server.v1.CloudComponentsService.DeleteCloudComponentStorage.
func (c *cloudComponentsServiceClient) DeleteCloudComponentStorage(ctx context.Context, req *connect.Request[v1.DeleteCloudComponentStorageRequest]) (*connect.Response[v1.DeleteCloudComponentStorageResponse], error) {
	return c.deleteCloudComponentStorage.CallUnary(ctx, req)
}

// CloudComponentsServiceHandler is an implementation of the chalk.server.v1.CloudComponentsService
// service.
type CloudComponentsServiceHandler interface {
	CreateCloudComponentVpc(context.Context, *connect.Request[v1.CreateCloudComponentVpcRequest]) (*connect.Response[v1.CreateCloudComponentVpcResponse], error)
	GetCloudComponentVpc(context.Context, *connect.Request[v1.GetCloudComponentVpcRequest]) (*connect.Response[v1.GetCloudComponentVpcResponse], error)
	DeleteCloudComponentVpc(context.Context, *connect.Request[v1.DeleteCloudComponentVpcRequest]) (*connect.Response[v1.DeleteCloudComponentVpcResponse], error)
	CreateCloudComponentCluster(context.Context, *connect.Request[v1.CreateCloudComponentClusterRequest]) (*connect.Response[v1.CreateCloudComponentClusterResponse], error)
	UpdateCloudComponentCluster(context.Context, *connect.Request[v1.UpdateCloudComponentClusterRequest]) (*connect.Response[v1.UpdateCloudComponentClusterResponse], error)
	GetCloudComponentCluster(context.Context, *connect.Request[v1.GetCloudComponentClusterRequest]) (*connect.Response[v1.GetCloudComponentClusterResponse], error)
	DeleteCloudComponentCluster(context.Context, *connect.Request[v1.DeleteCloudComponentClusterRequest]) (*connect.Response[v1.DeleteCloudComponentClusterResponse], error)
	CreateCloudComponentStorage(context.Context, *connect.Request[v1.CreateCloudComponentStorageRequest]) (*connect.Response[v1.CreateCloudComponentStorageResponse], error)
	GetCloudComponentStorage(context.Context, *connect.Request[v1.GetCloudComponentStorageRequest]) (*connect.Response[v1.GetCloudComponentStorageResponse], error)
	DeleteCloudComponentStorage(context.Context, *connect.Request[v1.DeleteCloudComponentStorageRequest]) (*connect.Response[v1.DeleteCloudComponentStorageResponse], error)
}

// NewCloudComponentsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCloudComponentsServiceHandler(svc CloudComponentsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cloudComponentsServiceMethods := v1.File_chalk_server_v1_cloud_components_proto.Services().ByName("CloudComponentsService").Methods()
	cloudComponentsServiceCreateCloudComponentVpcHandler := connect.NewUnaryHandler(
		CloudComponentsServiceCreateCloudComponentVpcProcedure,
		svc.CreateCloudComponentVpc,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("CreateCloudComponentVpc")),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceGetCloudComponentVpcHandler := connect.NewUnaryHandler(
		CloudComponentsServiceGetCloudComponentVpcProcedure,
		svc.GetCloudComponentVpc,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("GetCloudComponentVpc")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceDeleteCloudComponentVpcHandler := connect.NewUnaryHandler(
		CloudComponentsServiceDeleteCloudComponentVpcProcedure,
		svc.DeleteCloudComponentVpc,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("DeleteCloudComponentVpc")),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceCreateCloudComponentClusterHandler := connect.NewUnaryHandler(
		CloudComponentsServiceCreateCloudComponentClusterProcedure,
		svc.CreateCloudComponentCluster,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("CreateCloudComponentCluster")),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceUpdateCloudComponentClusterHandler := connect.NewUnaryHandler(
		CloudComponentsServiceUpdateCloudComponentClusterProcedure,
		svc.UpdateCloudComponentCluster,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("UpdateCloudComponentCluster")),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceGetCloudComponentClusterHandler := connect.NewUnaryHandler(
		CloudComponentsServiceGetCloudComponentClusterProcedure,
		svc.GetCloudComponentCluster,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("GetCloudComponentCluster")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceDeleteCloudComponentClusterHandler := connect.NewUnaryHandler(
		CloudComponentsServiceDeleteCloudComponentClusterProcedure,
		svc.DeleteCloudComponentCluster,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("DeleteCloudComponentCluster")),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceCreateCloudComponentStorageHandler := connect.NewUnaryHandler(
		CloudComponentsServiceCreateCloudComponentStorageProcedure,
		svc.CreateCloudComponentStorage,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("CreateCloudComponentStorage")),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceGetCloudComponentStorageHandler := connect.NewUnaryHandler(
		CloudComponentsServiceGetCloudComponentStorageProcedure,
		svc.GetCloudComponentStorage,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("GetCloudComponentStorage")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cloudComponentsServiceDeleteCloudComponentStorageHandler := connect.NewUnaryHandler(
		CloudComponentsServiceDeleteCloudComponentStorageProcedure,
		svc.DeleteCloudComponentStorage,
		connect.WithSchema(cloudComponentsServiceMethods.ByName("DeleteCloudComponentStorage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.CloudComponentsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CloudComponentsServiceCreateCloudComponentVpcProcedure:
			cloudComponentsServiceCreateCloudComponentVpcHandler.ServeHTTP(w, r)
		case CloudComponentsServiceGetCloudComponentVpcProcedure:
			cloudComponentsServiceGetCloudComponentVpcHandler.ServeHTTP(w, r)
		case CloudComponentsServiceDeleteCloudComponentVpcProcedure:
			cloudComponentsServiceDeleteCloudComponentVpcHandler.ServeHTTP(w, r)
		case CloudComponentsServiceCreateCloudComponentClusterProcedure:
			cloudComponentsServiceCreateCloudComponentClusterHandler.ServeHTTP(w, r)
		case CloudComponentsServiceUpdateCloudComponentClusterProcedure:
			cloudComponentsServiceUpdateCloudComponentClusterHandler.ServeHTTP(w, r)
		case CloudComponentsServiceGetCloudComponentClusterProcedure:
			cloudComponentsServiceGetCloudComponentClusterHandler.ServeHTTP(w, r)
		case CloudComponentsServiceDeleteCloudComponentClusterProcedure:
			cloudComponentsServiceDeleteCloudComponentClusterHandler.ServeHTTP(w, r)
		case CloudComponentsServiceCreateCloudComponentStorageProcedure:
			cloudComponentsServiceCreateCloudComponentStorageHandler.ServeHTTP(w, r)
		case CloudComponentsServiceGetCloudComponentStorageProcedure:
			cloudComponentsServiceGetCloudComponentStorageHandler.ServeHTTP(w, r)
		case CloudComponentsServiceDeleteCloudComponentStorageProcedure:
			cloudComponentsServiceDeleteCloudComponentStorageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCloudComponentsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCloudComponentsServiceHandler struct{}

func (UnimplementedCloudComponentsServiceHandler) CreateCloudComponentVpc(context.Context, *connect.Request[v1.CreateCloudComponentVpcRequest]) (*connect.Response[v1.CreateCloudComponentVpcResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.CreateCloudComponentVpc is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) GetCloudComponentVpc(context.Context, *connect.Request[v1.GetCloudComponentVpcRequest]) (*connect.Response[v1.GetCloudComponentVpcResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.GetCloudComponentVpc is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) DeleteCloudComponentVpc(context.Context, *connect.Request[v1.DeleteCloudComponentVpcRequest]) (*connect.Response[v1.DeleteCloudComponentVpcResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.DeleteCloudComponentVpc is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) CreateCloudComponentCluster(context.Context, *connect.Request[v1.CreateCloudComponentClusterRequest]) (*connect.Response[v1.CreateCloudComponentClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.CreateCloudComponentCluster is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) UpdateCloudComponentCluster(context.Context, *connect.Request[v1.UpdateCloudComponentClusterRequest]) (*connect.Response[v1.UpdateCloudComponentClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.UpdateCloudComponentCluster is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) GetCloudComponentCluster(context.Context, *connect.Request[v1.GetCloudComponentClusterRequest]) (*connect.Response[v1.GetCloudComponentClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.GetCloudComponentCluster is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) DeleteCloudComponentCluster(context.Context, *connect.Request[v1.DeleteCloudComponentClusterRequest]) (*connect.Response[v1.DeleteCloudComponentClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.DeleteCloudComponentCluster is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) CreateCloudComponentStorage(context.Context, *connect.Request[v1.CreateCloudComponentStorageRequest]) (*connect.Response[v1.CreateCloudComponentStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.CreateCloudComponentStorage is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) GetCloudComponentStorage(context.Context, *connect.Request[v1.GetCloudComponentStorageRequest]) (*connect.Response[v1.GetCloudComponentStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.GetCloudComponentStorage is not implemented"))
}

func (UnimplementedCloudComponentsServiceHandler) DeleteCloudComponentStorage(context.Context, *connect.Request[v1.DeleteCloudComponentStorageRequest]) (*connect.Response[v1.DeleteCloudComponentStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.CloudComponentsService.DeleteCloudComponentStorage is not implemented"))
}
