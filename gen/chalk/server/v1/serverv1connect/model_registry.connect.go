// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/model_registry.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ModelRegistryServiceName is the fully-qualified name of the ModelRegistryService service.
	ModelRegistryServiceName = "chalk.server.v1.ModelRegistryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ModelRegistryServiceListModelsProcedure is the fully-qualified name of the ModelRegistryService's
	// ListModels RPC.
	ModelRegistryServiceListModelsProcedure = "/chalk.server.v1.ModelRegistryService/ListModels"
	// ModelRegistryServiceGetModelProcedure is the fully-qualified name of the ModelRegistryService's
	// GetModel RPC.
	ModelRegistryServiceGetModelProcedure = "/chalk.server.v1.ModelRegistryService/GetModel"
	// ModelRegistryServiceCreateModelProcedure is the fully-qualified name of the
	// ModelRegistryService's CreateModel RPC.
	ModelRegistryServiceCreateModelProcedure = "/chalk.server.v1.ModelRegistryService/CreateModel"
	// ModelRegistryServiceUpdateModelProcedure is the fully-qualified name of the
	// ModelRegistryService's UpdateModel RPC.
	ModelRegistryServiceUpdateModelProcedure = "/chalk.server.v1.ModelRegistryService/UpdateModel"
	// ModelRegistryServiceListModelVersionsProcedure is the fully-qualified name of the
	// ModelRegistryService's ListModelVersions RPC.
	ModelRegistryServiceListModelVersionsProcedure = "/chalk.server.v1.ModelRegistryService/ListModelVersions"
	// ModelRegistryServiceGetModelVersionProcedure is the fully-qualified name of the
	// ModelRegistryService's GetModelVersion RPC.
	ModelRegistryServiceGetModelVersionProcedure = "/chalk.server.v1.ModelRegistryService/GetModelVersion"
	// ModelRegistryServiceCreateModelVersionProcedure is the fully-qualified name of the
	// ModelRegistryService's CreateModelVersion RPC.
	ModelRegistryServiceCreateModelVersionProcedure = "/chalk.server.v1.ModelRegistryService/CreateModelVersion"
	// ModelRegistryServiceUpdateModelVersionProcedure is the fully-qualified name of the
	// ModelRegistryService's UpdateModelVersion RPC.
	ModelRegistryServiceUpdateModelVersionProcedure = "/chalk.server.v1.ModelRegistryService/UpdateModelVersion"
)

// ModelRegistryServiceClient is a client for the chalk.server.v1.ModelRegistryService service.
type ModelRegistryServiceClient interface {
	ListModels(context.Context, *connect.Request[v1.ListModelsRequest]) (*connect.Response[v1.ListModelsResponse], error)
	GetModel(context.Context, *connect.Request[v1.GetModelRequest]) (*connect.Response[v1.GetModelResponse], error)
	CreateModel(context.Context, *connect.Request[v1.CreateModelRequest]) (*connect.Response[v1.CreateModelResponse], error)
	UpdateModel(context.Context, *connect.Request[v1.UpdateModelRequest]) (*connect.Response[v1.UpdateModelResponse], error)
	ListModelVersions(context.Context, *connect.Request[v1.ListModelVersionsRequest]) (*connect.Response[v1.ListModelVersionsResponse], error)
	GetModelVersion(context.Context, *connect.Request[v1.GetModelVersionRequest]) (*connect.Response[v1.GetModelVersionResponse], error)
	CreateModelVersion(context.Context, *connect.Request[v1.CreateModelVersionRequest]) (*connect.Response[v1.CreateModelVersionResponse], error)
	UpdateModelVersion(context.Context, *connect.Request[v1.UpdateModelVersionRequest]) (*connect.Response[v1.UpdateModelVersionResponse], error)
}

// NewModelRegistryServiceClient constructs a client for the chalk.server.v1.ModelRegistryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModelRegistryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ModelRegistryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	modelRegistryServiceMethods := v1.File_chalk_server_v1_model_registry_proto.Services().ByName("ModelRegistryService").Methods()
	return &modelRegistryServiceClient{
		listModels: connect.NewClient[v1.ListModelsRequest, v1.ListModelsResponse](
			httpClient,
			baseURL+ModelRegistryServiceListModelsProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("ListModels")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getModel: connect.NewClient[v1.GetModelRequest, v1.GetModelResponse](
			httpClient,
			baseURL+ModelRegistryServiceGetModelProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("GetModel")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createModel: connect.NewClient[v1.CreateModelRequest, v1.CreateModelResponse](
			httpClient,
			baseURL+ModelRegistryServiceCreateModelProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("CreateModel")),
			connect.WithClientOptions(opts...),
		),
		updateModel: connect.NewClient[v1.UpdateModelRequest, v1.UpdateModelResponse](
			httpClient,
			baseURL+ModelRegistryServiceUpdateModelProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("UpdateModel")),
			connect.WithClientOptions(opts...),
		),
		listModelVersions: connect.NewClient[v1.ListModelVersionsRequest, v1.ListModelVersionsResponse](
			httpClient,
			baseURL+ModelRegistryServiceListModelVersionsProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("ListModelVersions")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getModelVersion: connect.NewClient[v1.GetModelVersionRequest, v1.GetModelVersionResponse](
			httpClient,
			baseURL+ModelRegistryServiceGetModelVersionProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("GetModelVersion")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createModelVersion: connect.NewClient[v1.CreateModelVersionRequest, v1.CreateModelVersionResponse](
			httpClient,
			baseURL+ModelRegistryServiceCreateModelVersionProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("CreateModelVersion")),
			connect.WithClientOptions(opts...),
		),
		updateModelVersion: connect.NewClient[v1.UpdateModelVersionRequest, v1.UpdateModelVersionResponse](
			httpClient,
			baseURL+ModelRegistryServiceUpdateModelVersionProcedure,
			connect.WithSchema(modelRegistryServiceMethods.ByName("UpdateModelVersion")),
			connect.WithClientOptions(opts...),
		),
	}
}

// modelRegistryServiceClient implements ModelRegistryServiceClient.
type modelRegistryServiceClient struct {
	listModels         *connect.Client[v1.ListModelsRequest, v1.ListModelsResponse]
	getModel           *connect.Client[v1.GetModelRequest, v1.GetModelResponse]
	createModel        *connect.Client[v1.CreateModelRequest, v1.CreateModelResponse]
	updateModel        *connect.Client[v1.UpdateModelRequest, v1.UpdateModelResponse]
	listModelVersions  *connect.Client[v1.ListModelVersionsRequest, v1.ListModelVersionsResponse]
	getModelVersion    *connect.Client[v1.GetModelVersionRequest, v1.GetModelVersionResponse]
	createModelVersion *connect.Client[v1.CreateModelVersionRequest, v1.CreateModelVersionResponse]
	updateModelVersion *connect.Client[v1.UpdateModelVersionRequest, v1.UpdateModelVersionResponse]
}

// ListModels calls chalk.server.v1.ModelRegistryService.ListModels.
func (c *modelRegistryServiceClient) ListModels(ctx context.Context, req *connect.Request[v1.ListModelsRequest]) (*connect.Response[v1.ListModelsResponse], error) {
	return c.listModels.CallUnary(ctx, req)
}

// GetModel calls chalk.server.v1.ModelRegistryService.GetModel.
func (c *modelRegistryServiceClient) GetModel(ctx context.Context, req *connect.Request[v1.GetModelRequest]) (*connect.Response[v1.GetModelResponse], error) {
	return c.getModel.CallUnary(ctx, req)
}

// CreateModel calls chalk.server.v1.ModelRegistryService.CreateModel.
func (c *modelRegistryServiceClient) CreateModel(ctx context.Context, req *connect.Request[v1.CreateModelRequest]) (*connect.Response[v1.CreateModelResponse], error) {
	return c.createModel.CallUnary(ctx, req)
}

// UpdateModel calls chalk.server.v1.ModelRegistryService.UpdateModel.
func (c *modelRegistryServiceClient) UpdateModel(ctx context.Context, req *connect.Request[v1.UpdateModelRequest]) (*connect.Response[v1.UpdateModelResponse], error) {
	return c.updateModel.CallUnary(ctx, req)
}

// ListModelVersions calls chalk.server.v1.ModelRegistryService.ListModelVersions.
func (c *modelRegistryServiceClient) ListModelVersions(ctx context.Context, req *connect.Request[v1.ListModelVersionsRequest]) (*connect.Response[v1.ListModelVersionsResponse], error) {
	return c.listModelVersions.CallUnary(ctx, req)
}

// GetModelVersion calls chalk.server.v1.ModelRegistryService.GetModelVersion.
func (c *modelRegistryServiceClient) GetModelVersion(ctx context.Context, req *connect.Request[v1.GetModelVersionRequest]) (*connect.Response[v1.GetModelVersionResponse], error) {
	return c.getModelVersion.CallUnary(ctx, req)
}

// CreateModelVersion calls chalk.server.v1.ModelRegistryService.CreateModelVersion.
func (c *modelRegistryServiceClient) CreateModelVersion(ctx context.Context, req *connect.Request[v1.CreateModelVersionRequest]) (*connect.Response[v1.CreateModelVersionResponse], error) {
	return c.createModelVersion.CallUnary(ctx, req)
}

// UpdateModelVersion calls chalk.server.v1.ModelRegistryService.UpdateModelVersion.
func (c *modelRegistryServiceClient) UpdateModelVersion(ctx context.Context, req *connect.Request[v1.UpdateModelVersionRequest]) (*connect.Response[v1.UpdateModelVersionResponse], error) {
	return c.updateModelVersion.CallUnary(ctx, req)
}

// ModelRegistryServiceHandler is an implementation of the chalk.server.v1.ModelRegistryService
// service.
type ModelRegistryServiceHandler interface {
	ListModels(context.Context, *connect.Request[v1.ListModelsRequest]) (*connect.Response[v1.ListModelsResponse], error)
	GetModel(context.Context, *connect.Request[v1.GetModelRequest]) (*connect.Response[v1.GetModelResponse], error)
	CreateModel(context.Context, *connect.Request[v1.CreateModelRequest]) (*connect.Response[v1.CreateModelResponse], error)
	UpdateModel(context.Context, *connect.Request[v1.UpdateModelRequest]) (*connect.Response[v1.UpdateModelResponse], error)
	ListModelVersions(context.Context, *connect.Request[v1.ListModelVersionsRequest]) (*connect.Response[v1.ListModelVersionsResponse], error)
	GetModelVersion(context.Context, *connect.Request[v1.GetModelVersionRequest]) (*connect.Response[v1.GetModelVersionResponse], error)
	CreateModelVersion(context.Context, *connect.Request[v1.CreateModelVersionRequest]) (*connect.Response[v1.CreateModelVersionResponse], error)
	UpdateModelVersion(context.Context, *connect.Request[v1.UpdateModelVersionRequest]) (*connect.Response[v1.UpdateModelVersionResponse], error)
}

// NewModelRegistryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModelRegistryServiceHandler(svc ModelRegistryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	modelRegistryServiceMethods := v1.File_chalk_server_v1_model_registry_proto.Services().ByName("ModelRegistryService").Methods()
	modelRegistryServiceListModelsHandler := connect.NewUnaryHandler(
		ModelRegistryServiceListModelsProcedure,
		svc.ListModels,
		connect.WithSchema(modelRegistryServiceMethods.ByName("ListModels")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	modelRegistryServiceGetModelHandler := connect.NewUnaryHandler(
		ModelRegistryServiceGetModelProcedure,
		svc.GetModel,
		connect.WithSchema(modelRegistryServiceMethods.ByName("GetModel")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	modelRegistryServiceCreateModelHandler := connect.NewUnaryHandler(
		ModelRegistryServiceCreateModelProcedure,
		svc.CreateModel,
		connect.WithSchema(modelRegistryServiceMethods.ByName("CreateModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelRegistryServiceUpdateModelHandler := connect.NewUnaryHandler(
		ModelRegistryServiceUpdateModelProcedure,
		svc.UpdateModel,
		connect.WithSchema(modelRegistryServiceMethods.ByName("UpdateModel")),
		connect.WithHandlerOptions(opts...),
	)
	modelRegistryServiceListModelVersionsHandler := connect.NewUnaryHandler(
		ModelRegistryServiceListModelVersionsProcedure,
		svc.ListModelVersions,
		connect.WithSchema(modelRegistryServiceMethods.ByName("ListModelVersions")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	modelRegistryServiceGetModelVersionHandler := connect.NewUnaryHandler(
		ModelRegistryServiceGetModelVersionProcedure,
		svc.GetModelVersion,
		connect.WithSchema(modelRegistryServiceMethods.ByName("GetModelVersion")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	modelRegistryServiceCreateModelVersionHandler := connect.NewUnaryHandler(
		ModelRegistryServiceCreateModelVersionProcedure,
		svc.CreateModelVersion,
		connect.WithSchema(modelRegistryServiceMethods.ByName("CreateModelVersion")),
		connect.WithHandlerOptions(opts...),
	)
	modelRegistryServiceUpdateModelVersionHandler := connect.NewUnaryHandler(
		ModelRegistryServiceUpdateModelVersionProcedure,
		svc.UpdateModelVersion,
		connect.WithSchema(modelRegistryServiceMethods.ByName("UpdateModelVersion")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.ModelRegistryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ModelRegistryServiceListModelsProcedure:
			modelRegistryServiceListModelsHandler.ServeHTTP(w, r)
		case ModelRegistryServiceGetModelProcedure:
			modelRegistryServiceGetModelHandler.ServeHTTP(w, r)
		case ModelRegistryServiceCreateModelProcedure:
			modelRegistryServiceCreateModelHandler.ServeHTTP(w, r)
		case ModelRegistryServiceUpdateModelProcedure:
			modelRegistryServiceUpdateModelHandler.ServeHTTP(w, r)
		case ModelRegistryServiceListModelVersionsProcedure:
			modelRegistryServiceListModelVersionsHandler.ServeHTTP(w, r)
		case ModelRegistryServiceGetModelVersionProcedure:
			modelRegistryServiceGetModelVersionHandler.ServeHTTP(w, r)
		case ModelRegistryServiceCreateModelVersionProcedure:
			modelRegistryServiceCreateModelVersionHandler.ServeHTTP(w, r)
		case ModelRegistryServiceUpdateModelVersionProcedure:
			modelRegistryServiceUpdateModelVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedModelRegistryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModelRegistryServiceHandler struct{}

func (UnimplementedModelRegistryServiceHandler) ListModels(context.Context, *connect.Request[v1.ListModelsRequest]) (*connect.Response[v1.ListModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.ListModels is not implemented"))
}

func (UnimplementedModelRegistryServiceHandler) GetModel(context.Context, *connect.Request[v1.GetModelRequest]) (*connect.Response[v1.GetModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.GetModel is not implemented"))
}

func (UnimplementedModelRegistryServiceHandler) CreateModel(context.Context, *connect.Request[v1.CreateModelRequest]) (*connect.Response[v1.CreateModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.CreateModel is not implemented"))
}

func (UnimplementedModelRegistryServiceHandler) UpdateModel(context.Context, *connect.Request[v1.UpdateModelRequest]) (*connect.Response[v1.UpdateModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.UpdateModel is not implemented"))
}

func (UnimplementedModelRegistryServiceHandler) ListModelVersions(context.Context, *connect.Request[v1.ListModelVersionsRequest]) (*connect.Response[v1.ListModelVersionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.ListModelVersions is not implemented"))
}

func (UnimplementedModelRegistryServiceHandler) GetModelVersion(context.Context, *connect.Request[v1.GetModelVersionRequest]) (*connect.Response[v1.GetModelVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.GetModelVersion is not implemented"))
}

func (UnimplementedModelRegistryServiceHandler) CreateModelVersion(context.Context, *connect.Request[v1.CreateModelVersionRequest]) (*connect.Response[v1.CreateModelVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.CreateModelVersion is not implemented"))
}

func (UnimplementedModelRegistryServiceHandler) UpdateModelVersion(context.Context, *connect.Request[v1.UpdateModelVersionRequest]) (*connect.Response[v1.UpdateModelVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ModelRegistryService.UpdateModelVersion is not implemented"))
}
