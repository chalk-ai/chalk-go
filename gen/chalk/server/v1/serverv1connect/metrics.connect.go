// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/metrics.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MetricsServiceName is the fully-qualified name of the MetricsService service.
	MetricsServiceName = "chalk.server.v1.MetricsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetricsServiceGetOverviewSummaryMetricsProcedure is the fully-qualified name of the
	// MetricsService's GetOverviewSummaryMetrics RPC.
	MetricsServiceGetOverviewSummaryMetricsProcedure = "/chalk.server.v1.MetricsService/GetOverviewSummaryMetrics"
)

// MetricsServiceClient is a client for the chalk.server.v1.MetricsService service.
type MetricsServiceClient interface {
	GetOverviewSummaryMetrics(context.Context, *connect.Request[v1.GetOverviewSummaryMetricsRequest]) (*connect.Response[v1.GetOverviewSummaryMetricsResponse], error)
}

// NewMetricsServiceClient constructs a client for the chalk.server.v1.MetricsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetricsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetricsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	metricsServiceMethods := v1.File_chalk_server_v1_metrics_proto.Services().ByName("MetricsService").Methods()
	return &metricsServiceClient{
		getOverviewSummaryMetrics: connect.NewClient[v1.GetOverviewSummaryMetricsRequest, v1.GetOverviewSummaryMetricsResponse](
			httpClient,
			baseURL+MetricsServiceGetOverviewSummaryMetricsProcedure,
			connect.WithSchema(metricsServiceMethods.ByName("GetOverviewSummaryMetrics")),
			connect.WithClientOptions(opts...),
		),
	}
}

// metricsServiceClient implements MetricsServiceClient.
type metricsServiceClient struct {
	getOverviewSummaryMetrics *connect.Client[v1.GetOverviewSummaryMetricsRequest, v1.GetOverviewSummaryMetricsResponse]
}

// GetOverviewSummaryMetrics calls chalk.server.v1.MetricsService.GetOverviewSummaryMetrics.
func (c *metricsServiceClient) GetOverviewSummaryMetrics(ctx context.Context, req *connect.Request[v1.GetOverviewSummaryMetricsRequest]) (*connect.Response[v1.GetOverviewSummaryMetricsResponse], error) {
	return c.getOverviewSummaryMetrics.CallUnary(ctx, req)
}

// MetricsServiceHandler is an implementation of the chalk.server.v1.MetricsService service.
type MetricsServiceHandler interface {
	GetOverviewSummaryMetrics(context.Context, *connect.Request[v1.GetOverviewSummaryMetricsRequest]) (*connect.Response[v1.GetOverviewSummaryMetricsResponse], error)
}

// NewMetricsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetricsServiceHandler(svc MetricsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metricsServiceMethods := v1.File_chalk_server_v1_metrics_proto.Services().ByName("MetricsService").Methods()
	metricsServiceGetOverviewSummaryMetricsHandler := connect.NewUnaryHandler(
		MetricsServiceGetOverviewSummaryMetricsProcedure,
		svc.GetOverviewSummaryMetrics,
		connect.WithSchema(metricsServiceMethods.ByName("GetOverviewSummaryMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.MetricsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetricsServiceGetOverviewSummaryMetricsProcedure:
			metricsServiceGetOverviewSummaryMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetricsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetricsServiceHandler struct{}

func (UnimplementedMetricsServiceHandler) GetOverviewSummaryMetrics(context.Context, *connect.Request[v1.GetOverviewSummaryMetricsRequest]) (*connect.Response[v1.GetOverviewSummaryMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MetricsService.GetOverviewSummaryMetrics is not implemented"))
}
