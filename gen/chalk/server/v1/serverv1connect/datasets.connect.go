// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/datasets.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatasetMetadataServiceName is the fully-qualified name of the DatasetMetadataService service.
	DatasetMetadataServiceName = "chalk.server.v1.DatasetMetadataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatasetMetadataServiceListDatasetsProcedure is the fully-qualified name of the
	// DatasetMetadataService's ListDatasets RPC.
	DatasetMetadataServiceListDatasetsProcedure = "/chalk.server.v1.DatasetMetadataService/ListDatasets"
	// DatasetMetadataServiceGetDatasetProcedure is the fully-qualified name of the
	// DatasetMetadataService's GetDataset RPC.
	DatasetMetadataServiceGetDatasetProcedure = "/chalk.server.v1.DatasetMetadataService/GetDataset"
	// DatasetMetadataServiceListDatasetRevisionsProcedure is the fully-qualified name of the
	// DatasetMetadataService's ListDatasetRevisions RPC.
	DatasetMetadataServiceListDatasetRevisionsProcedure = "/chalk.server.v1.DatasetMetadataService/ListDatasetRevisions"
	// DatasetMetadataServiceGetDatasetRevisionProcedure is the fully-qualified name of the
	// DatasetMetadataService's GetDatasetRevision RPC.
	DatasetMetadataServiceGetDatasetRevisionProcedure = "/chalk.server.v1.DatasetMetadataService/GetDatasetRevision"
)

// DatasetMetadataServiceClient is a client for the chalk.server.v1.DatasetMetadataService service.
type DatasetMetadataServiceClient interface {
	ListDatasets(context.Context, *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error)
	GetDataset(context.Context, *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.GetDatasetResponse], error)
	ListDatasetRevisions(context.Context, *connect.Request[v1.ListDatasetRevisionsRequest]) (*connect.Response[v1.ListDatasetRevisionsResponse], error)
	GetDatasetRevision(context.Context, *connect.Request[v1.GetDatasetRevisionRequest]) (*connect.Response[v1.GetDatasetRevisionResponse], error)
}

// NewDatasetMetadataServiceClient constructs a client for the
// chalk.server.v1.DatasetMetadataService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatasetMetadataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatasetMetadataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	datasetMetadataServiceMethods := v1.File_chalk_server_v1_datasets_proto.Services().ByName("DatasetMetadataService").Methods()
	return &datasetMetadataServiceClient{
		listDatasets: connect.NewClient[v1.ListDatasetsRequest, v1.ListDatasetsResponse](
			httpClient,
			baseURL+DatasetMetadataServiceListDatasetsProcedure,
			connect.WithSchema(datasetMetadataServiceMethods.ByName("ListDatasets")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getDataset: connect.NewClient[v1.GetDatasetRequest, v1.GetDatasetResponse](
			httpClient,
			baseURL+DatasetMetadataServiceGetDatasetProcedure,
			connect.WithSchema(datasetMetadataServiceMethods.ByName("GetDataset")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listDatasetRevisions: connect.NewClient[v1.ListDatasetRevisionsRequest, v1.ListDatasetRevisionsResponse](
			httpClient,
			baseURL+DatasetMetadataServiceListDatasetRevisionsProcedure,
			connect.WithSchema(datasetMetadataServiceMethods.ByName("ListDatasetRevisions")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getDatasetRevision: connect.NewClient[v1.GetDatasetRevisionRequest, v1.GetDatasetRevisionResponse](
			httpClient,
			baseURL+DatasetMetadataServiceGetDatasetRevisionProcedure,
			connect.WithSchema(datasetMetadataServiceMethods.ByName("GetDatasetRevision")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// datasetMetadataServiceClient implements DatasetMetadataServiceClient.
type datasetMetadataServiceClient struct {
	listDatasets         *connect.Client[v1.ListDatasetsRequest, v1.ListDatasetsResponse]
	getDataset           *connect.Client[v1.GetDatasetRequest, v1.GetDatasetResponse]
	listDatasetRevisions *connect.Client[v1.ListDatasetRevisionsRequest, v1.ListDatasetRevisionsResponse]
	getDatasetRevision   *connect.Client[v1.GetDatasetRevisionRequest, v1.GetDatasetRevisionResponse]
}

// ListDatasets calls chalk.server.v1.DatasetMetadataService.ListDatasets.
func (c *datasetMetadataServiceClient) ListDatasets(ctx context.Context, req *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error) {
	return c.listDatasets.CallUnary(ctx, req)
}

// GetDataset calls chalk.server.v1.DatasetMetadataService.GetDataset.
func (c *datasetMetadataServiceClient) GetDataset(ctx context.Context, req *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.GetDatasetResponse], error) {
	return c.getDataset.CallUnary(ctx, req)
}

// ListDatasetRevisions calls chalk.server.v1.DatasetMetadataService.ListDatasetRevisions.
func (c *datasetMetadataServiceClient) ListDatasetRevisions(ctx context.Context, req *connect.Request[v1.ListDatasetRevisionsRequest]) (*connect.Response[v1.ListDatasetRevisionsResponse], error) {
	return c.listDatasetRevisions.CallUnary(ctx, req)
}

// GetDatasetRevision calls chalk.server.v1.DatasetMetadataService.GetDatasetRevision.
func (c *datasetMetadataServiceClient) GetDatasetRevision(ctx context.Context, req *connect.Request[v1.GetDatasetRevisionRequest]) (*connect.Response[v1.GetDatasetRevisionResponse], error) {
	return c.getDatasetRevision.CallUnary(ctx, req)
}

// DatasetMetadataServiceHandler is an implementation of the chalk.server.v1.DatasetMetadataService
// service.
type DatasetMetadataServiceHandler interface {
	ListDatasets(context.Context, *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error)
	GetDataset(context.Context, *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.GetDatasetResponse], error)
	ListDatasetRevisions(context.Context, *connect.Request[v1.ListDatasetRevisionsRequest]) (*connect.Response[v1.ListDatasetRevisionsResponse], error)
	GetDatasetRevision(context.Context, *connect.Request[v1.GetDatasetRevisionRequest]) (*connect.Response[v1.GetDatasetRevisionResponse], error)
}

// NewDatasetMetadataServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatasetMetadataServiceHandler(svc DatasetMetadataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	datasetMetadataServiceMethods := v1.File_chalk_server_v1_datasets_proto.Services().ByName("DatasetMetadataService").Methods()
	datasetMetadataServiceListDatasetsHandler := connect.NewUnaryHandler(
		DatasetMetadataServiceListDatasetsProcedure,
		svc.ListDatasets,
		connect.WithSchema(datasetMetadataServiceMethods.ByName("ListDatasets")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	datasetMetadataServiceGetDatasetHandler := connect.NewUnaryHandler(
		DatasetMetadataServiceGetDatasetProcedure,
		svc.GetDataset,
		connect.WithSchema(datasetMetadataServiceMethods.ByName("GetDataset")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	datasetMetadataServiceListDatasetRevisionsHandler := connect.NewUnaryHandler(
		DatasetMetadataServiceListDatasetRevisionsProcedure,
		svc.ListDatasetRevisions,
		connect.WithSchema(datasetMetadataServiceMethods.ByName("ListDatasetRevisions")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	datasetMetadataServiceGetDatasetRevisionHandler := connect.NewUnaryHandler(
		DatasetMetadataServiceGetDatasetRevisionProcedure,
		svc.GetDatasetRevision,
		connect.WithSchema(datasetMetadataServiceMethods.ByName("GetDatasetRevision")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.DatasetMetadataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatasetMetadataServiceListDatasetsProcedure:
			datasetMetadataServiceListDatasetsHandler.ServeHTTP(w, r)
		case DatasetMetadataServiceGetDatasetProcedure:
			datasetMetadataServiceGetDatasetHandler.ServeHTTP(w, r)
		case DatasetMetadataServiceListDatasetRevisionsProcedure:
			datasetMetadataServiceListDatasetRevisionsHandler.ServeHTTP(w, r)
		case DatasetMetadataServiceGetDatasetRevisionProcedure:
			datasetMetadataServiceGetDatasetRevisionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatasetMetadataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatasetMetadataServiceHandler struct{}

func (UnimplementedDatasetMetadataServiceHandler) ListDatasets(context.Context, *connect.Request[v1.ListDatasetsRequest]) (*connect.Response[v1.ListDatasetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.DatasetMetadataService.ListDatasets is not implemented"))
}

func (UnimplementedDatasetMetadataServiceHandler) GetDataset(context.Context, *connect.Request[v1.GetDatasetRequest]) (*connect.Response[v1.GetDatasetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.DatasetMetadataService.GetDataset is not implemented"))
}

func (UnimplementedDatasetMetadataServiceHandler) ListDatasetRevisions(context.Context, *connect.Request[v1.ListDatasetRevisionsRequest]) (*connect.Response[v1.ListDatasetRevisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.DatasetMetadataService.ListDatasetRevisions is not implemented"))
}

func (UnimplementedDatasetMetadataServiceHandler) GetDatasetRevision(context.Context, *connect.Request[v1.GetDatasetRevisionRequest]) (*connect.Response[v1.GetDatasetRevisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.DatasetMetadataService.GetDatasetRevision is not implemented"))
}
