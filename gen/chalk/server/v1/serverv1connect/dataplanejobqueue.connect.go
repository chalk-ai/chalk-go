// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/dataplanejobqueue.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataPlaneJobQueueServiceName is the fully-qualified name of the DataPlaneJobQueueService service.
	DataPlaneJobQueueServiceName = "chalk.server.v1.DataPlaneJobQueueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataPlaneJobQueueServiceGetDataPlaneJobQueueProcedure is the fully-qualified name of the
	// DataPlaneJobQueueService's GetDataPlaneJobQueue RPC.
	DataPlaneJobQueueServiceGetDataPlaneJobQueueProcedure = "/chalk.server.v1.DataPlaneJobQueueService/GetDataPlaneJobQueue"
	// DataPlaneJobQueueServiceListDataPlaneJobQueueProcedure is the fully-qualified name of the
	// DataPlaneJobQueueService's ListDataPlaneJobQueue RPC.
	DataPlaneJobQueueServiceListDataPlaneJobQueueProcedure = "/chalk.server.v1.DataPlaneJobQueueService/ListDataPlaneJobQueue"
	// DataPlaneJobQueueServiceGetJobQueueAuxiliaryResourcesProcedure is the fully-qualified name of the
	// DataPlaneJobQueueService's GetJobQueueAuxiliaryResources RPC.
	DataPlaneJobQueueServiceGetJobQueueAuxiliaryResourcesProcedure = "/chalk.server.v1.DataPlaneJobQueueService/GetJobQueueAuxiliaryResources"
)

// DataPlaneJobQueueServiceClient is a client for the chalk.server.v1.DataPlaneJobQueueService
// service.
type DataPlaneJobQueueServiceClient interface {
	GetDataPlaneJobQueue(context.Context, *connect.Request[v1.GetDataPlaneJobQueueRequest]) (*connect.Response[v1.GetDataPlaneJobQueueResponse], error)
	ListDataPlaneJobQueue(context.Context, *connect.Request[v1.ListDataPlaneJobQueueRequest]) (*connect.Response[v1.ListDataPlaneJobQueueResponse], error)
	GetJobQueueAuxiliaryResources(context.Context, *connect.Request[v1.GetJobQueueAuxiliaryResourcesRequest]) (*connect.Response[v1.GetJobQueueAuxiliaryResourcesResponse], error)
}

// NewDataPlaneJobQueueServiceClient constructs a client for the
// chalk.server.v1.DataPlaneJobQueueService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataPlaneJobQueueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataPlaneJobQueueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataPlaneJobQueueServiceMethods := v1.File_chalk_server_v1_dataplanejobqueue_proto.Services().ByName("DataPlaneJobQueueService").Methods()
	return &dataPlaneJobQueueServiceClient{
		getDataPlaneJobQueue: connect.NewClient[v1.GetDataPlaneJobQueueRequest, v1.GetDataPlaneJobQueueResponse](
			httpClient,
			baseURL+DataPlaneJobQueueServiceGetDataPlaneJobQueueProcedure,
			connect.WithSchema(dataPlaneJobQueueServiceMethods.ByName("GetDataPlaneJobQueue")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listDataPlaneJobQueue: connect.NewClient[v1.ListDataPlaneJobQueueRequest, v1.ListDataPlaneJobQueueResponse](
			httpClient,
			baseURL+DataPlaneJobQueueServiceListDataPlaneJobQueueProcedure,
			connect.WithSchema(dataPlaneJobQueueServiceMethods.ByName("ListDataPlaneJobQueue")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getJobQueueAuxiliaryResources: connect.NewClient[v1.GetJobQueueAuxiliaryResourcesRequest, v1.GetJobQueueAuxiliaryResourcesResponse](
			httpClient,
			baseURL+DataPlaneJobQueueServiceGetJobQueueAuxiliaryResourcesProcedure,
			connect.WithSchema(dataPlaneJobQueueServiceMethods.ByName("GetJobQueueAuxiliaryResources")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataPlaneJobQueueServiceClient implements DataPlaneJobQueueServiceClient.
type dataPlaneJobQueueServiceClient struct {
	getDataPlaneJobQueue          *connect.Client[v1.GetDataPlaneJobQueueRequest, v1.GetDataPlaneJobQueueResponse]
	listDataPlaneJobQueue         *connect.Client[v1.ListDataPlaneJobQueueRequest, v1.ListDataPlaneJobQueueResponse]
	getJobQueueAuxiliaryResources *connect.Client[v1.GetJobQueueAuxiliaryResourcesRequest, v1.GetJobQueueAuxiliaryResourcesResponse]
}

// GetDataPlaneJobQueue calls chalk.server.v1.DataPlaneJobQueueService.GetDataPlaneJobQueue.
func (c *dataPlaneJobQueueServiceClient) GetDataPlaneJobQueue(ctx context.Context, req *connect.Request[v1.GetDataPlaneJobQueueRequest]) (*connect.Response[v1.GetDataPlaneJobQueueResponse], error) {
	return c.getDataPlaneJobQueue.CallUnary(ctx, req)
}

// ListDataPlaneJobQueue calls chalk.server.v1.DataPlaneJobQueueService.ListDataPlaneJobQueue.
func (c *dataPlaneJobQueueServiceClient) ListDataPlaneJobQueue(ctx context.Context, req *connect.Request[v1.ListDataPlaneJobQueueRequest]) (*connect.Response[v1.ListDataPlaneJobQueueResponse], error) {
	return c.listDataPlaneJobQueue.CallUnary(ctx, req)
}

// GetJobQueueAuxiliaryResources calls
// chalk.server.v1.DataPlaneJobQueueService.GetJobQueueAuxiliaryResources.
func (c *dataPlaneJobQueueServiceClient) GetJobQueueAuxiliaryResources(ctx context.Context, req *connect.Request[v1.GetJobQueueAuxiliaryResourcesRequest]) (*connect.Response[v1.GetJobQueueAuxiliaryResourcesResponse], error) {
	return c.getJobQueueAuxiliaryResources.CallUnary(ctx, req)
}

// DataPlaneJobQueueServiceHandler is an implementation of the
// chalk.server.v1.DataPlaneJobQueueService service.
type DataPlaneJobQueueServiceHandler interface {
	GetDataPlaneJobQueue(context.Context, *connect.Request[v1.GetDataPlaneJobQueueRequest]) (*connect.Response[v1.GetDataPlaneJobQueueResponse], error)
	ListDataPlaneJobQueue(context.Context, *connect.Request[v1.ListDataPlaneJobQueueRequest]) (*connect.Response[v1.ListDataPlaneJobQueueResponse], error)
	GetJobQueueAuxiliaryResources(context.Context, *connect.Request[v1.GetJobQueueAuxiliaryResourcesRequest]) (*connect.Response[v1.GetJobQueueAuxiliaryResourcesResponse], error)
}

// NewDataPlaneJobQueueServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataPlaneJobQueueServiceHandler(svc DataPlaneJobQueueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataPlaneJobQueueServiceMethods := v1.File_chalk_server_v1_dataplanejobqueue_proto.Services().ByName("DataPlaneJobQueueService").Methods()
	dataPlaneJobQueueServiceGetDataPlaneJobQueueHandler := connect.NewUnaryHandler(
		DataPlaneJobQueueServiceGetDataPlaneJobQueueProcedure,
		svc.GetDataPlaneJobQueue,
		connect.WithSchema(dataPlaneJobQueueServiceMethods.ByName("GetDataPlaneJobQueue")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataPlaneJobQueueServiceListDataPlaneJobQueueHandler := connect.NewUnaryHandler(
		DataPlaneJobQueueServiceListDataPlaneJobQueueProcedure,
		svc.ListDataPlaneJobQueue,
		connect.WithSchema(dataPlaneJobQueueServiceMethods.ByName("ListDataPlaneJobQueue")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dataPlaneJobQueueServiceGetJobQueueAuxiliaryResourcesHandler := connect.NewUnaryHandler(
		DataPlaneJobQueueServiceGetJobQueueAuxiliaryResourcesProcedure,
		svc.GetJobQueueAuxiliaryResources,
		connect.WithSchema(dataPlaneJobQueueServiceMethods.ByName("GetJobQueueAuxiliaryResources")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.DataPlaneJobQueueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataPlaneJobQueueServiceGetDataPlaneJobQueueProcedure:
			dataPlaneJobQueueServiceGetDataPlaneJobQueueHandler.ServeHTTP(w, r)
		case DataPlaneJobQueueServiceListDataPlaneJobQueueProcedure:
			dataPlaneJobQueueServiceListDataPlaneJobQueueHandler.ServeHTTP(w, r)
		case DataPlaneJobQueueServiceGetJobQueueAuxiliaryResourcesProcedure:
			dataPlaneJobQueueServiceGetJobQueueAuxiliaryResourcesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataPlaneJobQueueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataPlaneJobQueueServiceHandler struct{}

func (UnimplementedDataPlaneJobQueueServiceHandler) GetDataPlaneJobQueue(context.Context, *connect.Request[v1.GetDataPlaneJobQueueRequest]) (*connect.Response[v1.GetDataPlaneJobQueueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.DataPlaneJobQueueService.GetDataPlaneJobQueue is not implemented"))
}

func (UnimplementedDataPlaneJobQueueServiceHandler) ListDataPlaneJobQueue(context.Context, *connect.Request[v1.ListDataPlaneJobQueueRequest]) (*connect.Response[v1.ListDataPlaneJobQueueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.DataPlaneJobQueueService.ListDataPlaneJobQueue is not implemented"))
}

func (UnimplementedDataPlaneJobQueueServiceHandler) GetJobQueueAuxiliaryResources(context.Context, *connect.Request[v1.GetJobQueueAuxiliaryResourcesRequest]) (*connect.Response[v1.GetJobQueueAuxiliaryResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.DataPlaneJobQueueService.GetJobQueueAuxiliaryResources is not implemented"))
}
