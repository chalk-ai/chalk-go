// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/monitoring.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MonitoringServiceName is the fully-qualified name of the MonitoringService service.
	MonitoringServiceName = "chalk.server.v1.MonitoringService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MonitoringServiceTestPagerDutyIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's TestPagerDutyIntegration RPC.
	MonitoringServiceTestPagerDutyIntegrationProcedure = "/chalk.server.v1.MonitoringService/TestPagerDutyIntegration"
	// MonitoringServiceAddPagerDutyIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's AddPagerDutyIntegration RPC.
	MonitoringServiceAddPagerDutyIntegrationProcedure = "/chalk.server.v1.MonitoringService/AddPagerDutyIntegration"
	// MonitoringServiceDeletePagerDutyIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's DeletePagerDutyIntegration RPC.
	MonitoringServiceDeletePagerDutyIntegrationProcedure = "/chalk.server.v1.MonitoringService/DeletePagerDutyIntegration"
	// MonitoringServiceSetDefaultPagerDutyIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's SetDefaultPagerDutyIntegration RPC.
	MonitoringServiceSetDefaultPagerDutyIntegrationProcedure = "/chalk.server.v1.MonitoringService/SetDefaultPagerDutyIntegration"
	// MonitoringServiceUpdatePagerDutyIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's UpdatePagerDutyIntegration RPC.
	MonitoringServiceUpdatePagerDutyIntegrationProcedure = "/chalk.server.v1.MonitoringService/UpdatePagerDutyIntegration"
	// MonitoringServiceGetAllPagerDutyIntegrationsProcedure is the fully-qualified name of the
	// MonitoringService's GetAllPagerDutyIntegrations RPC.
	MonitoringServiceGetAllPagerDutyIntegrationsProcedure = "/chalk.server.v1.MonitoringService/GetAllPagerDutyIntegrations"
	// MonitoringServiceGetPagerDutyIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's GetPagerDutyIntegration RPC.
	MonitoringServiceGetPagerDutyIntegrationProcedure = "/chalk.server.v1.MonitoringService/GetPagerDutyIntegration"
	// MonitoringServiceTestIncidentIoIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's TestIncidentIoIntegration RPC.
	MonitoringServiceTestIncidentIoIntegrationProcedure = "/chalk.server.v1.MonitoringService/TestIncidentIoIntegration"
	// MonitoringServiceAddIncidentIoIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's AddIncidentIoIntegration RPC.
	MonitoringServiceAddIncidentIoIntegrationProcedure = "/chalk.server.v1.MonitoringService/AddIncidentIoIntegration"
	// MonitoringServiceDeleteIncidentIoIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's DeleteIncidentIoIntegration RPC.
	MonitoringServiceDeleteIncidentIoIntegrationProcedure = "/chalk.server.v1.MonitoringService/DeleteIncidentIoIntegration"
	// MonitoringServiceUpdateIncidentIoIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's UpdateIncidentIoIntegration RPC.
	MonitoringServiceUpdateIncidentIoIntegrationProcedure = "/chalk.server.v1.MonitoringService/UpdateIncidentIoIntegration"
	// MonitoringServiceGetAllIncidentIoIntegrationsProcedure is the fully-qualified name of the
	// MonitoringService's GetAllIncidentIoIntegrations RPC.
	MonitoringServiceGetAllIncidentIoIntegrationsProcedure = "/chalk.server.v1.MonitoringService/GetAllIncidentIoIntegrations"
	// MonitoringServiceGetIncidentIoIntegrationProcedure is the fully-qualified name of the
	// MonitoringService's GetIncidentIoIntegration RPC.
	MonitoringServiceGetIncidentIoIntegrationProcedure = "/chalk.server.v1.MonitoringService/GetIncidentIoIntegration"
)

// MonitoringServiceClient is a client for the chalk.server.v1.MonitoringService service.
type MonitoringServiceClient interface {
	TestPagerDutyIntegration(context.Context, *connect.Request[v1.TestPagerDutyIntegrationRequest]) (*connect.Response[v1.TestPagerDutyIntegrationResponse], error)
	AddPagerDutyIntegration(context.Context, *connect.Request[v1.AddPagerDutyIntegrationRequest]) (*connect.Response[v1.AddPagerDutyIntegrationResponse], error)
	DeletePagerDutyIntegration(context.Context, *connect.Request[v1.DeletePagerDutyIntegrationRequest]) (*connect.Response[v1.DeletePagerDutyIntegrationResponse], error)
	SetDefaultPagerDutyIntegration(context.Context, *connect.Request[v1.SetDefaultPagerDutyIntegrationRequest]) (*connect.Response[v1.SetDefaultPagerDutyIntegrationResponse], error)
	UpdatePagerDutyIntegration(context.Context, *connect.Request[v1.UpdatePagerDutyIntegrationRequest]) (*connect.Response[v1.UpdatePagerDutyIntegrationResponse], error)
	GetAllPagerDutyIntegrations(context.Context, *connect.Request[v1.GetAllPagerDutyIntegrationsRequest]) (*connect.Response[v1.GetAllPagerDutyIntegrationsResponse], error)
	GetPagerDutyIntegration(context.Context, *connect.Request[v1.GetPagerDutyIntegrationRequest]) (*connect.Response[v1.GetPagerDutyIntegrationResponse], error)
	TestIncidentIoIntegration(context.Context, *connect.Request[v1.TestIncidentIoIntegrationRequest]) (*connect.Response[v1.TestIncidentIoIntegrationResponse], error)
	AddIncidentIoIntegration(context.Context, *connect.Request[v1.AddIncidentIoIntegrationRequest]) (*connect.Response[v1.AddIncidentIoIntegrationResponse], error)
	DeleteIncidentIoIntegration(context.Context, *connect.Request[v1.DeleteIncidentIoIntegrationRequest]) (*connect.Response[v1.DeleteIncidentIoIntegrationResponse], error)
	UpdateIncidentIoIntegration(context.Context, *connect.Request[v1.UpdateIncidentIoIntegrationRequest]) (*connect.Response[v1.UpdateIncidentIoIntegrationResponse], error)
	GetAllIncidentIoIntegrations(context.Context, *connect.Request[v1.GetAllIncidentIoIntegrationsRequest]) (*connect.Response[v1.GetAllIncidentIoIntegrationsResponse], error)
	GetIncidentIoIntegration(context.Context, *connect.Request[v1.GetIncidentIoIntegrationRequest]) (*connect.Response[v1.GetIncidentIoIntegrationResponse], error)
}

// NewMonitoringServiceClient constructs a client for the chalk.server.v1.MonitoringService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMonitoringServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MonitoringServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	monitoringServiceMethods := v1.File_chalk_server_v1_monitoring_proto.Services().ByName("MonitoringService").Methods()
	return &monitoringServiceClient{
		testPagerDutyIntegration: connect.NewClient[v1.TestPagerDutyIntegrationRequest, v1.TestPagerDutyIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceTestPagerDutyIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("TestPagerDutyIntegration")),
			connect.WithClientOptions(opts...),
		),
		addPagerDutyIntegration: connect.NewClient[v1.AddPagerDutyIntegrationRequest, v1.AddPagerDutyIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceAddPagerDutyIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("AddPagerDutyIntegration")),
			connect.WithClientOptions(opts...),
		),
		deletePagerDutyIntegration: connect.NewClient[v1.DeletePagerDutyIntegrationRequest, v1.DeletePagerDutyIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceDeletePagerDutyIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("DeletePagerDutyIntegration")),
			connect.WithClientOptions(opts...),
		),
		setDefaultPagerDutyIntegration: connect.NewClient[v1.SetDefaultPagerDutyIntegrationRequest, v1.SetDefaultPagerDutyIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceSetDefaultPagerDutyIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("SetDefaultPagerDutyIntegration")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updatePagerDutyIntegration: connect.NewClient[v1.UpdatePagerDutyIntegrationRequest, v1.UpdatePagerDutyIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceUpdatePagerDutyIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("UpdatePagerDutyIntegration")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		getAllPagerDutyIntegrations: connect.NewClient[v1.GetAllPagerDutyIntegrationsRequest, v1.GetAllPagerDutyIntegrationsResponse](
			httpClient,
			baseURL+MonitoringServiceGetAllPagerDutyIntegrationsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetAllPagerDutyIntegrations")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getPagerDutyIntegration: connect.NewClient[v1.GetPagerDutyIntegrationRequest, v1.GetPagerDutyIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceGetPagerDutyIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetPagerDutyIntegration")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		testIncidentIoIntegration: connect.NewClient[v1.TestIncidentIoIntegrationRequest, v1.TestIncidentIoIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceTestIncidentIoIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("TestIncidentIoIntegration")),
			connect.WithClientOptions(opts...),
		),
		addIncidentIoIntegration: connect.NewClient[v1.AddIncidentIoIntegrationRequest, v1.AddIncidentIoIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceAddIncidentIoIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("AddIncidentIoIntegration")),
			connect.WithClientOptions(opts...),
		),
		deleteIncidentIoIntegration: connect.NewClient[v1.DeleteIncidentIoIntegrationRequest, v1.DeleteIncidentIoIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceDeleteIncidentIoIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("DeleteIncidentIoIntegration")),
			connect.WithClientOptions(opts...),
		),
		updateIncidentIoIntegration: connect.NewClient[v1.UpdateIncidentIoIntegrationRequest, v1.UpdateIncidentIoIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceUpdateIncidentIoIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("UpdateIncidentIoIntegration")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		getAllIncidentIoIntegrations: connect.NewClient[v1.GetAllIncidentIoIntegrationsRequest, v1.GetAllIncidentIoIntegrationsResponse](
			httpClient,
			baseURL+MonitoringServiceGetAllIncidentIoIntegrationsProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetAllIncidentIoIntegrations")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getIncidentIoIntegration: connect.NewClient[v1.GetIncidentIoIntegrationRequest, v1.GetIncidentIoIntegrationResponse](
			httpClient,
			baseURL+MonitoringServiceGetIncidentIoIntegrationProcedure,
			connect.WithSchema(monitoringServiceMethods.ByName("GetIncidentIoIntegration")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// monitoringServiceClient implements MonitoringServiceClient.
type monitoringServiceClient struct {
	testPagerDutyIntegration       *connect.Client[v1.TestPagerDutyIntegrationRequest, v1.TestPagerDutyIntegrationResponse]
	addPagerDutyIntegration        *connect.Client[v1.AddPagerDutyIntegrationRequest, v1.AddPagerDutyIntegrationResponse]
	deletePagerDutyIntegration     *connect.Client[v1.DeletePagerDutyIntegrationRequest, v1.DeletePagerDutyIntegrationResponse]
	setDefaultPagerDutyIntegration *connect.Client[v1.SetDefaultPagerDutyIntegrationRequest, v1.SetDefaultPagerDutyIntegrationResponse]
	updatePagerDutyIntegration     *connect.Client[v1.UpdatePagerDutyIntegrationRequest, v1.UpdatePagerDutyIntegrationResponse]
	getAllPagerDutyIntegrations    *connect.Client[v1.GetAllPagerDutyIntegrationsRequest, v1.GetAllPagerDutyIntegrationsResponse]
	getPagerDutyIntegration        *connect.Client[v1.GetPagerDutyIntegrationRequest, v1.GetPagerDutyIntegrationResponse]
	testIncidentIoIntegration      *connect.Client[v1.TestIncidentIoIntegrationRequest, v1.TestIncidentIoIntegrationResponse]
	addIncidentIoIntegration       *connect.Client[v1.AddIncidentIoIntegrationRequest, v1.AddIncidentIoIntegrationResponse]
	deleteIncidentIoIntegration    *connect.Client[v1.DeleteIncidentIoIntegrationRequest, v1.DeleteIncidentIoIntegrationResponse]
	updateIncidentIoIntegration    *connect.Client[v1.UpdateIncidentIoIntegrationRequest, v1.UpdateIncidentIoIntegrationResponse]
	getAllIncidentIoIntegrations   *connect.Client[v1.GetAllIncidentIoIntegrationsRequest, v1.GetAllIncidentIoIntegrationsResponse]
	getIncidentIoIntegration       *connect.Client[v1.GetIncidentIoIntegrationRequest, v1.GetIncidentIoIntegrationResponse]
}

// TestPagerDutyIntegration calls chalk.server.v1.MonitoringService.TestPagerDutyIntegration.
func (c *monitoringServiceClient) TestPagerDutyIntegration(ctx context.Context, req *connect.Request[v1.TestPagerDutyIntegrationRequest]) (*connect.Response[v1.TestPagerDutyIntegrationResponse], error) {
	return c.testPagerDutyIntegration.CallUnary(ctx, req)
}

// AddPagerDutyIntegration calls chalk.server.v1.MonitoringService.AddPagerDutyIntegration.
func (c *monitoringServiceClient) AddPagerDutyIntegration(ctx context.Context, req *connect.Request[v1.AddPagerDutyIntegrationRequest]) (*connect.Response[v1.AddPagerDutyIntegrationResponse], error) {
	return c.addPagerDutyIntegration.CallUnary(ctx, req)
}

// DeletePagerDutyIntegration calls chalk.server.v1.MonitoringService.DeletePagerDutyIntegration.
func (c *monitoringServiceClient) DeletePagerDutyIntegration(ctx context.Context, req *connect.Request[v1.DeletePagerDutyIntegrationRequest]) (*connect.Response[v1.DeletePagerDutyIntegrationResponse], error) {
	return c.deletePagerDutyIntegration.CallUnary(ctx, req)
}

// SetDefaultPagerDutyIntegration calls
// chalk.server.v1.MonitoringService.SetDefaultPagerDutyIntegration.
func (c *monitoringServiceClient) SetDefaultPagerDutyIntegration(ctx context.Context, req *connect.Request[v1.SetDefaultPagerDutyIntegrationRequest]) (*connect.Response[v1.SetDefaultPagerDutyIntegrationResponse], error) {
	return c.setDefaultPagerDutyIntegration.CallUnary(ctx, req)
}

// UpdatePagerDutyIntegration calls chalk.server.v1.MonitoringService.UpdatePagerDutyIntegration.
func (c *monitoringServiceClient) UpdatePagerDutyIntegration(ctx context.Context, req *connect.Request[v1.UpdatePagerDutyIntegrationRequest]) (*connect.Response[v1.UpdatePagerDutyIntegrationResponse], error) {
	return c.updatePagerDutyIntegration.CallUnary(ctx, req)
}

// GetAllPagerDutyIntegrations calls chalk.server.v1.MonitoringService.GetAllPagerDutyIntegrations.
func (c *monitoringServiceClient) GetAllPagerDutyIntegrations(ctx context.Context, req *connect.Request[v1.GetAllPagerDutyIntegrationsRequest]) (*connect.Response[v1.GetAllPagerDutyIntegrationsResponse], error) {
	return c.getAllPagerDutyIntegrations.CallUnary(ctx, req)
}

// GetPagerDutyIntegration calls chalk.server.v1.MonitoringService.GetPagerDutyIntegration.
func (c *monitoringServiceClient) GetPagerDutyIntegration(ctx context.Context, req *connect.Request[v1.GetPagerDutyIntegrationRequest]) (*connect.Response[v1.GetPagerDutyIntegrationResponse], error) {
	return c.getPagerDutyIntegration.CallUnary(ctx, req)
}

// TestIncidentIoIntegration calls chalk.server.v1.MonitoringService.TestIncidentIoIntegration.
func (c *monitoringServiceClient) TestIncidentIoIntegration(ctx context.Context, req *connect.Request[v1.TestIncidentIoIntegrationRequest]) (*connect.Response[v1.TestIncidentIoIntegrationResponse], error) {
	return c.testIncidentIoIntegration.CallUnary(ctx, req)
}

// AddIncidentIoIntegration calls chalk.server.v1.MonitoringService.AddIncidentIoIntegration.
func (c *monitoringServiceClient) AddIncidentIoIntegration(ctx context.Context, req *connect.Request[v1.AddIncidentIoIntegrationRequest]) (*connect.Response[v1.AddIncidentIoIntegrationResponse], error) {
	return c.addIncidentIoIntegration.CallUnary(ctx, req)
}

// DeleteIncidentIoIntegration calls chalk.server.v1.MonitoringService.DeleteIncidentIoIntegration.
func (c *monitoringServiceClient) DeleteIncidentIoIntegration(ctx context.Context, req *connect.Request[v1.DeleteIncidentIoIntegrationRequest]) (*connect.Response[v1.DeleteIncidentIoIntegrationResponse], error) {
	return c.deleteIncidentIoIntegration.CallUnary(ctx, req)
}

// UpdateIncidentIoIntegration calls chalk.server.v1.MonitoringService.UpdateIncidentIoIntegration.
func (c *monitoringServiceClient) UpdateIncidentIoIntegration(ctx context.Context, req *connect.Request[v1.UpdateIncidentIoIntegrationRequest]) (*connect.Response[v1.UpdateIncidentIoIntegrationResponse], error) {
	return c.updateIncidentIoIntegration.CallUnary(ctx, req)
}

// GetAllIncidentIoIntegrations calls
// chalk.server.v1.MonitoringService.GetAllIncidentIoIntegrations.
func (c *monitoringServiceClient) GetAllIncidentIoIntegrations(ctx context.Context, req *connect.Request[v1.GetAllIncidentIoIntegrationsRequest]) (*connect.Response[v1.GetAllIncidentIoIntegrationsResponse], error) {
	return c.getAllIncidentIoIntegrations.CallUnary(ctx, req)
}

// GetIncidentIoIntegration calls chalk.server.v1.MonitoringService.GetIncidentIoIntegration.
func (c *monitoringServiceClient) GetIncidentIoIntegration(ctx context.Context, req *connect.Request[v1.GetIncidentIoIntegrationRequest]) (*connect.Response[v1.GetIncidentIoIntegrationResponse], error) {
	return c.getIncidentIoIntegration.CallUnary(ctx, req)
}

// MonitoringServiceHandler is an implementation of the chalk.server.v1.MonitoringService service.
type MonitoringServiceHandler interface {
	TestPagerDutyIntegration(context.Context, *connect.Request[v1.TestPagerDutyIntegrationRequest]) (*connect.Response[v1.TestPagerDutyIntegrationResponse], error)
	AddPagerDutyIntegration(context.Context, *connect.Request[v1.AddPagerDutyIntegrationRequest]) (*connect.Response[v1.AddPagerDutyIntegrationResponse], error)
	DeletePagerDutyIntegration(context.Context, *connect.Request[v1.DeletePagerDutyIntegrationRequest]) (*connect.Response[v1.DeletePagerDutyIntegrationResponse], error)
	SetDefaultPagerDutyIntegration(context.Context, *connect.Request[v1.SetDefaultPagerDutyIntegrationRequest]) (*connect.Response[v1.SetDefaultPagerDutyIntegrationResponse], error)
	UpdatePagerDutyIntegration(context.Context, *connect.Request[v1.UpdatePagerDutyIntegrationRequest]) (*connect.Response[v1.UpdatePagerDutyIntegrationResponse], error)
	GetAllPagerDutyIntegrations(context.Context, *connect.Request[v1.GetAllPagerDutyIntegrationsRequest]) (*connect.Response[v1.GetAllPagerDutyIntegrationsResponse], error)
	GetPagerDutyIntegration(context.Context, *connect.Request[v1.GetPagerDutyIntegrationRequest]) (*connect.Response[v1.GetPagerDutyIntegrationResponse], error)
	TestIncidentIoIntegration(context.Context, *connect.Request[v1.TestIncidentIoIntegrationRequest]) (*connect.Response[v1.TestIncidentIoIntegrationResponse], error)
	AddIncidentIoIntegration(context.Context, *connect.Request[v1.AddIncidentIoIntegrationRequest]) (*connect.Response[v1.AddIncidentIoIntegrationResponse], error)
	DeleteIncidentIoIntegration(context.Context, *connect.Request[v1.DeleteIncidentIoIntegrationRequest]) (*connect.Response[v1.DeleteIncidentIoIntegrationResponse], error)
	UpdateIncidentIoIntegration(context.Context, *connect.Request[v1.UpdateIncidentIoIntegrationRequest]) (*connect.Response[v1.UpdateIncidentIoIntegrationResponse], error)
	GetAllIncidentIoIntegrations(context.Context, *connect.Request[v1.GetAllIncidentIoIntegrationsRequest]) (*connect.Response[v1.GetAllIncidentIoIntegrationsResponse], error)
	GetIncidentIoIntegration(context.Context, *connect.Request[v1.GetIncidentIoIntegrationRequest]) (*connect.Response[v1.GetIncidentIoIntegrationResponse], error)
}

// NewMonitoringServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMonitoringServiceHandler(svc MonitoringServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	monitoringServiceMethods := v1.File_chalk_server_v1_monitoring_proto.Services().ByName("MonitoringService").Methods()
	monitoringServiceTestPagerDutyIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceTestPagerDutyIntegrationProcedure,
		svc.TestPagerDutyIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("TestPagerDutyIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceAddPagerDutyIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceAddPagerDutyIntegrationProcedure,
		svc.AddPagerDutyIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("AddPagerDutyIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceDeletePagerDutyIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceDeletePagerDutyIntegrationProcedure,
		svc.DeletePagerDutyIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("DeletePagerDutyIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceSetDefaultPagerDutyIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceSetDefaultPagerDutyIntegrationProcedure,
		svc.SetDefaultPagerDutyIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("SetDefaultPagerDutyIntegration")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceUpdatePagerDutyIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceUpdatePagerDutyIntegrationProcedure,
		svc.UpdatePagerDutyIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("UpdatePagerDutyIntegration")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetAllPagerDutyIntegrationsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetAllPagerDutyIntegrationsProcedure,
		svc.GetAllPagerDutyIntegrations,
		connect.WithSchema(monitoringServiceMethods.ByName("GetAllPagerDutyIntegrations")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetPagerDutyIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceGetPagerDutyIntegrationProcedure,
		svc.GetPagerDutyIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("GetPagerDutyIntegration")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceTestIncidentIoIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceTestIncidentIoIntegrationProcedure,
		svc.TestIncidentIoIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("TestIncidentIoIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceAddIncidentIoIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceAddIncidentIoIntegrationProcedure,
		svc.AddIncidentIoIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("AddIncidentIoIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceDeleteIncidentIoIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceDeleteIncidentIoIntegrationProcedure,
		svc.DeleteIncidentIoIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("DeleteIncidentIoIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceUpdateIncidentIoIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceUpdateIncidentIoIntegrationProcedure,
		svc.UpdateIncidentIoIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("UpdateIncidentIoIntegration")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetAllIncidentIoIntegrationsHandler := connect.NewUnaryHandler(
		MonitoringServiceGetAllIncidentIoIntegrationsProcedure,
		svc.GetAllIncidentIoIntegrations,
		connect.WithSchema(monitoringServiceMethods.ByName("GetAllIncidentIoIntegrations")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	monitoringServiceGetIncidentIoIntegrationHandler := connect.NewUnaryHandler(
		MonitoringServiceGetIncidentIoIntegrationProcedure,
		svc.GetIncidentIoIntegration,
		connect.WithSchema(monitoringServiceMethods.ByName("GetIncidentIoIntegration")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.MonitoringService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MonitoringServiceTestPagerDutyIntegrationProcedure:
			monitoringServiceTestPagerDutyIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceAddPagerDutyIntegrationProcedure:
			monitoringServiceAddPagerDutyIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceDeletePagerDutyIntegrationProcedure:
			monitoringServiceDeletePagerDutyIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceSetDefaultPagerDutyIntegrationProcedure:
			monitoringServiceSetDefaultPagerDutyIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceUpdatePagerDutyIntegrationProcedure:
			monitoringServiceUpdatePagerDutyIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceGetAllPagerDutyIntegrationsProcedure:
			monitoringServiceGetAllPagerDutyIntegrationsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetPagerDutyIntegrationProcedure:
			monitoringServiceGetPagerDutyIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceTestIncidentIoIntegrationProcedure:
			monitoringServiceTestIncidentIoIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceAddIncidentIoIntegrationProcedure:
			monitoringServiceAddIncidentIoIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceDeleteIncidentIoIntegrationProcedure:
			monitoringServiceDeleteIncidentIoIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceUpdateIncidentIoIntegrationProcedure:
			monitoringServiceUpdateIncidentIoIntegrationHandler.ServeHTTP(w, r)
		case MonitoringServiceGetAllIncidentIoIntegrationsProcedure:
			monitoringServiceGetAllIncidentIoIntegrationsHandler.ServeHTTP(w, r)
		case MonitoringServiceGetIncidentIoIntegrationProcedure:
			monitoringServiceGetIncidentIoIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMonitoringServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMonitoringServiceHandler struct{}

func (UnimplementedMonitoringServiceHandler) TestPagerDutyIntegration(context.Context, *connect.Request[v1.TestPagerDutyIntegrationRequest]) (*connect.Response[v1.TestPagerDutyIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.TestPagerDutyIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) AddPagerDutyIntegration(context.Context, *connect.Request[v1.AddPagerDutyIntegrationRequest]) (*connect.Response[v1.AddPagerDutyIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.AddPagerDutyIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) DeletePagerDutyIntegration(context.Context, *connect.Request[v1.DeletePagerDutyIntegrationRequest]) (*connect.Response[v1.DeletePagerDutyIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.DeletePagerDutyIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) SetDefaultPagerDutyIntegration(context.Context, *connect.Request[v1.SetDefaultPagerDutyIntegrationRequest]) (*connect.Response[v1.SetDefaultPagerDutyIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.SetDefaultPagerDutyIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) UpdatePagerDutyIntegration(context.Context, *connect.Request[v1.UpdatePagerDutyIntegrationRequest]) (*connect.Response[v1.UpdatePagerDutyIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.UpdatePagerDutyIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetAllPagerDutyIntegrations(context.Context, *connect.Request[v1.GetAllPagerDutyIntegrationsRequest]) (*connect.Response[v1.GetAllPagerDutyIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.GetAllPagerDutyIntegrations is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetPagerDutyIntegration(context.Context, *connect.Request[v1.GetPagerDutyIntegrationRequest]) (*connect.Response[v1.GetPagerDutyIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.GetPagerDutyIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) TestIncidentIoIntegration(context.Context, *connect.Request[v1.TestIncidentIoIntegrationRequest]) (*connect.Response[v1.TestIncidentIoIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.TestIncidentIoIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) AddIncidentIoIntegration(context.Context, *connect.Request[v1.AddIncidentIoIntegrationRequest]) (*connect.Response[v1.AddIncidentIoIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.AddIncidentIoIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) DeleteIncidentIoIntegration(context.Context, *connect.Request[v1.DeleteIncidentIoIntegrationRequest]) (*connect.Response[v1.DeleteIncidentIoIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.DeleteIncidentIoIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) UpdateIncidentIoIntegration(context.Context, *connect.Request[v1.UpdateIncidentIoIntegrationRequest]) (*connect.Response[v1.UpdateIncidentIoIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.UpdateIncidentIoIntegration is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetAllIncidentIoIntegrations(context.Context, *connect.Request[v1.GetAllIncidentIoIntegrationsRequest]) (*connect.Response[v1.GetAllIncidentIoIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.GetAllIncidentIoIntegrations is not implemented"))
}

func (UnimplementedMonitoringServiceHandler) GetIncidentIoIntegration(context.Context, *connect.Request[v1.GetIncidentIoIntegrationRequest]) (*connect.Response[v1.GetIncidentIoIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.MonitoringService.GetIncidentIoIntegration is not implemented"))
}
