// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/offline_queries.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OfflineQueryMetadataServiceName is the fully-qualified name of the OfflineQueryMetadataService
	// service.
	OfflineQueryMetadataServiceName = "chalk.server.v1.OfflineQueryMetadataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OfflineQueryMetadataServiceListOfflineQueriesProcedure is the fully-qualified name of the
	// OfflineQueryMetadataService's ListOfflineQueries RPC.
	OfflineQueryMetadataServiceListOfflineQueriesProcedure = "/chalk.server.v1.OfflineQueryMetadataService/ListOfflineQueries"
	// OfflineQueryMetadataServiceGetOfflineQueryProcedure is the fully-qualified name of the
	// OfflineQueryMetadataService's GetOfflineQuery RPC.
	OfflineQueryMetadataServiceGetOfflineQueryProcedure = "/chalk.server.v1.OfflineQueryMetadataService/GetOfflineQuery"
	// OfflineQueryMetadataServiceListOfflineQueryShardPerformanceSummariesProcedure is the
	// fully-qualified name of the OfflineQueryMetadataService's
	// ListOfflineQueryShardPerformanceSummaries RPC.
	OfflineQueryMetadataServiceListOfflineQueryShardPerformanceSummariesProcedure = "/chalk.server.v1.OfflineQueryMetadataService/ListOfflineQueryShardPerformanceSummaries"
	// OfflineQueryMetadataServiceCreateOfflineQueryJobProcedure is the fully-qualified name of the
	// OfflineQueryMetadataService's CreateOfflineQueryJob RPC.
	OfflineQueryMetadataServiceCreateOfflineQueryJobProcedure = "/chalk.server.v1.OfflineQueryMetadataService/CreateOfflineQueryJob"
	// OfflineQueryMetadataServiceCreateModelTrainingJobProcedure is the fully-qualified name of the
	// OfflineQueryMetadataService's CreateModelTrainingJob RPC.
	OfflineQueryMetadataServiceCreateModelTrainingJobProcedure = "/chalk.server.v1.OfflineQueryMetadataService/CreateModelTrainingJob"
)

// OfflineQueryMetadataServiceClient is a client for the chalk.server.v1.OfflineQueryMetadataService
// service.
type OfflineQueryMetadataServiceClient interface {
	ListOfflineQueries(context.Context, *connect.Request[v1.ListOfflineQueriesRequest]) (*connect.Response[v1.ListOfflineQueriesResponse], error)
	GetOfflineQuery(context.Context, *connect.Request[v1.GetOfflineQueryRequest]) (*connect.Response[v1.GetOfflineQueryResponse], error)
	ListOfflineQueryShardPerformanceSummaries(context.Context, *connect.Request[v1.ListOfflineQueryShardPerformanceSummariesRequest]) (*connect.Response[v1.ListOfflineQueryShardPerformanceSummariesResponse], error)
	CreateOfflineQueryJob(context.Context, *connect.Request[v1.CreateOfflineQueryJobRequest]) (*connect.Response[v1.CreateOfflineQueryJobResponse], error)
	CreateModelTrainingJob(context.Context, *connect.Request[v1.CreateModelTrainingJobRequest]) (*connect.Response[v1.CreateModelTrainingJobResponse], error)
}

// NewOfflineQueryMetadataServiceClient constructs a client for the
// chalk.server.v1.OfflineQueryMetadataService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOfflineQueryMetadataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OfflineQueryMetadataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	offlineQueryMetadataServiceMethods := v1.File_chalk_server_v1_offline_queries_proto.Services().ByName("OfflineQueryMetadataService").Methods()
	return &offlineQueryMetadataServiceClient{
		listOfflineQueries: connect.NewClient[v1.ListOfflineQueriesRequest, v1.ListOfflineQueriesResponse](
			httpClient,
			baseURL+OfflineQueryMetadataServiceListOfflineQueriesProcedure,
			connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("ListOfflineQueries")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getOfflineQuery: connect.NewClient[v1.GetOfflineQueryRequest, v1.GetOfflineQueryResponse](
			httpClient,
			baseURL+OfflineQueryMetadataServiceGetOfflineQueryProcedure,
			connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("GetOfflineQuery")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listOfflineQueryShardPerformanceSummaries: connect.NewClient[v1.ListOfflineQueryShardPerformanceSummariesRequest, v1.ListOfflineQueryShardPerformanceSummariesResponse](
			httpClient,
			baseURL+OfflineQueryMetadataServiceListOfflineQueryShardPerformanceSummariesProcedure,
			connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("ListOfflineQueryShardPerformanceSummaries")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createOfflineQueryJob: connect.NewClient[v1.CreateOfflineQueryJobRequest, v1.CreateOfflineQueryJobResponse](
			httpClient,
			baseURL+OfflineQueryMetadataServiceCreateOfflineQueryJobProcedure,
			connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("CreateOfflineQueryJob")),
			connect.WithClientOptions(opts...),
		),
		createModelTrainingJob: connect.NewClient[v1.CreateModelTrainingJobRequest, v1.CreateModelTrainingJobResponse](
			httpClient,
			baseURL+OfflineQueryMetadataServiceCreateModelTrainingJobProcedure,
			connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("CreateModelTrainingJob")),
			connect.WithClientOptions(opts...),
		),
	}
}

// offlineQueryMetadataServiceClient implements OfflineQueryMetadataServiceClient.
type offlineQueryMetadataServiceClient struct {
	listOfflineQueries                        *connect.Client[v1.ListOfflineQueriesRequest, v1.ListOfflineQueriesResponse]
	getOfflineQuery                           *connect.Client[v1.GetOfflineQueryRequest, v1.GetOfflineQueryResponse]
	listOfflineQueryShardPerformanceSummaries *connect.Client[v1.ListOfflineQueryShardPerformanceSummariesRequest, v1.ListOfflineQueryShardPerformanceSummariesResponse]
	createOfflineQueryJob                     *connect.Client[v1.CreateOfflineQueryJobRequest, v1.CreateOfflineQueryJobResponse]
	createModelTrainingJob                    *connect.Client[v1.CreateModelTrainingJobRequest, v1.CreateModelTrainingJobResponse]
}

// ListOfflineQueries calls chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueries.
func (c *offlineQueryMetadataServiceClient) ListOfflineQueries(ctx context.Context, req *connect.Request[v1.ListOfflineQueriesRequest]) (*connect.Response[v1.ListOfflineQueriesResponse], error) {
	return c.listOfflineQueries.CallUnary(ctx, req)
}

// GetOfflineQuery calls chalk.server.v1.OfflineQueryMetadataService.GetOfflineQuery.
func (c *offlineQueryMetadataServiceClient) GetOfflineQuery(ctx context.Context, req *connect.Request[v1.GetOfflineQueryRequest]) (*connect.Response[v1.GetOfflineQueryResponse], error) {
	return c.getOfflineQuery.CallUnary(ctx, req)
}

// ListOfflineQueryShardPerformanceSummaries calls
// chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueryShardPerformanceSummaries.
func (c *offlineQueryMetadataServiceClient) ListOfflineQueryShardPerformanceSummaries(ctx context.Context, req *connect.Request[v1.ListOfflineQueryShardPerformanceSummariesRequest]) (*connect.Response[v1.ListOfflineQueryShardPerformanceSummariesResponse], error) {
	return c.listOfflineQueryShardPerformanceSummaries.CallUnary(ctx, req)
}

// CreateOfflineQueryJob calls chalk.server.v1.OfflineQueryMetadataService.CreateOfflineQueryJob.
func (c *offlineQueryMetadataServiceClient) CreateOfflineQueryJob(ctx context.Context, req *connect.Request[v1.CreateOfflineQueryJobRequest]) (*connect.Response[v1.CreateOfflineQueryJobResponse], error) {
	return c.createOfflineQueryJob.CallUnary(ctx, req)
}

// CreateModelTrainingJob calls chalk.server.v1.OfflineQueryMetadataService.CreateModelTrainingJob.
func (c *offlineQueryMetadataServiceClient) CreateModelTrainingJob(ctx context.Context, req *connect.Request[v1.CreateModelTrainingJobRequest]) (*connect.Response[v1.CreateModelTrainingJobResponse], error) {
	return c.createModelTrainingJob.CallUnary(ctx, req)
}

// OfflineQueryMetadataServiceHandler is an implementation of the
// chalk.server.v1.OfflineQueryMetadataService service.
type OfflineQueryMetadataServiceHandler interface {
	ListOfflineQueries(context.Context, *connect.Request[v1.ListOfflineQueriesRequest]) (*connect.Response[v1.ListOfflineQueriesResponse], error)
	GetOfflineQuery(context.Context, *connect.Request[v1.GetOfflineQueryRequest]) (*connect.Response[v1.GetOfflineQueryResponse], error)
	ListOfflineQueryShardPerformanceSummaries(context.Context, *connect.Request[v1.ListOfflineQueryShardPerformanceSummariesRequest]) (*connect.Response[v1.ListOfflineQueryShardPerformanceSummariesResponse], error)
	CreateOfflineQueryJob(context.Context, *connect.Request[v1.CreateOfflineQueryJobRequest]) (*connect.Response[v1.CreateOfflineQueryJobResponse], error)
	CreateModelTrainingJob(context.Context, *connect.Request[v1.CreateModelTrainingJobRequest]) (*connect.Response[v1.CreateModelTrainingJobResponse], error)
}

// NewOfflineQueryMetadataServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOfflineQueryMetadataServiceHandler(svc OfflineQueryMetadataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	offlineQueryMetadataServiceMethods := v1.File_chalk_server_v1_offline_queries_proto.Services().ByName("OfflineQueryMetadataService").Methods()
	offlineQueryMetadataServiceListOfflineQueriesHandler := connect.NewUnaryHandler(
		OfflineQueryMetadataServiceListOfflineQueriesProcedure,
		svc.ListOfflineQueries,
		connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("ListOfflineQueries")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	offlineQueryMetadataServiceGetOfflineQueryHandler := connect.NewUnaryHandler(
		OfflineQueryMetadataServiceGetOfflineQueryProcedure,
		svc.GetOfflineQuery,
		connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("GetOfflineQuery")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	offlineQueryMetadataServiceListOfflineQueryShardPerformanceSummariesHandler := connect.NewUnaryHandler(
		OfflineQueryMetadataServiceListOfflineQueryShardPerformanceSummariesProcedure,
		svc.ListOfflineQueryShardPerformanceSummaries,
		connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("ListOfflineQueryShardPerformanceSummaries")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	offlineQueryMetadataServiceCreateOfflineQueryJobHandler := connect.NewUnaryHandler(
		OfflineQueryMetadataServiceCreateOfflineQueryJobProcedure,
		svc.CreateOfflineQueryJob,
		connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("CreateOfflineQueryJob")),
		connect.WithHandlerOptions(opts...),
	)
	offlineQueryMetadataServiceCreateModelTrainingJobHandler := connect.NewUnaryHandler(
		OfflineQueryMetadataServiceCreateModelTrainingJobProcedure,
		svc.CreateModelTrainingJob,
		connect.WithSchema(offlineQueryMetadataServiceMethods.ByName("CreateModelTrainingJob")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.OfflineQueryMetadataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OfflineQueryMetadataServiceListOfflineQueriesProcedure:
			offlineQueryMetadataServiceListOfflineQueriesHandler.ServeHTTP(w, r)
		case OfflineQueryMetadataServiceGetOfflineQueryProcedure:
			offlineQueryMetadataServiceGetOfflineQueryHandler.ServeHTTP(w, r)
		case OfflineQueryMetadataServiceListOfflineQueryShardPerformanceSummariesProcedure:
			offlineQueryMetadataServiceListOfflineQueryShardPerformanceSummariesHandler.ServeHTTP(w, r)
		case OfflineQueryMetadataServiceCreateOfflineQueryJobProcedure:
			offlineQueryMetadataServiceCreateOfflineQueryJobHandler.ServeHTTP(w, r)
		case OfflineQueryMetadataServiceCreateModelTrainingJobProcedure:
			offlineQueryMetadataServiceCreateModelTrainingJobHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOfflineQueryMetadataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOfflineQueryMetadataServiceHandler struct{}

func (UnimplementedOfflineQueryMetadataServiceHandler) ListOfflineQueries(context.Context, *connect.Request[v1.ListOfflineQueriesRequest]) (*connect.Response[v1.ListOfflineQueriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueries is not implemented"))
}

func (UnimplementedOfflineQueryMetadataServiceHandler) GetOfflineQuery(context.Context, *connect.Request[v1.GetOfflineQueryRequest]) (*connect.Response[v1.GetOfflineQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineQueryMetadataService.GetOfflineQuery is not implemented"))
}

func (UnimplementedOfflineQueryMetadataServiceHandler) ListOfflineQueryShardPerformanceSummaries(context.Context, *connect.Request[v1.ListOfflineQueryShardPerformanceSummariesRequest]) (*connect.Response[v1.ListOfflineQueryShardPerformanceSummariesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineQueryMetadataService.ListOfflineQueryShardPerformanceSummaries is not implemented"))
}

func (UnimplementedOfflineQueryMetadataServiceHandler) CreateOfflineQueryJob(context.Context, *connect.Request[v1.CreateOfflineQueryJobRequest]) (*connect.Response[v1.CreateOfflineQueryJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineQueryMetadataService.CreateOfflineQueryJob is not implemented"))
}

func (UnimplementedOfflineQueryMetadataServiceHandler) CreateModelTrainingJob(context.Context, *connect.Request[v1.CreateModelTrainingJobRequest]) (*connect.Response[v1.CreateModelTrainingJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.OfflineQueryMetadataService.CreateModelTrainingJob is not implemented"))
}
