// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/builder.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BuilderServiceName is the fully-qualified name of the BuilderService service.
	BuilderServiceName = "chalk.server.v1.BuilderService"
	// ClusterBuilderServiceName is the fully-qualified name of the ClusterBuilderService service.
	ClusterBuilderServiceName = "chalk.server.v1.ClusterBuilderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BuilderServiceGetSearchConfigProcedure is the fully-qualified name of the BuilderService's
	// GetSearchConfig RPC.
	BuilderServiceGetSearchConfigProcedure = "/chalk.server.v1.BuilderService/GetSearchConfig"
	// BuilderServiceActivateDeploymentProcedure is the fully-qualified name of the BuilderService's
	// ActivateDeployment RPC.
	BuilderServiceActivateDeploymentProcedure = "/chalk.server.v1.BuilderService/ActivateDeployment"
	// BuilderServiceIndexDeploymentProcedure is the fully-qualified name of the BuilderService's
	// IndexDeployment RPC.
	BuilderServiceIndexDeploymentProcedure = "/chalk.server.v1.BuilderService/IndexDeployment"
	// BuilderServiceDeployKubeComponentsProcedure is the fully-qualified name of the BuilderService's
	// DeployKubeComponents RPC.
	BuilderServiceDeployKubeComponentsProcedure = "/chalk.server.v1.BuilderService/DeployKubeComponents"
	// BuilderServiceRebuildDeploymentProcedure is the fully-qualified name of the BuilderService's
	// RebuildDeployment RPC.
	BuilderServiceRebuildDeploymentProcedure = "/chalk.server.v1.BuilderService/RebuildDeployment"
	// BuilderServiceRedeployDeploymentProcedure is the fully-qualified name of the BuilderService's
	// RedeployDeployment RPC.
	BuilderServiceRedeployDeploymentProcedure = "/chalk.server.v1.BuilderService/RedeployDeployment"
	// BuilderServiceUploadSourceProcedure is the fully-qualified name of the BuilderService's
	// UploadSource RPC.
	BuilderServiceUploadSourceProcedure = "/chalk.server.v1.BuilderService/UploadSource"
	// BuilderServiceLintSourceProcedure is the fully-qualified name of the BuilderService's LintSource
	// RPC.
	BuilderServiceLintSourceProcedure = "/chalk.server.v1.BuilderService/LintSource"
	// BuilderServiceGetDeploymentStepsProcedure is the fully-qualified name of the BuilderService's
	// GetDeploymentSteps RPC.
	BuilderServiceGetDeploymentStepsProcedure = "/chalk.server.v1.BuilderService/GetDeploymentSteps"
	// BuilderServiceGetDeploymentLogsProcedure is the fully-qualified name of the BuilderService's
	// GetDeploymentLogs RPC.
	BuilderServiceGetDeploymentLogsProcedure = "/chalk.server.v1.BuilderService/GetDeploymentLogs"
	// BuilderServiceGetClusterTimescaleDBProcedure is the fully-qualified name of the BuilderService's
	// GetClusterTimescaleDB RPC.
	BuilderServiceGetClusterTimescaleDBProcedure = "/chalk.server.v1.BuilderService/GetClusterTimescaleDB"
	// BuilderServiceGetClusterGatewayProcedure is the fully-qualified name of the BuilderService's
	// GetClusterGateway RPC.
	BuilderServiceGetClusterGatewayProcedure = "/chalk.server.v1.BuilderService/GetClusterGateway"
	// BuilderServiceGetClusterBackgroundPersistenceProcedure is the fully-qualified name of the
	// BuilderService's GetClusterBackgroundPersistence RPC.
	BuilderServiceGetClusterBackgroundPersistenceProcedure = "/chalk.server.v1.BuilderService/GetClusterBackgroundPersistence"
	// BuilderServiceCreateClusterTimescaleDBProcedure is the fully-qualified name of the
	// BuilderService's CreateClusterTimescaleDB RPC.
	BuilderServiceCreateClusterTimescaleDBProcedure = "/chalk.server.v1.BuilderService/CreateClusterTimescaleDB"
	// BuilderServiceMigrateClusterTimescaleDBProcedure is the fully-qualified name of the
	// BuilderService's MigrateClusterTimescaleDB RPC.
	BuilderServiceMigrateClusterTimescaleDBProcedure = "/chalk.server.v1.BuilderService/MigrateClusterTimescaleDB"
	// BuilderServiceCreateClusterGatewayProcedure is the fully-qualified name of the BuilderService's
	// CreateClusterGateway RPC.
	BuilderServiceCreateClusterGatewayProcedure = "/chalk.server.v1.BuilderService/CreateClusterGateway"
	// BuilderServiceCreateClusterBackgroundPersistenceProcedure is the fully-qualified name of the
	// BuilderService's CreateClusterBackgroundPersistence RPC.
	BuilderServiceCreateClusterBackgroundPersistenceProcedure = "/chalk.server.v1.BuilderService/CreateClusterBackgroundPersistence"
	// BuilderServiceUpdateEnvironmentVariablesProcedure is the fully-qualified name of the
	// BuilderService's UpdateEnvironmentVariables RPC.
	BuilderServiceUpdateEnvironmentVariablesProcedure = "/chalk.server.v1.BuilderService/UpdateEnvironmentVariables"
	// BuilderServiceStartBranchProcedure is the fully-qualified name of the BuilderService's
	// StartBranch RPC.
	BuilderServiceStartBranchProcedure = "/chalk.server.v1.BuilderService/StartBranch"
	// BuilderServiceScaleBranchProcedure is the fully-qualified name of the BuilderService's
	// ScaleBranch RPC.
	BuilderServiceScaleBranchProcedure = "/chalk.server.v1.BuilderService/ScaleBranch"
	// BuilderServiceGetBranchProfileProcedure is the fully-qualified name of the BuilderService's
	// GetBranchProfile RPC.
	BuilderServiceGetBranchProfileProcedure = "/chalk.server.v1.BuilderService/GetBranchProfile"
	// BuilderServiceGetNodepoolsProcedure is the fully-qualified name of the BuilderService's
	// GetNodepools RPC.
	BuilderServiceGetNodepoolsProcedure = "/chalk.server.v1.BuilderService/GetNodepools"
	// BuilderServiceAddNodepoolProcedure is the fully-qualified name of the BuilderService's
	// AddNodepool RPC.
	BuilderServiceAddNodepoolProcedure = "/chalk.server.v1.BuilderService/AddNodepool"
	// BuilderServiceUpdateNodepoolProcedure is the fully-qualified name of the BuilderService's
	// UpdateNodepool RPC.
	BuilderServiceUpdateNodepoolProcedure = "/chalk.server.v1.BuilderService/UpdateNodepool"
	// BuilderServiceDeleteNodepoolProcedure is the fully-qualified name of the BuilderService's
	// DeleteNodepool RPC.
	BuilderServiceDeleteNodepoolProcedure = "/chalk.server.v1.BuilderService/DeleteNodepool"
	// BuilderServiceGetKarpenterNodepoolsProcedure is the fully-qualified name of the BuilderService's
	// GetKarpenterNodepools RPC.
	BuilderServiceGetKarpenterNodepoolsProcedure = "/chalk.server.v1.BuilderService/GetKarpenterNodepools"
	// BuilderServiceAddKarpenterNodepoolProcedure is the fully-qualified name of the BuilderService's
	// AddKarpenterNodepool RPC.
	BuilderServiceAddKarpenterNodepoolProcedure = "/chalk.server.v1.BuilderService/AddKarpenterNodepool"
	// BuilderServiceUpdateKarpenterNodepoolProcedure is the fully-qualified name of the
	// BuilderService's UpdateKarpenterNodepool RPC.
	BuilderServiceUpdateKarpenterNodepoolProcedure = "/chalk.server.v1.BuilderService/UpdateKarpenterNodepool"
	// BuilderServiceDeleteKarpenterNodepoolProcedure is the fully-qualified name of the
	// BuilderService's DeleteKarpenterNodepool RPC.
	BuilderServiceDeleteKarpenterNodepoolProcedure = "/chalk.server.v1.BuilderService/DeleteKarpenterNodepool"
	// BuilderServiceGetKarpenterInstallationMetadataProcedure is the fully-qualified name of the
	// BuilderService's GetKarpenterInstallationMetadata RPC.
	BuilderServiceGetKarpenterInstallationMetadataProcedure = "/chalk.server.v1.BuilderService/GetKarpenterInstallationMetadata"
	// BuilderServiceGetTagWeightsProcedure is the fully-qualified name of the BuilderService's
	// GetTagWeights RPC.
	BuilderServiceGetTagWeightsProcedure = "/chalk.server.v1.BuilderService/GetTagWeights"
	// BuilderServiceSetTagWeightsProcedure is the fully-qualified name of the BuilderService's
	// SetTagWeights RPC.
	BuilderServiceSetTagWeightsProcedure = "/chalk.server.v1.BuilderService/SetTagWeights"
	// ClusterBuilderServiceCreateKafkaTopicsProcedure is the fully-qualified name of the
	// ClusterBuilderService's CreateKafkaTopics RPC.
	ClusterBuilderServiceCreateKafkaTopicsProcedure = "/chalk.server.v1.ClusterBuilderService/CreateKafkaTopics"
	// ClusterBuilderServiceGetKafkaTopicsProcedure is the fully-qualified name of the
	// ClusterBuilderService's GetKafkaTopics RPC.
	ClusterBuilderServiceGetKafkaTopicsProcedure = "/chalk.server.v1.ClusterBuilderService/GetKafkaTopics"
)

// BuilderServiceClient is a client for the chalk.server.v1.BuilderService service.
type BuilderServiceClient interface {
	GetSearchConfig(context.Context, *connect.Request[v1.GetSearchConfigRequest]) (*connect.Response[v1.GetSearchConfigResponse], error)
	// Takes an existing (past) deployment and promotes the k8s resources / other things associated with it.
	// Useful for debugging in local development where the auto activation doesn't work b/c no pubsub.
	ActivateDeployment(context.Context, *connect.Request[v1.ActivateDeploymentRequest]) (*connect.Response[v1.ActivateDeploymentResponse], error)
	IndexDeployment(context.Context, *connect.Request[v1.IndexDeploymentRequest]) (*connect.Response[v1.IndexDeploymentResponse], error)
	// Intermediate step in the deployment activation process. Allows for partial migration to the new
	// go-api-server builder service.
	DeployKubeComponents(context.Context, *connect.Request[v1.DeployKubeComponentsRequest]) (*connect.Response[v1.DeployKubeComponentsResponse], error)
	// Takes an existing (past) deployment and re-creates the image associated with it,
	// publishing the image as 'new_image_tag'.
	RebuildDeployment(context.Context, *connect.Request[v1.RebuildDeploymentRequest]) (*connect.Response[v1.RebuildDeploymentResponse], error)
	// Triggers a new build with the source code from this deployment and deploys the result
	RedeployDeployment(context.Context, *connect.Request[v1.RedeployDeploymentRequest]) (*connect.Response[v1.RedeployDeploymentResponse], error)
	// Triggers a new build with the provided source code archive and deploys the result
	UploadSource(context.Context, *connect.Request[v1.UploadSourceRequest]) (*connect.Response[v1.UploadSourceResponse], error)
	LintSource(context.Context, *connect.Request[v1.LintSourceRequest]) (*connect.Response[v1.LintSourceResponse], error)
	GetDeploymentSteps(context.Context, *connect.Request[v1.GetDeploymentStepsRequest]) (*connect.Response[v1.GetDeploymentStepsResponse], error)
	GetDeploymentLogs(context.Context, *connect.Request[v1.GetDeploymentLogsRequest]) (*connect.Response[v1.GetDeploymentLogsResponse], error)
	GetClusterTimescaleDB(context.Context, *connect.Request[v1.GetClusterTimescaleDBRequest]) (*connect.Response[v1.GetClusterTimescaleDBResponse], error)
	GetClusterGateway(context.Context, *connect.Request[v1.GetClusterGatewayRequest]) (*connect.Response[v1.GetClusterGatewayResponse], error)
	GetClusterBackgroundPersistence(context.Context, *connect.Request[v1.GetClusterBackgroundPersistenceRequest]) (*connect.Response[v1.GetClusterBackgroundPersistenceResponse], error)
	CreateClusterTimescaleDB(context.Context, *connect.Request[v1.CreateClusterTimescaleDBRequest]) (*connect.Response[v1.CreateClusterTimescaleDBResponse], error)
	MigrateClusterTimescaleDB(context.Context, *connect.Request[v1.MigrateClusterTimescaleDBRequest]) (*connect.Response[v1.MigrateClusterTimescaleDBResponse], error)
	CreateClusterGateway(context.Context, *connect.Request[v1.CreateClusterGatewayRequest]) (*connect.Response[v1.CreateClusterGatewayResponse], error)
	CreateClusterBackgroundPersistence(context.Context, *connect.Request[v1.CreateClusterBackgroundPersistenceRequest]) (*connect.Response[v1.CreateClusterBackgroundPersistenceResponse], error)
	UpdateEnvironmentVariables(context.Context, *connect.Request[v1.UpdateEnvironmentVariablesRequest]) (*connect.Response[v1.UpdateEnvironmentVariablesResponse], error)
	StartBranch(context.Context, *connect.Request[v1.StartBranchRequest]) (*connect.Response[v1.StartBranchResponse], error)
	ScaleBranch(context.Context, *connect.Request[v1.ScaleBranchRequest]) (*connect.Response[v1.ScaleBranchResponse], error)
	GetBranchProfile(context.Context, *connect.Request[v1.GetBranchProfileRequest]) (*connect.Response[v1.GetBranchProfileResponse], error)
	GetNodepools(context.Context, *connect.Request[v1.GetNodepoolsRequest]) (*connect.Response[v1.GetNodepoolsResponse], error)
	AddNodepool(context.Context, *connect.Request[v1.AddNodepoolRequest]) (*connect.Response[v1.AddNodepoolResponse], error)
	UpdateNodepool(context.Context, *connect.Request[v1.UpdateNodepoolRequest]) (*connect.Response[v1.UpdateNodepoolResponse], error)
	DeleteNodepool(context.Context, *connect.Request[v1.DeleteNodepoolRequest]) (*connect.Response[v1.DeleteNodepoolResponse], error)
	// to be deprecated
	GetKarpenterNodepools(context.Context, *connect.Request[v1.GetKarpenterNodepoolsRequest]) (*connect.Response[v1.GetKarpenterNodepoolsResponse], error)
	// to be deprecated
	AddKarpenterNodepool(context.Context, *connect.Request[v1.AddKarpenterNodepoolRequest]) (*connect.Response[v1.AddKarpenterNodepoolResponse], error)
	// to be deprecated
	UpdateKarpenterNodepool(context.Context, *connect.Request[v1.UpdateKarpenterNodepoolRequest]) (*connect.Response[v1.UpdateKarpenterNodepoolResponse], error)
	// to be deprecated
	DeleteKarpenterNodepool(context.Context, *connect.Request[v1.DeleteKarpenterNodepoolRequest]) (*connect.Response[v1.DeleteKarpenterNodepoolResponse], error)
	GetKarpenterInstallationMetadata(context.Context, *connect.Request[v1.GetKarpenterInstallationMetadataRequest]) (*connect.Response[v1.GetKarpenterInstallationMetadataResponse], error)
	GetTagWeights(context.Context, *connect.Request[v1.GetTagWeightsRequest]) (*connect.Response[v1.GetTagWeightsResponse], error)
	SetTagWeights(context.Context, *connect.Request[v1.SetTagWeightsRequest]) (*connect.Response[v1.SetTagWeightsResponse], error)
}

// NewBuilderServiceClient constructs a client for the chalk.server.v1.BuilderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuilderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BuilderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	builderServiceMethods := v1.File_chalk_server_v1_builder_proto.Services().ByName("BuilderService").Methods()
	return &builderServiceClient{
		getSearchConfig: connect.NewClient[v1.GetSearchConfigRequest, v1.GetSearchConfigResponse](
			httpClient,
			baseURL+BuilderServiceGetSearchConfigProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetSearchConfig")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		activateDeployment: connect.NewClient[v1.ActivateDeploymentRequest, v1.ActivateDeploymentResponse](
			httpClient,
			baseURL+BuilderServiceActivateDeploymentProcedure,
			connect.WithSchema(builderServiceMethods.ByName("ActivateDeployment")),
			connect.WithClientOptions(opts...),
		),
		indexDeployment: connect.NewClient[v1.IndexDeploymentRequest, v1.IndexDeploymentResponse](
			httpClient,
			baseURL+BuilderServiceIndexDeploymentProcedure,
			connect.WithSchema(builderServiceMethods.ByName("IndexDeployment")),
			connect.WithClientOptions(opts...),
		),
		deployKubeComponents: connect.NewClient[v1.DeployKubeComponentsRequest, v1.DeployKubeComponentsResponse](
			httpClient,
			baseURL+BuilderServiceDeployKubeComponentsProcedure,
			connect.WithSchema(builderServiceMethods.ByName("DeployKubeComponents")),
			connect.WithClientOptions(opts...),
		),
		rebuildDeployment: connect.NewClient[v1.RebuildDeploymentRequest, v1.RebuildDeploymentResponse](
			httpClient,
			baseURL+BuilderServiceRebuildDeploymentProcedure,
			connect.WithSchema(builderServiceMethods.ByName("RebuildDeployment")),
			connect.WithClientOptions(opts...),
		),
		redeployDeployment: connect.NewClient[v1.RedeployDeploymentRequest, v1.RedeployDeploymentResponse](
			httpClient,
			baseURL+BuilderServiceRedeployDeploymentProcedure,
			connect.WithSchema(builderServiceMethods.ByName("RedeployDeployment")),
			connect.WithClientOptions(opts...),
		),
		uploadSource: connect.NewClient[v1.UploadSourceRequest, v1.UploadSourceResponse](
			httpClient,
			baseURL+BuilderServiceUploadSourceProcedure,
			connect.WithSchema(builderServiceMethods.ByName("UploadSource")),
			connect.WithClientOptions(opts...),
		),
		lintSource: connect.NewClient[v1.LintSourceRequest, v1.LintSourceResponse](
			httpClient,
			baseURL+BuilderServiceLintSourceProcedure,
			connect.WithSchema(builderServiceMethods.ByName("LintSource")),
			connect.WithClientOptions(opts...),
		),
		getDeploymentSteps: connect.NewClient[v1.GetDeploymentStepsRequest, v1.GetDeploymentStepsResponse](
			httpClient,
			baseURL+BuilderServiceGetDeploymentStepsProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetDeploymentSteps")),
			connect.WithClientOptions(opts...),
		),
		getDeploymentLogs: connect.NewClient[v1.GetDeploymentLogsRequest, v1.GetDeploymentLogsResponse](
			httpClient,
			baseURL+BuilderServiceGetDeploymentLogsProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetDeploymentLogs")),
			connect.WithClientOptions(opts...),
		),
		getClusterTimescaleDB: connect.NewClient[v1.GetClusterTimescaleDBRequest, v1.GetClusterTimescaleDBResponse](
			httpClient,
			baseURL+BuilderServiceGetClusterTimescaleDBProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetClusterTimescaleDB")),
			connect.WithClientOptions(opts...),
		),
		getClusterGateway: connect.NewClient[v1.GetClusterGatewayRequest, v1.GetClusterGatewayResponse](
			httpClient,
			baseURL+BuilderServiceGetClusterGatewayProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetClusterGateway")),
			connect.WithClientOptions(opts...),
		),
		getClusterBackgroundPersistence: connect.NewClient[v1.GetClusterBackgroundPersistenceRequest, v1.GetClusterBackgroundPersistenceResponse](
			httpClient,
			baseURL+BuilderServiceGetClusterBackgroundPersistenceProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetClusterBackgroundPersistence")),
			connect.WithClientOptions(opts...),
		),
		createClusterTimescaleDB: connect.NewClient[v1.CreateClusterTimescaleDBRequest, v1.CreateClusterTimescaleDBResponse](
			httpClient,
			baseURL+BuilderServiceCreateClusterTimescaleDBProcedure,
			connect.WithSchema(builderServiceMethods.ByName("CreateClusterTimescaleDB")),
			connect.WithClientOptions(opts...),
		),
		migrateClusterTimescaleDB: connect.NewClient[v1.MigrateClusterTimescaleDBRequest, v1.MigrateClusterTimescaleDBResponse](
			httpClient,
			baseURL+BuilderServiceMigrateClusterTimescaleDBProcedure,
			connect.WithSchema(builderServiceMethods.ByName("MigrateClusterTimescaleDB")),
			connect.WithClientOptions(opts...),
		),
		createClusterGateway: connect.NewClient[v1.CreateClusterGatewayRequest, v1.CreateClusterGatewayResponse](
			httpClient,
			baseURL+BuilderServiceCreateClusterGatewayProcedure,
			connect.WithSchema(builderServiceMethods.ByName("CreateClusterGateway")),
			connect.WithClientOptions(opts...),
		),
		createClusterBackgroundPersistence: connect.NewClient[v1.CreateClusterBackgroundPersistenceRequest, v1.CreateClusterBackgroundPersistenceResponse](
			httpClient,
			baseURL+BuilderServiceCreateClusterBackgroundPersistenceProcedure,
			connect.WithSchema(builderServiceMethods.ByName("CreateClusterBackgroundPersistence")),
			connect.WithClientOptions(opts...),
		),
		updateEnvironmentVariables: connect.NewClient[v1.UpdateEnvironmentVariablesRequest, v1.UpdateEnvironmentVariablesResponse](
			httpClient,
			baseURL+BuilderServiceUpdateEnvironmentVariablesProcedure,
			connect.WithSchema(builderServiceMethods.ByName("UpdateEnvironmentVariables")),
			connect.WithClientOptions(opts...),
		),
		startBranch: connect.NewClient[v1.StartBranchRequest, v1.StartBranchResponse](
			httpClient,
			baseURL+BuilderServiceStartBranchProcedure,
			connect.WithSchema(builderServiceMethods.ByName("StartBranch")),
			connect.WithClientOptions(opts...),
		),
		scaleBranch: connect.NewClient[v1.ScaleBranchRequest, v1.ScaleBranchResponse](
			httpClient,
			baseURL+BuilderServiceScaleBranchProcedure,
			connect.WithSchema(builderServiceMethods.ByName("ScaleBranch")),
			connect.WithClientOptions(opts...),
		),
		getBranchProfile: connect.NewClient[v1.GetBranchProfileRequest, v1.GetBranchProfileResponse](
			httpClient,
			baseURL+BuilderServiceGetBranchProfileProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetBranchProfile")),
			connect.WithClientOptions(opts...),
		),
		getNodepools: connect.NewClient[v1.GetNodepoolsRequest, v1.GetNodepoolsResponse](
			httpClient,
			baseURL+BuilderServiceGetNodepoolsProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetNodepools")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		addNodepool: connect.NewClient[v1.AddNodepoolRequest, v1.AddNodepoolResponse](
			httpClient,
			baseURL+BuilderServiceAddNodepoolProcedure,
			connect.WithSchema(builderServiceMethods.ByName("AddNodepool")),
			connect.WithClientOptions(opts...),
		),
		updateNodepool: connect.NewClient[v1.UpdateNodepoolRequest, v1.UpdateNodepoolResponse](
			httpClient,
			baseURL+BuilderServiceUpdateNodepoolProcedure,
			connect.WithSchema(builderServiceMethods.ByName("UpdateNodepool")),
			connect.WithClientOptions(opts...),
		),
		deleteNodepool: connect.NewClient[v1.DeleteNodepoolRequest, v1.DeleteNodepoolResponse](
			httpClient,
			baseURL+BuilderServiceDeleteNodepoolProcedure,
			connect.WithSchema(builderServiceMethods.ByName("DeleteNodepool")),
			connect.WithClientOptions(opts...),
		),
		getKarpenterNodepools: connect.NewClient[v1.GetKarpenterNodepoolsRequest, v1.GetKarpenterNodepoolsResponse](
			httpClient,
			baseURL+BuilderServiceGetKarpenterNodepoolsProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetKarpenterNodepools")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		addKarpenterNodepool: connect.NewClient[v1.AddKarpenterNodepoolRequest, v1.AddKarpenterNodepoolResponse](
			httpClient,
			baseURL+BuilderServiceAddKarpenterNodepoolProcedure,
			connect.WithSchema(builderServiceMethods.ByName("AddKarpenterNodepool")),
			connect.WithClientOptions(opts...),
		),
		updateKarpenterNodepool: connect.NewClient[v1.UpdateKarpenterNodepoolRequest, v1.UpdateKarpenterNodepoolResponse](
			httpClient,
			baseURL+BuilderServiceUpdateKarpenterNodepoolProcedure,
			connect.WithSchema(builderServiceMethods.ByName("UpdateKarpenterNodepool")),
			connect.WithClientOptions(opts...),
		),
		deleteKarpenterNodepool: connect.NewClient[v1.DeleteKarpenterNodepoolRequest, v1.DeleteKarpenterNodepoolResponse](
			httpClient,
			baseURL+BuilderServiceDeleteKarpenterNodepoolProcedure,
			connect.WithSchema(builderServiceMethods.ByName("DeleteKarpenterNodepool")),
			connect.WithClientOptions(opts...),
		),
		getKarpenterInstallationMetadata: connect.NewClient[v1.GetKarpenterInstallationMetadataRequest, v1.GetKarpenterInstallationMetadataResponse](
			httpClient,
			baseURL+BuilderServiceGetKarpenterInstallationMetadataProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetKarpenterInstallationMetadata")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getTagWeights: connect.NewClient[v1.GetTagWeightsRequest, v1.GetTagWeightsResponse](
			httpClient,
			baseURL+BuilderServiceGetTagWeightsProcedure,
			connect.WithSchema(builderServiceMethods.ByName("GetTagWeights")),
			connect.WithClientOptions(opts...),
		),
		setTagWeights: connect.NewClient[v1.SetTagWeightsRequest, v1.SetTagWeightsResponse](
			httpClient,
			baseURL+BuilderServiceSetTagWeightsProcedure,
			connect.WithSchema(builderServiceMethods.ByName("SetTagWeights")),
			connect.WithClientOptions(opts...),
		),
	}
}

// builderServiceClient implements BuilderServiceClient.
type builderServiceClient struct {
	getSearchConfig                    *connect.Client[v1.GetSearchConfigRequest, v1.GetSearchConfigResponse]
	activateDeployment                 *connect.Client[v1.ActivateDeploymentRequest, v1.ActivateDeploymentResponse]
	indexDeployment                    *connect.Client[v1.IndexDeploymentRequest, v1.IndexDeploymentResponse]
	deployKubeComponents               *connect.Client[v1.DeployKubeComponentsRequest, v1.DeployKubeComponentsResponse]
	rebuildDeployment                  *connect.Client[v1.RebuildDeploymentRequest, v1.RebuildDeploymentResponse]
	redeployDeployment                 *connect.Client[v1.RedeployDeploymentRequest, v1.RedeployDeploymentResponse]
	uploadSource                       *connect.Client[v1.UploadSourceRequest, v1.UploadSourceResponse]
	lintSource                         *connect.Client[v1.LintSourceRequest, v1.LintSourceResponse]
	getDeploymentSteps                 *connect.Client[v1.GetDeploymentStepsRequest, v1.GetDeploymentStepsResponse]
	getDeploymentLogs                  *connect.Client[v1.GetDeploymentLogsRequest, v1.GetDeploymentLogsResponse]
	getClusterTimescaleDB              *connect.Client[v1.GetClusterTimescaleDBRequest, v1.GetClusterTimescaleDBResponse]
	getClusterGateway                  *connect.Client[v1.GetClusterGatewayRequest, v1.GetClusterGatewayResponse]
	getClusterBackgroundPersistence    *connect.Client[v1.GetClusterBackgroundPersistenceRequest, v1.GetClusterBackgroundPersistenceResponse]
	createClusterTimescaleDB           *connect.Client[v1.CreateClusterTimescaleDBRequest, v1.CreateClusterTimescaleDBResponse]
	migrateClusterTimescaleDB          *connect.Client[v1.MigrateClusterTimescaleDBRequest, v1.MigrateClusterTimescaleDBResponse]
	createClusterGateway               *connect.Client[v1.CreateClusterGatewayRequest, v1.CreateClusterGatewayResponse]
	createClusterBackgroundPersistence *connect.Client[v1.CreateClusterBackgroundPersistenceRequest, v1.CreateClusterBackgroundPersistenceResponse]
	updateEnvironmentVariables         *connect.Client[v1.UpdateEnvironmentVariablesRequest, v1.UpdateEnvironmentVariablesResponse]
	startBranch                        *connect.Client[v1.StartBranchRequest, v1.StartBranchResponse]
	scaleBranch                        *connect.Client[v1.ScaleBranchRequest, v1.ScaleBranchResponse]
	getBranchProfile                   *connect.Client[v1.GetBranchProfileRequest, v1.GetBranchProfileResponse]
	getNodepools                       *connect.Client[v1.GetNodepoolsRequest, v1.GetNodepoolsResponse]
	addNodepool                        *connect.Client[v1.AddNodepoolRequest, v1.AddNodepoolResponse]
	updateNodepool                     *connect.Client[v1.UpdateNodepoolRequest, v1.UpdateNodepoolResponse]
	deleteNodepool                     *connect.Client[v1.DeleteNodepoolRequest, v1.DeleteNodepoolResponse]
	getKarpenterNodepools              *connect.Client[v1.GetKarpenterNodepoolsRequest, v1.GetKarpenterNodepoolsResponse]
	addKarpenterNodepool               *connect.Client[v1.AddKarpenterNodepoolRequest, v1.AddKarpenterNodepoolResponse]
	updateKarpenterNodepool            *connect.Client[v1.UpdateKarpenterNodepoolRequest, v1.UpdateKarpenterNodepoolResponse]
	deleteKarpenterNodepool            *connect.Client[v1.DeleteKarpenterNodepoolRequest, v1.DeleteKarpenterNodepoolResponse]
	getKarpenterInstallationMetadata   *connect.Client[v1.GetKarpenterInstallationMetadataRequest, v1.GetKarpenterInstallationMetadataResponse]
	getTagWeights                      *connect.Client[v1.GetTagWeightsRequest, v1.GetTagWeightsResponse]
	setTagWeights                      *connect.Client[v1.SetTagWeightsRequest, v1.SetTagWeightsResponse]
}

// GetSearchConfig calls chalk.server.v1.BuilderService.GetSearchConfig.
func (c *builderServiceClient) GetSearchConfig(ctx context.Context, req *connect.Request[v1.GetSearchConfigRequest]) (*connect.Response[v1.GetSearchConfigResponse], error) {
	return c.getSearchConfig.CallUnary(ctx, req)
}

// ActivateDeployment calls chalk.server.v1.BuilderService.ActivateDeployment.
func (c *builderServiceClient) ActivateDeployment(ctx context.Context, req *connect.Request[v1.ActivateDeploymentRequest]) (*connect.Response[v1.ActivateDeploymentResponse], error) {
	return c.activateDeployment.CallUnary(ctx, req)
}

// IndexDeployment calls chalk.server.v1.BuilderService.IndexDeployment.
func (c *builderServiceClient) IndexDeployment(ctx context.Context, req *connect.Request[v1.IndexDeploymentRequest]) (*connect.Response[v1.IndexDeploymentResponse], error) {
	return c.indexDeployment.CallUnary(ctx, req)
}

// DeployKubeComponents calls chalk.server.v1.BuilderService.DeployKubeComponents.
func (c *builderServiceClient) DeployKubeComponents(ctx context.Context, req *connect.Request[v1.DeployKubeComponentsRequest]) (*connect.Response[v1.DeployKubeComponentsResponse], error) {
	return c.deployKubeComponents.CallUnary(ctx, req)
}

// RebuildDeployment calls chalk.server.v1.BuilderService.RebuildDeployment.
func (c *builderServiceClient) RebuildDeployment(ctx context.Context, req *connect.Request[v1.RebuildDeploymentRequest]) (*connect.Response[v1.RebuildDeploymentResponse], error) {
	return c.rebuildDeployment.CallUnary(ctx, req)
}

// RedeployDeployment calls chalk.server.v1.BuilderService.RedeployDeployment.
func (c *builderServiceClient) RedeployDeployment(ctx context.Context, req *connect.Request[v1.RedeployDeploymentRequest]) (*connect.Response[v1.RedeployDeploymentResponse], error) {
	return c.redeployDeployment.CallUnary(ctx, req)
}

// UploadSource calls chalk.server.v1.BuilderService.UploadSource.
func (c *builderServiceClient) UploadSource(ctx context.Context, req *connect.Request[v1.UploadSourceRequest]) (*connect.Response[v1.UploadSourceResponse], error) {
	return c.uploadSource.CallUnary(ctx, req)
}

// LintSource calls chalk.server.v1.BuilderService.LintSource.
func (c *builderServiceClient) LintSource(ctx context.Context, req *connect.Request[v1.LintSourceRequest]) (*connect.Response[v1.LintSourceResponse], error) {
	return c.lintSource.CallUnary(ctx, req)
}

// GetDeploymentSteps calls chalk.server.v1.BuilderService.GetDeploymentSteps.
func (c *builderServiceClient) GetDeploymentSteps(ctx context.Context, req *connect.Request[v1.GetDeploymentStepsRequest]) (*connect.Response[v1.GetDeploymentStepsResponse], error) {
	return c.getDeploymentSteps.CallUnary(ctx, req)
}

// GetDeploymentLogs calls chalk.server.v1.BuilderService.GetDeploymentLogs.
func (c *builderServiceClient) GetDeploymentLogs(ctx context.Context, req *connect.Request[v1.GetDeploymentLogsRequest]) (*connect.Response[v1.GetDeploymentLogsResponse], error) {
	return c.getDeploymentLogs.CallUnary(ctx, req)
}

// GetClusterTimescaleDB calls chalk.server.v1.BuilderService.GetClusterTimescaleDB.
func (c *builderServiceClient) GetClusterTimescaleDB(ctx context.Context, req *connect.Request[v1.GetClusterTimescaleDBRequest]) (*connect.Response[v1.GetClusterTimescaleDBResponse], error) {
	return c.getClusterTimescaleDB.CallUnary(ctx, req)
}

// GetClusterGateway calls chalk.server.v1.BuilderService.GetClusterGateway.
func (c *builderServiceClient) GetClusterGateway(ctx context.Context, req *connect.Request[v1.GetClusterGatewayRequest]) (*connect.Response[v1.GetClusterGatewayResponse], error) {
	return c.getClusterGateway.CallUnary(ctx, req)
}

// GetClusterBackgroundPersistence calls
// chalk.server.v1.BuilderService.GetClusterBackgroundPersistence.
func (c *builderServiceClient) GetClusterBackgroundPersistence(ctx context.Context, req *connect.Request[v1.GetClusterBackgroundPersistenceRequest]) (*connect.Response[v1.GetClusterBackgroundPersistenceResponse], error) {
	return c.getClusterBackgroundPersistence.CallUnary(ctx, req)
}

// CreateClusterTimescaleDB calls chalk.server.v1.BuilderService.CreateClusterTimescaleDB.
func (c *builderServiceClient) CreateClusterTimescaleDB(ctx context.Context, req *connect.Request[v1.CreateClusterTimescaleDBRequest]) (*connect.Response[v1.CreateClusterTimescaleDBResponse], error) {
	return c.createClusterTimescaleDB.CallUnary(ctx, req)
}

// MigrateClusterTimescaleDB calls chalk.server.v1.BuilderService.MigrateClusterTimescaleDB.
func (c *builderServiceClient) MigrateClusterTimescaleDB(ctx context.Context, req *connect.Request[v1.MigrateClusterTimescaleDBRequest]) (*connect.Response[v1.MigrateClusterTimescaleDBResponse], error) {
	return c.migrateClusterTimescaleDB.CallUnary(ctx, req)
}

// CreateClusterGateway calls chalk.server.v1.BuilderService.CreateClusterGateway.
func (c *builderServiceClient) CreateClusterGateway(ctx context.Context, req *connect.Request[v1.CreateClusterGatewayRequest]) (*connect.Response[v1.CreateClusterGatewayResponse], error) {
	return c.createClusterGateway.CallUnary(ctx, req)
}

// CreateClusterBackgroundPersistence calls
// chalk.server.v1.BuilderService.CreateClusterBackgroundPersistence.
func (c *builderServiceClient) CreateClusterBackgroundPersistence(ctx context.Context, req *connect.Request[v1.CreateClusterBackgroundPersistenceRequest]) (*connect.Response[v1.CreateClusterBackgroundPersistenceResponse], error) {
	return c.createClusterBackgroundPersistence.CallUnary(ctx, req)
}

// UpdateEnvironmentVariables calls chalk.server.v1.BuilderService.UpdateEnvironmentVariables.
func (c *builderServiceClient) UpdateEnvironmentVariables(ctx context.Context, req *connect.Request[v1.UpdateEnvironmentVariablesRequest]) (*connect.Response[v1.UpdateEnvironmentVariablesResponse], error) {
	return c.updateEnvironmentVariables.CallUnary(ctx, req)
}

// StartBranch calls chalk.server.v1.BuilderService.StartBranch.
func (c *builderServiceClient) StartBranch(ctx context.Context, req *connect.Request[v1.StartBranchRequest]) (*connect.Response[v1.StartBranchResponse], error) {
	return c.startBranch.CallUnary(ctx, req)
}

// ScaleBranch calls chalk.server.v1.BuilderService.ScaleBranch.
func (c *builderServiceClient) ScaleBranch(ctx context.Context, req *connect.Request[v1.ScaleBranchRequest]) (*connect.Response[v1.ScaleBranchResponse], error) {
	return c.scaleBranch.CallUnary(ctx, req)
}

// GetBranchProfile calls chalk.server.v1.BuilderService.GetBranchProfile.
func (c *builderServiceClient) GetBranchProfile(ctx context.Context, req *connect.Request[v1.GetBranchProfileRequest]) (*connect.Response[v1.GetBranchProfileResponse], error) {
	return c.getBranchProfile.CallUnary(ctx, req)
}

// GetNodepools calls chalk.server.v1.BuilderService.GetNodepools.
func (c *builderServiceClient) GetNodepools(ctx context.Context, req *connect.Request[v1.GetNodepoolsRequest]) (*connect.Response[v1.GetNodepoolsResponse], error) {
	return c.getNodepools.CallUnary(ctx, req)
}

// AddNodepool calls chalk.server.v1.BuilderService.AddNodepool.
func (c *builderServiceClient) AddNodepool(ctx context.Context, req *connect.Request[v1.AddNodepoolRequest]) (*connect.Response[v1.AddNodepoolResponse], error) {
	return c.addNodepool.CallUnary(ctx, req)
}

// UpdateNodepool calls chalk.server.v1.BuilderService.UpdateNodepool.
func (c *builderServiceClient) UpdateNodepool(ctx context.Context, req *connect.Request[v1.UpdateNodepoolRequest]) (*connect.Response[v1.UpdateNodepoolResponse], error) {
	return c.updateNodepool.CallUnary(ctx, req)
}

// DeleteNodepool calls chalk.server.v1.BuilderService.DeleteNodepool.
func (c *builderServiceClient) DeleteNodepool(ctx context.Context, req *connect.Request[v1.DeleteNodepoolRequest]) (*connect.Response[v1.DeleteNodepoolResponse], error) {
	return c.deleteNodepool.CallUnary(ctx, req)
}

// GetKarpenterNodepools calls chalk.server.v1.BuilderService.GetKarpenterNodepools.
func (c *builderServiceClient) GetKarpenterNodepools(ctx context.Context, req *connect.Request[v1.GetKarpenterNodepoolsRequest]) (*connect.Response[v1.GetKarpenterNodepoolsResponse], error) {
	return c.getKarpenterNodepools.CallUnary(ctx, req)
}

// AddKarpenterNodepool calls chalk.server.v1.BuilderService.AddKarpenterNodepool.
func (c *builderServiceClient) AddKarpenterNodepool(ctx context.Context, req *connect.Request[v1.AddKarpenterNodepoolRequest]) (*connect.Response[v1.AddKarpenterNodepoolResponse], error) {
	return c.addKarpenterNodepool.CallUnary(ctx, req)
}

// UpdateKarpenterNodepool calls chalk.server.v1.BuilderService.UpdateKarpenterNodepool.
func (c *builderServiceClient) UpdateKarpenterNodepool(ctx context.Context, req *connect.Request[v1.UpdateKarpenterNodepoolRequest]) (*connect.Response[v1.UpdateKarpenterNodepoolResponse], error) {
	return c.updateKarpenterNodepool.CallUnary(ctx, req)
}

// DeleteKarpenterNodepool calls chalk.server.v1.BuilderService.DeleteKarpenterNodepool.
func (c *builderServiceClient) DeleteKarpenterNodepool(ctx context.Context, req *connect.Request[v1.DeleteKarpenterNodepoolRequest]) (*connect.Response[v1.DeleteKarpenterNodepoolResponse], error) {
	return c.deleteKarpenterNodepool.CallUnary(ctx, req)
}

// GetKarpenterInstallationMetadata calls
// chalk.server.v1.BuilderService.GetKarpenterInstallationMetadata.
func (c *builderServiceClient) GetKarpenterInstallationMetadata(ctx context.Context, req *connect.Request[v1.GetKarpenterInstallationMetadataRequest]) (*connect.Response[v1.GetKarpenterInstallationMetadataResponse], error) {
	return c.getKarpenterInstallationMetadata.CallUnary(ctx, req)
}

// GetTagWeights calls chalk.server.v1.BuilderService.GetTagWeights.
func (c *builderServiceClient) GetTagWeights(ctx context.Context, req *connect.Request[v1.GetTagWeightsRequest]) (*connect.Response[v1.GetTagWeightsResponse], error) {
	return c.getTagWeights.CallUnary(ctx, req)
}

// SetTagWeights calls chalk.server.v1.BuilderService.SetTagWeights.
func (c *builderServiceClient) SetTagWeights(ctx context.Context, req *connect.Request[v1.SetTagWeightsRequest]) (*connect.Response[v1.SetTagWeightsResponse], error) {
	return c.setTagWeights.CallUnary(ctx, req)
}

// BuilderServiceHandler is an implementation of the chalk.server.v1.BuilderService service.
type BuilderServiceHandler interface {
	GetSearchConfig(context.Context, *connect.Request[v1.GetSearchConfigRequest]) (*connect.Response[v1.GetSearchConfigResponse], error)
	// Takes an existing (past) deployment and promotes the k8s resources / other things associated with it.
	// Useful for debugging in local development where the auto activation doesn't work b/c no pubsub.
	ActivateDeployment(context.Context, *connect.Request[v1.ActivateDeploymentRequest]) (*connect.Response[v1.ActivateDeploymentResponse], error)
	IndexDeployment(context.Context, *connect.Request[v1.IndexDeploymentRequest]) (*connect.Response[v1.IndexDeploymentResponse], error)
	// Intermediate step in the deployment activation process. Allows for partial migration to the new
	// go-api-server builder service.
	DeployKubeComponents(context.Context, *connect.Request[v1.DeployKubeComponentsRequest]) (*connect.Response[v1.DeployKubeComponentsResponse], error)
	// Takes an existing (past) deployment and re-creates the image associated with it,
	// publishing the image as 'new_image_tag'.
	RebuildDeployment(context.Context, *connect.Request[v1.RebuildDeploymentRequest]) (*connect.Response[v1.RebuildDeploymentResponse], error)
	// Triggers a new build with the source code from this deployment and deploys the result
	RedeployDeployment(context.Context, *connect.Request[v1.RedeployDeploymentRequest]) (*connect.Response[v1.RedeployDeploymentResponse], error)
	// Triggers a new build with the provided source code archive and deploys the result
	UploadSource(context.Context, *connect.Request[v1.UploadSourceRequest]) (*connect.Response[v1.UploadSourceResponse], error)
	LintSource(context.Context, *connect.Request[v1.LintSourceRequest]) (*connect.Response[v1.LintSourceResponse], error)
	GetDeploymentSteps(context.Context, *connect.Request[v1.GetDeploymentStepsRequest]) (*connect.Response[v1.GetDeploymentStepsResponse], error)
	GetDeploymentLogs(context.Context, *connect.Request[v1.GetDeploymentLogsRequest]) (*connect.Response[v1.GetDeploymentLogsResponse], error)
	GetClusterTimescaleDB(context.Context, *connect.Request[v1.GetClusterTimescaleDBRequest]) (*connect.Response[v1.GetClusterTimescaleDBResponse], error)
	GetClusterGateway(context.Context, *connect.Request[v1.GetClusterGatewayRequest]) (*connect.Response[v1.GetClusterGatewayResponse], error)
	GetClusterBackgroundPersistence(context.Context, *connect.Request[v1.GetClusterBackgroundPersistenceRequest]) (*connect.Response[v1.GetClusterBackgroundPersistenceResponse], error)
	CreateClusterTimescaleDB(context.Context, *connect.Request[v1.CreateClusterTimescaleDBRequest]) (*connect.Response[v1.CreateClusterTimescaleDBResponse], error)
	MigrateClusterTimescaleDB(context.Context, *connect.Request[v1.MigrateClusterTimescaleDBRequest]) (*connect.Response[v1.MigrateClusterTimescaleDBResponse], error)
	CreateClusterGateway(context.Context, *connect.Request[v1.CreateClusterGatewayRequest]) (*connect.Response[v1.CreateClusterGatewayResponse], error)
	CreateClusterBackgroundPersistence(context.Context, *connect.Request[v1.CreateClusterBackgroundPersistenceRequest]) (*connect.Response[v1.CreateClusterBackgroundPersistenceResponse], error)
	UpdateEnvironmentVariables(context.Context, *connect.Request[v1.UpdateEnvironmentVariablesRequest]) (*connect.Response[v1.UpdateEnvironmentVariablesResponse], error)
	StartBranch(context.Context, *connect.Request[v1.StartBranchRequest]) (*connect.Response[v1.StartBranchResponse], error)
	ScaleBranch(context.Context, *connect.Request[v1.ScaleBranchRequest]) (*connect.Response[v1.ScaleBranchResponse], error)
	GetBranchProfile(context.Context, *connect.Request[v1.GetBranchProfileRequest]) (*connect.Response[v1.GetBranchProfileResponse], error)
	GetNodepools(context.Context, *connect.Request[v1.GetNodepoolsRequest]) (*connect.Response[v1.GetNodepoolsResponse], error)
	AddNodepool(context.Context, *connect.Request[v1.AddNodepoolRequest]) (*connect.Response[v1.AddNodepoolResponse], error)
	UpdateNodepool(context.Context, *connect.Request[v1.UpdateNodepoolRequest]) (*connect.Response[v1.UpdateNodepoolResponse], error)
	DeleteNodepool(context.Context, *connect.Request[v1.DeleteNodepoolRequest]) (*connect.Response[v1.DeleteNodepoolResponse], error)
	// to be deprecated
	GetKarpenterNodepools(context.Context, *connect.Request[v1.GetKarpenterNodepoolsRequest]) (*connect.Response[v1.GetKarpenterNodepoolsResponse], error)
	// to be deprecated
	AddKarpenterNodepool(context.Context, *connect.Request[v1.AddKarpenterNodepoolRequest]) (*connect.Response[v1.AddKarpenterNodepoolResponse], error)
	// to be deprecated
	UpdateKarpenterNodepool(context.Context, *connect.Request[v1.UpdateKarpenterNodepoolRequest]) (*connect.Response[v1.UpdateKarpenterNodepoolResponse], error)
	// to be deprecated
	DeleteKarpenterNodepool(context.Context, *connect.Request[v1.DeleteKarpenterNodepoolRequest]) (*connect.Response[v1.DeleteKarpenterNodepoolResponse], error)
	GetKarpenterInstallationMetadata(context.Context, *connect.Request[v1.GetKarpenterInstallationMetadataRequest]) (*connect.Response[v1.GetKarpenterInstallationMetadataResponse], error)
	GetTagWeights(context.Context, *connect.Request[v1.GetTagWeightsRequest]) (*connect.Response[v1.GetTagWeightsResponse], error)
	SetTagWeights(context.Context, *connect.Request[v1.SetTagWeightsRequest]) (*connect.Response[v1.SetTagWeightsResponse], error)
}

// NewBuilderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuilderServiceHandler(svc BuilderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	builderServiceMethods := v1.File_chalk_server_v1_builder_proto.Services().ByName("BuilderService").Methods()
	builderServiceGetSearchConfigHandler := connect.NewUnaryHandler(
		BuilderServiceGetSearchConfigProcedure,
		svc.GetSearchConfig,
		connect.WithSchema(builderServiceMethods.ByName("GetSearchConfig")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceActivateDeploymentHandler := connect.NewUnaryHandler(
		BuilderServiceActivateDeploymentProcedure,
		svc.ActivateDeployment,
		connect.WithSchema(builderServiceMethods.ByName("ActivateDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceIndexDeploymentHandler := connect.NewUnaryHandler(
		BuilderServiceIndexDeploymentProcedure,
		svc.IndexDeployment,
		connect.WithSchema(builderServiceMethods.ByName("IndexDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceDeployKubeComponentsHandler := connect.NewUnaryHandler(
		BuilderServiceDeployKubeComponentsProcedure,
		svc.DeployKubeComponents,
		connect.WithSchema(builderServiceMethods.ByName("DeployKubeComponents")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceRebuildDeploymentHandler := connect.NewUnaryHandler(
		BuilderServiceRebuildDeploymentProcedure,
		svc.RebuildDeployment,
		connect.WithSchema(builderServiceMethods.ByName("RebuildDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceRedeployDeploymentHandler := connect.NewUnaryHandler(
		BuilderServiceRedeployDeploymentProcedure,
		svc.RedeployDeployment,
		connect.WithSchema(builderServiceMethods.ByName("RedeployDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceUploadSourceHandler := connect.NewUnaryHandler(
		BuilderServiceUploadSourceProcedure,
		svc.UploadSource,
		connect.WithSchema(builderServiceMethods.ByName("UploadSource")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceLintSourceHandler := connect.NewUnaryHandler(
		BuilderServiceLintSourceProcedure,
		svc.LintSource,
		connect.WithSchema(builderServiceMethods.ByName("LintSource")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetDeploymentStepsHandler := connect.NewUnaryHandler(
		BuilderServiceGetDeploymentStepsProcedure,
		svc.GetDeploymentSteps,
		connect.WithSchema(builderServiceMethods.ByName("GetDeploymentSteps")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetDeploymentLogsHandler := connect.NewUnaryHandler(
		BuilderServiceGetDeploymentLogsProcedure,
		svc.GetDeploymentLogs,
		connect.WithSchema(builderServiceMethods.ByName("GetDeploymentLogs")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetClusterTimescaleDBHandler := connect.NewUnaryHandler(
		BuilderServiceGetClusterTimescaleDBProcedure,
		svc.GetClusterTimescaleDB,
		connect.WithSchema(builderServiceMethods.ByName("GetClusterTimescaleDB")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetClusterGatewayHandler := connect.NewUnaryHandler(
		BuilderServiceGetClusterGatewayProcedure,
		svc.GetClusterGateway,
		connect.WithSchema(builderServiceMethods.ByName("GetClusterGateway")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetClusterBackgroundPersistenceHandler := connect.NewUnaryHandler(
		BuilderServiceGetClusterBackgroundPersistenceProcedure,
		svc.GetClusterBackgroundPersistence,
		connect.WithSchema(builderServiceMethods.ByName("GetClusterBackgroundPersistence")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceCreateClusterTimescaleDBHandler := connect.NewUnaryHandler(
		BuilderServiceCreateClusterTimescaleDBProcedure,
		svc.CreateClusterTimescaleDB,
		connect.WithSchema(builderServiceMethods.ByName("CreateClusterTimescaleDB")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceMigrateClusterTimescaleDBHandler := connect.NewUnaryHandler(
		BuilderServiceMigrateClusterTimescaleDBProcedure,
		svc.MigrateClusterTimescaleDB,
		connect.WithSchema(builderServiceMethods.ByName("MigrateClusterTimescaleDB")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceCreateClusterGatewayHandler := connect.NewUnaryHandler(
		BuilderServiceCreateClusterGatewayProcedure,
		svc.CreateClusterGateway,
		connect.WithSchema(builderServiceMethods.ByName("CreateClusterGateway")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceCreateClusterBackgroundPersistenceHandler := connect.NewUnaryHandler(
		BuilderServiceCreateClusterBackgroundPersistenceProcedure,
		svc.CreateClusterBackgroundPersistence,
		connect.WithSchema(builderServiceMethods.ByName("CreateClusterBackgroundPersistence")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceUpdateEnvironmentVariablesHandler := connect.NewUnaryHandler(
		BuilderServiceUpdateEnvironmentVariablesProcedure,
		svc.UpdateEnvironmentVariables,
		connect.WithSchema(builderServiceMethods.ByName("UpdateEnvironmentVariables")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceStartBranchHandler := connect.NewUnaryHandler(
		BuilderServiceStartBranchProcedure,
		svc.StartBranch,
		connect.WithSchema(builderServiceMethods.ByName("StartBranch")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceScaleBranchHandler := connect.NewUnaryHandler(
		BuilderServiceScaleBranchProcedure,
		svc.ScaleBranch,
		connect.WithSchema(builderServiceMethods.ByName("ScaleBranch")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetBranchProfileHandler := connect.NewUnaryHandler(
		BuilderServiceGetBranchProfileProcedure,
		svc.GetBranchProfile,
		connect.WithSchema(builderServiceMethods.ByName("GetBranchProfile")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetNodepoolsHandler := connect.NewUnaryHandler(
		BuilderServiceGetNodepoolsProcedure,
		svc.GetNodepools,
		connect.WithSchema(builderServiceMethods.ByName("GetNodepools")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceAddNodepoolHandler := connect.NewUnaryHandler(
		BuilderServiceAddNodepoolProcedure,
		svc.AddNodepool,
		connect.WithSchema(builderServiceMethods.ByName("AddNodepool")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceUpdateNodepoolHandler := connect.NewUnaryHandler(
		BuilderServiceUpdateNodepoolProcedure,
		svc.UpdateNodepool,
		connect.WithSchema(builderServiceMethods.ByName("UpdateNodepool")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceDeleteNodepoolHandler := connect.NewUnaryHandler(
		BuilderServiceDeleteNodepoolProcedure,
		svc.DeleteNodepool,
		connect.WithSchema(builderServiceMethods.ByName("DeleteNodepool")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetKarpenterNodepoolsHandler := connect.NewUnaryHandler(
		BuilderServiceGetKarpenterNodepoolsProcedure,
		svc.GetKarpenterNodepools,
		connect.WithSchema(builderServiceMethods.ByName("GetKarpenterNodepools")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceAddKarpenterNodepoolHandler := connect.NewUnaryHandler(
		BuilderServiceAddKarpenterNodepoolProcedure,
		svc.AddKarpenterNodepool,
		connect.WithSchema(builderServiceMethods.ByName("AddKarpenterNodepool")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceUpdateKarpenterNodepoolHandler := connect.NewUnaryHandler(
		BuilderServiceUpdateKarpenterNodepoolProcedure,
		svc.UpdateKarpenterNodepool,
		connect.WithSchema(builderServiceMethods.ByName("UpdateKarpenterNodepool")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceDeleteKarpenterNodepoolHandler := connect.NewUnaryHandler(
		BuilderServiceDeleteKarpenterNodepoolProcedure,
		svc.DeleteKarpenterNodepool,
		connect.WithSchema(builderServiceMethods.ByName("DeleteKarpenterNodepool")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetKarpenterInstallationMetadataHandler := connect.NewUnaryHandler(
		BuilderServiceGetKarpenterInstallationMetadataProcedure,
		svc.GetKarpenterInstallationMetadata,
		connect.WithSchema(builderServiceMethods.ByName("GetKarpenterInstallationMetadata")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceGetTagWeightsHandler := connect.NewUnaryHandler(
		BuilderServiceGetTagWeightsProcedure,
		svc.GetTagWeights,
		connect.WithSchema(builderServiceMethods.ByName("GetTagWeights")),
		connect.WithHandlerOptions(opts...),
	)
	builderServiceSetTagWeightsHandler := connect.NewUnaryHandler(
		BuilderServiceSetTagWeightsProcedure,
		svc.SetTagWeights,
		connect.WithSchema(builderServiceMethods.ByName("SetTagWeights")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.BuilderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BuilderServiceGetSearchConfigProcedure:
			builderServiceGetSearchConfigHandler.ServeHTTP(w, r)
		case BuilderServiceActivateDeploymentProcedure:
			builderServiceActivateDeploymentHandler.ServeHTTP(w, r)
		case BuilderServiceIndexDeploymentProcedure:
			builderServiceIndexDeploymentHandler.ServeHTTP(w, r)
		case BuilderServiceDeployKubeComponentsProcedure:
			builderServiceDeployKubeComponentsHandler.ServeHTTP(w, r)
		case BuilderServiceRebuildDeploymentProcedure:
			builderServiceRebuildDeploymentHandler.ServeHTTP(w, r)
		case BuilderServiceRedeployDeploymentProcedure:
			builderServiceRedeployDeploymentHandler.ServeHTTP(w, r)
		case BuilderServiceUploadSourceProcedure:
			builderServiceUploadSourceHandler.ServeHTTP(w, r)
		case BuilderServiceLintSourceProcedure:
			builderServiceLintSourceHandler.ServeHTTP(w, r)
		case BuilderServiceGetDeploymentStepsProcedure:
			builderServiceGetDeploymentStepsHandler.ServeHTTP(w, r)
		case BuilderServiceGetDeploymentLogsProcedure:
			builderServiceGetDeploymentLogsHandler.ServeHTTP(w, r)
		case BuilderServiceGetClusterTimescaleDBProcedure:
			builderServiceGetClusterTimescaleDBHandler.ServeHTTP(w, r)
		case BuilderServiceGetClusterGatewayProcedure:
			builderServiceGetClusterGatewayHandler.ServeHTTP(w, r)
		case BuilderServiceGetClusterBackgroundPersistenceProcedure:
			builderServiceGetClusterBackgroundPersistenceHandler.ServeHTTP(w, r)
		case BuilderServiceCreateClusterTimescaleDBProcedure:
			builderServiceCreateClusterTimescaleDBHandler.ServeHTTP(w, r)
		case BuilderServiceMigrateClusterTimescaleDBProcedure:
			builderServiceMigrateClusterTimescaleDBHandler.ServeHTTP(w, r)
		case BuilderServiceCreateClusterGatewayProcedure:
			builderServiceCreateClusterGatewayHandler.ServeHTTP(w, r)
		case BuilderServiceCreateClusterBackgroundPersistenceProcedure:
			builderServiceCreateClusterBackgroundPersistenceHandler.ServeHTTP(w, r)
		case BuilderServiceUpdateEnvironmentVariablesProcedure:
			builderServiceUpdateEnvironmentVariablesHandler.ServeHTTP(w, r)
		case BuilderServiceStartBranchProcedure:
			builderServiceStartBranchHandler.ServeHTTP(w, r)
		case BuilderServiceScaleBranchProcedure:
			builderServiceScaleBranchHandler.ServeHTTP(w, r)
		case BuilderServiceGetBranchProfileProcedure:
			builderServiceGetBranchProfileHandler.ServeHTTP(w, r)
		case BuilderServiceGetNodepoolsProcedure:
			builderServiceGetNodepoolsHandler.ServeHTTP(w, r)
		case BuilderServiceAddNodepoolProcedure:
			builderServiceAddNodepoolHandler.ServeHTTP(w, r)
		case BuilderServiceUpdateNodepoolProcedure:
			builderServiceUpdateNodepoolHandler.ServeHTTP(w, r)
		case BuilderServiceDeleteNodepoolProcedure:
			builderServiceDeleteNodepoolHandler.ServeHTTP(w, r)
		case BuilderServiceGetKarpenterNodepoolsProcedure:
			builderServiceGetKarpenterNodepoolsHandler.ServeHTTP(w, r)
		case BuilderServiceAddKarpenterNodepoolProcedure:
			builderServiceAddKarpenterNodepoolHandler.ServeHTTP(w, r)
		case BuilderServiceUpdateKarpenterNodepoolProcedure:
			builderServiceUpdateKarpenterNodepoolHandler.ServeHTTP(w, r)
		case BuilderServiceDeleteKarpenterNodepoolProcedure:
			builderServiceDeleteKarpenterNodepoolHandler.ServeHTTP(w, r)
		case BuilderServiceGetKarpenterInstallationMetadataProcedure:
			builderServiceGetKarpenterInstallationMetadataHandler.ServeHTTP(w, r)
		case BuilderServiceGetTagWeightsProcedure:
			builderServiceGetTagWeightsHandler.ServeHTTP(w, r)
		case BuilderServiceSetTagWeightsProcedure:
			builderServiceSetTagWeightsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBuilderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuilderServiceHandler struct{}

func (UnimplementedBuilderServiceHandler) GetSearchConfig(context.Context, *connect.Request[v1.GetSearchConfigRequest]) (*connect.Response[v1.GetSearchConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetSearchConfig is not implemented"))
}

func (UnimplementedBuilderServiceHandler) ActivateDeployment(context.Context, *connect.Request[v1.ActivateDeploymentRequest]) (*connect.Response[v1.ActivateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.ActivateDeployment is not implemented"))
}

func (UnimplementedBuilderServiceHandler) IndexDeployment(context.Context, *connect.Request[v1.IndexDeploymentRequest]) (*connect.Response[v1.IndexDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.IndexDeployment is not implemented"))
}

func (UnimplementedBuilderServiceHandler) DeployKubeComponents(context.Context, *connect.Request[v1.DeployKubeComponentsRequest]) (*connect.Response[v1.DeployKubeComponentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.DeployKubeComponents is not implemented"))
}

func (UnimplementedBuilderServiceHandler) RebuildDeployment(context.Context, *connect.Request[v1.RebuildDeploymentRequest]) (*connect.Response[v1.RebuildDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.RebuildDeployment is not implemented"))
}

func (UnimplementedBuilderServiceHandler) RedeployDeployment(context.Context, *connect.Request[v1.RedeployDeploymentRequest]) (*connect.Response[v1.RedeployDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.RedeployDeployment is not implemented"))
}

func (UnimplementedBuilderServiceHandler) UploadSource(context.Context, *connect.Request[v1.UploadSourceRequest]) (*connect.Response[v1.UploadSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.UploadSource is not implemented"))
}

func (UnimplementedBuilderServiceHandler) LintSource(context.Context, *connect.Request[v1.LintSourceRequest]) (*connect.Response[v1.LintSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.LintSource is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetDeploymentSteps(context.Context, *connect.Request[v1.GetDeploymentStepsRequest]) (*connect.Response[v1.GetDeploymentStepsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetDeploymentSteps is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetDeploymentLogs(context.Context, *connect.Request[v1.GetDeploymentLogsRequest]) (*connect.Response[v1.GetDeploymentLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetDeploymentLogs is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetClusterTimescaleDB(context.Context, *connect.Request[v1.GetClusterTimescaleDBRequest]) (*connect.Response[v1.GetClusterTimescaleDBResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetClusterTimescaleDB is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetClusterGateway(context.Context, *connect.Request[v1.GetClusterGatewayRequest]) (*connect.Response[v1.GetClusterGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetClusterGateway is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetClusterBackgroundPersistence(context.Context, *connect.Request[v1.GetClusterBackgroundPersistenceRequest]) (*connect.Response[v1.GetClusterBackgroundPersistenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetClusterBackgroundPersistence is not implemented"))
}

func (UnimplementedBuilderServiceHandler) CreateClusterTimescaleDB(context.Context, *connect.Request[v1.CreateClusterTimescaleDBRequest]) (*connect.Response[v1.CreateClusterTimescaleDBResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.CreateClusterTimescaleDB is not implemented"))
}

func (UnimplementedBuilderServiceHandler) MigrateClusterTimescaleDB(context.Context, *connect.Request[v1.MigrateClusterTimescaleDBRequest]) (*connect.Response[v1.MigrateClusterTimescaleDBResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.MigrateClusterTimescaleDB is not implemented"))
}

func (UnimplementedBuilderServiceHandler) CreateClusterGateway(context.Context, *connect.Request[v1.CreateClusterGatewayRequest]) (*connect.Response[v1.CreateClusterGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.CreateClusterGateway is not implemented"))
}

func (UnimplementedBuilderServiceHandler) CreateClusterBackgroundPersistence(context.Context, *connect.Request[v1.CreateClusterBackgroundPersistenceRequest]) (*connect.Response[v1.CreateClusterBackgroundPersistenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.CreateClusterBackgroundPersistence is not implemented"))
}

func (UnimplementedBuilderServiceHandler) UpdateEnvironmentVariables(context.Context, *connect.Request[v1.UpdateEnvironmentVariablesRequest]) (*connect.Response[v1.UpdateEnvironmentVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.UpdateEnvironmentVariables is not implemented"))
}

func (UnimplementedBuilderServiceHandler) StartBranch(context.Context, *connect.Request[v1.StartBranchRequest]) (*connect.Response[v1.StartBranchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.StartBranch is not implemented"))
}

func (UnimplementedBuilderServiceHandler) ScaleBranch(context.Context, *connect.Request[v1.ScaleBranchRequest]) (*connect.Response[v1.ScaleBranchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.ScaleBranch is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetBranchProfile(context.Context, *connect.Request[v1.GetBranchProfileRequest]) (*connect.Response[v1.GetBranchProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetBranchProfile is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetNodepools(context.Context, *connect.Request[v1.GetNodepoolsRequest]) (*connect.Response[v1.GetNodepoolsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetNodepools is not implemented"))
}

func (UnimplementedBuilderServiceHandler) AddNodepool(context.Context, *connect.Request[v1.AddNodepoolRequest]) (*connect.Response[v1.AddNodepoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.AddNodepool is not implemented"))
}

func (UnimplementedBuilderServiceHandler) UpdateNodepool(context.Context, *connect.Request[v1.UpdateNodepoolRequest]) (*connect.Response[v1.UpdateNodepoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.UpdateNodepool is not implemented"))
}

func (UnimplementedBuilderServiceHandler) DeleteNodepool(context.Context, *connect.Request[v1.DeleteNodepoolRequest]) (*connect.Response[v1.DeleteNodepoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.DeleteNodepool is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetKarpenterNodepools(context.Context, *connect.Request[v1.GetKarpenterNodepoolsRequest]) (*connect.Response[v1.GetKarpenterNodepoolsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetKarpenterNodepools is not implemented"))
}

func (UnimplementedBuilderServiceHandler) AddKarpenterNodepool(context.Context, *connect.Request[v1.AddKarpenterNodepoolRequest]) (*connect.Response[v1.AddKarpenterNodepoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.AddKarpenterNodepool is not implemented"))
}

func (UnimplementedBuilderServiceHandler) UpdateKarpenterNodepool(context.Context, *connect.Request[v1.UpdateKarpenterNodepoolRequest]) (*connect.Response[v1.UpdateKarpenterNodepoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.UpdateKarpenterNodepool is not implemented"))
}

func (UnimplementedBuilderServiceHandler) DeleteKarpenterNodepool(context.Context, *connect.Request[v1.DeleteKarpenterNodepoolRequest]) (*connect.Response[v1.DeleteKarpenterNodepoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.DeleteKarpenterNodepool is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetKarpenterInstallationMetadata(context.Context, *connect.Request[v1.GetKarpenterInstallationMetadataRequest]) (*connect.Response[v1.GetKarpenterInstallationMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetKarpenterInstallationMetadata is not implemented"))
}

func (UnimplementedBuilderServiceHandler) GetTagWeights(context.Context, *connect.Request[v1.GetTagWeightsRequest]) (*connect.Response[v1.GetTagWeightsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.GetTagWeights is not implemented"))
}

func (UnimplementedBuilderServiceHandler) SetTagWeights(context.Context, *connect.Request[v1.SetTagWeightsRequest]) (*connect.Response[v1.SetTagWeightsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.BuilderService.SetTagWeights is not implemented"))
}

// ClusterBuilderServiceClient is a client for the chalk.server.v1.ClusterBuilderService service.
type ClusterBuilderServiceClient interface {
	CreateKafkaTopics(context.Context, *connect.Request[v1.CreateKafkaTopicsRequest]) (*connect.Response[v1.CreateKafkaTopicsResponse], error)
	GetKafkaTopics(context.Context, *connect.Request[v1.GetKafkaTopicsRequest]) (*connect.Response[v1.GetKafkaTopicsResponse], error)
}

// NewClusterBuilderServiceClient constructs a client for the chalk.server.v1.ClusterBuilderService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterBuilderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterBuilderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterBuilderServiceMethods := v1.File_chalk_server_v1_builder_proto.Services().ByName("ClusterBuilderService").Methods()
	return &clusterBuilderServiceClient{
		createKafkaTopics: connect.NewClient[v1.CreateKafkaTopicsRequest, v1.CreateKafkaTopicsResponse](
			httpClient,
			baseURL+ClusterBuilderServiceCreateKafkaTopicsProcedure,
			connect.WithSchema(clusterBuilderServiceMethods.ByName("CreateKafkaTopics")),
			connect.WithClientOptions(opts...),
		),
		getKafkaTopics: connect.NewClient[v1.GetKafkaTopicsRequest, v1.GetKafkaTopicsResponse](
			httpClient,
			baseURL+ClusterBuilderServiceGetKafkaTopicsProcedure,
			connect.WithSchema(clusterBuilderServiceMethods.ByName("GetKafkaTopics")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterBuilderServiceClient implements ClusterBuilderServiceClient.
type clusterBuilderServiceClient struct {
	createKafkaTopics *connect.Client[v1.CreateKafkaTopicsRequest, v1.CreateKafkaTopicsResponse]
	getKafkaTopics    *connect.Client[v1.GetKafkaTopicsRequest, v1.GetKafkaTopicsResponse]
}

// CreateKafkaTopics calls chalk.server.v1.ClusterBuilderService.CreateKafkaTopics.
func (c *clusterBuilderServiceClient) CreateKafkaTopics(ctx context.Context, req *connect.Request[v1.CreateKafkaTopicsRequest]) (*connect.Response[v1.CreateKafkaTopicsResponse], error) {
	return c.createKafkaTopics.CallUnary(ctx, req)
}

// GetKafkaTopics calls chalk.server.v1.ClusterBuilderService.GetKafkaTopics.
func (c *clusterBuilderServiceClient) GetKafkaTopics(ctx context.Context, req *connect.Request[v1.GetKafkaTopicsRequest]) (*connect.Response[v1.GetKafkaTopicsResponse], error) {
	return c.getKafkaTopics.CallUnary(ctx, req)
}

// ClusterBuilderServiceHandler is an implementation of the chalk.server.v1.ClusterBuilderService
// service.
type ClusterBuilderServiceHandler interface {
	CreateKafkaTopics(context.Context, *connect.Request[v1.CreateKafkaTopicsRequest]) (*connect.Response[v1.CreateKafkaTopicsResponse], error)
	GetKafkaTopics(context.Context, *connect.Request[v1.GetKafkaTopicsRequest]) (*connect.Response[v1.GetKafkaTopicsResponse], error)
}

// NewClusterBuilderServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterBuilderServiceHandler(svc ClusterBuilderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterBuilderServiceMethods := v1.File_chalk_server_v1_builder_proto.Services().ByName("ClusterBuilderService").Methods()
	clusterBuilderServiceCreateKafkaTopicsHandler := connect.NewUnaryHandler(
		ClusterBuilderServiceCreateKafkaTopicsProcedure,
		svc.CreateKafkaTopics,
		connect.WithSchema(clusterBuilderServiceMethods.ByName("CreateKafkaTopics")),
		connect.WithHandlerOptions(opts...),
	)
	clusterBuilderServiceGetKafkaTopicsHandler := connect.NewUnaryHandler(
		ClusterBuilderServiceGetKafkaTopicsProcedure,
		svc.GetKafkaTopics,
		connect.WithSchema(clusterBuilderServiceMethods.ByName("GetKafkaTopics")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.ClusterBuilderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterBuilderServiceCreateKafkaTopicsProcedure:
			clusterBuilderServiceCreateKafkaTopicsHandler.ServeHTTP(w, r)
		case ClusterBuilderServiceGetKafkaTopicsProcedure:
			clusterBuilderServiceGetKafkaTopicsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterBuilderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterBuilderServiceHandler struct{}

func (UnimplementedClusterBuilderServiceHandler) CreateKafkaTopics(context.Context, *connect.Request[v1.CreateKafkaTopicsRequest]) (*connect.Response[v1.CreateKafkaTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ClusterBuilderService.CreateKafkaTopics is not implemented"))
}

func (UnimplementedClusterBuilderServiceHandler) GetKafkaTopics(context.Context, *connect.Request[v1.GetKafkaTopicsRequest]) (*connect.Response[v1.GetKafkaTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ClusterBuilderService.GetKafkaTopics is not implemented"))
}
