// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/script_tasks.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ScriptTaskServiceName is the fully-qualified name of the ScriptTaskService service.
	ScriptTaskServiceName = "chalk.server.v1.ScriptTaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScriptTaskServiceCreateScriptTaskProcedure is the fully-qualified name of the ScriptTaskService's
	// CreateScriptTask RPC.
	ScriptTaskServiceCreateScriptTaskProcedure = "/chalk.server.v1.ScriptTaskService/CreateScriptTask"
	// ScriptTaskServiceListScriptTasksProcedure is the fully-qualified name of the ScriptTaskService's
	// ListScriptTasks RPC.
	ScriptTaskServiceListScriptTasksProcedure = "/chalk.server.v1.ScriptTaskService/ListScriptTasks"
	// ScriptTaskServiceGetScriptTaskProcedure is the fully-qualified name of the ScriptTaskService's
	// GetScriptTask RPC.
	ScriptTaskServiceGetScriptTaskProcedure = "/chalk.server.v1.ScriptTaskService/GetScriptTask"
)

// ScriptTaskServiceClient is a client for the chalk.server.v1.ScriptTaskService service.
type ScriptTaskServiceClient interface {
	CreateScriptTask(context.Context, *connect.Request[v1.CreateScriptTaskRequest]) (*connect.Response[v1.CreateScriptTaskResponse], error)
	ListScriptTasks(context.Context, *connect.Request[v1.ListScriptTasksRequest]) (*connect.Response[v1.ListScriptTasksResponse], error)
	GetScriptTask(context.Context, *connect.Request[v1.GetScriptTaskRequest]) (*connect.Response[v1.GetScriptTaskResponse], error)
}

// NewScriptTaskServiceClient constructs a client for the chalk.server.v1.ScriptTaskService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScriptTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ScriptTaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	scriptTaskServiceMethods := v1.File_chalk_server_v1_script_tasks_proto.Services().ByName("ScriptTaskService").Methods()
	return &scriptTaskServiceClient{
		createScriptTask: connect.NewClient[v1.CreateScriptTaskRequest, v1.CreateScriptTaskResponse](
			httpClient,
			baseURL+ScriptTaskServiceCreateScriptTaskProcedure,
			connect.WithSchema(scriptTaskServiceMethods.ByName("CreateScriptTask")),
			connect.WithClientOptions(opts...),
		),
		listScriptTasks: connect.NewClient[v1.ListScriptTasksRequest, v1.ListScriptTasksResponse](
			httpClient,
			baseURL+ScriptTaskServiceListScriptTasksProcedure,
			connect.WithSchema(scriptTaskServiceMethods.ByName("ListScriptTasks")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getScriptTask: connect.NewClient[v1.GetScriptTaskRequest, v1.GetScriptTaskResponse](
			httpClient,
			baseURL+ScriptTaskServiceGetScriptTaskProcedure,
			connect.WithSchema(scriptTaskServiceMethods.ByName("GetScriptTask")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// scriptTaskServiceClient implements ScriptTaskServiceClient.
type scriptTaskServiceClient struct {
	createScriptTask *connect.Client[v1.CreateScriptTaskRequest, v1.CreateScriptTaskResponse]
	listScriptTasks  *connect.Client[v1.ListScriptTasksRequest, v1.ListScriptTasksResponse]
	getScriptTask    *connect.Client[v1.GetScriptTaskRequest, v1.GetScriptTaskResponse]
}

// CreateScriptTask calls chalk.server.v1.ScriptTaskService.CreateScriptTask.
func (c *scriptTaskServiceClient) CreateScriptTask(ctx context.Context, req *connect.Request[v1.CreateScriptTaskRequest]) (*connect.Response[v1.CreateScriptTaskResponse], error) {
	return c.createScriptTask.CallUnary(ctx, req)
}

// ListScriptTasks calls chalk.server.v1.ScriptTaskService.ListScriptTasks.
func (c *scriptTaskServiceClient) ListScriptTasks(ctx context.Context, req *connect.Request[v1.ListScriptTasksRequest]) (*connect.Response[v1.ListScriptTasksResponse], error) {
	return c.listScriptTasks.CallUnary(ctx, req)
}

// GetScriptTask calls chalk.server.v1.ScriptTaskService.GetScriptTask.
func (c *scriptTaskServiceClient) GetScriptTask(ctx context.Context, req *connect.Request[v1.GetScriptTaskRequest]) (*connect.Response[v1.GetScriptTaskResponse], error) {
	return c.getScriptTask.CallUnary(ctx, req)
}

// ScriptTaskServiceHandler is an implementation of the chalk.server.v1.ScriptTaskService service.
type ScriptTaskServiceHandler interface {
	CreateScriptTask(context.Context, *connect.Request[v1.CreateScriptTaskRequest]) (*connect.Response[v1.CreateScriptTaskResponse], error)
	ListScriptTasks(context.Context, *connect.Request[v1.ListScriptTasksRequest]) (*connect.Response[v1.ListScriptTasksResponse], error)
	GetScriptTask(context.Context, *connect.Request[v1.GetScriptTaskRequest]) (*connect.Response[v1.GetScriptTaskResponse], error)
}

// NewScriptTaskServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScriptTaskServiceHandler(svc ScriptTaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	scriptTaskServiceMethods := v1.File_chalk_server_v1_script_tasks_proto.Services().ByName("ScriptTaskService").Methods()
	scriptTaskServiceCreateScriptTaskHandler := connect.NewUnaryHandler(
		ScriptTaskServiceCreateScriptTaskProcedure,
		svc.CreateScriptTask,
		connect.WithSchema(scriptTaskServiceMethods.ByName("CreateScriptTask")),
		connect.WithHandlerOptions(opts...),
	)
	scriptTaskServiceListScriptTasksHandler := connect.NewUnaryHandler(
		ScriptTaskServiceListScriptTasksProcedure,
		svc.ListScriptTasks,
		connect.WithSchema(scriptTaskServiceMethods.ByName("ListScriptTasks")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	scriptTaskServiceGetScriptTaskHandler := connect.NewUnaryHandler(
		ScriptTaskServiceGetScriptTaskProcedure,
		svc.GetScriptTask,
		connect.WithSchema(scriptTaskServiceMethods.ByName("GetScriptTask")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.ScriptTaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScriptTaskServiceCreateScriptTaskProcedure:
			scriptTaskServiceCreateScriptTaskHandler.ServeHTTP(w, r)
		case ScriptTaskServiceListScriptTasksProcedure:
			scriptTaskServiceListScriptTasksHandler.ServeHTTP(w, r)
		case ScriptTaskServiceGetScriptTaskProcedure:
			scriptTaskServiceGetScriptTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScriptTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScriptTaskServiceHandler struct{}

func (UnimplementedScriptTaskServiceHandler) CreateScriptTask(context.Context, *connect.Request[v1.CreateScriptTaskRequest]) (*connect.Response[v1.CreateScriptTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ScriptTaskService.CreateScriptTask is not implemented"))
}

func (UnimplementedScriptTaskServiceHandler) ListScriptTasks(context.Context, *connect.Request[v1.ListScriptTasksRequest]) (*connect.Response[v1.ListScriptTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ScriptTaskService.ListScriptTasks is not implemented"))
}

func (UnimplementedScriptTaskServiceHandler) GetScriptTask(context.Context, *connect.Request[v1.GetScriptTaskRequest]) (*connect.Response[v1.GetScriptTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ScriptTaskService.GetScriptTask is not implemented"))
}
