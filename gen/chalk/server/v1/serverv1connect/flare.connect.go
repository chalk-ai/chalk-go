// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/flare.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FlareServiceName is the fully-qualified name of the FlareService service.
	FlareServiceName = "chalk.server.v1.FlareService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FlareServiceUploadFlareProcedure is the fully-qualified name of the FlareService's UploadFlare
	// RPC.
	FlareServiceUploadFlareProcedure = "/chalk.server.v1.FlareService/UploadFlare"
	// FlareServiceListFlaresProcedure is the fully-qualified name of the FlareService's ListFlares RPC.
	FlareServiceListFlaresProcedure = "/chalk.server.v1.FlareService/ListFlares"
	// FlareServiceGetFlareDownloadLinkProcedure is the fully-qualified name of the FlareService's
	// GetFlareDownloadLink RPC.
	FlareServiceGetFlareDownloadLinkProcedure = "/chalk.server.v1.FlareService/GetFlareDownloadLink"
)

// FlareServiceClient is a client for the chalk.server.v1.FlareService service.
type FlareServiceClient interface {
	UploadFlare(context.Context, *connect.Request[v1.UploadFlareRequest]) (*connect.Response[v1.UploadFlareResponse], error)
	ListFlares(context.Context, *connect.Request[v1.ListFlaresRequest]) (*connect.Response[v1.ListFlaresResponse], error)
	GetFlareDownloadLink(context.Context, *connect.Request[v1.GetFlareDownloadLinkRequest]) (*connect.Response[v1.GetFlareDownloadLinkResponse], error)
}

// NewFlareServiceClient constructs a client for the chalk.server.v1.FlareService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFlareServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FlareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	flareServiceMethods := v1.File_chalk_server_v1_flare_proto.Services().ByName("FlareService").Methods()
	return &flareServiceClient{
		uploadFlare: connect.NewClient[v1.UploadFlareRequest, v1.UploadFlareResponse](
			httpClient,
			baseURL+FlareServiceUploadFlareProcedure,
			connect.WithSchema(flareServiceMethods.ByName("UploadFlare")),
			connect.WithClientOptions(opts...),
		),
		listFlares: connect.NewClient[v1.ListFlaresRequest, v1.ListFlaresResponse](
			httpClient,
			baseURL+FlareServiceListFlaresProcedure,
			connect.WithSchema(flareServiceMethods.ByName("ListFlares")),
			connect.WithClientOptions(opts...),
		),
		getFlareDownloadLink: connect.NewClient[v1.GetFlareDownloadLinkRequest, v1.GetFlareDownloadLinkResponse](
			httpClient,
			baseURL+FlareServiceGetFlareDownloadLinkProcedure,
			connect.WithSchema(flareServiceMethods.ByName("GetFlareDownloadLink")),
			connect.WithClientOptions(opts...),
		),
	}
}

// flareServiceClient implements FlareServiceClient.
type flareServiceClient struct {
	uploadFlare          *connect.Client[v1.UploadFlareRequest, v1.UploadFlareResponse]
	listFlares           *connect.Client[v1.ListFlaresRequest, v1.ListFlaresResponse]
	getFlareDownloadLink *connect.Client[v1.GetFlareDownloadLinkRequest, v1.GetFlareDownloadLinkResponse]
}

// UploadFlare calls chalk.server.v1.FlareService.UploadFlare.
func (c *flareServiceClient) UploadFlare(ctx context.Context, req *connect.Request[v1.UploadFlareRequest]) (*connect.Response[v1.UploadFlareResponse], error) {
	return c.uploadFlare.CallUnary(ctx, req)
}

// ListFlares calls chalk.server.v1.FlareService.ListFlares.
func (c *flareServiceClient) ListFlares(ctx context.Context, req *connect.Request[v1.ListFlaresRequest]) (*connect.Response[v1.ListFlaresResponse], error) {
	return c.listFlares.CallUnary(ctx, req)
}

// GetFlareDownloadLink calls chalk.server.v1.FlareService.GetFlareDownloadLink.
func (c *flareServiceClient) GetFlareDownloadLink(ctx context.Context, req *connect.Request[v1.GetFlareDownloadLinkRequest]) (*connect.Response[v1.GetFlareDownloadLinkResponse], error) {
	return c.getFlareDownloadLink.CallUnary(ctx, req)
}

// FlareServiceHandler is an implementation of the chalk.server.v1.FlareService service.
type FlareServiceHandler interface {
	UploadFlare(context.Context, *connect.Request[v1.UploadFlareRequest]) (*connect.Response[v1.UploadFlareResponse], error)
	ListFlares(context.Context, *connect.Request[v1.ListFlaresRequest]) (*connect.Response[v1.ListFlaresResponse], error)
	GetFlareDownloadLink(context.Context, *connect.Request[v1.GetFlareDownloadLinkRequest]) (*connect.Response[v1.GetFlareDownloadLinkResponse], error)
}

// NewFlareServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFlareServiceHandler(svc FlareServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	flareServiceMethods := v1.File_chalk_server_v1_flare_proto.Services().ByName("FlareService").Methods()
	flareServiceUploadFlareHandler := connect.NewUnaryHandler(
		FlareServiceUploadFlareProcedure,
		svc.UploadFlare,
		connect.WithSchema(flareServiceMethods.ByName("UploadFlare")),
		connect.WithHandlerOptions(opts...),
	)
	flareServiceListFlaresHandler := connect.NewUnaryHandler(
		FlareServiceListFlaresProcedure,
		svc.ListFlares,
		connect.WithSchema(flareServiceMethods.ByName("ListFlares")),
		connect.WithHandlerOptions(opts...),
	)
	flareServiceGetFlareDownloadLinkHandler := connect.NewUnaryHandler(
		FlareServiceGetFlareDownloadLinkProcedure,
		svc.GetFlareDownloadLink,
		connect.WithSchema(flareServiceMethods.ByName("GetFlareDownloadLink")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.FlareService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FlareServiceUploadFlareProcedure:
			flareServiceUploadFlareHandler.ServeHTTP(w, r)
		case FlareServiceListFlaresProcedure:
			flareServiceListFlaresHandler.ServeHTTP(w, r)
		case FlareServiceGetFlareDownloadLinkProcedure:
			flareServiceGetFlareDownloadLinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFlareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFlareServiceHandler struct{}

func (UnimplementedFlareServiceHandler) UploadFlare(context.Context, *connect.Request[v1.UploadFlareRequest]) (*connect.Response[v1.UploadFlareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.FlareService.UploadFlare is not implemented"))
}

func (UnimplementedFlareServiceHandler) ListFlares(context.Context, *connect.Request[v1.ListFlaresRequest]) (*connect.Response[v1.ListFlaresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.FlareService.ListFlares is not implemented"))
}

func (UnimplementedFlareServiceHandler) GetFlareDownloadLink(context.Context, *connect.Request[v1.GetFlareDownloadLinkRequest]) (*connect.Response[v1.GetFlareDownloadLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.FlareService.GetFlareDownloadLink is not implemented"))
}
