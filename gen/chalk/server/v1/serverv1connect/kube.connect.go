// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/kube.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KubeServiceName is the fully-qualified name of the KubeService service.
	KubeServiceName = "chalk.server.v1.KubeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KubeServiceGetPodStackTraceDumpProcedure is the fully-qualified name of the KubeService's
	// GetPodStackTraceDump RPC.
	KubeServiceGetPodStackTraceDumpProcedure = "/chalk.server.v1.KubeService/GetPodStackTraceDump"
	// KubeServiceGetKubernetesEventsProcedure is the fully-qualified name of the KubeService's
	// GetKubernetesEvents RPC.
	KubeServiceGetKubernetesEventsProcedure = "/chalk.server.v1.KubeService/GetKubernetesEvents"
)

// KubeServiceClient is a client for the chalk.server.v1.KubeService service.
type KubeServiceClient interface {
	// GetPodStackTraceDump gets the stack trace dump from a single process running in a pod
	// The process can be specified either by name or process ID
	GetPodStackTraceDump(context.Context, *connect.Request[v1.GetPodStackTraceDumpRequest]) (*connect.Response[v1.GetPodStackTraceDumpResponse], error)
	GetKubernetesEvents(context.Context, *connect.Request[v1.GetKubernetesEventsRequest]) (*connect.Response[v1.GetKubernetesEventsResponse], error)
}

// NewKubeServiceClient constructs a client for the chalk.server.v1.KubeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKubeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KubeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kubeServiceMethods := v1.File_chalk_server_v1_kube_proto.Services().ByName("KubeService").Methods()
	return &kubeServiceClient{
		getPodStackTraceDump: connect.NewClient[v1.GetPodStackTraceDumpRequest, v1.GetPodStackTraceDumpResponse](
			httpClient,
			baseURL+KubeServiceGetPodStackTraceDumpProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("GetPodStackTraceDump")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getKubernetesEvents: connect.NewClient[v1.GetKubernetesEventsRequest, v1.GetKubernetesEventsResponse](
			httpClient,
			baseURL+KubeServiceGetKubernetesEventsProcedure,
			connect.WithSchema(kubeServiceMethods.ByName("GetKubernetesEvents")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// kubeServiceClient implements KubeServiceClient.
type kubeServiceClient struct {
	getPodStackTraceDump *connect.Client[v1.GetPodStackTraceDumpRequest, v1.GetPodStackTraceDumpResponse]
	getKubernetesEvents  *connect.Client[v1.GetKubernetesEventsRequest, v1.GetKubernetesEventsResponse]
}

// GetPodStackTraceDump calls chalk.server.v1.KubeService.GetPodStackTraceDump.
func (c *kubeServiceClient) GetPodStackTraceDump(ctx context.Context, req *connect.Request[v1.GetPodStackTraceDumpRequest]) (*connect.Response[v1.GetPodStackTraceDumpResponse], error) {
	return c.getPodStackTraceDump.CallUnary(ctx, req)
}

// GetKubernetesEvents calls chalk.server.v1.KubeService.GetKubernetesEvents.
func (c *kubeServiceClient) GetKubernetesEvents(ctx context.Context, req *connect.Request[v1.GetKubernetesEventsRequest]) (*connect.Response[v1.GetKubernetesEventsResponse], error) {
	return c.getKubernetesEvents.CallUnary(ctx, req)
}

// KubeServiceHandler is an implementation of the chalk.server.v1.KubeService service.
type KubeServiceHandler interface {
	// GetPodStackTraceDump gets the stack trace dump from a single process running in a pod
	// The process can be specified either by name or process ID
	GetPodStackTraceDump(context.Context, *connect.Request[v1.GetPodStackTraceDumpRequest]) (*connect.Response[v1.GetPodStackTraceDumpResponse], error)
	GetKubernetesEvents(context.Context, *connect.Request[v1.GetKubernetesEventsRequest]) (*connect.Response[v1.GetKubernetesEventsResponse], error)
}

// NewKubeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKubeServiceHandler(svc KubeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kubeServiceMethods := v1.File_chalk_server_v1_kube_proto.Services().ByName("KubeService").Methods()
	kubeServiceGetPodStackTraceDumpHandler := connect.NewUnaryHandler(
		KubeServiceGetPodStackTraceDumpProcedure,
		svc.GetPodStackTraceDump,
		connect.WithSchema(kubeServiceMethods.ByName("GetPodStackTraceDump")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	kubeServiceGetKubernetesEventsHandler := connect.NewUnaryHandler(
		KubeServiceGetKubernetesEventsProcedure,
		svc.GetKubernetesEvents,
		connect.WithSchema(kubeServiceMethods.ByName("GetKubernetesEvents")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.KubeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KubeServiceGetPodStackTraceDumpProcedure:
			kubeServiceGetPodStackTraceDumpHandler.ServeHTTP(w, r)
		case KubeServiceGetKubernetesEventsProcedure:
			kubeServiceGetKubernetesEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKubeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKubeServiceHandler struct{}

func (UnimplementedKubeServiceHandler) GetPodStackTraceDump(context.Context, *connect.Request[v1.GetPodStackTraceDumpRequest]) (*connect.Response[v1.GetPodStackTraceDumpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.KubeService.GetPodStackTraceDump is not implemented"))
}

func (UnimplementedKubeServiceHandler) GetKubernetesEvents(context.Context, *connect.Request[v1.GetKubernetesEventsRequest]) (*connect.Response[v1.GetKubernetesEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.KubeService.GetKubernetesEvents is not implemented"))
}
