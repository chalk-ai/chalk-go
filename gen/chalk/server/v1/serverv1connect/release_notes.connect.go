// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/release_notes.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReleaseNotesServiceName is the fully-qualified name of the ReleaseNotesService service.
	ReleaseNotesServiceName = "chalk.server.v1.ReleaseNotesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReleaseNotesServiceListReleasesProcedure is the fully-qualified name of the ReleaseNotesService's
	// ListReleases RPC.
	ReleaseNotesServiceListReleasesProcedure = "/chalk.server.v1.ReleaseNotesService/ListReleases"
)

// ReleaseNotesServiceClient is a client for the chalk.server.v1.ReleaseNotesService service.
type ReleaseNotesServiceClient interface {
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
}

// NewReleaseNotesServiceClient constructs a client for the chalk.server.v1.ReleaseNotesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReleaseNotesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReleaseNotesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	releaseNotesServiceMethods := v1.File_chalk_server_v1_release_notes_proto.Services().ByName("ReleaseNotesService").Methods()
	return &releaseNotesServiceClient{
		listReleases: connect.NewClient[v1.ListReleasesRequest, v1.ListReleasesResponse](
			httpClient,
			baseURL+ReleaseNotesServiceListReleasesProcedure,
			connect.WithSchema(releaseNotesServiceMethods.ByName("ListReleases")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// releaseNotesServiceClient implements ReleaseNotesServiceClient.
type releaseNotesServiceClient struct {
	listReleases *connect.Client[v1.ListReleasesRequest, v1.ListReleasesResponse]
}

// ListReleases calls chalk.server.v1.ReleaseNotesService.ListReleases.
func (c *releaseNotesServiceClient) ListReleases(ctx context.Context, req *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return c.listReleases.CallUnary(ctx, req)
}

// ReleaseNotesServiceHandler is an implementation of the chalk.server.v1.ReleaseNotesService
// service.
type ReleaseNotesServiceHandler interface {
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
}

// NewReleaseNotesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReleaseNotesServiceHandler(svc ReleaseNotesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	releaseNotesServiceMethods := v1.File_chalk_server_v1_release_notes_proto.Services().ByName("ReleaseNotesService").Methods()
	releaseNotesServiceListReleasesHandler := connect.NewUnaryHandler(
		ReleaseNotesServiceListReleasesProcedure,
		svc.ListReleases,
		connect.WithSchema(releaseNotesServiceMethods.ByName("ListReleases")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.ReleaseNotesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReleaseNotesServiceListReleasesProcedure:
			releaseNotesServiceListReleasesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReleaseNotesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReleaseNotesServiceHandler struct{}

func (UnimplementedReleaseNotesServiceHandler) ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.ReleaseNotesService.ListReleases is not implemented"))
}
