// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/topicpush.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TopicPushServiceName is the fully-qualified name of the TopicPushService service.
	TopicPushServiceName = "chalk.server.v1.TopicPushService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TopicPushServiceListJobsProcedure is the fully-qualified name of the TopicPushService's ListJobs
	// RPC.
	TopicPushServiceListJobsProcedure = "/chalk.server.v1.TopicPushService/ListJobs"
	// TopicPushServiceCreateJobProcedure is the fully-qualified name of the TopicPushService's
	// CreateJob RPC.
	TopicPushServiceCreateJobProcedure = "/chalk.server.v1.TopicPushService/CreateJob"
	// TopicPushServiceUpdateJobProcedure is the fully-qualified name of the TopicPushService's
	// UpdateJob RPC.
	TopicPushServiceUpdateJobProcedure = "/chalk.server.v1.TopicPushService/UpdateJob"
	// TopicPushServiceDeleteJobProcedure is the fully-qualified name of the TopicPushService's
	// DeleteJob RPC.
	TopicPushServiceDeleteJobProcedure = "/chalk.server.v1.TopicPushService/DeleteJob"
	// TopicPushServiceGetJobByNameProcedure is the fully-qualified name of the TopicPushService's
	// GetJobByName RPC.
	TopicPushServiceGetJobByNameProcedure = "/chalk.server.v1.TopicPushService/GetJobByName"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	topicPushServiceServiceDescriptor            = v1.File_chalk_server_v1_topicpush_proto.Services().ByName("TopicPushService")
	topicPushServiceListJobsMethodDescriptor     = topicPushServiceServiceDescriptor.Methods().ByName("ListJobs")
	topicPushServiceCreateJobMethodDescriptor    = topicPushServiceServiceDescriptor.Methods().ByName("CreateJob")
	topicPushServiceUpdateJobMethodDescriptor    = topicPushServiceServiceDescriptor.Methods().ByName("UpdateJob")
	topicPushServiceDeleteJobMethodDescriptor    = topicPushServiceServiceDescriptor.Methods().ByName("DeleteJob")
	topicPushServiceGetJobByNameMethodDescriptor = topicPushServiceServiceDescriptor.Methods().ByName("GetJobByName")
)

// TopicPushServiceClient is a client for the chalk.server.v1.TopicPushService service.
type TopicPushServiceClient interface {
	ListJobs(context.Context, *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error)
	CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error)
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	GetJobByName(context.Context, *connect.Request[v1.GetJobByNameRequest]) (*connect.Response[v1.GetJobByNameResponse], error)
}

// NewTopicPushServiceClient constructs a client for the chalk.server.v1.TopicPushService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTopicPushServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TopicPushServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &topicPushServiceClient{
		listJobs: connect.NewClient[v1.ListJobsRequest, v1.ListJobsResponse](
			httpClient,
			baseURL+TopicPushServiceListJobsProcedure,
			connect.WithSchema(topicPushServiceListJobsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createJob: connect.NewClient[v1.CreateJobRequest, v1.CreateJobResponse](
			httpClient,
			baseURL+TopicPushServiceCreateJobProcedure,
			connect.WithSchema(topicPushServiceCreateJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateJob: connect.NewClient[v1.UpdateJobRequest, v1.UpdateJobResponse](
			httpClient,
			baseURL+TopicPushServiceUpdateJobProcedure,
			connect.WithSchema(topicPushServiceUpdateJobMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		deleteJob: connect.NewClient[v1.DeleteJobRequest, v1.DeleteJobResponse](
			httpClient,
			baseURL+TopicPushServiceDeleteJobProcedure,
			connect.WithSchema(topicPushServiceDeleteJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobByName: connect.NewClient[v1.GetJobByNameRequest, v1.GetJobByNameResponse](
			httpClient,
			baseURL+TopicPushServiceGetJobByNameProcedure,
			connect.WithSchema(topicPushServiceGetJobByNameMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// topicPushServiceClient implements TopicPushServiceClient.
type topicPushServiceClient struct {
	listJobs     *connect.Client[v1.ListJobsRequest, v1.ListJobsResponse]
	createJob    *connect.Client[v1.CreateJobRequest, v1.CreateJobResponse]
	updateJob    *connect.Client[v1.UpdateJobRequest, v1.UpdateJobResponse]
	deleteJob    *connect.Client[v1.DeleteJobRequest, v1.DeleteJobResponse]
	getJobByName *connect.Client[v1.GetJobByNameRequest, v1.GetJobByNameResponse]
}

// ListJobs calls chalk.server.v1.TopicPushService.ListJobs.
func (c *topicPushServiceClient) ListJobs(ctx context.Context, req *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error) {
	return c.listJobs.CallUnary(ctx, req)
}

// CreateJob calls chalk.server.v1.TopicPushService.CreateJob.
func (c *topicPushServiceClient) CreateJob(ctx context.Context, req *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error) {
	return c.createJob.CallUnary(ctx, req)
}

// UpdateJob calls chalk.server.v1.TopicPushService.UpdateJob.
func (c *topicPushServiceClient) UpdateJob(ctx context.Context, req *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return c.updateJob.CallUnary(ctx, req)
}

// DeleteJob calls chalk.server.v1.TopicPushService.DeleteJob.
func (c *topicPushServiceClient) DeleteJob(ctx context.Context, req *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return c.deleteJob.CallUnary(ctx, req)
}

// GetJobByName calls chalk.server.v1.TopicPushService.GetJobByName.
func (c *topicPushServiceClient) GetJobByName(ctx context.Context, req *connect.Request[v1.GetJobByNameRequest]) (*connect.Response[v1.GetJobByNameResponse], error) {
	return c.getJobByName.CallUnary(ctx, req)
}

// TopicPushServiceHandler is an implementation of the chalk.server.v1.TopicPushService service.
type TopicPushServiceHandler interface {
	ListJobs(context.Context, *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error)
	CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error)
	UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error)
	GetJobByName(context.Context, *connect.Request[v1.GetJobByNameRequest]) (*connect.Response[v1.GetJobByNameResponse], error)
}

// NewTopicPushServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTopicPushServiceHandler(svc TopicPushServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	topicPushServiceListJobsHandler := connect.NewUnaryHandler(
		TopicPushServiceListJobsProcedure,
		svc.ListJobs,
		connect.WithSchema(topicPushServiceListJobsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	topicPushServiceCreateJobHandler := connect.NewUnaryHandler(
		TopicPushServiceCreateJobProcedure,
		svc.CreateJob,
		connect.WithSchema(topicPushServiceCreateJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	topicPushServiceUpdateJobHandler := connect.NewUnaryHandler(
		TopicPushServiceUpdateJobProcedure,
		svc.UpdateJob,
		connect.WithSchema(topicPushServiceUpdateJobMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	topicPushServiceDeleteJobHandler := connect.NewUnaryHandler(
		TopicPushServiceDeleteJobProcedure,
		svc.DeleteJob,
		connect.WithSchema(topicPushServiceDeleteJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	topicPushServiceGetJobByNameHandler := connect.NewUnaryHandler(
		TopicPushServiceGetJobByNameProcedure,
		svc.GetJobByName,
		connect.WithSchema(topicPushServiceGetJobByNameMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.TopicPushService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TopicPushServiceListJobsProcedure:
			topicPushServiceListJobsHandler.ServeHTTP(w, r)
		case TopicPushServiceCreateJobProcedure:
			topicPushServiceCreateJobHandler.ServeHTTP(w, r)
		case TopicPushServiceUpdateJobProcedure:
			topicPushServiceUpdateJobHandler.ServeHTTP(w, r)
		case TopicPushServiceDeleteJobProcedure:
			topicPushServiceDeleteJobHandler.ServeHTTP(w, r)
		case TopicPushServiceGetJobByNameProcedure:
			topicPushServiceGetJobByNameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTopicPushServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTopicPushServiceHandler struct{}

func (UnimplementedTopicPushServiceHandler) ListJobs(context.Context, *connect.Request[v1.ListJobsRequest]) (*connect.Response[v1.ListJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TopicPushService.ListJobs is not implemented"))
}

func (UnimplementedTopicPushServiceHandler) CreateJob(context.Context, *connect.Request[v1.CreateJobRequest]) (*connect.Response[v1.CreateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TopicPushService.CreateJob is not implemented"))
}

func (UnimplementedTopicPushServiceHandler) UpdateJob(context.Context, *connect.Request[v1.UpdateJobRequest]) (*connect.Response[v1.UpdateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TopicPushService.UpdateJob is not implemented"))
}

func (UnimplementedTopicPushServiceHandler) DeleteJob(context.Context, *connect.Request[v1.DeleteJobRequest]) (*connect.Response[v1.DeleteJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TopicPushService.DeleteJob is not implemented"))
}

func (UnimplementedTopicPushServiceHandler) GetJobByName(context.Context, *connect.Request[v1.GetJobByNameRequest]) (*connect.Response[v1.GetJobByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.TopicPushService.GetJobByName is not implemented"))
}
