// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/integrations.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntegrationsServiceName is the fully-qualified name of the IntegrationsService service.
	IntegrationsServiceName = "chalk.server.v1.IntegrationsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationsServiceListIntegrationsProcedure is the fully-qualified name of the
	// IntegrationsService's ListIntegrations RPC.
	IntegrationsServiceListIntegrationsProcedure = "/chalk.server.v1.IntegrationsService/ListIntegrations"
	// IntegrationsServiceListIntegrationsAndSecretsProcedure is the fully-qualified name of the
	// IntegrationsService's ListIntegrationsAndSecrets RPC.
	IntegrationsServiceListIntegrationsAndSecretsProcedure = "/chalk.server.v1.IntegrationsService/ListIntegrationsAndSecrets"
	// IntegrationsServiceGetIntegrationValueProcedure is the fully-qualified name of the
	// IntegrationsService's GetIntegrationValue RPC.
	IntegrationsServiceGetIntegrationValueProcedure = "/chalk.server.v1.IntegrationsService/GetIntegrationValue"
	// IntegrationsServiceGetIntegrationProcedure is the fully-qualified name of the
	// IntegrationsService's GetIntegration RPC.
	IntegrationsServiceGetIntegrationProcedure = "/chalk.server.v1.IntegrationsService/GetIntegration"
	// IntegrationsServiceInsertIntegrationProcedure is the fully-qualified name of the
	// IntegrationsService's InsertIntegration RPC.
	IntegrationsServiceInsertIntegrationProcedure = "/chalk.server.v1.IntegrationsService/InsertIntegration"
	// IntegrationsServiceUpdateIntegrationProcedure is the fully-qualified name of the
	// IntegrationsService's UpdateIntegration RPC.
	IntegrationsServiceUpdateIntegrationProcedure = "/chalk.server.v1.IntegrationsService/UpdateIntegration"
	// IntegrationsServiceDeleteIntegrationProcedure is the fully-qualified name of the
	// IntegrationsService's DeleteIntegration RPC.
	IntegrationsServiceDeleteIntegrationProcedure = "/chalk.server.v1.IntegrationsService/DeleteIntegration"
	// IntegrationsServiceTestIntegrationProcedure is the fully-qualified name of the
	// IntegrationsService's TestIntegration RPC.
	IntegrationsServiceTestIntegrationProcedure = "/chalk.server.v1.IntegrationsService/TestIntegration"
)

// IntegrationsServiceClient is a client for the chalk.server.v1.IntegrationsService service.
type IntegrationsServiceClient interface {
	ListIntegrations(context.Context, *connect.Request[v1.ListIntegrationsRequest]) (*connect.Response[v1.ListIntegrationsResponse], error)
	ListIntegrationsAndSecrets(context.Context, *connect.Request[v1.ListIntegrationsAndSecretsRequest]) (*connect.Response[v1.ListIntegrationsAndSecretsResponse], error)
	GetIntegrationValue(context.Context, *connect.Request[v1.GetIntegrationValueRequest]) (*connect.Response[v1.GetIntegrationValueResponse], error)
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.GetIntegrationResponse], error)
	InsertIntegration(context.Context, *connect.Request[v1.InsertIntegrationRequest]) (*connect.Response[v1.InsertIntegrationResponse], error)
	UpdateIntegration(context.Context, *connect.Request[v1.UpdateIntegrationRequest]) (*connect.Response[v1.UpdateIntegrationResponse], error)
	DeleteIntegration(context.Context, *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error)
	TestIntegration(context.Context, *connect.Request[v1.TestIntegrationRequest]) (*connect.Response[v1.TestIntegrationResponse], error)
}

// NewIntegrationsServiceClient constructs a client for the chalk.server.v1.IntegrationsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntegrationsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	integrationsServiceMethods := v1.File_chalk_server_v1_integrations_proto.Services().ByName("IntegrationsService").Methods()
	return &integrationsServiceClient{
		listIntegrations: connect.NewClient[v1.ListIntegrationsRequest, v1.ListIntegrationsResponse](
			httpClient,
			baseURL+IntegrationsServiceListIntegrationsProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("ListIntegrations")),
			connect.WithClientOptions(opts...),
		),
		listIntegrationsAndSecrets: connect.NewClient[v1.ListIntegrationsAndSecretsRequest, v1.ListIntegrationsAndSecretsResponse](
			httpClient,
			baseURL+IntegrationsServiceListIntegrationsAndSecretsProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("ListIntegrationsAndSecrets")),
			connect.WithClientOptions(opts...),
		),
		getIntegrationValue: connect.NewClient[v1.GetIntegrationValueRequest, v1.GetIntegrationValueResponse](
			httpClient,
			baseURL+IntegrationsServiceGetIntegrationValueProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("GetIntegrationValue")),
			connect.WithClientOptions(opts...),
		),
		getIntegration: connect.NewClient[v1.GetIntegrationRequest, v1.GetIntegrationResponse](
			httpClient,
			baseURL+IntegrationsServiceGetIntegrationProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("GetIntegration")),
			connect.WithClientOptions(opts...),
		),
		insertIntegration: connect.NewClient[v1.InsertIntegrationRequest, v1.InsertIntegrationResponse](
			httpClient,
			baseURL+IntegrationsServiceInsertIntegrationProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("InsertIntegration")),
			connect.WithClientOptions(opts...),
		),
		updateIntegration: connect.NewClient[v1.UpdateIntegrationRequest, v1.UpdateIntegrationResponse](
			httpClient,
			baseURL+IntegrationsServiceUpdateIntegrationProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("UpdateIntegration")),
			connect.WithClientOptions(opts...),
		),
		deleteIntegration: connect.NewClient[v1.DeleteIntegrationRequest, v1.DeleteIntegrationResponse](
			httpClient,
			baseURL+IntegrationsServiceDeleteIntegrationProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("DeleteIntegration")),
			connect.WithClientOptions(opts...),
		),
		testIntegration: connect.NewClient[v1.TestIntegrationRequest, v1.TestIntegrationResponse](
			httpClient,
			baseURL+IntegrationsServiceTestIntegrationProcedure,
			connect.WithSchema(integrationsServiceMethods.ByName("TestIntegration")),
			connect.WithClientOptions(opts...),
		),
	}
}

// integrationsServiceClient implements IntegrationsServiceClient.
type integrationsServiceClient struct {
	listIntegrations           *connect.Client[v1.ListIntegrationsRequest, v1.ListIntegrationsResponse]
	listIntegrationsAndSecrets *connect.Client[v1.ListIntegrationsAndSecretsRequest, v1.ListIntegrationsAndSecretsResponse]
	getIntegrationValue        *connect.Client[v1.GetIntegrationValueRequest, v1.GetIntegrationValueResponse]
	getIntegration             *connect.Client[v1.GetIntegrationRequest, v1.GetIntegrationResponse]
	insertIntegration          *connect.Client[v1.InsertIntegrationRequest, v1.InsertIntegrationResponse]
	updateIntegration          *connect.Client[v1.UpdateIntegrationRequest, v1.UpdateIntegrationResponse]
	deleteIntegration          *connect.Client[v1.DeleteIntegrationRequest, v1.DeleteIntegrationResponse]
	testIntegration            *connect.Client[v1.TestIntegrationRequest, v1.TestIntegrationResponse]
}

// ListIntegrations calls chalk.server.v1.IntegrationsService.ListIntegrations.
func (c *integrationsServiceClient) ListIntegrations(ctx context.Context, req *connect.Request[v1.ListIntegrationsRequest]) (*connect.Response[v1.ListIntegrationsResponse], error) {
	return c.listIntegrations.CallUnary(ctx, req)
}

// ListIntegrationsAndSecrets calls chalk.server.v1.IntegrationsService.ListIntegrationsAndSecrets.
func (c *integrationsServiceClient) ListIntegrationsAndSecrets(ctx context.Context, req *connect.Request[v1.ListIntegrationsAndSecretsRequest]) (*connect.Response[v1.ListIntegrationsAndSecretsResponse], error) {
	return c.listIntegrationsAndSecrets.CallUnary(ctx, req)
}

// GetIntegrationValue calls chalk.server.v1.IntegrationsService.GetIntegrationValue.
func (c *integrationsServiceClient) GetIntegrationValue(ctx context.Context, req *connect.Request[v1.GetIntegrationValueRequest]) (*connect.Response[v1.GetIntegrationValueResponse], error) {
	return c.getIntegrationValue.CallUnary(ctx, req)
}

// GetIntegration calls chalk.server.v1.IntegrationsService.GetIntegration.
func (c *integrationsServiceClient) GetIntegration(ctx context.Context, req *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.GetIntegrationResponse], error) {
	return c.getIntegration.CallUnary(ctx, req)
}

// InsertIntegration calls chalk.server.v1.IntegrationsService.InsertIntegration.
func (c *integrationsServiceClient) InsertIntegration(ctx context.Context, req *connect.Request[v1.InsertIntegrationRequest]) (*connect.Response[v1.InsertIntegrationResponse], error) {
	return c.insertIntegration.CallUnary(ctx, req)
}

// UpdateIntegration calls chalk.server.v1.IntegrationsService.UpdateIntegration.
func (c *integrationsServiceClient) UpdateIntegration(ctx context.Context, req *connect.Request[v1.UpdateIntegrationRequest]) (*connect.Response[v1.UpdateIntegrationResponse], error) {
	return c.updateIntegration.CallUnary(ctx, req)
}

// DeleteIntegration calls chalk.server.v1.IntegrationsService.DeleteIntegration.
func (c *integrationsServiceClient) DeleteIntegration(ctx context.Context, req *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error) {
	return c.deleteIntegration.CallUnary(ctx, req)
}

// TestIntegration calls chalk.server.v1.IntegrationsService.TestIntegration.
func (c *integrationsServiceClient) TestIntegration(ctx context.Context, req *connect.Request[v1.TestIntegrationRequest]) (*connect.Response[v1.TestIntegrationResponse], error) {
	return c.testIntegration.CallUnary(ctx, req)
}

// IntegrationsServiceHandler is an implementation of the chalk.server.v1.IntegrationsService
// service.
type IntegrationsServiceHandler interface {
	ListIntegrations(context.Context, *connect.Request[v1.ListIntegrationsRequest]) (*connect.Response[v1.ListIntegrationsResponse], error)
	ListIntegrationsAndSecrets(context.Context, *connect.Request[v1.ListIntegrationsAndSecretsRequest]) (*connect.Response[v1.ListIntegrationsAndSecretsResponse], error)
	GetIntegrationValue(context.Context, *connect.Request[v1.GetIntegrationValueRequest]) (*connect.Response[v1.GetIntegrationValueResponse], error)
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.GetIntegrationResponse], error)
	InsertIntegration(context.Context, *connect.Request[v1.InsertIntegrationRequest]) (*connect.Response[v1.InsertIntegrationResponse], error)
	UpdateIntegration(context.Context, *connect.Request[v1.UpdateIntegrationRequest]) (*connect.Response[v1.UpdateIntegrationResponse], error)
	DeleteIntegration(context.Context, *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error)
	TestIntegration(context.Context, *connect.Request[v1.TestIntegrationRequest]) (*connect.Response[v1.TestIntegrationResponse], error)
}

// NewIntegrationsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationsServiceHandler(svc IntegrationsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	integrationsServiceMethods := v1.File_chalk_server_v1_integrations_proto.Services().ByName("IntegrationsService").Methods()
	integrationsServiceListIntegrationsHandler := connect.NewUnaryHandler(
		IntegrationsServiceListIntegrationsProcedure,
		svc.ListIntegrations,
		connect.WithSchema(integrationsServiceMethods.ByName("ListIntegrations")),
		connect.WithHandlerOptions(opts...),
	)
	integrationsServiceListIntegrationsAndSecretsHandler := connect.NewUnaryHandler(
		IntegrationsServiceListIntegrationsAndSecretsProcedure,
		svc.ListIntegrationsAndSecrets,
		connect.WithSchema(integrationsServiceMethods.ByName("ListIntegrationsAndSecrets")),
		connect.WithHandlerOptions(opts...),
	)
	integrationsServiceGetIntegrationValueHandler := connect.NewUnaryHandler(
		IntegrationsServiceGetIntegrationValueProcedure,
		svc.GetIntegrationValue,
		connect.WithSchema(integrationsServiceMethods.ByName("GetIntegrationValue")),
		connect.WithHandlerOptions(opts...),
	)
	integrationsServiceGetIntegrationHandler := connect.NewUnaryHandler(
		IntegrationsServiceGetIntegrationProcedure,
		svc.GetIntegration,
		connect.WithSchema(integrationsServiceMethods.ByName("GetIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	integrationsServiceInsertIntegrationHandler := connect.NewUnaryHandler(
		IntegrationsServiceInsertIntegrationProcedure,
		svc.InsertIntegration,
		connect.WithSchema(integrationsServiceMethods.ByName("InsertIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	integrationsServiceUpdateIntegrationHandler := connect.NewUnaryHandler(
		IntegrationsServiceUpdateIntegrationProcedure,
		svc.UpdateIntegration,
		connect.WithSchema(integrationsServiceMethods.ByName("UpdateIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	integrationsServiceDeleteIntegrationHandler := connect.NewUnaryHandler(
		IntegrationsServiceDeleteIntegrationProcedure,
		svc.DeleteIntegration,
		connect.WithSchema(integrationsServiceMethods.ByName("DeleteIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	integrationsServiceTestIntegrationHandler := connect.NewUnaryHandler(
		IntegrationsServiceTestIntegrationProcedure,
		svc.TestIntegration,
		connect.WithSchema(integrationsServiceMethods.ByName("TestIntegration")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.IntegrationsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationsServiceListIntegrationsProcedure:
			integrationsServiceListIntegrationsHandler.ServeHTTP(w, r)
		case IntegrationsServiceListIntegrationsAndSecretsProcedure:
			integrationsServiceListIntegrationsAndSecretsHandler.ServeHTTP(w, r)
		case IntegrationsServiceGetIntegrationValueProcedure:
			integrationsServiceGetIntegrationValueHandler.ServeHTTP(w, r)
		case IntegrationsServiceGetIntegrationProcedure:
			integrationsServiceGetIntegrationHandler.ServeHTTP(w, r)
		case IntegrationsServiceInsertIntegrationProcedure:
			integrationsServiceInsertIntegrationHandler.ServeHTTP(w, r)
		case IntegrationsServiceUpdateIntegrationProcedure:
			integrationsServiceUpdateIntegrationHandler.ServeHTTP(w, r)
		case IntegrationsServiceDeleteIntegrationProcedure:
			integrationsServiceDeleteIntegrationHandler.ServeHTTP(w, r)
		case IntegrationsServiceTestIntegrationProcedure:
			integrationsServiceTestIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationsServiceHandler struct{}

func (UnimplementedIntegrationsServiceHandler) ListIntegrations(context.Context, *connect.Request[v1.ListIntegrationsRequest]) (*connect.Response[v1.ListIntegrationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.ListIntegrations is not implemented"))
}

func (UnimplementedIntegrationsServiceHandler) ListIntegrationsAndSecrets(context.Context, *connect.Request[v1.ListIntegrationsAndSecretsRequest]) (*connect.Response[v1.ListIntegrationsAndSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.ListIntegrationsAndSecrets is not implemented"))
}

func (UnimplementedIntegrationsServiceHandler) GetIntegrationValue(context.Context, *connect.Request[v1.GetIntegrationValueRequest]) (*connect.Response[v1.GetIntegrationValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.GetIntegrationValue is not implemented"))
}

func (UnimplementedIntegrationsServiceHandler) GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.GetIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.GetIntegration is not implemented"))
}

func (UnimplementedIntegrationsServiceHandler) InsertIntegration(context.Context, *connect.Request[v1.InsertIntegrationRequest]) (*connect.Response[v1.InsertIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.InsertIntegration is not implemented"))
}

func (UnimplementedIntegrationsServiceHandler) UpdateIntegration(context.Context, *connect.Request[v1.UpdateIntegrationRequest]) (*connect.Response[v1.UpdateIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.UpdateIntegration is not implemented"))
}

func (UnimplementedIntegrationsServiceHandler) DeleteIntegration(context.Context, *connect.Request[v1.DeleteIntegrationRequest]) (*connect.Response[v1.DeleteIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.DeleteIntegration is not implemented"))
}

func (UnimplementedIntegrationsServiceHandler) TestIntegration(context.Context, *connect.Request[v1.TestIntegrationRequest]) (*connect.Response[v1.TestIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.IntegrationsService.TestIntegration is not implemented"))
}
