// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/server/v1/http_engine_proxy.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HTTPEngineProxyServiceName is the fully-qualified name of the HTTPEngineProxyService service.
	HTTPEngineProxyServiceName = "chalk.server.v1.HTTPEngineProxyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HTTPEngineProxyServiceCreateOfflineQueryProcedure is the fully-qualified name of the
	// HTTPEngineProxyService's CreateOfflineQuery RPC.
	HTTPEngineProxyServiceCreateOfflineQueryProcedure = "/chalk.server.v1.HTTPEngineProxyService/CreateOfflineQuery"
)

// HTTPEngineProxyServiceClient is a client for the chalk.server.v1.HTTPEngineProxyService service.
type HTTPEngineProxyServiceClient interface {
	CreateOfflineQuery(context.Context, *connect.Request[v1.CreateOfflineQueryRequest]) (*connect.Response[v1.CreateOfflineQueryResponse], error)
}

// NewHTTPEngineProxyServiceClient constructs a client for the
// chalk.server.v1.HTTPEngineProxyService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHTTPEngineProxyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HTTPEngineProxyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hTTPEngineProxyServiceMethods := v1.File_chalk_server_v1_http_engine_proxy_proto.Services().ByName("HTTPEngineProxyService").Methods()
	return &hTTPEngineProxyServiceClient{
		createOfflineQuery: connect.NewClient[v1.CreateOfflineQueryRequest, v1.CreateOfflineQueryResponse](
			httpClient,
			baseURL+HTTPEngineProxyServiceCreateOfflineQueryProcedure,
			connect.WithSchema(hTTPEngineProxyServiceMethods.ByName("CreateOfflineQuery")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hTTPEngineProxyServiceClient implements HTTPEngineProxyServiceClient.
type hTTPEngineProxyServiceClient struct {
	createOfflineQuery *connect.Client[v1.CreateOfflineQueryRequest, v1.CreateOfflineQueryResponse]
}

// CreateOfflineQuery calls chalk.server.v1.HTTPEngineProxyService.CreateOfflineQuery.
func (c *hTTPEngineProxyServiceClient) CreateOfflineQuery(ctx context.Context, req *connect.Request[v1.CreateOfflineQueryRequest]) (*connect.Response[v1.CreateOfflineQueryResponse], error) {
	return c.createOfflineQuery.CallUnary(ctx, req)
}

// HTTPEngineProxyServiceHandler is an implementation of the chalk.server.v1.HTTPEngineProxyService
// service.
type HTTPEngineProxyServiceHandler interface {
	CreateOfflineQuery(context.Context, *connect.Request[v1.CreateOfflineQueryRequest]) (*connect.Response[v1.CreateOfflineQueryResponse], error)
}

// NewHTTPEngineProxyServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHTTPEngineProxyServiceHandler(svc HTTPEngineProxyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hTTPEngineProxyServiceMethods := v1.File_chalk_server_v1_http_engine_proxy_proto.Services().ByName("HTTPEngineProxyService").Methods()
	hTTPEngineProxyServiceCreateOfflineQueryHandler := connect.NewUnaryHandler(
		HTTPEngineProxyServiceCreateOfflineQueryProcedure,
		svc.CreateOfflineQuery,
		connect.WithSchema(hTTPEngineProxyServiceMethods.ByName("CreateOfflineQuery")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.server.v1.HTTPEngineProxyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HTTPEngineProxyServiceCreateOfflineQueryProcedure:
			hTTPEngineProxyServiceCreateOfflineQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHTTPEngineProxyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHTTPEngineProxyServiceHandler struct{}

func (UnimplementedHTTPEngineProxyServiceHandler) CreateOfflineQuery(context.Context, *connect.Request[v1.CreateOfflineQueryRequest]) (*connect.Response[v1.CreateOfflineQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.server.v1.HTTPEngineProxyService.CreateOfflineQuery is not implemented"))
}
