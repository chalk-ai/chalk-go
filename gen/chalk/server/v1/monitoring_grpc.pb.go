// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/server/v1/monitoring.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitoringService_TestPagerDutyIntegration_FullMethodName       = "/chalk.server.v1.MonitoringService/TestPagerDutyIntegration"
	MonitoringService_AddPagerDutyIntegration_FullMethodName        = "/chalk.server.v1.MonitoringService/AddPagerDutyIntegration"
	MonitoringService_DeletePagerDutyIntegration_FullMethodName     = "/chalk.server.v1.MonitoringService/DeletePagerDutyIntegration"
	MonitoringService_SetDefaultPagerDutyIntegration_FullMethodName = "/chalk.server.v1.MonitoringService/SetDefaultPagerDutyIntegration"
	MonitoringService_UpdatePagerDutyIntegration_FullMethodName     = "/chalk.server.v1.MonitoringService/UpdatePagerDutyIntegration"
	MonitoringService_GetAllPagerDutyIntegrations_FullMethodName    = "/chalk.server.v1.MonitoringService/GetAllPagerDutyIntegrations"
	MonitoringService_GetPagerDutyIntegration_FullMethodName        = "/chalk.server.v1.MonitoringService/GetPagerDutyIntegration"
)

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringServiceClient interface {
	TestPagerDutyIntegration(ctx context.Context, in *TestPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*TestPagerDutyIntegrationResponse, error)
	AddPagerDutyIntegration(ctx context.Context, in *AddPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*AddPagerDutyIntegrationResponse, error)
	DeletePagerDutyIntegration(ctx context.Context, in *DeletePagerDutyIntegrationRequest, opts ...grpc.CallOption) (*DeletePagerDutyIntegrationResponse, error)
	SetDefaultPagerDutyIntegration(ctx context.Context, in *SetDefaultPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*SetDefaultPagerDutyIntegrationResponse, error)
	UpdatePagerDutyIntegration(ctx context.Context, in *UpdatePagerDutyIntegrationRequest, opts ...grpc.CallOption) (*UpdatePagerDutyIntegrationResponse, error)
	GetAllPagerDutyIntegrations(ctx context.Context, in *GetAllPagerDutyIntegrationsRequest, opts ...grpc.CallOption) (*GetAllPagerDutyIntegrationsResponse, error)
	GetPagerDutyIntegration(ctx context.Context, in *GetPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*GetPagerDutyIntegrationResponse, error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) TestPagerDutyIntegration(ctx context.Context, in *TestPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*TestPagerDutyIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestPagerDutyIntegrationResponse)
	err := c.cc.Invoke(ctx, MonitoringService_TestPagerDutyIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) AddPagerDutyIntegration(ctx context.Context, in *AddPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*AddPagerDutyIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPagerDutyIntegrationResponse)
	err := c.cc.Invoke(ctx, MonitoringService_AddPagerDutyIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) DeletePagerDutyIntegration(ctx context.Context, in *DeletePagerDutyIntegrationRequest, opts ...grpc.CallOption) (*DeletePagerDutyIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePagerDutyIntegrationResponse)
	err := c.cc.Invoke(ctx, MonitoringService_DeletePagerDutyIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) SetDefaultPagerDutyIntegration(ctx context.Context, in *SetDefaultPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*SetDefaultPagerDutyIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultPagerDutyIntegrationResponse)
	err := c.cc.Invoke(ctx, MonitoringService_SetDefaultPagerDutyIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) UpdatePagerDutyIntegration(ctx context.Context, in *UpdatePagerDutyIntegrationRequest, opts ...grpc.CallOption) (*UpdatePagerDutyIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePagerDutyIntegrationResponse)
	err := c.cc.Invoke(ctx, MonitoringService_UpdatePagerDutyIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetAllPagerDutyIntegrations(ctx context.Context, in *GetAllPagerDutyIntegrationsRequest, opts ...grpc.CallOption) (*GetAllPagerDutyIntegrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPagerDutyIntegrationsResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetAllPagerDutyIntegrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringServiceClient) GetPagerDutyIntegration(ctx context.Context, in *GetPagerDutyIntegrationRequest, opts ...grpc.CallOption) (*GetPagerDutyIntegrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPagerDutyIntegrationResponse)
	err := c.cc.Invoke(ctx, MonitoringService_GetPagerDutyIntegration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations must embed UnimplementedMonitoringServiceServer
// for forward compatibility.
type MonitoringServiceServer interface {
	TestPagerDutyIntegration(context.Context, *TestPagerDutyIntegrationRequest) (*TestPagerDutyIntegrationResponse, error)
	AddPagerDutyIntegration(context.Context, *AddPagerDutyIntegrationRequest) (*AddPagerDutyIntegrationResponse, error)
	DeletePagerDutyIntegration(context.Context, *DeletePagerDutyIntegrationRequest) (*DeletePagerDutyIntegrationResponse, error)
	SetDefaultPagerDutyIntegration(context.Context, *SetDefaultPagerDutyIntegrationRequest) (*SetDefaultPagerDutyIntegrationResponse, error)
	UpdatePagerDutyIntegration(context.Context, *UpdatePagerDutyIntegrationRequest) (*UpdatePagerDutyIntegrationResponse, error)
	GetAllPagerDutyIntegrations(context.Context, *GetAllPagerDutyIntegrationsRequest) (*GetAllPagerDutyIntegrationsResponse, error)
	GetPagerDutyIntegration(context.Context, *GetPagerDutyIntegrationRequest) (*GetPagerDutyIntegrationResponse, error)
	mustEmbedUnimplementedMonitoringServiceServer()
}

// UnimplementedMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringServiceServer struct{}

func (UnimplementedMonitoringServiceServer) TestPagerDutyIntegration(context.Context, *TestPagerDutyIntegrationRequest) (*TestPagerDutyIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPagerDutyIntegration not implemented")
}
func (UnimplementedMonitoringServiceServer) AddPagerDutyIntegration(context.Context, *AddPagerDutyIntegrationRequest) (*AddPagerDutyIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPagerDutyIntegration not implemented")
}
func (UnimplementedMonitoringServiceServer) DeletePagerDutyIntegration(context.Context, *DeletePagerDutyIntegrationRequest) (*DeletePagerDutyIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePagerDutyIntegration not implemented")
}
func (UnimplementedMonitoringServiceServer) SetDefaultPagerDutyIntegration(context.Context, *SetDefaultPagerDutyIntegrationRequest) (*SetDefaultPagerDutyIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPagerDutyIntegration not implemented")
}
func (UnimplementedMonitoringServiceServer) UpdatePagerDutyIntegration(context.Context, *UpdatePagerDutyIntegrationRequest) (*UpdatePagerDutyIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePagerDutyIntegration not implemented")
}
func (UnimplementedMonitoringServiceServer) GetAllPagerDutyIntegrations(context.Context, *GetAllPagerDutyIntegrationsRequest) (*GetAllPagerDutyIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPagerDutyIntegrations not implemented")
}
func (UnimplementedMonitoringServiceServer) GetPagerDutyIntegration(context.Context, *GetPagerDutyIntegrationRequest) (*GetPagerDutyIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagerDutyIntegration not implemented")
}
func (UnimplementedMonitoringServiceServer) mustEmbedUnimplementedMonitoringServiceServer() {}
func (UnimplementedMonitoringServiceServer) testEmbeddedByValue()                           {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_TestPagerDutyIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPagerDutyIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).TestPagerDutyIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_TestPagerDutyIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).TestPagerDutyIntegration(ctx, req.(*TestPagerDutyIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_AddPagerDutyIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPagerDutyIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).AddPagerDutyIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_AddPagerDutyIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).AddPagerDutyIntegration(ctx, req.(*AddPagerDutyIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_DeletePagerDutyIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePagerDutyIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).DeletePagerDutyIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_DeletePagerDutyIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).DeletePagerDutyIntegration(ctx, req.(*DeletePagerDutyIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_SetDefaultPagerDutyIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPagerDutyIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).SetDefaultPagerDutyIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_SetDefaultPagerDutyIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).SetDefaultPagerDutyIntegration(ctx, req.(*SetDefaultPagerDutyIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_UpdatePagerDutyIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePagerDutyIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).UpdatePagerDutyIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_UpdatePagerDutyIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).UpdatePagerDutyIntegration(ctx, req.(*UpdatePagerDutyIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetAllPagerDutyIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPagerDutyIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetAllPagerDutyIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetAllPagerDutyIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetAllPagerDutyIntegrations(ctx, req.(*GetAllPagerDutyIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringService_GetPagerDutyIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPagerDutyIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringServiceServer).GetPagerDutyIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitoringService_GetPagerDutyIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringServiceServer).GetPagerDutyIntegration(ctx, req.(*GetPagerDutyIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.server.v1.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestPagerDutyIntegration",
			Handler:    _MonitoringService_TestPagerDutyIntegration_Handler,
		},
		{
			MethodName: "AddPagerDutyIntegration",
			Handler:    _MonitoringService_AddPagerDutyIntegration_Handler,
		},
		{
			MethodName: "DeletePagerDutyIntegration",
			Handler:    _MonitoringService_DeletePagerDutyIntegration_Handler,
		},
		{
			MethodName: "SetDefaultPagerDutyIntegration",
			Handler:    _MonitoringService_SetDefaultPagerDutyIntegration_Handler,
		},
		{
			MethodName: "UpdatePagerDutyIntegration",
			Handler:    _MonitoringService_UpdatePagerDutyIntegration_Handler,
		},
		{
			MethodName: "GetAllPagerDutyIntegrations",
			Handler:    _MonitoringService_GetAllPagerDutyIntegrations_Handler,
		},
		{
			MethodName: "GetPagerDutyIntegration",
			Handler:    _MonitoringService_GetPagerDutyIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/server/v1/monitoring.proto",
}
