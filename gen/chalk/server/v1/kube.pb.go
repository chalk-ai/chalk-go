// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/server/v1/kube.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/kubernetes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPodStackTraceDumpRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If unspecified, defaults to the kube job namespace for the active environment (read from x-chalk-env-id header)
	Namespace *string `protobuf:"bytes,1,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	PodName   string  `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Optional specification of the container to use
	// Required if the pod has multiple containers (ex. engine pods also have proxy and sidecars
	ContainerName *string `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3,oneof" json:"container_name,omitempty"`
	// Different ways to identify the process, either by ID or by process name if ID is not convenient
	//
	// Types that are valid to be assigned to ProcessFilter:
	//
	//	*GetPodStackTraceDumpRequest_ProcessId
	//	*GetPodStackTraceDumpRequest_ProcessName
	//	*GetPodStackTraceDumpRequest_AutoDetectProcess
	ProcessFilter isGetPodStackTraceDumpRequest_ProcessFilter `protobuf_oneof:"process_filter"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPodStackTraceDumpRequest) Reset() {
	*x = GetPodStackTraceDumpRequest{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPodStackTraceDumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodStackTraceDumpRequest) ProtoMessage() {}

func (x *GetPodStackTraceDumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodStackTraceDumpRequest.ProtoReflect.Descriptor instead.
func (*GetPodStackTraceDumpRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{0}
}

func (x *GetPodStackTraceDumpRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *GetPodStackTraceDumpRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GetPodStackTraceDumpRequest) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *GetPodStackTraceDumpRequest) GetProcessFilter() isGetPodStackTraceDumpRequest_ProcessFilter {
	if x != nil {
		return x.ProcessFilter
	}
	return nil
}

func (x *GetPodStackTraceDumpRequest) GetProcessId() int32 {
	if x != nil {
		if x, ok := x.ProcessFilter.(*GetPodStackTraceDumpRequest_ProcessId); ok {
			return x.ProcessId
		}
	}
	return 0
}

func (x *GetPodStackTraceDumpRequest) GetProcessName() string {
	if x != nil {
		if x, ok := x.ProcessFilter.(*GetPodStackTraceDumpRequest_ProcessName); ok {
			return x.ProcessName
		}
	}
	return ""
}

func (x *GetPodStackTraceDumpRequest) GetAutoDetectProcess() bool {
	if x != nil {
		if x, ok := x.ProcessFilter.(*GetPodStackTraceDumpRequest_AutoDetectProcess); ok {
			return x.AutoDetectProcess
		}
	}
	return false
}

type isGetPodStackTraceDumpRequest_ProcessFilter interface {
	isGetPodStackTraceDumpRequest_ProcessFilter()
}

type GetPodStackTraceDumpRequest_ProcessId struct {
	ProcessId int32 `protobuf:"varint,4,opt,name=process_id,json=processId,proto3,oneof"`
}

type GetPodStackTraceDumpRequest_ProcessName struct {
	ProcessName string `protobuf:"bytes,5,opt,name=process_name,json=processName,proto3,oneof"`
}

type GetPodStackTraceDumpRequest_AutoDetectProcess struct {
	// Infers the process id/name based on the pod/container/other contextual information
	AutoDetectProcess bool `protobuf:"varint,6,opt,name=auto_detect_process,json=autoDetectProcess,proto3,oneof"`
}

func (*GetPodStackTraceDumpRequest_ProcessId) isGetPodStackTraceDumpRequest_ProcessFilter() {}

func (*GetPodStackTraceDumpRequest_ProcessName) isGetPodStackTraceDumpRequest_ProcessFilter() {}

func (*GetPodStackTraceDumpRequest_AutoDetectProcess) isGetPodStackTraceDumpRequest_ProcessFilter() {}

type GetPodStackTraceDumpResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StackTrace    string                 `protobuf:"bytes,1,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPodStackTraceDumpResponse) Reset() {
	*x = GetPodStackTraceDumpResponse{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPodStackTraceDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodStackTraceDumpResponse) ProtoMessage() {}

func (x *GetPodStackTraceDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodStackTraceDumpResponse.ProtoReflect.Descriptor instead.
func (*GetPodStackTraceDumpResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{1}
}

func (x *GetPodStackTraceDumpResponse) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

type GetKubernetesEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// defaults to the environment's kube cluster name
	ClusterName *string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3,oneof" json:"cluster_name,omitempty"`
	// defaults to the environment's kube namespace
	Namespace     *string `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	LabelSelector *string `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3,oneof" json:"label_selector,omitempty"`
	FieldSelector *string `protobuf:"bytes,4,opt,name=field_selector,json=fieldSelector,proto3,oneof" json:"field_selector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKubernetesEventsRequest) Reset() {
	*x = GetKubernetesEventsRequest{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesEventsRequest) ProtoMessage() {}

func (x *GetKubernetesEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesEventsRequest.ProtoReflect.Descriptor instead.
func (*GetKubernetesEventsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{2}
}

func (x *GetKubernetesEventsRequest) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *GetKubernetesEventsRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *GetKubernetesEventsRequest) GetLabelSelector() string {
	if x != nil && x.LabelSelector != nil {
		return *x.LabelSelector
	}
	return ""
}

func (x *GetKubernetesEventsRequest) GetFieldSelector() string {
	if x != nil && x.FieldSelector != nil {
		return *x.FieldSelector
	}
	return ""
}

type GetKubernetesEventsResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Events        []*v1.ChalkKubernetesEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKubernetesEventsResponse) Reset() {
	*x = GetKubernetesEventsResponse{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesEventsResponse) ProtoMessage() {}

func (x *GetKubernetesEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesEventsResponse.ProtoReflect.Descriptor instead.
func (*GetKubernetesEventsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{3}
}

func (x *GetKubernetesEventsResponse) GetEvents() []*v1.ChalkKubernetesEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetKubernetesPersistentVolumesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKubernetesPersistentVolumesRequest) Reset() {
	*x = GetKubernetesPersistentVolumesRequest{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesPersistentVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesPersistentVolumesRequest) ProtoMessage() {}

func (x *GetKubernetesPersistentVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesPersistentVolumesRequest.ProtoReflect.Descriptor instead.
func (*GetKubernetesPersistentVolumesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{4}
}

type GetKubernetesPersistentVolumesResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Volumes       []*v1.ChalkKubernetesPersistentVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKubernetesPersistentVolumesResponse) Reset() {
	*x = GetKubernetesPersistentVolumesResponse{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesPersistentVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesPersistentVolumesResponse) ProtoMessage() {}

func (x *GetKubernetesPersistentVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesPersistentVolumesResponse.ProtoReflect.Descriptor instead.
func (*GetKubernetesPersistentVolumesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{5}
}

func (x *GetKubernetesPersistentVolumesResponse) GetVolumes() []*v1.ChalkKubernetesPersistentVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

var File_chalk_server_v1_kube_proto protoreflect.FileDescriptor

const file_chalk_server_v1_kube_proto_rawDesc = "" +
	"\n" +
	"\x1achalk/server/v1/kube.proto\x12\x0fchalk.server.v1\x1a\x1fchalk/auth/v1/permissions.proto\x1a chalk/kubernetes/v1/events.proto\x1a*chalk/kubernetes/v1/persistentvolume.proto\"\xb2\x02\n" +
	"\x1bGetPodStackTraceDumpRequest\x12!\n" +
	"\tnamespace\x18\x01 \x01(\tH\x01R\tnamespace\x88\x01\x01\x12\x19\n" +
	"\bpod_name\x18\x02 \x01(\tR\apodName\x12*\n" +
	"\x0econtainer_name\x18\x03 \x01(\tH\x02R\rcontainerName\x88\x01\x01\x12\x1f\n" +
	"\n" +
	"process_id\x18\x04 \x01(\x05H\x00R\tprocessId\x12#\n" +
	"\fprocess_name\x18\x05 \x01(\tH\x00R\vprocessName\x120\n" +
	"\x13auto_detect_process\x18\x06 \x01(\bH\x00R\x11autoDetectProcessB\x10\n" +
	"\x0eprocess_filterB\f\n" +
	"\n" +
	"_namespaceB\x11\n" +
	"\x0f_container_name\"?\n" +
	"\x1cGetPodStackTraceDumpResponse\x12\x1f\n" +
	"\vstack_trace\x18\x01 \x01(\tR\n" +
	"stackTrace\"\x84\x02\n" +
	"\x1aGetKubernetesEventsRequest\x12&\n" +
	"\fcluster_name\x18\x01 \x01(\tH\x00R\vclusterName\x88\x01\x01\x12!\n" +
	"\tnamespace\x18\x02 \x01(\tH\x01R\tnamespace\x88\x01\x01\x12*\n" +
	"\x0elabel_selector\x18\x03 \x01(\tH\x02R\rlabelSelector\x88\x01\x01\x12*\n" +
	"\x0efield_selector\x18\x04 \x01(\tH\x03R\rfieldSelector\x88\x01\x01B\x0f\n" +
	"\r_cluster_nameB\f\n" +
	"\n" +
	"_namespaceB\x11\n" +
	"\x0f_label_selectorB\x11\n" +
	"\x0f_field_selector\"`\n" +
	"\x1bGetKubernetesEventsResponse\x12A\n" +
	"\x06events\x18\x01 \x03(\v2).chalk.kubernetes.v1.ChalkKubernetesEventR\x06events\"'\n" +
	"%GetKubernetesPersistentVolumesRequest\"x\n" +
	"&GetKubernetesPersistentVolumesResponse\x12N\n" +
	"\avolumes\x18\x01 \x03(\v24.chalk.kubernetes.v1.ChalkKubernetesPersistentVolumeR\avolumes2\xa0\x03\n" +
	"\vKubeService\x12{\n" +
	"\x14GetPodStackTraceDump\x12,.chalk.server.v1.GetPodStackTraceDumpRequest\x1a-.chalk.server.v1.GetPodStackTraceDumpResponse\"\x06\x80}\v\x90\x02\x01\x12x\n" +
	"\x13GetKubernetesEvents\x12+.chalk.server.v1.GetKubernetesEventsRequest\x1a,.chalk.server.v1.GetKubernetesEventsResponse\"\x06\x80}\v\x90\x02\x01\x12\x99\x01\n" +
	"\x1eGetKubernetesPersistentVolumes\x126.chalk.server.v1.GetKubernetesPersistentVolumesRequest\x1a7.chalk.server.v1.GetKubernetesPersistentVolumesResponse\"\x06\x80}\v\x90\x02\x01B\xb9\x01\n" +
	"\x13com.chalk.server.v1B\tKubeProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/server/v1;serverv1\xa2\x02\x03CSX\xaa\x02\x0fChalk.Server.V1\xca\x02\x0fChalk\\Server\\V1\xe2\x02\x1bChalk\\Server\\V1\\GPBMetadata\xea\x02\x11Chalk::Server::V1b\x06proto3"

var (
	file_chalk_server_v1_kube_proto_rawDescOnce sync.Once
	file_chalk_server_v1_kube_proto_rawDescData []byte
)

func file_chalk_server_v1_kube_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_kube_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_kube_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_server_v1_kube_proto_rawDesc), len(file_chalk_server_v1_kube_proto_rawDesc)))
	})
	return file_chalk_server_v1_kube_proto_rawDescData
}

var file_chalk_server_v1_kube_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chalk_server_v1_kube_proto_goTypes = []any{
	(*GetPodStackTraceDumpRequest)(nil),            // 0: chalk.server.v1.GetPodStackTraceDumpRequest
	(*GetPodStackTraceDumpResponse)(nil),           // 1: chalk.server.v1.GetPodStackTraceDumpResponse
	(*GetKubernetesEventsRequest)(nil),             // 2: chalk.server.v1.GetKubernetesEventsRequest
	(*GetKubernetesEventsResponse)(nil),            // 3: chalk.server.v1.GetKubernetesEventsResponse
	(*GetKubernetesPersistentVolumesRequest)(nil),  // 4: chalk.server.v1.GetKubernetesPersistentVolumesRequest
	(*GetKubernetesPersistentVolumesResponse)(nil), // 5: chalk.server.v1.GetKubernetesPersistentVolumesResponse
	(*v1.ChalkKubernetesEvent)(nil),                // 6: chalk.kubernetes.v1.ChalkKubernetesEvent
	(*v1.ChalkKubernetesPersistentVolume)(nil),     // 7: chalk.kubernetes.v1.ChalkKubernetesPersistentVolume
}
var file_chalk_server_v1_kube_proto_depIdxs = []int32{
	6, // 0: chalk.server.v1.GetKubernetesEventsResponse.events:type_name -> chalk.kubernetes.v1.ChalkKubernetesEvent
	7, // 1: chalk.server.v1.GetKubernetesPersistentVolumesResponse.volumes:type_name -> chalk.kubernetes.v1.ChalkKubernetesPersistentVolume
	0, // 2: chalk.server.v1.KubeService.GetPodStackTraceDump:input_type -> chalk.server.v1.GetPodStackTraceDumpRequest
	2, // 3: chalk.server.v1.KubeService.GetKubernetesEvents:input_type -> chalk.server.v1.GetKubernetesEventsRequest
	4, // 4: chalk.server.v1.KubeService.GetKubernetesPersistentVolumes:input_type -> chalk.server.v1.GetKubernetesPersistentVolumesRequest
	1, // 5: chalk.server.v1.KubeService.GetPodStackTraceDump:output_type -> chalk.server.v1.GetPodStackTraceDumpResponse
	3, // 6: chalk.server.v1.KubeService.GetKubernetesEvents:output_type -> chalk.server.v1.GetKubernetesEventsResponse
	5, // 7: chalk.server.v1.KubeService.GetKubernetesPersistentVolumes:output_type -> chalk.server.v1.GetKubernetesPersistentVolumesResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_kube_proto_init() }
func file_chalk_server_v1_kube_proto_init() {
	if File_chalk_server_v1_kube_proto != nil {
		return
	}
	file_chalk_server_v1_kube_proto_msgTypes[0].OneofWrappers = []any{
		(*GetPodStackTraceDumpRequest_ProcessId)(nil),
		(*GetPodStackTraceDumpRequest_ProcessName)(nil),
		(*GetPodStackTraceDumpRequest_AutoDetectProcess)(nil),
	}
	file_chalk_server_v1_kube_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_server_v1_kube_proto_rawDesc), len(file_chalk_server_v1_kube_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_kube_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_kube_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_kube_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_kube_proto = out.File
	file_chalk_server_v1_kube_proto_goTypes = nil
	file_chalk_server_v1_kube_proto_depIdxs = nil
}
