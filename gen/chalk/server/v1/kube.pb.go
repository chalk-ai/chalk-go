// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/kube.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/v2/gen/chalk/auth/v1"
	v1 "github.com/chalk-ai/chalk-go/v2/gen/chalk/kubernetes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPodStackTraceDumpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If unspecified, defaults to the kube job namespace for the active environment (read from x-chalk-env-id header)
	Namespace *string `protobuf:"bytes,1,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	PodName   string  `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Optional specification of the container to use
	// Required if the pod has multiple containers (ex. engine pods also have proxy and sidecars
	ContainerName *string `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3,oneof" json:"container_name,omitempty"`
	// Different ways to identify the process, either by ID or by process name if ID is not convenient
	//
	// Types that are assignable to ProcessFilter:
	//
	//	*GetPodStackTraceDumpRequest_ProcessId
	//	*GetPodStackTraceDumpRequest_ProcessName
	//	*GetPodStackTraceDumpRequest_AutoDetectProcess
	ProcessFilter isGetPodStackTraceDumpRequest_ProcessFilter `protobuf_oneof:"process_filter"`
}

func (x *GetPodStackTraceDumpRequest) Reset() {
	*x = GetPodStackTraceDumpRequest{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPodStackTraceDumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodStackTraceDumpRequest) ProtoMessage() {}

func (x *GetPodStackTraceDumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodStackTraceDumpRequest.ProtoReflect.Descriptor instead.
func (*GetPodStackTraceDumpRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{0}
}

func (x *GetPodStackTraceDumpRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *GetPodStackTraceDumpRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GetPodStackTraceDumpRequest) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (m *GetPodStackTraceDumpRequest) GetProcessFilter() isGetPodStackTraceDumpRequest_ProcessFilter {
	if m != nil {
		return m.ProcessFilter
	}
	return nil
}

func (x *GetPodStackTraceDumpRequest) GetProcessId() int32 {
	if x, ok := x.GetProcessFilter().(*GetPodStackTraceDumpRequest_ProcessId); ok {
		return x.ProcessId
	}
	return 0
}

func (x *GetPodStackTraceDumpRequest) GetProcessName() string {
	if x, ok := x.GetProcessFilter().(*GetPodStackTraceDumpRequest_ProcessName); ok {
		return x.ProcessName
	}
	return ""
}

func (x *GetPodStackTraceDumpRequest) GetAutoDetectProcess() bool {
	if x, ok := x.GetProcessFilter().(*GetPodStackTraceDumpRequest_AutoDetectProcess); ok {
		return x.AutoDetectProcess
	}
	return false
}

type isGetPodStackTraceDumpRequest_ProcessFilter interface {
	isGetPodStackTraceDumpRequest_ProcessFilter()
}

type GetPodStackTraceDumpRequest_ProcessId struct {
	ProcessId int32 `protobuf:"varint,4,opt,name=process_id,json=processId,proto3,oneof"`
}

type GetPodStackTraceDumpRequest_ProcessName struct {
	ProcessName string `protobuf:"bytes,5,opt,name=process_name,json=processName,proto3,oneof"`
}

type GetPodStackTraceDumpRequest_AutoDetectProcess struct {
	// Infers the process id/name based on the pod/container/other contextual information
	AutoDetectProcess bool `protobuf:"varint,6,opt,name=auto_detect_process,json=autoDetectProcess,proto3,oneof"`
}

func (*GetPodStackTraceDumpRequest_ProcessId) isGetPodStackTraceDumpRequest_ProcessFilter() {}

func (*GetPodStackTraceDumpRequest_ProcessName) isGetPodStackTraceDumpRequest_ProcessFilter() {}

func (*GetPodStackTraceDumpRequest_AutoDetectProcess) isGetPodStackTraceDumpRequest_ProcessFilter() {}

type GetPodStackTraceDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackTrace string `protobuf:"bytes,1,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
}

func (x *GetPodStackTraceDumpResponse) Reset() {
	*x = GetPodStackTraceDumpResponse{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPodStackTraceDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodStackTraceDumpResponse) ProtoMessage() {}

func (x *GetPodStackTraceDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodStackTraceDumpResponse.ProtoReflect.Descriptor instead.
func (*GetPodStackTraceDumpResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{1}
}

func (x *GetPodStackTraceDumpResponse) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

type GetKubernetesEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// defaults to the environment's kube cluster name
	ClusterName *string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3,oneof" json:"cluster_name,omitempty"`
	// defaults to the environment's kube namespace
	Namespace     *string `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	LabelSelector *string `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3,oneof" json:"label_selector,omitempty"`
	FieldSelector *string `protobuf:"bytes,4,opt,name=field_selector,json=fieldSelector,proto3,oneof" json:"field_selector,omitempty"`
}

func (x *GetKubernetesEventsRequest) Reset() {
	*x = GetKubernetesEventsRequest{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesEventsRequest) ProtoMessage() {}

func (x *GetKubernetesEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesEventsRequest.ProtoReflect.Descriptor instead.
func (*GetKubernetesEventsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{2}
}

func (x *GetKubernetesEventsRequest) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *GetKubernetesEventsRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *GetKubernetesEventsRequest) GetLabelSelector() string {
	if x != nil && x.LabelSelector != nil {
		return *x.LabelSelector
	}
	return ""
}

func (x *GetKubernetesEventsRequest) GetFieldSelector() string {
	if x != nil && x.FieldSelector != nil {
		return *x.FieldSelector
	}
	return ""
}

type GetKubernetesEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*v1.ChalkKubernetesEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetKubernetesEventsResponse) Reset() {
	*x = GetKubernetesEventsResponse{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesEventsResponse) ProtoMessage() {}

func (x *GetKubernetesEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesEventsResponse.ProtoReflect.Descriptor instead.
func (*GetKubernetesEventsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{3}
}

func (x *GetKubernetesEventsResponse) GetEvents() []*v1.ChalkKubernetesEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetKubernetesPersistentVolumesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetKubernetesPersistentVolumesRequest) Reset() {
	*x = GetKubernetesPersistentVolumesRequest{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesPersistentVolumesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesPersistentVolumesRequest) ProtoMessage() {}

func (x *GetKubernetesPersistentVolumesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesPersistentVolumesRequest.ProtoReflect.Descriptor instead.
func (*GetKubernetesPersistentVolumesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{4}
}

type GetKubernetesPersistentVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*v1.ChalkKubernetesPersistentVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *GetKubernetesPersistentVolumesResponse) Reset() {
	*x = GetKubernetesPersistentVolumesResponse{}
	mi := &file_chalk_server_v1_kube_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesPersistentVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesPersistentVolumesResponse) ProtoMessage() {}

func (x *GetKubernetesPersistentVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_kube_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesPersistentVolumesResponse.ProtoReflect.Descriptor instead.
func (*GetKubernetesPersistentVolumesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_kube_proto_rawDescGZIP(), []int{5}
}

func (x *GetKubernetesPersistentVolumesResponse) GetVolumes() []*v1.ChalkKubernetesPersistentVolume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

var File_chalk_server_v1_kube_proto protoreflect.FileDescriptor

var file_chalk_server_v1_kube_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x61, 0x75, 0x74,
	0x6f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x32, 0xa0,
	0x03, 0x0a, 0x0b, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x0b, 0x90, 0x02, 0x01, 0x12, 0x78, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80,
	0x7d, 0x0b, 0x90, 0x02, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x0b, 0x90, 0x02,
	0x01, 0x42, 0xb9, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x4b, 0x75, 0x62, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_kube_proto_rawDescOnce sync.Once
	file_chalk_server_v1_kube_proto_rawDescData = file_chalk_server_v1_kube_proto_rawDesc
)

func file_chalk_server_v1_kube_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_kube_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_kube_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_kube_proto_rawDescData)
	})
	return file_chalk_server_v1_kube_proto_rawDescData
}

var file_chalk_server_v1_kube_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chalk_server_v1_kube_proto_goTypes = []any{
	(*GetPodStackTraceDumpRequest)(nil),            // 0: chalk.server.v1.GetPodStackTraceDumpRequest
	(*GetPodStackTraceDumpResponse)(nil),           // 1: chalk.server.v1.GetPodStackTraceDumpResponse
	(*GetKubernetesEventsRequest)(nil),             // 2: chalk.server.v1.GetKubernetesEventsRequest
	(*GetKubernetesEventsResponse)(nil),            // 3: chalk.server.v1.GetKubernetesEventsResponse
	(*GetKubernetesPersistentVolumesRequest)(nil),  // 4: chalk.server.v1.GetKubernetesPersistentVolumesRequest
	(*GetKubernetesPersistentVolumesResponse)(nil), // 5: chalk.server.v1.GetKubernetesPersistentVolumesResponse
	(*v1.ChalkKubernetesEvent)(nil),                // 6: chalk.kubernetes.v1.ChalkKubernetesEvent
	(*v1.ChalkKubernetesPersistentVolume)(nil),     // 7: chalk.kubernetes.v1.ChalkKubernetesPersistentVolume
}
var file_chalk_server_v1_kube_proto_depIdxs = []int32{
	6, // 0: chalk.server.v1.GetKubernetesEventsResponse.events:type_name -> chalk.kubernetes.v1.ChalkKubernetesEvent
	7, // 1: chalk.server.v1.GetKubernetesPersistentVolumesResponse.volumes:type_name -> chalk.kubernetes.v1.ChalkKubernetesPersistentVolume
	0, // 2: chalk.server.v1.KubeService.GetPodStackTraceDump:input_type -> chalk.server.v1.GetPodStackTraceDumpRequest
	2, // 3: chalk.server.v1.KubeService.GetKubernetesEvents:input_type -> chalk.server.v1.GetKubernetesEventsRequest
	4, // 4: chalk.server.v1.KubeService.GetKubernetesPersistentVolumes:input_type -> chalk.server.v1.GetKubernetesPersistentVolumesRequest
	1, // 5: chalk.server.v1.KubeService.GetPodStackTraceDump:output_type -> chalk.server.v1.GetPodStackTraceDumpResponse
	3, // 6: chalk.server.v1.KubeService.GetKubernetesEvents:output_type -> chalk.server.v1.GetKubernetesEventsResponse
	5, // 7: chalk.server.v1.KubeService.GetKubernetesPersistentVolumes:output_type -> chalk.server.v1.GetKubernetesPersistentVolumesResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_kube_proto_init() }
func file_chalk_server_v1_kube_proto_init() {
	if File_chalk_server_v1_kube_proto != nil {
		return
	}
	file_chalk_server_v1_kube_proto_msgTypes[0].OneofWrappers = []any{
		(*GetPodStackTraceDumpRequest_ProcessId)(nil),
		(*GetPodStackTraceDumpRequest_ProcessName)(nil),
		(*GetPodStackTraceDumpRequest_AutoDetectProcess)(nil),
	}
	file_chalk_server_v1_kube_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_kube_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_kube_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_kube_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_kube_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_kube_proto = out.File
	file_chalk_server_v1_kube_proto_rawDesc = nil
	file_chalk_server_v1_kube_proto_goTypes = nil
	file_chalk_server_v1_kube_proto_depIdxs = nil
}
