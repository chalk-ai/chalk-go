// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/server/v1/topic.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SQSTopic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueUrl      string                 `protobuf:"bytes,1,opt,name=queue_url,json=queueUrl,proto3" json:"queue_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQSTopic) Reset() {
	*x = SQSTopic{}
	mi := &file_chalk_server_v1_topic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQSTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQSTopic) ProtoMessage() {}

func (x *SQSTopic) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_topic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQSTopic.ProtoReflect.Descriptor instead.
func (*SQSTopic) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_topic_proto_rawDescGZIP(), []int{0}
}

func (x *SQSTopic) GetQueueUrl() string {
	if x != nil {
		return x.QueueUrl
	}
	return ""
}

type PubSubTopic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TopicId       string                 `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PubSubTopic) Reset() {
	*x = PubSubTopic{}
	mi := &file_chalk_server_v1_topic_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubTopic) ProtoMessage() {}

func (x *PubSubTopic) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_topic_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubTopic.ProtoReflect.Descriptor instead.
func (*PubSubTopic) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_topic_proto_rawDescGZIP(), []int{1}
}

func (x *PubSubTopic) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PubSubTopic) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

type Topic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Topic:
	//
	//	*Topic_SqsTopic
	//	*Topic_PubsubTopic
	Topic         isTopic_Topic `protobuf_oneof:"topic"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Topic) Reset() {
	*x = Topic{}
	mi := &file_chalk_server_v1_topic_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_topic_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_topic_proto_rawDescGZIP(), []int{2}
}

func (x *Topic) GetTopic() isTopic_Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Topic) GetSqsTopic() *SQSTopic {
	if x != nil {
		if x, ok := x.Topic.(*Topic_SqsTopic); ok {
			return x.SqsTopic
		}
	}
	return nil
}

func (x *Topic) GetPubsubTopic() *PubSubTopic {
	if x != nil {
		if x, ok := x.Topic.(*Topic_PubsubTopic); ok {
			return x.PubsubTopic
		}
	}
	return nil
}

type isTopic_Topic interface {
	isTopic_Topic()
}

type Topic_SqsTopic struct {
	SqsTopic *SQSTopic `protobuf:"bytes,1,opt,name=sqs_topic,json=sqsTopic,proto3,oneof"`
}

type Topic_PubsubTopic struct {
	PubsubTopic *PubSubTopic `protobuf:"bytes,2,opt,name=pubsub_topic,json=pubsubTopic,proto3,oneof"`
}

func (*Topic_SqsTopic) isTopic_Topic() {}

func (*Topic_PubsubTopic) isTopic_Topic() {}

var File_chalk_server_v1_topic_proto protoreflect.FileDescriptor

const file_chalk_server_v1_topic_proto_rawDesc = "" +
	"\n" +
	"\x1bchalk/server/v1/topic.proto\x12\x0fchalk.server.v1\"'\n" +
	"\bSQSTopic\x12\x1b\n" +
	"\tqueue_url\x18\x01 \x01(\tR\bqueueUrl\"G\n" +
	"\vPubSubTopic\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x19\n" +
	"\btopic_id\x18\x02 \x01(\tR\atopicId\"\x8d\x01\n" +
	"\x05Topic\x128\n" +
	"\tsqs_topic\x18\x01 \x01(\v2\x19.chalk.server.v1.SQSTopicH\x00R\bsqsTopic\x12A\n" +
	"\fpubsub_topic\x18\x02 \x01(\v2\x1c.chalk.server.v1.PubSubTopicH\x00R\vpubsubTopicB\a\n" +
	"\x05topicB\xba\x01\n" +
	"\x13com.chalk.server.v1B\n" +
	"TopicProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/server/v1;serverv1\xa2\x02\x03CSX\xaa\x02\x0fChalk.Server.V1\xca\x02\x0fChalk\\Server\\V1\xe2\x02\x1bChalk\\Server\\V1\\GPBMetadata\xea\x02\x11Chalk::Server::V1b\x06proto3"

var (
	file_chalk_server_v1_topic_proto_rawDescOnce sync.Once
	file_chalk_server_v1_topic_proto_rawDescData []byte
)

func file_chalk_server_v1_topic_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_topic_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_topic_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_server_v1_topic_proto_rawDesc), len(file_chalk_server_v1_topic_proto_rawDesc)))
	})
	return file_chalk_server_v1_topic_proto_rawDescData
}

var file_chalk_server_v1_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_server_v1_topic_proto_goTypes = []any{
	(*SQSTopic)(nil),    // 0: chalk.server.v1.SQSTopic
	(*PubSubTopic)(nil), // 1: chalk.server.v1.PubSubTopic
	(*Topic)(nil),       // 2: chalk.server.v1.Topic
}
var file_chalk_server_v1_topic_proto_depIdxs = []int32{
	0, // 0: chalk.server.v1.Topic.sqs_topic:type_name -> chalk.server.v1.SQSTopic
	1, // 1: chalk.server.v1.Topic.pubsub_topic:type_name -> chalk.server.v1.PubSubTopic
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_topic_proto_init() }
func file_chalk_server_v1_topic_proto_init() {
	if File_chalk_server_v1_topic_proto != nil {
		return
	}
	file_chalk_server_v1_topic_proto_msgTypes[2].OneofWrappers = []any{
		(*Topic_SqsTopic)(nil),
		(*Topic_PubsubTopic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_server_v1_topic_proto_rawDesc), len(file_chalk_server_v1_topic_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_topic_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_topic_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_topic_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_topic_proto = out.File
	file_chalk_server_v1_topic_proto_goTypes = nil
	file_chalk_server_v1_topic_proto_depIdxs = nil
}
