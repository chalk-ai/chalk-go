// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/cloud_components.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudComponentVpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Config *CloudVpcConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CloudComponentVpc) Reset() {
	*x = CloudComponentVpc{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentVpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentVpc) ProtoMessage() {}

func (x *CloudComponentVpc) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentVpc.ProtoReflect.Descriptor instead.
func (*CloudComponentVpc) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{0}
}

func (x *CloudComponentVpc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudComponentVpc) GetConfig() *CloudVpcConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CloudComponentVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Designator        *string                `protobuf:"bytes,3,opt,name=designator,proto3,oneof" json:"designator,omitempty"`
	TeamId            string                 `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Spec              *CloudComponentVpc     `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	Kind              string                 `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Managed           bool                   `protobuf:"varint,7,opt,name=managed,proto3" json:"managed,omitempty"`                                                     // Indicates if the VPC is managed by Chalk
	CloudCredentialId *string                `protobuf:"bytes,8,opt,name=cloud_credential_id,json=cloudCredentialId,proto3,oneof" json:"cloud_credential_id,omitempty"` // ID of the cloud credential used for the cluster
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AppliedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=applied_at,json=appliedAt,proto3" json:"applied_at,omitempty"`
}

func (x *CloudComponentVpcResponse) Reset() {
	*x = CloudComponentVpcResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentVpcResponse) ProtoMessage() {}

func (x *CloudComponentVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentVpcResponse.ProtoReflect.Descriptor instead.
func (*CloudComponentVpcResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{1}
}

func (x *CloudComponentVpcResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudComponentVpcResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudComponentVpcResponse) GetDesignator() string {
	if x != nil && x.Designator != nil {
		return *x.Designator
	}
	return ""
}

func (x *CloudComponentVpcResponse) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *CloudComponentVpcResponse) GetSpec() *CloudComponentVpc {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CloudComponentVpcResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CloudComponentVpcResponse) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *CloudComponentVpcResponse) GetCloudCredentialId() string {
	if x != nil && x.CloudCredentialId != nil {
		return *x.CloudCredentialId
	}
	return ""
}

func (x *CloudComponentVpcResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CloudComponentVpcResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CloudComponentVpcResponse) GetAppliedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AppliedAt
	}
	return nil
}

type CloudComponentVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              string             `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Spec              *CloudComponentVpc `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Managed           bool               `protobuf:"varint,3,opt,name=managed,proto3" json:"managed,omitempty"`                                                     // Indicates if the VPC is managed by Chalk
	CloudCredentialId *string            `protobuf:"bytes,4,opt,name=cloud_credential_id,json=cloudCredentialId,proto3,oneof" json:"cloud_credential_id,omitempty"` // ID of the cloud credential used for the cluster
}

func (x *CloudComponentVpcRequest) Reset() {
	*x = CloudComponentVpcRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentVpcRequest) ProtoMessage() {}

func (x *CloudComponentVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentVpcRequest.ProtoReflect.Descriptor instead.
func (*CloudComponentVpcRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{2}
}

func (x *CloudComponentVpcRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CloudComponentVpcRequest) GetSpec() *CloudComponentVpc {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CloudComponentVpcRequest) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *CloudComponentVpcRequest) GetCloudCredentialId() string {
	if x != nil && x.CloudCredentialId != nil {
		return *x.CloudCredentialId
	}
	return ""
}

type CreateCloudComponentVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc *CloudComponentVpcRequest `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
}

func (x *CreateCloudComponentVpcRequest) Reset() {
	*x = CreateCloudComponentVpcRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudComponentVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudComponentVpcRequest) ProtoMessage() {}

func (x *CreateCloudComponentVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudComponentVpcRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudComponentVpcRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCloudComponentVpcRequest) GetVpc() *CloudComponentVpcRequest {
	if x != nil {
		return x.Vpc
	}
	return nil
}

type CreateCloudComponentVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc *CloudComponentVpcResponse `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
}

func (x *CreateCloudComponentVpcResponse) Reset() {
	*x = CreateCloudComponentVpcResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudComponentVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudComponentVpcResponse) ProtoMessage() {}

func (x *CreateCloudComponentVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudComponentVpcResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudComponentVpcResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCloudComponentVpcResponse) GetVpc() *CloudComponentVpcResponse {
	if x != nil {
		return x.Vpc
	}
	return nil
}

type GetCloudComponentVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCloudComponentVpcRequest) Reset() {
	*x = GetCloudComponentVpcRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudComponentVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudComponentVpcRequest) ProtoMessage() {}

func (x *GetCloudComponentVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudComponentVpcRequest.ProtoReflect.Descriptor instead.
func (*GetCloudComponentVpcRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{5}
}

func (x *GetCloudComponentVpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCloudComponentVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc *CloudComponentVpcResponse `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
}

func (x *GetCloudComponentVpcResponse) Reset() {
	*x = GetCloudComponentVpcResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudComponentVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudComponentVpcResponse) ProtoMessage() {}

func (x *GetCloudComponentVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudComponentVpcResponse.ProtoReflect.Descriptor instead.
func (*GetCloudComponentVpcResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{6}
}

func (x *GetCloudComponentVpcResponse) GetVpc() *CloudComponentVpcResponse {
	if x != nil {
		return x.Vpc
	}
	return nil
}

type DeleteCloudComponentVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCloudComponentVpcRequest) Reset() {
	*x = DeleteCloudComponentVpcRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudComponentVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudComponentVpcRequest) ProtoMessage() {}

func (x *DeleteCloudComponentVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudComponentVpcRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudComponentVpcRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCloudComponentVpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCloudComponentVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCloudComponentVpcResponse) Reset() {
	*x = DeleteCloudComponentVpcResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudComponentVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudComponentVpcResponse) ProtoMessage() {}

func (x *DeleteCloudComponentVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudComponentVpcResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudComponentVpcResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{8}
}

type CloudVpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*CloudVpcConfig_Aws
	//	*CloudVpcConfig_Gcp
	Config isCloudVpcConfig_Config `protobuf_oneof:"config"`
}

func (x *CloudVpcConfig) Reset() {
	*x = CloudVpcConfig{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudVpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudVpcConfig) ProtoMessage() {}

func (x *CloudVpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudVpcConfig.ProtoReflect.Descriptor instead.
func (*CloudVpcConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{9}
}

func (m *CloudVpcConfig) GetConfig() isCloudVpcConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *CloudVpcConfig) GetAws() *AWSVpcConfig {
	if x, ok := x.GetConfig().(*CloudVpcConfig_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *CloudVpcConfig) GetGcp() *GCPVpcConfig {
	if x, ok := x.GetConfig().(*CloudVpcConfig_Gcp); ok {
		return x.Gcp
	}
	return nil
}

type isCloudVpcConfig_Config interface {
	isCloudVpcConfig_Config()
}

type CloudVpcConfig_Aws struct {
	Aws *AWSVpcConfig `protobuf:"bytes,1,opt,name=aws,proto3,oneof"`
}

type CloudVpcConfig_Gcp struct {
	Gcp *GCPVpcConfig `protobuf:"bytes,2,opt,name=gcp,proto3,oneof"`
}

func (*CloudVpcConfig_Aws) isCloudVpcConfig_Config() {}

func (*CloudVpcConfig_Gcp) isCloudVpcConfig_Config() {}

type AWSVpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CidrBlock               string             `protobuf:"bytes,1,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidr_block,omitempty"`
	AdditionalCidrBlocks    []string           `protobuf:"bytes,2,rep,name=additional_cidr_blocks,json=additionalCidrBlocks,proto3" json:"additional_cidr_blocks,omitempty"`
	Subnets                 []*AwsSubnetConfig `protobuf:"bytes,3,rep,name=subnets,proto3" json:"subnets,omitempty"`
	AdditionalPublicRoutes  []*AWSVpcRoute     `protobuf:"bytes,4,rep,name=additional_public_routes,json=additionalPublicRoutes,proto3" json:"additional_public_routes,omitempty"`
	AdditionalPrivateRoutes []*AWSVpcRoute     `protobuf:"bytes,5,rep,name=additional_private_routes,json=additionalPrivateRoutes,proto3" json:"additional_private_routes,omitempty"`
	DisableInternetGateway  bool               `protobuf:"varint,6,opt,name=disable_internet_gateway,json=disableInternetGateway,proto3" json:"disable_internet_gateway,omitempty"`
}

func (x *AWSVpcConfig) Reset() {
	*x = AWSVpcConfig{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSVpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpcConfig) ProtoMessage() {}

func (x *AWSVpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpcConfig.ProtoReflect.Descriptor instead.
func (*AWSVpcConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{10}
}

func (x *AWSVpcConfig) GetCidrBlock() string {
	if x != nil {
		return x.CidrBlock
	}
	return ""
}

func (x *AWSVpcConfig) GetAdditionalCidrBlocks() []string {
	if x != nil {
		return x.AdditionalCidrBlocks
	}
	return nil
}

func (x *AWSVpcConfig) GetSubnets() []*AwsSubnetConfig {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AWSVpcConfig) GetAdditionalPublicRoutes() []*AWSVpcRoute {
	if x != nil {
		return x.AdditionalPublicRoutes
	}
	return nil
}

func (x *AWSVpcConfig) GetAdditionalPrivateRoutes() []*AWSVpcRoute {
	if x != nil {
		return x.AdditionalPrivateRoutes
	}
	return nil
}

func (x *AWSVpcConfig) GetDisableInternetGateway() bool {
	if x != nil {
		return x.DisableInternetGateway
	}
	return false
}

type AWSVpcRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DestinationCidrBlock string `protobuf:"bytes,2,opt,name=destination_cidr_block,json=destinationCidrBlock,proto3" json:"destination_cidr_block,omitempty"`
	PeerId               string `protobuf:"bytes,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *AWSVpcRoute) Reset() {
	*x = AWSVpcRoute{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSVpcRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpcRoute) ProtoMessage() {}

func (x *AWSVpcRoute) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpcRoute.ProtoReflect.Descriptor instead.
func (*AWSVpcRoute) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{11}
}

func (x *AWSVpcRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSVpcRoute) GetDestinationCidrBlock() string {
	if x != nil {
		return x.DestinationCidrBlock
	}
	return ""
}

func (x *AWSVpcRoute) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type AwsSubnetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PrivateCidrBlock string `protobuf:"bytes,2,opt,name=private_cidr_block,json=privateCidrBlock,proto3" json:"private_cidr_block,omitempty"`
	PublicCidrBlock  string `protobuf:"bytes,3,opt,name=public_cidr_block,json=publicCidrBlock,proto3" json:"public_cidr_block,omitempty"`
	AvailabilityZone string `protobuf:"bytes,4,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
}

func (x *AwsSubnetConfig) Reset() {
	*x = AwsSubnetConfig{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsSubnetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSubnetConfig) ProtoMessage() {}

func (x *AwsSubnetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSubnetConfig.ProtoReflect.Descriptor instead.
func (*AwsSubnetConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{12}
}

func (x *AwsSubnetConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsSubnetConfig) GetPrivateCidrBlock() string {
	if x != nil {
		return x.PrivateCidrBlock
	}
	return ""
}

func (x *AwsSubnetConfig) GetPublicCidrBlock() string {
	if x != nil {
		return x.PublicCidrBlock
	}
	return ""
}

func (x *AwsSubnetConfig) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

type GCPVpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCPVpcConfig) Reset() {
	*x = GCPVpcConfig{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCPVpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPVpcConfig) ProtoMessage() {}

func (x *GCPVpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPVpcConfig.ProtoReflect.Descriptor instead.
func (*GCPVpcConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{13}
}

type CloudComponentStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Designator string `protobuf:"bytes,2,opt,name=designator,proto3" json:"designator,omitempty"`
	// if customer wants to bring their own storage config they can provide bucket names
	PlanStagesBucket   *string `protobuf:"bytes,3,opt,name=plan_stages_bucket,json=planStagesBucket,proto3,oneof" json:"plan_stages_bucket,omitempty"`
	SourceUploadBucket *string `protobuf:"bytes,4,opt,name=source_upload_bucket,json=sourceUploadBucket,proto3,oneof" json:"source_upload_bucket,omitempty"`
	DatasetBucket      *string `protobuf:"bytes,5,opt,name=dataset_bucket,json=datasetBucket,proto3,oneof" json:"dataset_bucket,omitempty"`
}

func (x *CloudComponentStorage) Reset() {
	*x = CloudComponentStorage{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentStorage) ProtoMessage() {}

func (x *CloudComponentStorage) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentStorage.ProtoReflect.Descriptor instead.
func (*CloudComponentStorage) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{14}
}

func (x *CloudComponentStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudComponentStorage) GetDesignator() string {
	if x != nil {
		return x.Designator
	}
	return ""
}

func (x *CloudComponentStorage) GetPlanStagesBucket() string {
	if x != nil && x.PlanStagesBucket != nil {
		return *x.PlanStagesBucket
	}
	return ""
}

func (x *CloudComponentStorage) GetSourceUploadBucket() string {
	if x != nil && x.SourceUploadBucket != nil {
		return *x.SourceUploadBucket
	}
	return ""
}

func (x *CloudComponentStorage) GetDatasetBucket() string {
	if x != nil && x.DatasetBucket != nil {
		return *x.DatasetBucket
	}
	return ""
}

type CloudComponentStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Designator        *string                `protobuf:"bytes,3,opt,name=designator,proto3,oneof" json:"designator,omitempty"`
	TeamId            string                 `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Spec              *CloudComponentStorage `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	Kind              string                 `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Managed           bool                   `protobuf:"varint,7,opt,name=managed,proto3" json:"managed,omitempty"`                                                     // Indicates if the storage is managed by Chalk
	CloudCredentialId *string                `protobuf:"bytes,8,opt,name=cloud_credential_id,json=cloudCredentialId,proto3,oneof" json:"cloud_credential_id,omitempty"` // ID of the cloud credential used for the storage config
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AppliedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=applied_at,json=appliedAt,proto3" json:"applied_at,omitempty"`
}

func (x *CloudComponentStorageResponse) Reset() {
	*x = CloudComponentStorageResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentStorageResponse) ProtoMessage() {}

func (x *CloudComponentStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentStorageResponse.ProtoReflect.Descriptor instead.
func (*CloudComponentStorageResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{15}
}

func (x *CloudComponentStorageResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudComponentStorageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudComponentStorageResponse) GetDesignator() string {
	if x != nil && x.Designator != nil {
		return *x.Designator
	}
	return ""
}

func (x *CloudComponentStorageResponse) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *CloudComponentStorageResponse) GetSpec() *CloudComponentStorage {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CloudComponentStorageResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CloudComponentStorageResponse) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *CloudComponentStorageResponse) GetCloudCredentialId() string {
	if x != nil && x.CloudCredentialId != nil {
		return *x.CloudCredentialId
	}
	return ""
}

func (x *CloudComponentStorageResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CloudComponentStorageResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CloudComponentStorageResponse) GetAppliedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AppliedAt
	}
	return nil
}

type CloudComponentStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Spec              *CloudComponentStorage `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Managed           bool                   `protobuf:"varint,3,opt,name=managed,proto3" json:"managed,omitempty"`                                                     // Indicates if the storage is managed by Chalk
	CloudCredentialId *string                `protobuf:"bytes,4,opt,name=cloud_credential_id,json=cloudCredentialId,proto3,oneof" json:"cloud_credential_id,omitempty"` // ID of the cloud credential used for the cluster
}

func (x *CloudComponentStorageRequest) Reset() {
	*x = CloudComponentStorageRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentStorageRequest) ProtoMessage() {}

func (x *CloudComponentStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentStorageRequest.ProtoReflect.Descriptor instead.
func (*CloudComponentStorageRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{16}
}

func (x *CloudComponentStorageRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CloudComponentStorageRequest) GetSpec() *CloudComponentStorage {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CloudComponentStorageRequest) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *CloudComponentStorageRequest) GetCloudCredentialId() string {
	if x != nil && x.CloudCredentialId != nil {
		return *x.CloudCredentialId
	}
	return ""
}

type CloudComponentCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Designator        *string `protobuf:"bytes,2,opt,name=designator,proto3,oneof" json:"designator,omitempty"`
	KubernetesVersion string  `protobuf:"bytes,3,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
}

func (x *CloudComponentCluster) Reset() {
	*x = CloudComponentCluster{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentCluster) ProtoMessage() {}

func (x *CloudComponentCluster) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentCluster.ProtoReflect.Descriptor instead.
func (*CloudComponentCluster) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{17}
}

func (x *CloudComponentCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudComponentCluster) GetDesignator() string {
	if x != nil && x.Designator != nil {
		return *x.Designator
	}
	return ""
}

func (x *CloudComponentCluster) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

type CloudComponentClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Designator        *string                `protobuf:"bytes,3,opt,name=designator,proto3,oneof" json:"designator,omitempty"`
	TeamId            string                 `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Spec              *CloudComponentCluster `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	Kind              string                 `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	Managed           bool                   `protobuf:"varint,7,opt,name=managed,proto3" json:"managed,omitempty"`
	CloudCredentialId *string                `protobuf:"bytes,8,opt,name=cloud_credential_id,json=cloudCredentialId,proto3,oneof" json:"cloud_credential_id,omitempty"` // ID of the cloud credential used for the cluster
	VpcId             *string                `protobuf:"bytes,9,opt,name=vpc_id,json=vpcId,proto3,oneof" json:"vpc_id,omitempty"`                                       // ID of the VPC to use for the cluster
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AppliedAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=applied_at,json=appliedAt,proto3" json:"applied_at,omitempty"`
}

func (x *CloudComponentClusterResponse) Reset() {
	*x = CloudComponentClusterResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentClusterResponse) ProtoMessage() {}

func (x *CloudComponentClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentClusterResponse.ProtoReflect.Descriptor instead.
func (*CloudComponentClusterResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{18}
}

func (x *CloudComponentClusterResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudComponentClusterResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudComponentClusterResponse) GetDesignator() string {
	if x != nil && x.Designator != nil {
		return *x.Designator
	}
	return ""
}

func (x *CloudComponentClusterResponse) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *CloudComponentClusterResponse) GetSpec() *CloudComponentCluster {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CloudComponentClusterResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CloudComponentClusterResponse) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *CloudComponentClusterResponse) GetCloudCredentialId() string {
	if x != nil && x.CloudCredentialId != nil {
		return *x.CloudCredentialId
	}
	return ""
}

func (x *CloudComponentClusterResponse) GetVpcId() string {
	if x != nil && x.VpcId != nil {
		return *x.VpcId
	}
	return ""
}

func (x *CloudComponentClusterResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CloudComponentClusterResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CloudComponentClusterResponse) GetAppliedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AppliedAt
	}
	return nil
}

type CloudComponentClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Spec              *CloudComponentCluster `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Managed           bool                   `protobuf:"varint,3,opt,name=managed,proto3" json:"managed,omitempty"`                                                     // Indicates if the cluster is managed by Chalk
	CloudCredentialId *string                `protobuf:"bytes,4,opt,name=cloud_credential_id,json=cloudCredentialId,proto3,oneof" json:"cloud_credential_id,omitempty"` // ID of the cloud credential used for the cluster
	VpcId             *string                `protobuf:"bytes,5,opt,name=vpc_id,json=vpcId,proto3,oneof" json:"vpc_id,omitempty"`                                       // ID of the VPC to use for the cluster
}

func (x *CloudComponentClusterRequest) Reset() {
	*x = CloudComponentClusterRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudComponentClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudComponentClusterRequest) ProtoMessage() {}

func (x *CloudComponentClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudComponentClusterRequest.ProtoReflect.Descriptor instead.
func (*CloudComponentClusterRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{19}
}

func (x *CloudComponentClusterRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CloudComponentClusterRequest) GetSpec() *CloudComponentCluster {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CloudComponentClusterRequest) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *CloudComponentClusterRequest) GetCloudCredentialId() string {
	if x != nil && x.CloudCredentialId != nil {
		return *x.CloudCredentialId
	}
	return ""
}

func (x *CloudComponentClusterRequest) GetVpcId() string {
	if x != nil && x.VpcId != nil {
		return *x.VpcId
	}
	return ""
}

type CreateCloudComponentClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *CloudComponentClusterRequest `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *CreateCloudComponentClusterRequest) Reset() {
	*x = CreateCloudComponentClusterRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudComponentClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudComponentClusterRequest) ProtoMessage() {}

func (x *CreateCloudComponentClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudComponentClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudComponentClusterRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{20}
}

func (x *CreateCloudComponentClusterRequest) GetCluster() *CloudComponentClusterRequest {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type CreateCloudComponentClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *CloudComponentClusterResponse `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *CreateCloudComponentClusterResponse) Reset() {
	*x = CreateCloudComponentClusterResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudComponentClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudComponentClusterResponse) ProtoMessage() {}

func (x *CreateCloudComponentClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudComponentClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudComponentClusterResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{21}
}

func (x *CreateCloudComponentClusterResponse) GetCluster() *CloudComponentClusterResponse {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type UpdateCloudComponentClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the cluster to update
	Cluster *CloudComponentClusterRequest `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *UpdateCloudComponentClusterRequest) Reset() {
	*x = UpdateCloudComponentClusterRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCloudComponentClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudComponentClusterRequest) ProtoMessage() {}

func (x *UpdateCloudComponentClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudComponentClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudComponentClusterRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateCloudComponentClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCloudComponentClusterRequest) GetCluster() *CloudComponentClusterRequest {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type UpdateCloudComponentClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *CloudComponentClusterResponse `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *UpdateCloudComponentClusterResponse) Reset() {
	*x = UpdateCloudComponentClusterResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCloudComponentClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudComponentClusterResponse) ProtoMessage() {}

func (x *UpdateCloudComponentClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudComponentClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloudComponentClusterResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateCloudComponentClusterResponse) GetCluster() *CloudComponentClusterResponse {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type GetCloudComponentClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCloudComponentClusterRequest) Reset() {
	*x = GetCloudComponentClusterRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudComponentClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudComponentClusterRequest) ProtoMessage() {}

func (x *GetCloudComponentClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudComponentClusterRequest.ProtoReflect.Descriptor instead.
func (*GetCloudComponentClusterRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{24}
}

func (x *GetCloudComponentClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCloudComponentClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *CloudComponentClusterResponse `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *GetCloudComponentClusterResponse) Reset() {
	*x = GetCloudComponentClusterResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudComponentClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudComponentClusterResponse) ProtoMessage() {}

func (x *GetCloudComponentClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudComponentClusterResponse.ProtoReflect.Descriptor instead.
func (*GetCloudComponentClusterResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{25}
}

func (x *GetCloudComponentClusterResponse) GetCluster() *CloudComponentClusterResponse {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type DeleteCloudComponentClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCloudComponentClusterRequest) Reset() {
	*x = DeleteCloudComponentClusterRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudComponentClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudComponentClusterRequest) ProtoMessage() {}

func (x *DeleteCloudComponentClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudComponentClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudComponentClusterRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteCloudComponentClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCloudComponentClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCloudComponentClusterResponse) Reset() {
	*x = DeleteCloudComponentClusterResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudComponentClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudComponentClusterResponse) ProtoMessage() {}

func (x *DeleteCloudComponentClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudComponentClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudComponentClusterResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{27}
}

type CreateCloudComponentStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage *CloudComponentStorageRequest `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *CreateCloudComponentStorageRequest) Reset() {
	*x = CreateCloudComponentStorageRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudComponentStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudComponentStorageRequest) ProtoMessage() {}

func (x *CreateCloudComponentStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudComponentStorageRequest.ProtoReflect.Descriptor instead.
func (*CreateCloudComponentStorageRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{28}
}

func (x *CreateCloudComponentStorageRequest) GetStorage() *CloudComponentStorageRequest {
	if x != nil {
		return x.Storage
	}
	return nil
}

type CreateCloudComponentStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage *CloudComponentStorageResponse `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *CreateCloudComponentStorageResponse) Reset() {
	*x = CreateCloudComponentStorageResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCloudComponentStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCloudComponentStorageResponse) ProtoMessage() {}

func (x *CreateCloudComponentStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCloudComponentStorageResponse.ProtoReflect.Descriptor instead.
func (*CreateCloudComponentStorageResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{29}
}

func (x *CreateCloudComponentStorageResponse) GetStorage() *CloudComponentStorageResponse {
	if x != nil {
		return x.Storage
	}
	return nil
}

type GetCloudComponentStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCloudComponentStorageRequest) Reset() {
	*x = GetCloudComponentStorageRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudComponentStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudComponentStorageRequest) ProtoMessage() {}

func (x *GetCloudComponentStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudComponentStorageRequest.ProtoReflect.Descriptor instead.
func (*GetCloudComponentStorageRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{30}
}

func (x *GetCloudComponentStorageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCloudComponentStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage *CloudComponentStorageResponse `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *GetCloudComponentStorageResponse) Reset() {
	*x = GetCloudComponentStorageResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudComponentStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudComponentStorageResponse) ProtoMessage() {}

func (x *GetCloudComponentStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudComponentStorageResponse.ProtoReflect.Descriptor instead.
func (*GetCloudComponentStorageResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{31}
}

func (x *GetCloudComponentStorageResponse) GetStorage() *CloudComponentStorageResponse {
	if x != nil {
		return x.Storage
	}
	return nil
}

type DeleteCloudComponentStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCloudComponentStorageRequest) Reset() {
	*x = DeleteCloudComponentStorageRequest{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudComponentStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudComponentStorageRequest) ProtoMessage() {}

func (x *DeleteCloudComponentStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudComponentStorageRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloudComponentStorageRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteCloudComponentStorageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCloudComponentStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCloudComponentStorageResponse) Reset() {
	*x = DeleteCloudComponentStorageResponse{}
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCloudComponentStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloudComponentStorageResponse) ProtoMessage() {}

func (x *DeleteCloudComponentStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_cloud_components_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloudComponentStorageResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloudComponentStorageResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_cloud_components_proto_rawDescGZIP(), []int{33}
}

var File_chalk_server_v1_cloud_components_proto protoreflect.FileDescriptor

var file_chalk_server_v1_cloud_components_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xf0, 0x03, 0x0a, 0x19, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x18,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x1e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x76, 0x70, 0x63, 0x22, 0x5f, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x76, 0x70, 0x63, 0x22, 0x2d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x76, 0x70,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x03, 0x76, 0x70, 0x63, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01,
	0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x31, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x43, 0x50, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x8b, 0x03, 0x0a, 0x0c, 0x41, 0x57, 0x53, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x69, 0x64, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x63, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x17, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x70,
	0x0a, 0x0b, 0x41, 0x57, 0x53, 0x56, 0x70, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xac, 0x01, 0x0a, 0x0f, 0x41, 0x77, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x69, 0x64,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x22,
	0x0e, 0x0a, 0x0c, 0x47, 0x43, 0x50, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xa4, 0x02, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xf8, 0x03, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0a,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x22, 0xd5, 0x01, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x12,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9f, 0x04, 0x0a, 0x1d, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x22, 0xfc, 0x01, 0x0a,
	0x1c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x23, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x23, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x22,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x22, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x25, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x89, 0x0d, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x12, 0x2f,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x80, 0x7d, 0x0a, 0x8a, 0xd3, 0x0e, 0x1f, 0x08, 0x02, 0x12, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x56, 0x50, 0x43, 0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70,
	0x63, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06,
	0x80, 0x7d, 0x02, 0x90, 0x02, 0x01, 0x12, 0xa4, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56,
	0x70, 0x63, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x80, 0x7d, 0x1a, 0x8a, 0xd3, 0x0e, 0x1f, 0x08, 0x02,
	0x12, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x56, 0x50, 0x43, 0x12, 0xb4, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x80, 0x7d, 0x1a, 0x8a, 0xd3, 0x0e,
	0x23, 0x08, 0x02, 0x12, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x80, 0x7d, 0x1a, 0x8a, 0xd3, 0x0e, 0x22, 0x08, 0x02, 0x12, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d,
	0x02, 0x90, 0x02, 0x01, 0x12, 0xb4, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x80, 0x7d, 0x1a, 0x8a, 0xd3, 0x0e, 0x23, 0x08, 0x02, 0x12, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xb4, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x80, 0x7d, 0x1a, 0x8a, 0xd3, 0x0e, 0x23, 0x08,
	0x02, 0x12, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x02, 0x90, 0x02, 0x01, 0x12, 0xb4, 0x01, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x80, 0x7d, 0x1a, 0x8a, 0xd3, 0x0e, 0x23,
	0x08, 0x02, 0x12, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0xc4, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chalk_server_v1_cloud_components_proto_rawDescOnce sync.Once
	file_chalk_server_v1_cloud_components_proto_rawDescData = file_chalk_server_v1_cloud_components_proto_rawDesc
)

func file_chalk_server_v1_cloud_components_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_cloud_components_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_cloud_components_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_cloud_components_proto_rawDescData)
	})
	return file_chalk_server_v1_cloud_components_proto_rawDescData
}

var file_chalk_server_v1_cloud_components_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_chalk_server_v1_cloud_components_proto_goTypes = []any{
	(*CloudComponentVpc)(nil),                   // 0: chalk.server.v1.CloudComponentVpc
	(*CloudComponentVpcResponse)(nil),           // 1: chalk.server.v1.CloudComponentVpcResponse
	(*CloudComponentVpcRequest)(nil),            // 2: chalk.server.v1.CloudComponentVpcRequest
	(*CreateCloudComponentVpcRequest)(nil),      // 3: chalk.server.v1.CreateCloudComponentVpcRequest
	(*CreateCloudComponentVpcResponse)(nil),     // 4: chalk.server.v1.CreateCloudComponentVpcResponse
	(*GetCloudComponentVpcRequest)(nil),         // 5: chalk.server.v1.GetCloudComponentVpcRequest
	(*GetCloudComponentVpcResponse)(nil),        // 6: chalk.server.v1.GetCloudComponentVpcResponse
	(*DeleteCloudComponentVpcRequest)(nil),      // 7: chalk.server.v1.DeleteCloudComponentVpcRequest
	(*DeleteCloudComponentVpcResponse)(nil),     // 8: chalk.server.v1.DeleteCloudComponentVpcResponse
	(*CloudVpcConfig)(nil),                      // 9: chalk.server.v1.CloudVpcConfig
	(*AWSVpcConfig)(nil),                        // 10: chalk.server.v1.AWSVpcConfig
	(*AWSVpcRoute)(nil),                         // 11: chalk.server.v1.AWSVpcRoute
	(*AwsSubnetConfig)(nil),                     // 12: chalk.server.v1.AwsSubnetConfig
	(*GCPVpcConfig)(nil),                        // 13: chalk.server.v1.GCPVpcConfig
	(*CloudComponentStorage)(nil),               // 14: chalk.server.v1.CloudComponentStorage
	(*CloudComponentStorageResponse)(nil),       // 15: chalk.server.v1.CloudComponentStorageResponse
	(*CloudComponentStorageRequest)(nil),        // 16: chalk.server.v1.CloudComponentStorageRequest
	(*CloudComponentCluster)(nil),               // 17: chalk.server.v1.CloudComponentCluster
	(*CloudComponentClusterResponse)(nil),       // 18: chalk.server.v1.CloudComponentClusterResponse
	(*CloudComponentClusterRequest)(nil),        // 19: chalk.server.v1.CloudComponentClusterRequest
	(*CreateCloudComponentClusterRequest)(nil),  // 20: chalk.server.v1.CreateCloudComponentClusterRequest
	(*CreateCloudComponentClusterResponse)(nil), // 21: chalk.server.v1.CreateCloudComponentClusterResponse
	(*UpdateCloudComponentClusterRequest)(nil),  // 22: chalk.server.v1.UpdateCloudComponentClusterRequest
	(*UpdateCloudComponentClusterResponse)(nil), // 23: chalk.server.v1.UpdateCloudComponentClusterResponse
	(*GetCloudComponentClusterRequest)(nil),     // 24: chalk.server.v1.GetCloudComponentClusterRequest
	(*GetCloudComponentClusterResponse)(nil),    // 25: chalk.server.v1.GetCloudComponentClusterResponse
	(*DeleteCloudComponentClusterRequest)(nil),  // 26: chalk.server.v1.DeleteCloudComponentClusterRequest
	(*DeleteCloudComponentClusterResponse)(nil), // 27: chalk.server.v1.DeleteCloudComponentClusterResponse
	(*CreateCloudComponentStorageRequest)(nil),  // 28: chalk.server.v1.CreateCloudComponentStorageRequest
	(*CreateCloudComponentStorageResponse)(nil), // 29: chalk.server.v1.CreateCloudComponentStorageResponse
	(*GetCloudComponentStorageRequest)(nil),     // 30: chalk.server.v1.GetCloudComponentStorageRequest
	(*GetCloudComponentStorageResponse)(nil),    // 31: chalk.server.v1.GetCloudComponentStorageResponse
	(*DeleteCloudComponentStorageRequest)(nil),  // 32: chalk.server.v1.DeleteCloudComponentStorageRequest
	(*DeleteCloudComponentStorageResponse)(nil), // 33: chalk.server.v1.DeleteCloudComponentStorageResponse
	(*timestamppb.Timestamp)(nil),               // 34: google.protobuf.Timestamp
}
var file_chalk_server_v1_cloud_components_proto_depIdxs = []int32{
	9,  // 0: chalk.server.v1.CloudComponentVpc.config:type_name -> chalk.server.v1.CloudVpcConfig
	0,  // 1: chalk.server.v1.CloudComponentVpcResponse.spec:type_name -> chalk.server.v1.CloudComponentVpc
	34, // 2: chalk.server.v1.CloudComponentVpcResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 3: chalk.server.v1.CloudComponentVpcResponse.updated_at:type_name -> google.protobuf.Timestamp
	34, // 4: chalk.server.v1.CloudComponentVpcResponse.applied_at:type_name -> google.protobuf.Timestamp
	0,  // 5: chalk.server.v1.CloudComponentVpcRequest.spec:type_name -> chalk.server.v1.CloudComponentVpc
	2,  // 6: chalk.server.v1.CreateCloudComponentVpcRequest.vpc:type_name -> chalk.server.v1.CloudComponentVpcRequest
	1,  // 7: chalk.server.v1.CreateCloudComponentVpcResponse.vpc:type_name -> chalk.server.v1.CloudComponentVpcResponse
	1,  // 8: chalk.server.v1.GetCloudComponentVpcResponse.vpc:type_name -> chalk.server.v1.CloudComponentVpcResponse
	10, // 9: chalk.server.v1.CloudVpcConfig.aws:type_name -> chalk.server.v1.AWSVpcConfig
	13, // 10: chalk.server.v1.CloudVpcConfig.gcp:type_name -> chalk.server.v1.GCPVpcConfig
	12, // 11: chalk.server.v1.AWSVpcConfig.subnets:type_name -> chalk.server.v1.AwsSubnetConfig
	11, // 12: chalk.server.v1.AWSVpcConfig.additional_public_routes:type_name -> chalk.server.v1.AWSVpcRoute
	11, // 13: chalk.server.v1.AWSVpcConfig.additional_private_routes:type_name -> chalk.server.v1.AWSVpcRoute
	14, // 14: chalk.server.v1.CloudComponentStorageResponse.spec:type_name -> chalk.server.v1.CloudComponentStorage
	34, // 15: chalk.server.v1.CloudComponentStorageResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 16: chalk.server.v1.CloudComponentStorageResponse.updated_at:type_name -> google.protobuf.Timestamp
	34, // 17: chalk.server.v1.CloudComponentStorageResponse.applied_at:type_name -> google.protobuf.Timestamp
	14, // 18: chalk.server.v1.CloudComponentStorageRequest.spec:type_name -> chalk.server.v1.CloudComponentStorage
	17, // 19: chalk.server.v1.CloudComponentClusterResponse.spec:type_name -> chalk.server.v1.CloudComponentCluster
	34, // 20: chalk.server.v1.CloudComponentClusterResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 21: chalk.server.v1.CloudComponentClusterResponse.updated_at:type_name -> google.protobuf.Timestamp
	34, // 22: chalk.server.v1.CloudComponentClusterResponse.applied_at:type_name -> google.protobuf.Timestamp
	17, // 23: chalk.server.v1.CloudComponentClusterRequest.spec:type_name -> chalk.server.v1.CloudComponentCluster
	19, // 24: chalk.server.v1.CreateCloudComponentClusterRequest.cluster:type_name -> chalk.server.v1.CloudComponentClusterRequest
	18, // 25: chalk.server.v1.CreateCloudComponentClusterResponse.cluster:type_name -> chalk.server.v1.CloudComponentClusterResponse
	19, // 26: chalk.server.v1.UpdateCloudComponentClusterRequest.cluster:type_name -> chalk.server.v1.CloudComponentClusterRequest
	18, // 27: chalk.server.v1.UpdateCloudComponentClusterResponse.cluster:type_name -> chalk.server.v1.CloudComponentClusterResponse
	18, // 28: chalk.server.v1.GetCloudComponentClusterResponse.cluster:type_name -> chalk.server.v1.CloudComponentClusterResponse
	16, // 29: chalk.server.v1.CreateCloudComponentStorageRequest.storage:type_name -> chalk.server.v1.CloudComponentStorageRequest
	15, // 30: chalk.server.v1.CreateCloudComponentStorageResponse.storage:type_name -> chalk.server.v1.CloudComponentStorageResponse
	15, // 31: chalk.server.v1.GetCloudComponentStorageResponse.storage:type_name -> chalk.server.v1.CloudComponentStorageResponse
	3,  // 32: chalk.server.v1.CloudComponentsService.CreateCloudComponentVpc:input_type -> chalk.server.v1.CreateCloudComponentVpcRequest
	5,  // 33: chalk.server.v1.CloudComponentsService.GetCloudComponentVpc:input_type -> chalk.server.v1.GetCloudComponentVpcRequest
	7,  // 34: chalk.server.v1.CloudComponentsService.DeleteCloudComponentVpc:input_type -> chalk.server.v1.DeleteCloudComponentVpcRequest
	20, // 35: chalk.server.v1.CloudComponentsService.CreateCloudComponentCluster:input_type -> chalk.server.v1.CreateCloudComponentClusterRequest
	22, // 36: chalk.server.v1.CloudComponentsService.UpdateCloudComponentCluster:input_type -> chalk.server.v1.UpdateCloudComponentClusterRequest
	24, // 37: chalk.server.v1.CloudComponentsService.GetCloudComponentCluster:input_type -> chalk.server.v1.GetCloudComponentClusterRequest
	26, // 38: chalk.server.v1.CloudComponentsService.DeleteCloudComponentCluster:input_type -> chalk.server.v1.DeleteCloudComponentClusterRequest
	28, // 39: chalk.server.v1.CloudComponentsService.CreateCloudComponentStorage:input_type -> chalk.server.v1.CreateCloudComponentStorageRequest
	30, // 40: chalk.server.v1.CloudComponentsService.GetCloudComponentStorage:input_type -> chalk.server.v1.GetCloudComponentStorageRequest
	32, // 41: chalk.server.v1.CloudComponentsService.DeleteCloudComponentStorage:input_type -> chalk.server.v1.DeleteCloudComponentStorageRequest
	4,  // 42: chalk.server.v1.CloudComponentsService.CreateCloudComponentVpc:output_type -> chalk.server.v1.CreateCloudComponentVpcResponse
	6,  // 43: chalk.server.v1.CloudComponentsService.GetCloudComponentVpc:output_type -> chalk.server.v1.GetCloudComponentVpcResponse
	8,  // 44: chalk.server.v1.CloudComponentsService.DeleteCloudComponentVpc:output_type -> chalk.server.v1.DeleteCloudComponentVpcResponse
	21, // 45: chalk.server.v1.CloudComponentsService.CreateCloudComponentCluster:output_type -> chalk.server.v1.CreateCloudComponentClusterResponse
	23, // 46: chalk.server.v1.CloudComponentsService.UpdateCloudComponentCluster:output_type -> chalk.server.v1.UpdateCloudComponentClusterResponse
	25, // 47: chalk.server.v1.CloudComponentsService.GetCloudComponentCluster:output_type -> chalk.server.v1.GetCloudComponentClusterResponse
	27, // 48: chalk.server.v1.CloudComponentsService.DeleteCloudComponentCluster:output_type -> chalk.server.v1.DeleteCloudComponentClusterResponse
	29, // 49: chalk.server.v1.CloudComponentsService.CreateCloudComponentStorage:output_type -> chalk.server.v1.CreateCloudComponentStorageResponse
	31, // 50: chalk.server.v1.CloudComponentsService.GetCloudComponentStorage:output_type -> chalk.server.v1.GetCloudComponentStorageResponse
	33, // 51: chalk.server.v1.CloudComponentsService.DeleteCloudComponentStorage:output_type -> chalk.server.v1.DeleteCloudComponentStorageResponse
	42, // [42:52] is the sub-list for method output_type
	32, // [32:42] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_cloud_components_proto_init() }
func file_chalk_server_v1_cloud_components_proto_init() {
	if File_chalk_server_v1_cloud_components_proto != nil {
		return
	}
	file_chalk_server_v1_cloud_components_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_server_v1_cloud_components_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_server_v1_cloud_components_proto_msgTypes[9].OneofWrappers = []any{
		(*CloudVpcConfig_Aws)(nil),
		(*CloudVpcConfig_Gcp)(nil),
	}
	file_chalk_server_v1_cloud_components_proto_msgTypes[14].OneofWrappers = []any{}
	file_chalk_server_v1_cloud_components_proto_msgTypes[15].OneofWrappers = []any{}
	file_chalk_server_v1_cloud_components_proto_msgTypes[16].OneofWrappers = []any{}
	file_chalk_server_v1_cloud_components_proto_msgTypes[17].OneofWrappers = []any{}
	file_chalk_server_v1_cloud_components_proto_msgTypes[18].OneofWrappers = []any{}
	file_chalk_server_v1_cloud_components_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_cloud_components_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_cloud_components_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_cloud_components_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_cloud_components_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_cloud_components_proto = out.File
	file_chalk_server_v1_cloud_components_proto_rawDesc = nil
	file_chalk_server_v1_cloud_components_proto_goTypes = nil
	file_chalk_server_v1_cloud_components_proto_depIdxs = nil
}
