// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/script_tasks.proto

package serverv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateScriptTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request    *v1.ScriptTaskRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	SourceFile []byte                `protobuf:"bytes,2,opt,name=source_file,json=sourceFile,proto3,oneof" json:"source_file,omitempty"`
}

func (x *CreateScriptTaskRequest) Reset() {
	*x = CreateScriptTaskRequest{}
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScriptTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScriptTaskRequest) ProtoMessage() {}

func (x *CreateScriptTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScriptTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateScriptTaskRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_script_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *CreateScriptTaskRequest) GetRequest() *v1.ScriptTaskRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CreateScriptTaskRequest) GetSourceFile() []byte {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

type CreateScriptTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CreateScriptTaskResponse) Reset() {
	*x = CreateScriptTaskResponse{}
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScriptTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScriptTaskResponse) ProtoMessage() {}

func (x *CreateScriptTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScriptTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateScriptTaskResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_script_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *CreateScriptTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ScriptTaskMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OperationId     string                 `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	Status          v1.ScriptTaskStatus    `protobuf:"varint,3,opt,name=status,proto3,enum=chalk.common.v1.ScriptTaskStatus" json:"status,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CompletedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	BranchName      *string                `protobuf:"bytes,6,opt,name=branch_name,json=branchName,proto3,oneof" json:"branch_name,omitempty"`
	RawBodyFilename *string                `protobuf:"bytes,7,opt,name=raw_body_filename,json=rawBodyFilename,proto3,oneof" json:"raw_body_filename,omitempty"`
}

func (x *ScriptTaskMeta) Reset() {
	*x = ScriptTaskMeta{}
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptTaskMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptTaskMeta) ProtoMessage() {}

func (x *ScriptTaskMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptTaskMeta.ProtoReflect.Descriptor instead.
func (*ScriptTaskMeta) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_script_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *ScriptTaskMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScriptTaskMeta) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *ScriptTaskMeta) GetStatus() v1.ScriptTaskStatus {
	if x != nil {
		return x.Status
	}
	return v1.ScriptTaskStatus(0)
}

func (x *ScriptTaskMeta) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScriptTaskMeta) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ScriptTaskMeta) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

func (x *ScriptTaskMeta) GetRawBodyFilename() string {
	if x != nil && x.RawBodyFilename != nil {
		return *x.RawBodyFilename
	}
	return ""
}

type ListScriptTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   *int32                 `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Cursor  *string                `protobuf:"bytes,2,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	Filters []*v1.ScriptTaskFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListScriptTasksRequest) Reset() {
	*x = ListScriptTasksRequest{}
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScriptTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScriptTasksRequest) ProtoMessage() {}

func (x *ListScriptTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScriptTasksRequest.ProtoReflect.Descriptor instead.
func (*ListScriptTasksRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_script_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *ListScriptTasksRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListScriptTasksRequest) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *ListScriptTasksRequest) GetFilters() []*v1.ScriptTaskFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListScriptTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptTasks []*ScriptTaskMeta `protobuf:"bytes,1,rep,name=script_tasks,json=scriptTasks,proto3" json:"script_tasks,omitempty"`
	NextCursor  *string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
}

func (x *ListScriptTasksResponse) Reset() {
	*x = ListScriptTasksResponse{}
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScriptTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScriptTasksResponse) ProtoMessage() {}

func (x *ListScriptTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScriptTasksResponse.ProtoReflect.Descriptor instead.
func (*ListScriptTasksResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_script_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *ListScriptTasksResponse) GetScriptTasks() []*ScriptTaskMeta {
	if x != nil {
		return x.ScriptTasks
	}
	return nil
}

func (x *ListScriptTasksResponse) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

type GetScriptTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptTaskId string `protobuf:"bytes,1,opt,name=script_task_id,json=scriptTaskId,proto3" json:"script_task_id,omitempty"`
}

func (x *GetScriptTaskRequest) Reset() {
	*x = GetScriptTaskRequest{}
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScriptTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScriptTaskRequest) ProtoMessage() {}

func (x *GetScriptTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScriptTaskRequest.ProtoReflect.Descriptor instead.
func (*GetScriptTaskRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_script_tasks_proto_rawDescGZIP(), []int{5}
}

func (x *GetScriptTaskRequest) GetScriptTaskId() string {
	if x != nil {
		return x.ScriptTaskId
	}
	return ""
}

type GetScriptTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptTask *ScriptTaskMeta `protobuf:"bytes,1,opt,name=script_task,json=scriptTask,proto3" json:"script_task,omitempty"`
}

func (x *GetScriptTaskResponse) Reset() {
	*x = GetScriptTaskResponse{}
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScriptTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScriptTaskResponse) ProtoMessage() {}

func (x *GetScriptTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_script_tasks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScriptTaskResponse.ProtoReflect.Descriptor instead.
func (*GetScriptTaskResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_script_tasks_proto_rawDescGZIP(), []int{6}
}

func (x *GetScriptTaskResponse) GetScriptTask() *ScriptTaskMeta {
	if x != nil {
		return x.ScriptTask
	}
	return nil
}

var File_chalk_server_v1_script_tasks_proto protoreflect.FileDescriptor

var file_chalk_server_v1_script_tasks_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x8b, 0x03, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0f, 0x72, 0x61, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x61, 0x77, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x32, 0xd7, 0x02, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x80, 0x7d, 0x04, 0x12, 0x6c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x0b,
	0x90, 0x02, 0x01, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x06, 0x80, 0x7d, 0x0b, 0x90, 0x02, 0x01, 0x42, 0xc0, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x42, 0x10, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_script_tasks_proto_rawDescOnce sync.Once
	file_chalk_server_v1_script_tasks_proto_rawDescData = file_chalk_server_v1_script_tasks_proto_rawDesc
)

func file_chalk_server_v1_script_tasks_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_script_tasks_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_script_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_script_tasks_proto_rawDescData)
	})
	return file_chalk_server_v1_script_tasks_proto_rawDescData
}

var file_chalk_server_v1_script_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_chalk_server_v1_script_tasks_proto_goTypes = []any{
	(*CreateScriptTaskRequest)(nil),  // 0: chalk.server.v1.CreateScriptTaskRequest
	(*CreateScriptTaskResponse)(nil), // 1: chalk.server.v1.CreateScriptTaskResponse
	(*ScriptTaskMeta)(nil),           // 2: chalk.server.v1.ScriptTaskMeta
	(*ListScriptTasksRequest)(nil),   // 3: chalk.server.v1.ListScriptTasksRequest
	(*ListScriptTasksResponse)(nil),  // 4: chalk.server.v1.ListScriptTasksResponse
	(*GetScriptTaskRequest)(nil),     // 5: chalk.server.v1.GetScriptTaskRequest
	(*GetScriptTaskResponse)(nil),    // 6: chalk.server.v1.GetScriptTaskResponse
	(*v1.ScriptTaskRequest)(nil),     // 7: chalk.common.v1.ScriptTaskRequest
	(v1.ScriptTaskStatus)(0),         // 8: chalk.common.v1.ScriptTaskStatus
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
	(*v1.ScriptTaskFilter)(nil),      // 10: chalk.common.v1.ScriptTaskFilter
}
var file_chalk_server_v1_script_tasks_proto_depIdxs = []int32{
	7,  // 0: chalk.server.v1.CreateScriptTaskRequest.request:type_name -> chalk.common.v1.ScriptTaskRequest
	8,  // 1: chalk.server.v1.ScriptTaskMeta.status:type_name -> chalk.common.v1.ScriptTaskStatus
	9,  // 2: chalk.server.v1.ScriptTaskMeta.created_at:type_name -> google.protobuf.Timestamp
	9,  // 3: chalk.server.v1.ScriptTaskMeta.completed_at:type_name -> google.protobuf.Timestamp
	10, // 4: chalk.server.v1.ListScriptTasksRequest.filters:type_name -> chalk.common.v1.ScriptTaskFilter
	2,  // 5: chalk.server.v1.ListScriptTasksResponse.script_tasks:type_name -> chalk.server.v1.ScriptTaskMeta
	2,  // 6: chalk.server.v1.GetScriptTaskResponse.script_task:type_name -> chalk.server.v1.ScriptTaskMeta
	0,  // 7: chalk.server.v1.ScriptTaskService.CreateScriptTask:input_type -> chalk.server.v1.CreateScriptTaskRequest
	3,  // 8: chalk.server.v1.ScriptTaskService.ListScriptTasks:input_type -> chalk.server.v1.ListScriptTasksRequest
	5,  // 9: chalk.server.v1.ScriptTaskService.GetScriptTask:input_type -> chalk.server.v1.GetScriptTaskRequest
	1,  // 10: chalk.server.v1.ScriptTaskService.CreateScriptTask:output_type -> chalk.server.v1.CreateScriptTaskResponse
	4,  // 11: chalk.server.v1.ScriptTaskService.ListScriptTasks:output_type -> chalk.server.v1.ListScriptTasksResponse
	6,  // 12: chalk.server.v1.ScriptTaskService.GetScriptTask:output_type -> chalk.server.v1.GetScriptTaskResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_script_tasks_proto_init() }
func file_chalk_server_v1_script_tasks_proto_init() {
	if File_chalk_server_v1_script_tasks_proto != nil {
		return
	}
	file_chalk_server_v1_script_tasks_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_script_tasks_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_server_v1_script_tasks_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_server_v1_script_tasks_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_script_tasks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_server_v1_script_tasks_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_script_tasks_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_script_tasks_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_script_tasks_proto = out.File
	file_chalk_server_v1_script_tasks_proto_rawDesc = nil
	file_chalk_server_v1_script_tasks_proto_goTypes = nil
	file_chalk_server_v1_script_tasks_proto_depIdxs = nil
}
