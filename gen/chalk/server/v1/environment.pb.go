// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/server/v1/environment.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudProviderKind int32

const (
	CloudProviderKind_CLOUD_PROVIDER_KIND_UNSPECIFIED CloudProviderKind = 0
	CloudProviderKind_CLOUD_PROVIDER_KIND_UNKNOWN     CloudProviderKind = 1
	CloudProviderKind_CLOUD_PROVIDER_KIND_GCP         CloudProviderKind = 2
	CloudProviderKind_CLOUD_PROVIDER_KIND_AWS         CloudProviderKind = 3
)

// Enum value maps for CloudProviderKind.
var (
	CloudProviderKind_name = map[int32]string{
		0: "CLOUD_PROVIDER_KIND_UNSPECIFIED",
		1: "CLOUD_PROVIDER_KIND_UNKNOWN",
		2: "CLOUD_PROVIDER_KIND_GCP",
		3: "CLOUD_PROVIDER_KIND_AWS",
	}
	CloudProviderKind_value = map[string]int32{
		"CLOUD_PROVIDER_KIND_UNSPECIFIED": 0,
		"CLOUD_PROVIDER_KIND_UNKNOWN":     1,
		"CLOUD_PROVIDER_KIND_GCP":         2,
		"CLOUD_PROVIDER_KIND_AWS":         3,
	}
)

func (x CloudProviderKind) Enum() *CloudProviderKind {
	p := new(CloudProviderKind)
	*p = x
	return p
}

func (x CloudProviderKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudProviderKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_environment_proto_enumTypes[0].Descriptor()
}

func (CloudProviderKind) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_environment_proto_enumTypes[0]
}

func (x CloudProviderKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudProviderKind.Descriptor instead.
func (CloudProviderKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{0}
}

type AWSCloudWatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogGroupPath *string `protobuf:"bytes,1,opt,name=log_group_path,json=logGroupPath,proto3,oneof" json:"log_group_path,omitempty"`
}

func (x *AWSCloudWatchConfig) Reset() {
	*x = AWSCloudWatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_environment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSCloudWatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSCloudWatchConfig) ProtoMessage() {}

func (x *AWSCloudWatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSCloudWatchConfig.ProtoReflect.Descriptor instead.
func (*AWSCloudWatchConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{0}
}

func (x *AWSCloudWatchConfig) GetLogGroupPath() string {
	if x != nil && x.LogGroupPath != nil {
		return *x.LogGroupPath
	}
	return ""
}

type AWSSecretManagerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretKmsArn *string           `protobuf:"bytes,1,opt,name=secret_kms_arn,json=secretKmsArn,proto3,oneof" json:"secret_kms_arn,omitempty"`
	SecretTags   map[string]string `protobuf:"bytes,2,rep,name=secret_tags,json=secretTags,proto3" json:"secret_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecretPrefix *string           `protobuf:"bytes,3,opt,name=secret_prefix,json=secretPrefix,proto3,oneof" json:"secret_prefix,omitempty"`
}

func (x *AWSSecretManagerConfig) Reset() {
	*x = AWSSecretManagerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_environment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSSecretManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecretManagerConfig) ProtoMessage() {}

func (x *AWSSecretManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSecretManagerConfig.ProtoReflect.Descriptor instead.
func (*AWSSecretManagerConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{1}
}

func (x *AWSSecretManagerConfig) GetSecretKmsArn() string {
	if x != nil && x.SecretKmsArn != nil {
		return *x.SecretKmsArn
	}
	return ""
}

func (x *AWSSecretManagerConfig) GetSecretTags() map[string]string {
	if x != nil {
		return x.SecretTags
	}
	return nil
}

func (x *AWSSecretManagerConfig) GetSecretPrefix() string {
	if x != nil && x.SecretPrefix != nil {
		return *x.SecretPrefix
	}
	return ""
}

type AWSCloudConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId           string                  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ManagementRoleArn   string                  `protobuf:"bytes,2,opt,name=management_role_arn,json=managementRoleArn,proto3" json:"management_role_arn,omitempty"`
	Region              string                  `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	ExternalId          *string                 `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
	CloudWatchConfig    *AWSCloudWatchConfig    `protobuf:"bytes,5,opt,name=cloud_watch_config,json=cloudWatchConfig,proto3" json:"cloud_watch_config,omitempty"`
	SecretManagerConfig *AWSSecretManagerConfig `protobuf:"bytes,6,opt,name=secret_manager_config,json=secretManagerConfig,proto3" json:"secret_manager_config,omitempty"`
}

func (x *AWSCloudConfig) Reset() {
	*x = AWSCloudConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_environment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSCloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSCloudConfig) ProtoMessage() {}

func (x *AWSCloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSCloudConfig.ProtoReflect.Descriptor instead.
func (*AWSCloudConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{2}
}

func (x *AWSCloudConfig) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSCloudConfig) GetManagementRoleArn() string {
	if x != nil {
		return x.ManagementRoleArn
	}
	return ""
}

func (x *AWSCloudConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSCloudConfig) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *AWSCloudConfig) GetCloudWatchConfig() *AWSCloudWatchConfig {
	if x != nil {
		return x.CloudWatchConfig
	}
	return nil
}

func (x *AWSCloudConfig) GetSecretManagerConfig() *AWSSecretManagerConfig {
	if x != nil {
		return x.SecretManagerConfig
	}
	return nil
}

type GCPCloudConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                string  `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Region                   string  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	ManagementServiceAccount *string `protobuf:"bytes,3,opt,name=management_service_account,json=managementServiceAccount,proto3,oneof" json:"management_service_account,omitempty"`
}

func (x *GCPCloudConfig) Reset() {
	*x = GCPCloudConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_environment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPCloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPCloudConfig) ProtoMessage() {}

func (x *GCPCloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPCloudConfig.ProtoReflect.Descriptor instead.
func (*GCPCloudConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{3}
}

func (x *GCPCloudConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GCPCloudConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GCPCloudConfig) GetManagementServiceAccount() string {
	if x != nil && x.ManagementServiceAccount != nil {
		return *x.ManagementServiceAccount
	}
	return ""
}

type CloudConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*CloudConfig_Aws
	//	*CloudConfig_Gcp
	Config isCloudConfig_Config `protobuf_oneof:"config"`
}

func (x *CloudConfig) Reset() {
	*x = CloudConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_environment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConfig) ProtoMessage() {}

func (x *CloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConfig.ProtoReflect.Descriptor instead.
func (*CloudConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{4}
}

func (m *CloudConfig) GetConfig() isCloudConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *CloudConfig) GetAws() *AWSCloudConfig {
	if x, ok := x.GetConfig().(*CloudConfig_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *CloudConfig) GetGcp() *GCPCloudConfig {
	if x, ok := x.GetConfig().(*CloudConfig_Gcp); ok {
		return x.Gcp
	}
	return nil
}

type isCloudConfig_Config interface {
	isCloudConfig_Config()
}

type CloudConfig_Aws struct {
	Aws *AWSCloudConfig `protobuf:"bytes,1,opt,name=aws,proto3,oneof"`
}

type CloudConfig_Gcp struct {
	Gcp *GCPCloudConfig `protobuf:"bytes,2,opt,name=gcp,proto3,oneof"`
}

func (*CloudConfig_Aws) isCloudConfig_Config() {}

func (*CloudConfig_Gcp) isCloudConfig_Config() {}

type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId                                string            `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id                                       string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	TeamId                                   string            `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	ActiveDeploymentId                       *string           `protobuf:"bytes,5,opt,name=active_deployment_id,json=activeDeploymentId,proto3,oneof" json:"active_deployment_id,omitempty"`
	WorkerUrl                                *string           `protobuf:"bytes,6,opt,name=worker_url,json=workerUrl,proto3,oneof" json:"worker_url,omitempty"`
	ServiceUrl                               *string           `protobuf:"bytes,7,opt,name=service_url,json=serviceUrl,proto3,oneof" json:"service_url,omitempty"`
	BranchUrl                                *string           `protobuf:"bytes,8,opt,name=branch_url,json=branchUrl,proto3,oneof" json:"branch_url,omitempty"`
	OfflineStoreSecret                       *string           `protobuf:"bytes,9,opt,name=offline_store_secret,json=offlineStoreSecret,proto3,oneof" json:"offline_store_secret,omitempty"`
	OnlineStoreSecret                        *string           `protobuf:"bytes,10,opt,name=online_store_secret,json=onlineStoreSecret,proto3,oneof" json:"online_store_secret,omitempty"`
	FeatureStoreSecret                       *string           `protobuf:"bytes,11,opt,name=feature_store_secret,json=featureStoreSecret,proto3,oneof" json:"feature_store_secret,omitempty"`
	PostgresSecret                           *string           `protobuf:"bytes,12,opt,name=postgres_secret,json=postgresSecret,proto3,oneof" json:"postgres_secret,omitempty"`
	OnlineStoreKind                          *string           `protobuf:"bytes,13,opt,name=online_store_kind,json=onlineStoreKind,proto3,oneof" json:"online_store_kind,omitempty"`
	EmqUri                                   *string           `protobuf:"bytes,14,opt,name=emq_uri,json=emqUri,proto3,oneof" json:"emq_uri,omitempty"`
	VpcConnectorName                         *string           `protobuf:"bytes,15,opt,name=vpc_connector_name,json=vpcConnectorName,proto3,oneof" json:"vpc_connector_name,omitempty"`
	KubeClusterName                          *string           `protobuf:"bytes,16,opt,name=kube_cluster_name,json=kubeClusterName,proto3,oneof" json:"kube_cluster_name,omitempty"`
	BranchKubeClusterName                    *string           `protobuf:"bytes,17,opt,name=branch_kube_cluster_name,json=branchKubeClusterName,proto3,oneof" json:"branch_kube_cluster_name,omitempty"`
	EngineKubeClusterName                    *string           `protobuf:"bytes,18,opt,name=engine_kube_cluster_name,json=engineKubeClusterName,proto3,oneof" json:"engine_kube_cluster_name,omitempty"`
	ShadowEngineKubeClusterName              *string           `protobuf:"bytes,19,opt,name=shadow_engine_kube_cluster_name,json=shadowEngineKubeClusterName,proto3,oneof" json:"shadow_engine_kube_cluster_name,omitempty"`
	KubeJobNamespace                         *string           `protobuf:"bytes,20,opt,name=kube_job_namespace,json=kubeJobNamespace,proto3,oneof" json:"kube_job_namespace,omitempty"`
	KubePreviewNamespace                     *string           `protobuf:"bytes,21,opt,name=kube_preview_namespace,json=kubePreviewNamespace,proto3,oneof" json:"kube_preview_namespace,omitempty"`
	KubeServiceAccountName                   *string           `protobuf:"bytes,22,opt,name=kube_service_account_name,json=kubeServiceAccountName,proto3,oneof" json:"kube_service_account_name,omitempty"`
	StreamingQueryServiceUri                 *string           `protobuf:"bytes,23,opt,name=streaming_query_service_uri,json=streamingQueryServiceUri,proto3,oneof" json:"streaming_query_service_uri,omitempty"`
	SkipOfflineWritesForOnlineCachedFeatures bool              `protobuf:"varint,24,opt,name=skip_offline_writes_for_online_cached_features,json=skipOfflineWritesForOnlineCachedFeatures,proto3" json:"skip_offline_writes_for_online_cached_features,omitempty"`
	ResultBusTopic                           *string           `protobuf:"bytes,25,opt,name=result_bus_topic,json=resultBusTopic,proto3,oneof" json:"result_bus_topic,omitempty"`
	OnlinePersistenceMode                    *string           `protobuf:"bytes,26,opt,name=online_persistence_mode,json=onlinePersistenceMode,proto3,oneof" json:"online_persistence_mode,omitempty"`
	MetricsBusTopic                          *string           `protobuf:"bytes,27,opt,name=metrics_bus_topic,json=metricsBusTopic,proto3,oneof" json:"metrics_bus_topic,omitempty"`
	BigtableInstanceName                     *string           `protobuf:"bytes,28,opt,name=bigtable_instance_name,json=bigtableInstanceName,proto3,oneof" json:"bigtable_instance_name,omitempty"`
	BigtableTableName                        *string           `protobuf:"bytes,29,opt,name=bigtable_table_name,json=bigtableTableName,proto3,oneof" json:"bigtable_table_name,omitempty"`
	CloudAccountLocator                      *string           `protobuf:"bytes,30,opt,name=cloud_account_locator,json=cloudAccountLocator,proto3,oneof" json:"cloud_account_locator,omitempty"`
	CloudRegion                              *string           `protobuf:"bytes,31,opt,name=cloud_region,json=cloudRegion,proto3,oneof" json:"cloud_region,omitempty"`
	CloudTenancyId                           *string           `protobuf:"bytes,32,opt,name=cloud_tenancy_id,json=cloudTenancyId,proto3,oneof" json:"cloud_tenancy_id,omitempty"`
	SourceBundleBucket                       *string           `protobuf:"bytes,33,opt,name=source_bundle_bucket,json=sourceBundleBucket,proto3,oneof" json:"source_bundle_bucket,omitempty"`
	EngineDockerRegistryPath                 *string           `protobuf:"bytes,34,opt,name=engine_docker_registry_path,json=engineDockerRegistryPath,proto3,oneof" json:"engine_docker_registry_path,omitempty"`
	DefaultPlanner                           *string           `protobuf:"bytes,35,opt,name=default_planner,json=defaultPlanner,proto3,oneof" json:"default_planner,omitempty"`
	AdditionalEnvVars                        map[string]string `protobuf:"bytes,36,rep,name=additional_env_vars,json=additionalEnvVars,proto3" json:"additional_env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AdditionalCronEnvVars                    map[string]string `protobuf:"bytes,37,rep,name=additional_cron_env_vars,json=additionalCronEnvVars,proto3" json:"additional_cron_env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrivatePipRepositories                   *string           `protobuf:"bytes,38,opt,name=private_pip_repositories,json=privatePipRepositories,proto3,oneof" json:"private_pip_repositories,omitempty"`
	IsSandbox                                bool              `protobuf:"varint,39,opt,name=is_sandbox,json=isSandbox,proto3" json:"is_sandbox,omitempty"`
	// AWS/GCP
	CloudProvider CloudProviderKind `protobuf:"varint,41,opt,name=cloud_provider,json=cloudProvider,proto3,enum=chalk.server.v1.CloudProviderKind" json:"cloud_provider,omitempty"`
	// Null if the environment is hosted by Chalk.
	CloudConfig *CloudConfig `protobuf:"bytes,42,opt,name=cloud_config,json=cloudConfig,proto3,oneof" json:"cloud_config,omitempty"`
	// TODO: really a structured object.
	SpecConfigJson map[string]*structpb.Value `protobuf:"bytes,40,rep,name=spec_config_json,json=specConfigJson,proto3" json:"spec_config_json,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ArchivedAt     *timestamppb.Timestamp     `protobuf:"bytes,43,opt,name=archived_at,json=archivedAt,proto3,oneof" json:"archived_at,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_server_v1_environment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{5}
}

func (x *Environment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Environment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Environment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Environment) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *Environment) GetActiveDeploymentId() string {
	if x != nil && x.ActiveDeploymentId != nil {
		return *x.ActiveDeploymentId
	}
	return ""
}

func (x *Environment) GetWorkerUrl() string {
	if x != nil && x.WorkerUrl != nil {
		return *x.WorkerUrl
	}
	return ""
}

func (x *Environment) GetServiceUrl() string {
	if x != nil && x.ServiceUrl != nil {
		return *x.ServiceUrl
	}
	return ""
}

func (x *Environment) GetBranchUrl() string {
	if x != nil && x.BranchUrl != nil {
		return *x.BranchUrl
	}
	return ""
}

func (x *Environment) GetOfflineStoreSecret() string {
	if x != nil && x.OfflineStoreSecret != nil {
		return *x.OfflineStoreSecret
	}
	return ""
}

func (x *Environment) GetOnlineStoreSecret() string {
	if x != nil && x.OnlineStoreSecret != nil {
		return *x.OnlineStoreSecret
	}
	return ""
}

func (x *Environment) GetFeatureStoreSecret() string {
	if x != nil && x.FeatureStoreSecret != nil {
		return *x.FeatureStoreSecret
	}
	return ""
}

func (x *Environment) GetPostgresSecret() string {
	if x != nil && x.PostgresSecret != nil {
		return *x.PostgresSecret
	}
	return ""
}

func (x *Environment) GetOnlineStoreKind() string {
	if x != nil && x.OnlineStoreKind != nil {
		return *x.OnlineStoreKind
	}
	return ""
}

func (x *Environment) GetEmqUri() string {
	if x != nil && x.EmqUri != nil {
		return *x.EmqUri
	}
	return ""
}

func (x *Environment) GetVpcConnectorName() string {
	if x != nil && x.VpcConnectorName != nil {
		return *x.VpcConnectorName
	}
	return ""
}

func (x *Environment) GetKubeClusterName() string {
	if x != nil && x.KubeClusterName != nil {
		return *x.KubeClusterName
	}
	return ""
}

func (x *Environment) GetBranchKubeClusterName() string {
	if x != nil && x.BranchKubeClusterName != nil {
		return *x.BranchKubeClusterName
	}
	return ""
}

func (x *Environment) GetEngineKubeClusterName() string {
	if x != nil && x.EngineKubeClusterName != nil {
		return *x.EngineKubeClusterName
	}
	return ""
}

func (x *Environment) GetShadowEngineKubeClusterName() string {
	if x != nil && x.ShadowEngineKubeClusterName != nil {
		return *x.ShadowEngineKubeClusterName
	}
	return ""
}

func (x *Environment) GetKubeJobNamespace() string {
	if x != nil && x.KubeJobNamespace != nil {
		return *x.KubeJobNamespace
	}
	return ""
}

func (x *Environment) GetKubePreviewNamespace() string {
	if x != nil && x.KubePreviewNamespace != nil {
		return *x.KubePreviewNamespace
	}
	return ""
}

func (x *Environment) GetKubeServiceAccountName() string {
	if x != nil && x.KubeServiceAccountName != nil {
		return *x.KubeServiceAccountName
	}
	return ""
}

func (x *Environment) GetStreamingQueryServiceUri() string {
	if x != nil && x.StreamingQueryServiceUri != nil {
		return *x.StreamingQueryServiceUri
	}
	return ""
}

func (x *Environment) GetSkipOfflineWritesForOnlineCachedFeatures() bool {
	if x != nil {
		return x.SkipOfflineWritesForOnlineCachedFeatures
	}
	return false
}

func (x *Environment) GetResultBusTopic() string {
	if x != nil && x.ResultBusTopic != nil {
		return *x.ResultBusTopic
	}
	return ""
}

func (x *Environment) GetOnlinePersistenceMode() string {
	if x != nil && x.OnlinePersistenceMode != nil {
		return *x.OnlinePersistenceMode
	}
	return ""
}

func (x *Environment) GetMetricsBusTopic() string {
	if x != nil && x.MetricsBusTopic != nil {
		return *x.MetricsBusTopic
	}
	return ""
}

func (x *Environment) GetBigtableInstanceName() string {
	if x != nil && x.BigtableInstanceName != nil {
		return *x.BigtableInstanceName
	}
	return ""
}

func (x *Environment) GetBigtableTableName() string {
	if x != nil && x.BigtableTableName != nil {
		return *x.BigtableTableName
	}
	return ""
}

func (x *Environment) GetCloudAccountLocator() string {
	if x != nil && x.CloudAccountLocator != nil {
		return *x.CloudAccountLocator
	}
	return ""
}

func (x *Environment) GetCloudRegion() string {
	if x != nil && x.CloudRegion != nil {
		return *x.CloudRegion
	}
	return ""
}

func (x *Environment) GetCloudTenancyId() string {
	if x != nil && x.CloudTenancyId != nil {
		return *x.CloudTenancyId
	}
	return ""
}

func (x *Environment) GetSourceBundleBucket() string {
	if x != nil && x.SourceBundleBucket != nil {
		return *x.SourceBundleBucket
	}
	return ""
}

func (x *Environment) GetEngineDockerRegistryPath() string {
	if x != nil && x.EngineDockerRegistryPath != nil {
		return *x.EngineDockerRegistryPath
	}
	return ""
}

func (x *Environment) GetDefaultPlanner() string {
	if x != nil && x.DefaultPlanner != nil {
		return *x.DefaultPlanner
	}
	return ""
}

func (x *Environment) GetAdditionalEnvVars() map[string]string {
	if x != nil {
		return x.AdditionalEnvVars
	}
	return nil
}

func (x *Environment) GetAdditionalCronEnvVars() map[string]string {
	if x != nil {
		return x.AdditionalCronEnvVars
	}
	return nil
}

func (x *Environment) GetPrivatePipRepositories() string {
	if x != nil && x.PrivatePipRepositories != nil {
		return *x.PrivatePipRepositories
	}
	return ""
}

func (x *Environment) GetIsSandbox() bool {
	if x != nil {
		return x.IsSandbox
	}
	return false
}

func (x *Environment) GetCloudProvider() CloudProviderKind {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProviderKind_CLOUD_PROVIDER_KIND_UNSPECIFIED
}

func (x *Environment) GetCloudConfig() *CloudConfig {
	if x != nil {
		return x.CloudConfig
	}
	return nil
}

func (x *Environment) GetSpecConfigJson() map[string]*structpb.Value {
	if x != nil {
		return x.SpecConfigJson
	}
	return nil
}

func (x *Environment) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

var File_chalk_server_v1_environment_proto protoreflect.FileDescriptor

var file_chalk_server_v1_environment_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xab, 0x02, 0x0a, 0x16, 0x41, 0x57, 0x53,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x6d,
	0x73, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x6d, 0x73, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x58,
	0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88,
	0x01, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x6d, 0x73,
	0x5f, 0x61, 0x72, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x47, 0x43, 0x50, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x43, 0x50, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc9, 0x1a, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x11,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x6d,
	0x71, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x65,
	0x6d, 0x71, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x76, 0x70, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x76, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x15, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x15,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1f, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x1b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x19, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x16, 0x6b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x73,
	0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x13, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x73, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x15, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62,
	0x75, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x75, 0x73, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x14, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x11,
	0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1a, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1b, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1c, 0x52, 0x18, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a,
	0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x76, 0x5f,
	0x76, 0x61, 0x72, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x73, 0x12, 0x70, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x6f,
	0x6e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x1f, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x20, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x44, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x59, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6d, 0x71, 0x5f,
	0x75, 0x72, 0x69, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x2a, 0x93, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x03, 0x42, 0xc0, 0x01, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_environment_proto_rawDescOnce sync.Once
	file_chalk_server_v1_environment_proto_rawDescData = file_chalk_server_v1_environment_proto_rawDesc
)

func file_chalk_server_v1_environment_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_environment_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_environment_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_environment_proto_rawDescData)
	})
	return file_chalk_server_v1_environment_proto_rawDescData
}

var file_chalk_server_v1_environment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_server_v1_environment_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chalk_server_v1_environment_proto_goTypes = []any{
	(CloudProviderKind)(0),         // 0: chalk.server.v1.CloudProviderKind
	(*AWSCloudWatchConfig)(nil),    // 1: chalk.server.v1.AWSCloudWatchConfig
	(*AWSSecretManagerConfig)(nil), // 2: chalk.server.v1.AWSSecretManagerConfig
	(*AWSCloudConfig)(nil),         // 3: chalk.server.v1.AWSCloudConfig
	(*GCPCloudConfig)(nil),         // 4: chalk.server.v1.GCPCloudConfig
	(*CloudConfig)(nil),            // 5: chalk.server.v1.CloudConfig
	(*Environment)(nil),            // 6: chalk.server.v1.Environment
	nil,                            // 7: chalk.server.v1.AWSSecretManagerConfig.SecretTagsEntry
	nil,                            // 8: chalk.server.v1.Environment.AdditionalEnvVarsEntry
	nil,                            // 9: chalk.server.v1.Environment.AdditionalCronEnvVarsEntry
	nil,                            // 10: chalk.server.v1.Environment.SpecConfigJsonEntry
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*structpb.Value)(nil),         // 12: google.protobuf.Value
}
var file_chalk_server_v1_environment_proto_depIdxs = []int32{
	7,  // 0: chalk.server.v1.AWSSecretManagerConfig.secret_tags:type_name -> chalk.server.v1.AWSSecretManagerConfig.SecretTagsEntry
	1,  // 1: chalk.server.v1.AWSCloudConfig.cloud_watch_config:type_name -> chalk.server.v1.AWSCloudWatchConfig
	2,  // 2: chalk.server.v1.AWSCloudConfig.secret_manager_config:type_name -> chalk.server.v1.AWSSecretManagerConfig
	3,  // 3: chalk.server.v1.CloudConfig.aws:type_name -> chalk.server.v1.AWSCloudConfig
	4,  // 4: chalk.server.v1.CloudConfig.gcp:type_name -> chalk.server.v1.GCPCloudConfig
	8,  // 5: chalk.server.v1.Environment.additional_env_vars:type_name -> chalk.server.v1.Environment.AdditionalEnvVarsEntry
	9,  // 6: chalk.server.v1.Environment.additional_cron_env_vars:type_name -> chalk.server.v1.Environment.AdditionalCronEnvVarsEntry
	0,  // 7: chalk.server.v1.Environment.cloud_provider:type_name -> chalk.server.v1.CloudProviderKind
	5,  // 8: chalk.server.v1.Environment.cloud_config:type_name -> chalk.server.v1.CloudConfig
	10, // 9: chalk.server.v1.Environment.spec_config_json:type_name -> chalk.server.v1.Environment.SpecConfigJsonEntry
	11, // 10: chalk.server.v1.Environment.archived_at:type_name -> google.protobuf.Timestamp
	12, // 11: chalk.server.v1.Environment.SpecConfigJsonEntry.value:type_name -> google.protobuf.Value
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_environment_proto_init() }
func file_chalk_server_v1_environment_proto_init() {
	if File_chalk_server_v1_environment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_server_v1_environment_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AWSCloudWatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_server_v1_environment_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AWSSecretManagerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_server_v1_environment_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AWSCloudConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_server_v1_environment_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GCPCloudConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_server_v1_environment_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CloudConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_server_v1_environment_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_server_v1_environment_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[4].OneofWrappers = []any{
		(*CloudConfig_Aws)(nil),
		(*CloudConfig_Gcp)(nil),
	}
	file_chalk_server_v1_environment_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_environment_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_environment_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_environment_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_environment_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_environment_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_environment_proto = out.File
	file_chalk_server_v1_environment_proto_rawDesc = nil
	file_chalk_server_v1_environment_proto_goTypes = nil
	file_chalk_server_v1_environment_proto_depIdxs = nil
}
