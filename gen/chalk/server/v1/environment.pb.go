// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/server/v1/environment.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudProviderKind int32

const (
	CloudProviderKind_CLOUD_PROVIDER_KIND_UNSPECIFIED CloudProviderKind = 0
	CloudProviderKind_CLOUD_PROVIDER_KIND_UNKNOWN     CloudProviderKind = 1
	CloudProviderKind_CLOUD_PROVIDER_KIND_GCP         CloudProviderKind = 2
	CloudProviderKind_CLOUD_PROVIDER_KIND_AWS         CloudProviderKind = 3
)

// Enum value maps for CloudProviderKind.
var (
	CloudProviderKind_name = map[int32]string{
		0: "CLOUD_PROVIDER_KIND_UNSPECIFIED",
		1: "CLOUD_PROVIDER_KIND_UNKNOWN",
		2: "CLOUD_PROVIDER_KIND_GCP",
		3: "CLOUD_PROVIDER_KIND_AWS",
	}
	CloudProviderKind_value = map[string]int32{
		"CLOUD_PROVIDER_KIND_UNSPECIFIED": 0,
		"CLOUD_PROVIDER_KIND_UNKNOWN":     1,
		"CLOUD_PROVIDER_KIND_GCP":         2,
		"CLOUD_PROVIDER_KIND_AWS":         3,
	}
)

func (x CloudProviderKind) Enum() *CloudProviderKind {
	p := new(CloudProviderKind)
	*p = x
	return p
}

func (x CloudProviderKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudProviderKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_environment_proto_enumTypes[0].Descriptor()
}

func (CloudProviderKind) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_environment_proto_enumTypes[0]
}

func (x CloudProviderKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudProviderKind.Descriptor instead.
func (CloudProviderKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{0}
}

type AWSCloudWatchConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogGroupPath  *string                `protobuf:"bytes,1,opt,name=log_group_path,json=logGroupPath,proto3,oneof" json:"log_group_path,omitempty"`
	LogGroupPaths []string               `protobuf:"bytes,2,rep,name=log_group_paths,json=logGroupPaths,proto3" json:"log_group_paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSCloudWatchConfig) Reset() {
	*x = AWSCloudWatchConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSCloudWatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSCloudWatchConfig) ProtoMessage() {}

func (x *AWSCloudWatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSCloudWatchConfig.ProtoReflect.Descriptor instead.
func (*AWSCloudWatchConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{0}
}

func (x *AWSCloudWatchConfig) GetLogGroupPath() string {
	if x != nil && x.LogGroupPath != nil {
		return *x.LogGroupPath
	}
	return ""
}

func (x *AWSCloudWatchConfig) GetLogGroupPaths() []string {
	if x != nil {
		return x.LogGroupPaths
	}
	return nil
}

type AWSSecretManagerConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SecretKmsArn  *string                `protobuf:"bytes,1,opt,name=secret_kms_arn,json=secretKmsArn,proto3,oneof" json:"secret_kms_arn,omitempty"`
	SecretTags    map[string]string      `protobuf:"bytes,2,rep,name=secret_tags,json=secretTags,proto3" json:"secret_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SecretPrefix  *string                `protobuf:"bytes,3,opt,name=secret_prefix,json=secretPrefix,proto3,oneof" json:"secret_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AWSSecretManagerConfig) Reset() {
	*x = AWSSecretManagerConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSSecretManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecretManagerConfig) ProtoMessage() {}

func (x *AWSSecretManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSecretManagerConfig.ProtoReflect.Descriptor instead.
func (*AWSSecretManagerConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{1}
}

func (x *AWSSecretManagerConfig) GetSecretKmsArn() string {
	if x != nil && x.SecretKmsArn != nil {
		return *x.SecretKmsArn
	}
	return ""
}

func (x *AWSSecretManagerConfig) GetSecretTags() map[string]string {
	if x != nil {
		return x.SecretTags
	}
	return nil
}

func (x *AWSSecretManagerConfig) GetSecretPrefix() string {
	if x != nil && x.SecretPrefix != nil {
		return *x.SecretPrefix
	}
	return ""
}

type GCPSecretReplicationReplica struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Location      string                 `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GCPSecretReplicationReplica) Reset() {
	*x = GCPSecretReplicationReplica{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCPSecretReplicationReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPSecretReplicationReplica) ProtoMessage() {}

func (x *GCPSecretReplicationReplica) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPSecretReplicationReplica.ProtoReflect.Descriptor instead.
func (*GCPSecretReplicationReplica) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{2}
}

func (x *GCPSecretReplicationReplica) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type GCPRegionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Valid values currently, string for readability:
	// GLOBAL - default, gcp resources are globally-scoped when possible
	// SINGLE_REGION - gcp resources are replicated to specific regions, but still globally addressable
	// STRICT_REGIONAL - gcp resources are strictly region-locked, requiring regional api endpoint configuration
	ScopeType     *string `protobuf:"bytes,1,opt,name=scope_type,json=scopeType,proto3,oneof" json:"scope_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GCPRegionConfig) Reset() {
	*x = GCPRegionConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCPRegionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPRegionConfig) ProtoMessage() {}

func (x *GCPRegionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPRegionConfig.ProtoReflect.Descriptor instead.
func (*GCPRegionConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{3}
}

func (x *GCPRegionConfig) GetScopeType() string {
	if x != nil && x.ScopeType != nil {
		return *x.ScopeType
	}
	return ""
}

type GCPSecretManagerConfig struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	SecretRegion *string                `protobuf:"bytes,1,opt,name=secret_region,json=secretRegion,proto3,oneof" json:"secret_region,omitempty"`
	// the intention is that replicas should be empty unless the env
	// uses a user-managed replication policy with explicit regions
	Replicas      []*GCPSecretReplicationReplica `protobuf:"bytes,2,rep,name=replicas,proto3" json:"replicas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GCPSecretManagerConfig) Reset() {
	*x = GCPSecretManagerConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCPSecretManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPSecretManagerConfig) ProtoMessage() {}

func (x *GCPSecretManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPSecretManagerConfig.ProtoReflect.Descriptor instead.
func (*GCPSecretManagerConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{4}
}

func (x *GCPSecretManagerConfig) GetSecretRegion() string {
	if x != nil && x.SecretRegion != nil {
		return *x.SecretRegion
	}
	return ""
}

func (x *GCPSecretManagerConfig) GetReplicas() []*GCPSecretReplicationReplica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type GCPWorkloadIdentity struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GcpProjectNumber  string                 `protobuf:"bytes,1,opt,name=gcp_project_number,json=gcpProjectNumber,proto3" json:"gcp_project_number,omitempty"`
	GcpServiceAccount string                 `protobuf:"bytes,2,opt,name=gcp_service_account,json=gcpServiceAccount,proto3" json:"gcp_service_account,omitempty"`
	PoolId            string                 `protobuf:"bytes,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	ProviderId        string                 `protobuf:"bytes,4,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GCPWorkloadIdentity) Reset() {
	*x = GCPWorkloadIdentity{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCPWorkloadIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPWorkloadIdentity) ProtoMessage() {}

func (x *GCPWorkloadIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPWorkloadIdentity.ProtoReflect.Descriptor instead.
func (*GCPWorkloadIdentity) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{5}
}

func (x *GCPWorkloadIdentity) GetGcpProjectNumber() string {
	if x != nil {
		return x.GcpProjectNumber
	}
	return ""
}

func (x *GCPWorkloadIdentity) GetGcpServiceAccount() string {
	if x != nil {
		return x.GcpServiceAccount
	}
	return ""
}

func (x *GCPWorkloadIdentity) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *GCPWorkloadIdentity) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

type DockerBuildConfig struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Builder                     string                 `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	PushRegistryType            string                 `protobuf:"bytes,2,opt,name=push_registry_type,json=pushRegistryType,proto3" json:"push_registry_type,omitempty"`
	PushRegistryTagPrefix       string                 `protobuf:"bytes,3,opt,name=push_registry_tag_prefix,json=pushRegistryTagPrefix,proto3" json:"push_registry_tag_prefix,omitempty"`
	RegistryCredentialsSecretId string                 `protobuf:"bytes,4,opt,name=registry_credentials_secret_id,json=registryCredentialsSecretId,proto3" json:"registry_credentials_secret_id,omitempty"`
	NotificationTopic           string                 `protobuf:"bytes,5,opt,name=notification_topic,json=notificationTopic,proto3" json:"notification_topic,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *DockerBuildConfig) Reset() {
	*x = DockerBuildConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerBuildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerBuildConfig) ProtoMessage() {}

func (x *DockerBuildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerBuildConfig.ProtoReflect.Descriptor instead.
func (*DockerBuildConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{6}
}

func (x *DockerBuildConfig) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

func (x *DockerBuildConfig) GetPushRegistryType() string {
	if x != nil {
		return x.PushRegistryType
	}
	return ""
}

func (x *DockerBuildConfig) GetPushRegistryTagPrefix() string {
	if x != nil {
		return x.PushRegistryTagPrefix
	}
	return ""
}

func (x *DockerBuildConfig) GetRegistryCredentialsSecretId() string {
	if x != nil {
		return x.RegistryCredentialsSecretId
	}
	return ""
}

func (x *DockerBuildConfig) GetNotificationTopic() string {
	if x != nil {
		return x.NotificationTopic
	}
	return ""
}

type ElasticsearchLogConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Endpoint      string                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElasticsearchLogConfig) Reset() {
	*x = ElasticsearchLogConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElasticsearchLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticsearchLogConfig) ProtoMessage() {}

func (x *ElasticsearchLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticsearchLogConfig.ProtoReflect.Descriptor instead.
func (*ElasticsearchLogConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{7}
}

func (x *ElasticsearchLogConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ElasticsearchLogConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ElasticsearchLogConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type AWSCloudConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AccountId         string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ManagementRoleArn string                 `protobuf:"bytes,2,opt,name=management_role_arn,json=managementRoleArn,proto3" json:"management_role_arn,omitempty"`
	Region            string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	ExternalId        *string                `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/environment.proto.
	DeprecatedCloudWatchConfig *AWSCloudWatchConfig `protobuf:"bytes,5,opt,name=deprecated_cloud_watch_config,json=deprecatedCloudWatchConfig,proto3" json:"deprecated_cloud_watch_config,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/environment.proto.
	DeprecatedSecretManagerConfig *AWSSecretManagerConfig `protobuf:"bytes,6,opt,name=deprecated_secret_manager_config,json=deprecatedSecretManagerConfig,proto3" json:"deprecated_secret_manager_config,omitempty"`
	// Deprecated: Marked as deprecated in chalk/server/v1/environment.proto.
	WorkloadIdentity       *GCPWorkloadIdentity    `protobuf:"bytes,7,opt,name=workload_identity,json=workloadIdentity,proto3" json:"workload_identity,omitempty"`
	DockerBuildConfig      *DockerBuildConfig      `protobuf:"bytes,8,opt,name=docker_build_config,json=dockerBuildConfig,proto3" json:"docker_build_config,omitempty"`
	ElasticsearchLogConfig *ElasticsearchLogConfig `protobuf:"bytes,9,opt,name=elasticsearch_log_config,json=elasticsearchLogConfig,proto3" json:"elasticsearch_log_config,omitempty"`
	CloudwatchConfig       *AWSCloudWatchConfig    `protobuf:"bytes,10,opt,name=cloudwatch_config,json=cloudwatchConfig,proto3" json:"cloudwatch_config,omitempty"`
	SecretmanagerConfig    *AWSSecretManagerConfig `protobuf:"bytes,11,opt,name=secretmanager_config,json=secretmanagerConfig,proto3" json:"secretmanager_config,omitempty"`
	GcpWorkloadIdentity    *GCPWorkloadIdentity    `protobuf:"bytes,12,opt,name=gcp_workload_identity,json=gcpWorkloadIdentity,proto3" json:"gcp_workload_identity,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AWSCloudConfig) Reset() {
	*x = AWSCloudConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSCloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSCloudConfig) ProtoMessage() {}

func (x *AWSCloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSCloudConfig.ProtoReflect.Descriptor instead.
func (*AWSCloudConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{8}
}

func (x *AWSCloudConfig) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AWSCloudConfig) GetManagementRoleArn() string {
	if x != nil {
		return x.ManagementRoleArn
	}
	return ""
}

func (x *AWSCloudConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSCloudConfig) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/server/v1/environment.proto.
func (x *AWSCloudConfig) GetDeprecatedCloudWatchConfig() *AWSCloudWatchConfig {
	if x != nil {
		return x.DeprecatedCloudWatchConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/server/v1/environment.proto.
func (x *AWSCloudConfig) GetDeprecatedSecretManagerConfig() *AWSSecretManagerConfig {
	if x != nil {
		return x.DeprecatedSecretManagerConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/server/v1/environment.proto.
func (x *AWSCloudConfig) GetWorkloadIdentity() *GCPWorkloadIdentity {
	if x != nil {
		return x.WorkloadIdentity
	}
	return nil
}

func (x *AWSCloudConfig) GetDockerBuildConfig() *DockerBuildConfig {
	if x != nil {
		return x.DockerBuildConfig
	}
	return nil
}

func (x *AWSCloudConfig) GetElasticsearchLogConfig() *ElasticsearchLogConfig {
	if x != nil {
		return x.ElasticsearchLogConfig
	}
	return nil
}

func (x *AWSCloudConfig) GetCloudwatchConfig() *AWSCloudWatchConfig {
	if x != nil {
		return x.CloudwatchConfig
	}
	return nil
}

func (x *AWSCloudConfig) GetSecretmanagerConfig() *AWSSecretManagerConfig {
	if x != nil {
		return x.SecretmanagerConfig
	}
	return nil
}

func (x *AWSCloudConfig) GetGcpWorkloadIdentity() *GCPWorkloadIdentity {
	if x != nil {
		return x.GcpWorkloadIdentity
	}
	return nil
}

type GCPCloudConfig struct {
	state                    protoimpl.MessageState  `protogen:"open.v1"`
	ProjectId                string                  `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Region                   string                  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	ManagementServiceAccount *string                 `protobuf:"bytes,3,opt,name=management_service_account,json=managementServiceAccount,proto3,oneof" json:"management_service_account,omitempty"`
	DockerBuildConfig        *DockerBuildConfig      `protobuf:"bytes,4,opt,name=docker_build_config,json=dockerBuildConfig,proto3" json:"docker_build_config,omitempty"`
	SecretmanagerConfig      *GCPSecretManagerConfig `protobuf:"bytes,5,opt,name=secretmanager_config,json=secretmanagerConfig,proto3" json:"secretmanager_config,omitempty"`
	RegionConfig             *GCPRegionConfig        `protobuf:"bytes,6,opt,name=region_config,json=regionConfig,proto3" json:"region_config,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GCPCloudConfig) Reset() {
	*x = GCPCloudConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCPCloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPCloudConfig) ProtoMessage() {}

func (x *GCPCloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPCloudConfig.ProtoReflect.Descriptor instead.
func (*GCPCloudConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{9}
}

func (x *GCPCloudConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GCPCloudConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GCPCloudConfig) GetManagementServiceAccount() string {
	if x != nil && x.ManagementServiceAccount != nil {
		return *x.ManagementServiceAccount
	}
	return ""
}

func (x *GCPCloudConfig) GetDockerBuildConfig() *DockerBuildConfig {
	if x != nil {
		return x.DockerBuildConfig
	}
	return nil
}

func (x *GCPCloudConfig) GetSecretmanagerConfig() *GCPSecretManagerConfig {
	if x != nil {
		return x.SecretmanagerConfig
	}
	return nil
}

func (x *GCPCloudConfig) GetRegionConfig() *GCPRegionConfig {
	if x != nil {
		return x.RegionConfig
	}
	return nil
}

type CloudConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Config:
	//
	//	*CloudConfig_Aws
	//	*CloudConfig_Gcp
	Config        isCloudConfig_Config `protobuf_oneof:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudConfig) Reset() {
	*x = CloudConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConfig) ProtoMessage() {}

func (x *CloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConfig.ProtoReflect.Descriptor instead.
func (*CloudConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{10}
}

func (x *CloudConfig) GetConfig() isCloudConfig_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CloudConfig) GetAws() *AWSCloudConfig {
	if x != nil {
		if x, ok := x.Config.(*CloudConfig_Aws); ok {
			return x.Aws
		}
	}
	return nil
}

func (x *CloudConfig) GetGcp() *GCPCloudConfig {
	if x != nil {
		if x, ok := x.Config.(*CloudConfig_Gcp); ok {
			return x.Gcp
		}
	}
	return nil
}

type isCloudConfig_Config interface {
	isCloudConfig_Config()
}

type CloudConfig_Aws struct {
	Aws *AWSCloudConfig `protobuf:"bytes,1,opt,name=aws,proto3,oneof"`
}

type CloudConfig_Gcp struct {
	Gcp *GCPCloudConfig `protobuf:"bytes,2,opt,name=gcp,proto3,oneof"`
}

func (*CloudConfig_Aws) isCloudConfig_Config() {}

func (*CloudConfig_Gcp) isCloudConfig_Config() {}

type EnvironmentObjectStorageConfig struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DatasetBucket      string                 `protobuf:"bytes,1,opt,name=dataset_bucket,json=datasetBucket,proto3" json:"dataset_bucket,omitempty"`
	PlanStagesBucket   string                 `protobuf:"bytes,2,opt,name=plan_stages_bucket,json=planStagesBucket,proto3" json:"plan_stages_bucket,omitempty"`
	SourceBundleBucket string                 `protobuf:"bytes,3,opt,name=source_bundle_bucket,json=sourceBundleBucket,proto3" json:"source_bundle_bucket,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EnvironmentObjectStorageConfig) Reset() {
	*x = EnvironmentObjectStorageConfig{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentObjectStorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentObjectStorageConfig) ProtoMessage() {}

func (x *EnvironmentObjectStorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentObjectStorageConfig.ProtoReflect.Descriptor instead.
func (*EnvironmentObjectStorageConfig) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{11}
}

func (x *EnvironmentObjectStorageConfig) GetDatasetBucket() string {
	if x != nil {
		return x.DatasetBucket
	}
	return ""
}

func (x *EnvironmentObjectStorageConfig) GetPlanStagesBucket() string {
	if x != nil {
		return x.PlanStagesBucket
	}
	return ""
}

func (x *EnvironmentObjectStorageConfig) GetSourceBundleBucket() string {
	if x != nil {
		return x.SourceBundleBucket
	}
	return ""
}

type Environment struct {
	state                                    protoimpl.MessageState `protogen:"open.v1"`
	Name                                     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId                                string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id                                       string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	TeamId                                   string                 `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	ActiveDeploymentId                       *string                `protobuf:"bytes,5,opt,name=active_deployment_id,json=activeDeploymentId,proto3,oneof" json:"active_deployment_id,omitempty"`
	WorkerUrl                                *string                `protobuf:"bytes,6,opt,name=worker_url,json=workerUrl,proto3,oneof" json:"worker_url,omitempty"`
	ServiceUrl                               *string                `protobuf:"bytes,7,opt,name=service_url,json=serviceUrl,proto3,oneof" json:"service_url,omitempty"`
	BranchUrl                                *string                `protobuf:"bytes,8,opt,name=branch_url,json=branchUrl,proto3,oneof" json:"branch_url,omitempty"`
	OfflineStoreSecret                       *string                `protobuf:"bytes,9,opt,name=offline_store_secret,json=offlineStoreSecret,proto3,oneof" json:"offline_store_secret,omitempty"`
	OnlineStoreSecret                        *string                `protobuf:"bytes,10,opt,name=online_store_secret,json=onlineStoreSecret,proto3,oneof" json:"online_store_secret,omitempty"`
	FeatureStoreSecret                       *string                `protobuf:"bytes,11,opt,name=feature_store_secret,json=featureStoreSecret,proto3,oneof" json:"feature_store_secret,omitempty"`
	PostgresSecret                           *string                `protobuf:"bytes,12,opt,name=postgres_secret,json=postgresSecret,proto3,oneof" json:"postgres_secret,omitempty"`
	OnlineStoreKind                          *string                `protobuf:"bytes,13,opt,name=online_store_kind,json=onlineStoreKind,proto3,oneof" json:"online_store_kind,omitempty"`
	EmqUri                                   *string                `protobuf:"bytes,14,opt,name=emq_uri,json=emqUri,proto3,oneof" json:"emq_uri,omitempty"`
	VpcConnectorName                         *string                `protobuf:"bytes,15,opt,name=vpc_connector_name,json=vpcConnectorName,proto3,oneof" json:"vpc_connector_name,omitempty"`
	KubeClusterName                          *string                `protobuf:"bytes,16,opt,name=kube_cluster_name,json=kubeClusterName,proto3,oneof" json:"kube_cluster_name,omitempty"`
	BranchKubeClusterName                    *string                `protobuf:"bytes,17,opt,name=branch_kube_cluster_name,json=branchKubeClusterName,proto3,oneof" json:"branch_kube_cluster_name,omitempty"`
	EngineKubeClusterName                    *string                `protobuf:"bytes,18,opt,name=engine_kube_cluster_name,json=engineKubeClusterName,proto3,oneof" json:"engine_kube_cluster_name,omitempty"`
	ShadowEngineKubeClusterName              *string                `protobuf:"bytes,19,opt,name=shadow_engine_kube_cluster_name,json=shadowEngineKubeClusterName,proto3,oneof" json:"shadow_engine_kube_cluster_name,omitempty"`
	KubeJobNamespace                         *string                `protobuf:"bytes,20,opt,name=kube_job_namespace,json=kubeJobNamespace,proto3,oneof" json:"kube_job_namespace,omitempty"`
	KubePreviewNamespace                     *string                `protobuf:"bytes,21,opt,name=kube_preview_namespace,json=kubePreviewNamespace,proto3,oneof" json:"kube_preview_namespace,omitempty"`
	KubeServiceAccountName                   *string                `protobuf:"bytes,22,opt,name=kube_service_account_name,json=kubeServiceAccountName,proto3,oneof" json:"kube_service_account_name,omitempty"`
	StreamingQueryServiceUri                 *string                `protobuf:"bytes,23,opt,name=streaming_query_service_uri,json=streamingQueryServiceUri,proto3,oneof" json:"streaming_query_service_uri,omitempty"`
	SkipOfflineWritesForOnlineCachedFeatures bool                   `protobuf:"varint,24,opt,name=skip_offline_writes_for_online_cached_features,json=skipOfflineWritesForOnlineCachedFeatures,proto3" json:"skip_offline_writes_for_online_cached_features,omitempty"`
	ResultBusTopic                           *string                `protobuf:"bytes,25,opt,name=result_bus_topic,json=resultBusTopic,proto3,oneof" json:"result_bus_topic,omitempty"`
	OnlinePersistenceMode                    *string                `protobuf:"bytes,26,opt,name=online_persistence_mode,json=onlinePersistenceMode,proto3,oneof" json:"online_persistence_mode,omitempty"`
	MetricsBusTopic                          *string                `protobuf:"bytes,27,opt,name=metrics_bus_topic,json=metricsBusTopic,proto3,oneof" json:"metrics_bus_topic,omitempty"`
	BigtableInstanceName                     *string                `protobuf:"bytes,28,opt,name=bigtable_instance_name,json=bigtableInstanceName,proto3,oneof" json:"bigtable_instance_name,omitempty"`
	BigtableTableName                        *string                `protobuf:"bytes,29,opt,name=bigtable_table_name,json=bigtableTableName,proto3,oneof" json:"bigtable_table_name,omitempty"`
	CloudAccountLocator                      *string                `protobuf:"bytes,30,opt,name=cloud_account_locator,json=cloudAccountLocator,proto3,oneof" json:"cloud_account_locator,omitempty"`
	CloudRegion                              *string                `protobuf:"bytes,31,opt,name=cloud_region,json=cloudRegion,proto3,oneof" json:"cloud_region,omitempty"`
	CloudTenancyId                           *string                `protobuf:"bytes,32,opt,name=cloud_tenancy_id,json=cloudTenancyId,proto3,oneof" json:"cloud_tenancy_id,omitempty"`
	SourceBundleBucket                       *string                `protobuf:"bytes,33,opt,name=source_bundle_bucket,json=sourceBundleBucket,proto3,oneof" json:"source_bundle_bucket,omitempty"`
	EngineDockerRegistryPath                 *string                `protobuf:"bytes,34,opt,name=engine_docker_registry_path,json=engineDockerRegistryPath,proto3,oneof" json:"engine_docker_registry_path,omitempty"`
	DefaultPlanner                           *string                `protobuf:"bytes,35,opt,name=default_planner,json=defaultPlanner,proto3,oneof" json:"default_planner,omitempty"`
	AdditionalEnvVars                        map[string]string      `protobuf:"bytes,36,rep,name=additional_env_vars,json=additionalEnvVars,proto3" json:"additional_env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AdditionalCronEnvVars                    map[string]string      `protobuf:"bytes,37,rep,name=additional_cron_env_vars,json=additionalCronEnvVars,proto3" json:"additional_cron_env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PrivatePipRepositories                   *string                `protobuf:"bytes,38,opt,name=private_pip_repositories,json=privatePipRepositories,proto3,oneof" json:"private_pip_repositories,omitempty"`
	IsSandbox                                bool                   `protobuf:"varint,39,opt,name=is_sandbox,json=isSandbox,proto3" json:"is_sandbox,omitempty"`
	// AWS/GCP
	CloudProvider CloudProviderKind `protobuf:"varint,41,opt,name=cloud_provider,json=cloudProvider,proto3,enum=chalk.server.v1.CloudProviderKind" json:"cloud_provider,omitempty"`
	// Null if the environment is hosted by Chalk.
	CloudConfig *CloudConfig `protobuf:"bytes,42,opt,name=cloud_config,json=cloudConfig,proto3,oneof" json:"cloud_config,omitempty"`
	// TODO: really a structured object.
	SpecConfigJson                    map[string]*structpb.Value      `protobuf:"bytes,40,rep,name=spec_config_json,json=specConfigJson,proto3" json:"spec_config_json,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ArchivedAt                        *timestamppb.Timestamp          `protobuf:"bytes,43,opt,name=archived_at,json=archivedAt,proto3,oneof" json:"archived_at,omitempty"`
	MetadataServerMetricsStoreSecret  *string                         `protobuf:"bytes,44,opt,name=metadata_server_metrics_store_secret,json=metadataServerMetricsStoreSecret,proto3,oneof" json:"metadata_server_metrics_store_secret,omitempty"`
	QueryServerMetricsStoreSecret     *string                         `protobuf:"bytes,45,opt,name=query_server_metrics_store_secret,json=queryServerMetricsStoreSecret,proto3,oneof" json:"query_server_metrics_store_secret,omitempty"`
	PinnedBaseImage                   *string                         `protobuf:"bytes,46,opt,name=pinned_base_image,json=pinnedBaseImage,proto3,oneof" json:"pinned_base_image,omitempty"`
	ClusterGatewayId                  *string                         `protobuf:"bytes,47,opt,name=cluster_gateway_id,json=clusterGatewayId,proto3,oneof" json:"cluster_gateway_id,omitempty"`
	ClusterTimescaledbId              *string                         `protobuf:"bytes,48,opt,name=cluster_timescaledb_id,json=clusterTimescaledbId,proto3,oneof" json:"cluster_timescaledb_id,omitempty"`
	BackgroundPersistenceDeploymentId *string                         `protobuf:"bytes,49,opt,name=background_persistence_deployment_id,json=backgroundPersistenceDeploymentId,proto3,oneof" json:"background_persistence_deployment_id,omitempty"`
	EnvironmentBuckets                *EnvironmentObjectStorageConfig `protobuf:"bytes,50,opt,name=environment_buckets,json=environmentBuckets,proto3,oneof" json:"environment_buckets,omitempty"`
	ClusterTimescaledbSecret          *string                         `protobuf:"bytes,51,opt,name=cluster_timescaledb_secret,json=clusterTimescaledbSecret,proto3,oneof" json:"cluster_timescaledb_secret,omitempty"`
	GrpcEngineUrl                     *string                         `protobuf:"bytes,52,opt,name=grpc_engine_url,json=grpcEngineUrl,proto3,oneof" json:"grpc_engine_url,omitempty"`
	KubeClusterMode                   *string                         `protobuf:"bytes,53,opt,name=kube_cluster_mode,json=kubeClusterMode,proto3,oneof" json:"kube_cluster_mode,omitempty"`
	DashboardUrl                      *string                         `protobuf:"bytes,54,opt,name=dashboard_url,json=dashboardUrl,proto3,oneof" json:"dashboard_url,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Environment) Reset() {
	*x = Environment{}
	mi := &file_chalk_server_v1_environment_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_environment_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_environment_proto_rawDescGZIP(), []int{12}
}

func (x *Environment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Environment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Environment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Environment) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *Environment) GetActiveDeploymentId() string {
	if x != nil && x.ActiveDeploymentId != nil {
		return *x.ActiveDeploymentId
	}
	return ""
}

func (x *Environment) GetWorkerUrl() string {
	if x != nil && x.WorkerUrl != nil {
		return *x.WorkerUrl
	}
	return ""
}

func (x *Environment) GetServiceUrl() string {
	if x != nil && x.ServiceUrl != nil {
		return *x.ServiceUrl
	}
	return ""
}

func (x *Environment) GetBranchUrl() string {
	if x != nil && x.BranchUrl != nil {
		return *x.BranchUrl
	}
	return ""
}

func (x *Environment) GetOfflineStoreSecret() string {
	if x != nil && x.OfflineStoreSecret != nil {
		return *x.OfflineStoreSecret
	}
	return ""
}

func (x *Environment) GetOnlineStoreSecret() string {
	if x != nil && x.OnlineStoreSecret != nil {
		return *x.OnlineStoreSecret
	}
	return ""
}

func (x *Environment) GetFeatureStoreSecret() string {
	if x != nil && x.FeatureStoreSecret != nil {
		return *x.FeatureStoreSecret
	}
	return ""
}

func (x *Environment) GetPostgresSecret() string {
	if x != nil && x.PostgresSecret != nil {
		return *x.PostgresSecret
	}
	return ""
}

func (x *Environment) GetOnlineStoreKind() string {
	if x != nil && x.OnlineStoreKind != nil {
		return *x.OnlineStoreKind
	}
	return ""
}

func (x *Environment) GetEmqUri() string {
	if x != nil && x.EmqUri != nil {
		return *x.EmqUri
	}
	return ""
}

func (x *Environment) GetVpcConnectorName() string {
	if x != nil && x.VpcConnectorName != nil {
		return *x.VpcConnectorName
	}
	return ""
}

func (x *Environment) GetKubeClusterName() string {
	if x != nil && x.KubeClusterName != nil {
		return *x.KubeClusterName
	}
	return ""
}

func (x *Environment) GetBranchKubeClusterName() string {
	if x != nil && x.BranchKubeClusterName != nil {
		return *x.BranchKubeClusterName
	}
	return ""
}

func (x *Environment) GetEngineKubeClusterName() string {
	if x != nil && x.EngineKubeClusterName != nil {
		return *x.EngineKubeClusterName
	}
	return ""
}

func (x *Environment) GetShadowEngineKubeClusterName() string {
	if x != nil && x.ShadowEngineKubeClusterName != nil {
		return *x.ShadowEngineKubeClusterName
	}
	return ""
}

func (x *Environment) GetKubeJobNamespace() string {
	if x != nil && x.KubeJobNamespace != nil {
		return *x.KubeJobNamespace
	}
	return ""
}

func (x *Environment) GetKubePreviewNamespace() string {
	if x != nil && x.KubePreviewNamespace != nil {
		return *x.KubePreviewNamespace
	}
	return ""
}

func (x *Environment) GetKubeServiceAccountName() string {
	if x != nil && x.KubeServiceAccountName != nil {
		return *x.KubeServiceAccountName
	}
	return ""
}

func (x *Environment) GetStreamingQueryServiceUri() string {
	if x != nil && x.StreamingQueryServiceUri != nil {
		return *x.StreamingQueryServiceUri
	}
	return ""
}

func (x *Environment) GetSkipOfflineWritesForOnlineCachedFeatures() bool {
	if x != nil {
		return x.SkipOfflineWritesForOnlineCachedFeatures
	}
	return false
}

func (x *Environment) GetResultBusTopic() string {
	if x != nil && x.ResultBusTopic != nil {
		return *x.ResultBusTopic
	}
	return ""
}

func (x *Environment) GetOnlinePersistenceMode() string {
	if x != nil && x.OnlinePersistenceMode != nil {
		return *x.OnlinePersistenceMode
	}
	return ""
}

func (x *Environment) GetMetricsBusTopic() string {
	if x != nil && x.MetricsBusTopic != nil {
		return *x.MetricsBusTopic
	}
	return ""
}

func (x *Environment) GetBigtableInstanceName() string {
	if x != nil && x.BigtableInstanceName != nil {
		return *x.BigtableInstanceName
	}
	return ""
}

func (x *Environment) GetBigtableTableName() string {
	if x != nil && x.BigtableTableName != nil {
		return *x.BigtableTableName
	}
	return ""
}

func (x *Environment) GetCloudAccountLocator() string {
	if x != nil && x.CloudAccountLocator != nil {
		return *x.CloudAccountLocator
	}
	return ""
}

func (x *Environment) GetCloudRegion() string {
	if x != nil && x.CloudRegion != nil {
		return *x.CloudRegion
	}
	return ""
}

func (x *Environment) GetCloudTenancyId() string {
	if x != nil && x.CloudTenancyId != nil {
		return *x.CloudTenancyId
	}
	return ""
}

func (x *Environment) GetSourceBundleBucket() string {
	if x != nil && x.SourceBundleBucket != nil {
		return *x.SourceBundleBucket
	}
	return ""
}

func (x *Environment) GetEngineDockerRegistryPath() string {
	if x != nil && x.EngineDockerRegistryPath != nil {
		return *x.EngineDockerRegistryPath
	}
	return ""
}

func (x *Environment) GetDefaultPlanner() string {
	if x != nil && x.DefaultPlanner != nil {
		return *x.DefaultPlanner
	}
	return ""
}

func (x *Environment) GetAdditionalEnvVars() map[string]string {
	if x != nil {
		return x.AdditionalEnvVars
	}
	return nil
}

func (x *Environment) GetAdditionalCronEnvVars() map[string]string {
	if x != nil {
		return x.AdditionalCronEnvVars
	}
	return nil
}

func (x *Environment) GetPrivatePipRepositories() string {
	if x != nil && x.PrivatePipRepositories != nil {
		return *x.PrivatePipRepositories
	}
	return ""
}

func (x *Environment) GetIsSandbox() bool {
	if x != nil {
		return x.IsSandbox
	}
	return false
}

func (x *Environment) GetCloudProvider() CloudProviderKind {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProviderKind_CLOUD_PROVIDER_KIND_UNSPECIFIED
}

func (x *Environment) GetCloudConfig() *CloudConfig {
	if x != nil {
		return x.CloudConfig
	}
	return nil
}

func (x *Environment) GetSpecConfigJson() map[string]*structpb.Value {
	if x != nil {
		return x.SpecConfigJson
	}
	return nil
}

func (x *Environment) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Environment) GetMetadataServerMetricsStoreSecret() string {
	if x != nil && x.MetadataServerMetricsStoreSecret != nil {
		return *x.MetadataServerMetricsStoreSecret
	}
	return ""
}

func (x *Environment) GetQueryServerMetricsStoreSecret() string {
	if x != nil && x.QueryServerMetricsStoreSecret != nil {
		return *x.QueryServerMetricsStoreSecret
	}
	return ""
}

func (x *Environment) GetPinnedBaseImage() string {
	if x != nil && x.PinnedBaseImage != nil {
		return *x.PinnedBaseImage
	}
	return ""
}

func (x *Environment) GetClusterGatewayId() string {
	if x != nil && x.ClusterGatewayId != nil {
		return *x.ClusterGatewayId
	}
	return ""
}

func (x *Environment) GetClusterTimescaledbId() string {
	if x != nil && x.ClusterTimescaledbId != nil {
		return *x.ClusterTimescaledbId
	}
	return ""
}

func (x *Environment) GetBackgroundPersistenceDeploymentId() string {
	if x != nil && x.BackgroundPersistenceDeploymentId != nil {
		return *x.BackgroundPersistenceDeploymentId
	}
	return ""
}

func (x *Environment) GetEnvironmentBuckets() *EnvironmentObjectStorageConfig {
	if x != nil {
		return x.EnvironmentBuckets
	}
	return nil
}

func (x *Environment) GetClusterTimescaledbSecret() string {
	if x != nil && x.ClusterTimescaledbSecret != nil {
		return *x.ClusterTimescaledbSecret
	}
	return ""
}

func (x *Environment) GetGrpcEngineUrl() string {
	if x != nil && x.GrpcEngineUrl != nil {
		return *x.GrpcEngineUrl
	}
	return ""
}

func (x *Environment) GetKubeClusterMode() string {
	if x != nil && x.KubeClusterMode != nil {
		return *x.KubeClusterMode
	}
	return ""
}

func (x *Environment) GetDashboardUrl() string {
	if x != nil && x.DashboardUrl != nil {
		return *x.DashboardUrl
	}
	return ""
}

var File_chalk_server_v1_environment_proto protoreflect.FileDescriptor

const file_chalk_server_v1_environment_proto_rawDesc = "" +
	"\n" +
	"!chalk/server/v1/environment.proto\x12\x0fchalk.server.v1\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"{\n" +
	"\x13AWSCloudWatchConfig\x12)\n" +
	"\x0elog_group_path\x18\x01 \x01(\tH\x00R\flogGroupPath\x88\x01\x01\x12&\n" +
	"\x0flog_group_paths\x18\x02 \x03(\tR\rlogGroupPathsB\x11\n" +
	"\x0f_log_group_path\"\xab\x02\n" +
	"\x16AWSSecretManagerConfig\x12)\n" +
	"\x0esecret_kms_arn\x18\x01 \x01(\tH\x00R\fsecretKmsArn\x88\x01\x01\x12X\n" +
	"\vsecret_tags\x18\x02 \x03(\v27.chalk.server.v1.AWSSecretManagerConfig.SecretTagsEntryR\n" +
	"secretTags\x12(\n" +
	"\rsecret_prefix\x18\x03 \x01(\tH\x01R\fsecretPrefix\x88\x01\x01\x1a=\n" +
	"\x0fSecretTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x11\n" +
	"\x0f_secret_kms_arnB\x10\n" +
	"\x0e_secret_prefix\"9\n" +
	"\x1bGCPSecretReplicationReplica\x12\x1a\n" +
	"\blocation\x18\x01 \x01(\tR\blocation\"D\n" +
	"\x0fGCPRegionConfig\x12\"\n" +
	"\n" +
	"scope_type\x18\x01 \x01(\tH\x00R\tscopeType\x88\x01\x01B\r\n" +
	"\v_scope_type\"\x9e\x01\n" +
	"\x16GCPSecretManagerConfig\x12(\n" +
	"\rsecret_region\x18\x01 \x01(\tH\x00R\fsecretRegion\x88\x01\x01\x12H\n" +
	"\breplicas\x18\x02 \x03(\v2,.chalk.server.v1.GCPSecretReplicationReplicaR\breplicasB\x10\n" +
	"\x0e_secret_region\"\xad\x01\n" +
	"\x13GCPWorkloadIdentity\x12,\n" +
	"\x12gcp_project_number\x18\x01 \x01(\tR\x10gcpProjectNumber\x12.\n" +
	"\x13gcp_service_account\x18\x02 \x01(\tR\x11gcpServiceAccount\x12\x17\n" +
	"\apool_id\x18\x03 \x01(\tR\x06poolId\x12\x1f\n" +
	"\vprovider_id\x18\x04 \x01(\tR\n" +
	"providerId\"\x88\x02\n" +
	"\x11DockerBuildConfig\x12\x18\n" +
	"\abuilder\x18\x01 \x01(\tR\abuilder\x12,\n" +
	"\x12push_registry_type\x18\x02 \x01(\tR\x10pushRegistryType\x127\n" +
	"\x18push_registry_tag_prefix\x18\x03 \x01(\tR\x15pushRegistryTagPrefix\x12C\n" +
	"\x1eregistry_credentials_secret_id\x18\x04 \x01(\tR\x1bregistryCredentialsSecretId\x12-\n" +
	"\x12notification_topic\x18\x05 \x01(\tR\x11notificationTopic\"l\n" +
	"\x16ElasticsearchLogConfig\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x1a\n" +
	"\bendpoint\x18\x03 \x01(\tR\bendpoint\"\xa7\a\n" +
	"\x0eAWSCloudConfig\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12.\n" +
	"\x13management_role_arn\x18\x02 \x01(\tR\x11managementRoleArn\x12\x16\n" +
	"\x06region\x18\x03 \x01(\tR\x06region\x12$\n" +
	"\vexternal_id\x18\x04 \x01(\tH\x00R\n" +
	"externalId\x88\x01\x01\x12k\n" +
	"\x1ddeprecated_cloud_watch_config\x18\x05 \x01(\v2$.chalk.server.v1.AWSCloudWatchConfigB\x02\x18\x01R\x1adeprecatedCloudWatchConfig\x12t\n" +
	" deprecated_secret_manager_config\x18\x06 \x01(\v2'.chalk.server.v1.AWSSecretManagerConfigB\x02\x18\x01R\x1ddeprecatedSecretManagerConfig\x12U\n" +
	"\x11workload_identity\x18\a \x01(\v2$.chalk.server.v1.GCPWorkloadIdentityB\x02\x18\x01R\x10workloadIdentity\x12R\n" +
	"\x13docker_build_config\x18\b \x01(\v2\".chalk.server.v1.DockerBuildConfigR\x11dockerBuildConfig\x12a\n" +
	"\x18elasticsearch_log_config\x18\t \x01(\v2'.chalk.server.v1.ElasticsearchLogConfigR\x16elasticsearchLogConfig\x12Q\n" +
	"\x11cloudwatch_config\x18\n" +
	" \x01(\v2$.chalk.server.v1.AWSCloudWatchConfigR\x10cloudwatchConfig\x12Z\n" +
	"\x14secretmanager_config\x18\v \x01(\v2'.chalk.server.v1.AWSSecretManagerConfigR\x13secretmanagerConfig\x12X\n" +
	"\x15gcp_workload_identity\x18\f \x01(\v2$.chalk.server.v1.GCPWorkloadIdentityR\x13gcpWorkloadIdentityB\x0e\n" +
	"\f_external_id\"\xa0\x03\n" +
	"\x0eGCPCloudConfig\x12\x1d\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tR\tprojectId\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\x12A\n" +
	"\x1amanagement_service_account\x18\x03 \x01(\tH\x00R\x18managementServiceAccount\x88\x01\x01\x12R\n" +
	"\x13docker_build_config\x18\x04 \x01(\v2\".chalk.server.v1.DockerBuildConfigR\x11dockerBuildConfig\x12Z\n" +
	"\x14secretmanager_config\x18\x05 \x01(\v2'.chalk.server.v1.GCPSecretManagerConfigR\x13secretmanagerConfig\x12E\n" +
	"\rregion_config\x18\x06 \x01(\v2 .chalk.server.v1.GCPRegionConfigR\fregionConfigB\x1d\n" +
	"\x1b_management_service_account\"\x81\x01\n" +
	"\vCloudConfig\x123\n" +
	"\x03aws\x18\x01 \x01(\v2\x1f.chalk.server.v1.AWSCloudConfigH\x00R\x03aws\x123\n" +
	"\x03gcp\x18\x02 \x01(\v2\x1f.chalk.server.v1.GCPCloudConfigH\x00R\x03gcpB\b\n" +
	"\x06config\"\xa7\x01\n" +
	"\x1eEnvironmentObjectStorageConfig\x12%\n" +
	"\x0edataset_bucket\x18\x01 \x01(\tR\rdatasetBucket\x12,\n" +
	"\x12plan_stages_bucket\x18\x02 \x01(\tR\x10planStagesBucket\x120\n" +
	"\x14source_bundle_bucket\x18\x03 \x01(\tR\x12sourceBundleBucket\"\xc7\"\n" +
	"\vEnvironment\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\x12\x17\n" +
	"\ateam_id\x18\x04 \x01(\tR\x06teamId\x125\n" +
	"\x14active_deployment_id\x18\x05 \x01(\tH\x00R\x12activeDeploymentId\x88\x01\x01\x12\"\n" +
	"\n" +
	"worker_url\x18\x06 \x01(\tH\x01R\tworkerUrl\x88\x01\x01\x12$\n" +
	"\vservice_url\x18\a \x01(\tH\x02R\n" +
	"serviceUrl\x88\x01\x01\x12\"\n" +
	"\n" +
	"branch_url\x18\b \x01(\tH\x03R\tbranchUrl\x88\x01\x01\x125\n" +
	"\x14offline_store_secret\x18\t \x01(\tH\x04R\x12offlineStoreSecret\x88\x01\x01\x123\n" +
	"\x13online_store_secret\x18\n" +
	" \x01(\tH\x05R\x11onlineStoreSecret\x88\x01\x01\x125\n" +
	"\x14feature_store_secret\x18\v \x01(\tH\x06R\x12featureStoreSecret\x88\x01\x01\x12,\n" +
	"\x0fpostgres_secret\x18\f \x01(\tH\aR\x0epostgresSecret\x88\x01\x01\x12/\n" +
	"\x11online_store_kind\x18\r \x01(\tH\bR\x0fonlineStoreKind\x88\x01\x01\x12\x1c\n" +
	"\aemq_uri\x18\x0e \x01(\tH\tR\x06emqUri\x88\x01\x01\x121\n" +
	"\x12vpc_connector_name\x18\x0f \x01(\tH\n" +
	"R\x10vpcConnectorName\x88\x01\x01\x12/\n" +
	"\x11kube_cluster_name\x18\x10 \x01(\tH\vR\x0fkubeClusterName\x88\x01\x01\x12<\n" +
	"\x18branch_kube_cluster_name\x18\x11 \x01(\tH\fR\x15branchKubeClusterName\x88\x01\x01\x12<\n" +
	"\x18engine_kube_cluster_name\x18\x12 \x01(\tH\rR\x15engineKubeClusterName\x88\x01\x01\x12I\n" +
	"\x1fshadow_engine_kube_cluster_name\x18\x13 \x01(\tH\x0eR\x1bshadowEngineKubeClusterName\x88\x01\x01\x121\n" +
	"\x12kube_job_namespace\x18\x14 \x01(\tH\x0fR\x10kubeJobNamespace\x88\x01\x01\x129\n" +
	"\x16kube_preview_namespace\x18\x15 \x01(\tH\x10R\x14kubePreviewNamespace\x88\x01\x01\x12>\n" +
	"\x19kube_service_account_name\x18\x16 \x01(\tH\x11R\x16kubeServiceAccountName\x88\x01\x01\x12B\n" +
	"\x1bstreaming_query_service_uri\x18\x17 \x01(\tH\x12R\x18streamingQueryServiceUri\x88\x01\x01\x12`\n" +
	".skip_offline_writes_for_online_cached_features\x18\x18 \x01(\bR(skipOfflineWritesForOnlineCachedFeatures\x12-\n" +
	"\x10result_bus_topic\x18\x19 \x01(\tH\x13R\x0eresultBusTopic\x88\x01\x01\x12;\n" +
	"\x17online_persistence_mode\x18\x1a \x01(\tH\x14R\x15onlinePersistenceMode\x88\x01\x01\x12/\n" +
	"\x11metrics_bus_topic\x18\x1b \x01(\tH\x15R\x0fmetricsBusTopic\x88\x01\x01\x129\n" +
	"\x16bigtable_instance_name\x18\x1c \x01(\tH\x16R\x14bigtableInstanceName\x88\x01\x01\x123\n" +
	"\x13bigtable_table_name\x18\x1d \x01(\tH\x17R\x11bigtableTableName\x88\x01\x01\x127\n" +
	"\x15cloud_account_locator\x18\x1e \x01(\tH\x18R\x13cloudAccountLocator\x88\x01\x01\x12&\n" +
	"\fcloud_region\x18\x1f \x01(\tH\x19R\vcloudRegion\x88\x01\x01\x12-\n" +
	"\x10cloud_tenancy_id\x18  \x01(\tH\x1aR\x0ecloudTenancyId\x88\x01\x01\x125\n" +
	"\x14source_bundle_bucket\x18! \x01(\tH\x1bR\x12sourceBundleBucket\x88\x01\x01\x12B\n" +
	"\x1bengine_docker_registry_path\x18\" \x01(\tH\x1cR\x18engineDockerRegistryPath\x88\x01\x01\x12,\n" +
	"\x0fdefault_planner\x18# \x01(\tH\x1dR\x0edefaultPlanner\x88\x01\x01\x12c\n" +
	"\x13additional_env_vars\x18$ \x03(\v23.chalk.server.v1.Environment.AdditionalEnvVarsEntryR\x11additionalEnvVars\x12p\n" +
	"\x18additional_cron_env_vars\x18% \x03(\v27.chalk.server.v1.Environment.AdditionalCronEnvVarsEntryR\x15additionalCronEnvVars\x12=\n" +
	"\x18private_pip_repositories\x18& \x01(\tH\x1eR\x16privatePipRepositories\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"is_sandbox\x18' \x01(\bR\tisSandbox\x12I\n" +
	"\x0ecloud_provider\x18) \x01(\x0e2\".chalk.server.v1.CloudProviderKindR\rcloudProvider\x12D\n" +
	"\fcloud_config\x18* \x01(\v2\x1c.chalk.server.v1.CloudConfigH\x1fR\vcloudConfig\x88\x01\x01\x12Z\n" +
	"\x10spec_config_json\x18( \x03(\v20.chalk.server.v1.Environment.SpecConfigJsonEntryR\x0especConfigJson\x12@\n" +
	"\varchived_at\x18+ \x01(\v2\x1a.google.protobuf.TimestampH R\n" +
	"archivedAt\x88\x01\x01\x12S\n" +
	"$metadata_server_metrics_store_secret\x18, \x01(\tH!R metadataServerMetricsStoreSecret\x88\x01\x01\x12M\n" +
	"!query_server_metrics_store_secret\x18- \x01(\tH\"R\x1dqueryServerMetricsStoreSecret\x88\x01\x01\x12/\n" +
	"\x11pinned_base_image\x18. \x01(\tH#R\x0fpinnedBaseImage\x88\x01\x01\x121\n" +
	"\x12cluster_gateway_id\x18/ \x01(\tH$R\x10clusterGatewayId\x88\x01\x01\x129\n" +
	"\x16cluster_timescaledb_id\x180 \x01(\tH%R\x14clusterTimescaledbId\x88\x01\x01\x12T\n" +
	"$background_persistence_deployment_id\x181 \x01(\tH&R!backgroundPersistenceDeploymentId\x88\x01\x01\x12e\n" +
	"\x13environment_buckets\x182 \x01(\v2/.chalk.server.v1.EnvironmentObjectStorageConfigH'R\x12environmentBuckets\x88\x01\x01\x12A\n" +
	"\x1acluster_timescaledb_secret\x183 \x01(\tH(R\x18clusterTimescaledbSecret\x88\x01\x01\x12+\n" +
	"\x0fgrpc_engine_url\x184 \x01(\tH)R\rgrpcEngineUrl\x88\x01\x01\x12/\n" +
	"\x11kube_cluster_mode\x185 \x01(\tH*R\x0fkubeClusterMode\x88\x01\x01\x12(\n" +
	"\rdashboard_url\x186 \x01(\tH+R\fdashboardUrl\x88\x01\x01\x1aD\n" +
	"\x16AdditionalEnvVarsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aH\n" +
	"\x1aAdditionalCronEnvVarsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aY\n" +
	"\x13SpecConfigJsonEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01B\x17\n" +
	"\x15_active_deployment_idB\r\n" +
	"\v_worker_urlB\x0e\n" +
	"\f_service_urlB\r\n" +
	"\v_branch_urlB\x17\n" +
	"\x15_offline_store_secretB\x16\n" +
	"\x14_online_store_secretB\x17\n" +
	"\x15_feature_store_secretB\x12\n" +
	"\x10_postgres_secretB\x14\n" +
	"\x12_online_store_kindB\n" +
	"\n" +
	"\b_emq_uriB\x15\n" +
	"\x13_vpc_connector_nameB\x14\n" +
	"\x12_kube_cluster_nameB\x1b\n" +
	"\x19_branch_kube_cluster_nameB\x1b\n" +
	"\x19_engine_kube_cluster_nameB\"\n" +
	" _shadow_engine_kube_cluster_nameB\x15\n" +
	"\x13_kube_job_namespaceB\x19\n" +
	"\x17_kube_preview_namespaceB\x1c\n" +
	"\x1a_kube_service_account_nameB\x1e\n" +
	"\x1c_streaming_query_service_uriB\x13\n" +
	"\x11_result_bus_topicB\x1a\n" +
	"\x18_online_persistence_modeB\x14\n" +
	"\x12_metrics_bus_topicB\x19\n" +
	"\x17_bigtable_instance_nameB\x16\n" +
	"\x14_bigtable_table_nameB\x18\n" +
	"\x16_cloud_account_locatorB\x0f\n" +
	"\r_cloud_regionB\x13\n" +
	"\x11_cloud_tenancy_idB\x17\n" +
	"\x15_source_bundle_bucketB\x1e\n" +
	"\x1c_engine_docker_registry_pathB\x12\n" +
	"\x10_default_plannerB\x1b\n" +
	"\x19_private_pip_repositoriesB\x0f\n" +
	"\r_cloud_configB\x0e\n" +
	"\f_archived_atB'\n" +
	"%_metadata_server_metrics_store_secretB$\n" +
	"\"_query_server_metrics_store_secretB\x14\n" +
	"\x12_pinned_base_imageB\x15\n" +
	"\x13_cluster_gateway_idB\x19\n" +
	"\x17_cluster_timescaledb_idB'\n" +
	"%_background_persistence_deployment_idB\x16\n" +
	"\x14_environment_bucketsB\x1d\n" +
	"\x1b_cluster_timescaledb_secretB\x12\n" +
	"\x10_grpc_engine_urlB\x14\n" +
	"\x12_kube_cluster_modeB\x10\n" +
	"\x0e_dashboard_url*\x93\x01\n" +
	"\x11CloudProviderKind\x12#\n" +
	"\x1fCLOUD_PROVIDER_KIND_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bCLOUD_PROVIDER_KIND_UNKNOWN\x10\x01\x12\x1b\n" +
	"\x17CLOUD_PROVIDER_KIND_GCP\x10\x02\x12\x1b\n" +
	"\x17CLOUD_PROVIDER_KIND_AWS\x10\x03B\xc0\x01\n" +
	"\x13com.chalk.server.v1B\x10EnvironmentProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/server/v1;serverv1\xa2\x02\x03CSX\xaa\x02\x0fChalk.Server.V1\xca\x02\x0fChalk\\Server\\V1\xe2\x02\x1bChalk\\Server\\V1\\GPBMetadata\xea\x02\x11Chalk::Server::V1b\x06proto3"

var (
	file_chalk_server_v1_environment_proto_rawDescOnce sync.Once
	file_chalk_server_v1_environment_proto_rawDescData []byte
)

func file_chalk_server_v1_environment_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_environment_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_environment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_server_v1_environment_proto_rawDesc), len(file_chalk_server_v1_environment_proto_rawDesc)))
	})
	return file_chalk_server_v1_environment_proto_rawDescData
}

var file_chalk_server_v1_environment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_server_v1_environment_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_chalk_server_v1_environment_proto_goTypes = []any{
	(CloudProviderKind)(0),                 // 0: chalk.server.v1.CloudProviderKind
	(*AWSCloudWatchConfig)(nil),            // 1: chalk.server.v1.AWSCloudWatchConfig
	(*AWSSecretManagerConfig)(nil),         // 2: chalk.server.v1.AWSSecretManagerConfig
	(*GCPSecretReplicationReplica)(nil),    // 3: chalk.server.v1.GCPSecretReplicationReplica
	(*GCPRegionConfig)(nil),                // 4: chalk.server.v1.GCPRegionConfig
	(*GCPSecretManagerConfig)(nil),         // 5: chalk.server.v1.GCPSecretManagerConfig
	(*GCPWorkloadIdentity)(nil),            // 6: chalk.server.v1.GCPWorkloadIdentity
	(*DockerBuildConfig)(nil),              // 7: chalk.server.v1.DockerBuildConfig
	(*ElasticsearchLogConfig)(nil),         // 8: chalk.server.v1.ElasticsearchLogConfig
	(*AWSCloudConfig)(nil),                 // 9: chalk.server.v1.AWSCloudConfig
	(*GCPCloudConfig)(nil),                 // 10: chalk.server.v1.GCPCloudConfig
	(*CloudConfig)(nil),                    // 11: chalk.server.v1.CloudConfig
	(*EnvironmentObjectStorageConfig)(nil), // 12: chalk.server.v1.EnvironmentObjectStorageConfig
	(*Environment)(nil),                    // 13: chalk.server.v1.Environment
	nil,                                    // 14: chalk.server.v1.AWSSecretManagerConfig.SecretTagsEntry
	nil,                                    // 15: chalk.server.v1.Environment.AdditionalEnvVarsEntry
	nil,                                    // 16: chalk.server.v1.Environment.AdditionalCronEnvVarsEntry
	nil,                                    // 17: chalk.server.v1.Environment.SpecConfigJsonEntry
	(*timestamppb.Timestamp)(nil),          // 18: google.protobuf.Timestamp
	(*structpb.Value)(nil),                 // 19: google.protobuf.Value
}
var file_chalk_server_v1_environment_proto_depIdxs = []int32{
	14, // 0: chalk.server.v1.AWSSecretManagerConfig.secret_tags:type_name -> chalk.server.v1.AWSSecretManagerConfig.SecretTagsEntry
	3,  // 1: chalk.server.v1.GCPSecretManagerConfig.replicas:type_name -> chalk.server.v1.GCPSecretReplicationReplica
	1,  // 2: chalk.server.v1.AWSCloudConfig.deprecated_cloud_watch_config:type_name -> chalk.server.v1.AWSCloudWatchConfig
	2,  // 3: chalk.server.v1.AWSCloudConfig.deprecated_secret_manager_config:type_name -> chalk.server.v1.AWSSecretManagerConfig
	6,  // 4: chalk.server.v1.AWSCloudConfig.workload_identity:type_name -> chalk.server.v1.GCPWorkloadIdentity
	7,  // 5: chalk.server.v1.AWSCloudConfig.docker_build_config:type_name -> chalk.server.v1.DockerBuildConfig
	8,  // 6: chalk.server.v1.AWSCloudConfig.elasticsearch_log_config:type_name -> chalk.server.v1.ElasticsearchLogConfig
	1,  // 7: chalk.server.v1.AWSCloudConfig.cloudwatch_config:type_name -> chalk.server.v1.AWSCloudWatchConfig
	2,  // 8: chalk.server.v1.AWSCloudConfig.secretmanager_config:type_name -> chalk.server.v1.AWSSecretManagerConfig
	6,  // 9: chalk.server.v1.AWSCloudConfig.gcp_workload_identity:type_name -> chalk.server.v1.GCPWorkloadIdentity
	7,  // 10: chalk.server.v1.GCPCloudConfig.docker_build_config:type_name -> chalk.server.v1.DockerBuildConfig
	5,  // 11: chalk.server.v1.GCPCloudConfig.secretmanager_config:type_name -> chalk.server.v1.GCPSecretManagerConfig
	4,  // 12: chalk.server.v1.GCPCloudConfig.region_config:type_name -> chalk.server.v1.GCPRegionConfig
	9,  // 13: chalk.server.v1.CloudConfig.aws:type_name -> chalk.server.v1.AWSCloudConfig
	10, // 14: chalk.server.v1.CloudConfig.gcp:type_name -> chalk.server.v1.GCPCloudConfig
	15, // 15: chalk.server.v1.Environment.additional_env_vars:type_name -> chalk.server.v1.Environment.AdditionalEnvVarsEntry
	16, // 16: chalk.server.v1.Environment.additional_cron_env_vars:type_name -> chalk.server.v1.Environment.AdditionalCronEnvVarsEntry
	0,  // 17: chalk.server.v1.Environment.cloud_provider:type_name -> chalk.server.v1.CloudProviderKind
	11, // 18: chalk.server.v1.Environment.cloud_config:type_name -> chalk.server.v1.CloudConfig
	17, // 19: chalk.server.v1.Environment.spec_config_json:type_name -> chalk.server.v1.Environment.SpecConfigJsonEntry
	18, // 20: chalk.server.v1.Environment.archived_at:type_name -> google.protobuf.Timestamp
	12, // 21: chalk.server.v1.Environment.environment_buckets:type_name -> chalk.server.v1.EnvironmentObjectStorageConfig
	19, // 22: chalk.server.v1.Environment.SpecConfigJsonEntry.value:type_name -> google.protobuf.Value
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_environment_proto_init() }
func file_chalk_server_v1_environment_proto_init() {
	if File_chalk_server_v1_environment_proto != nil {
		return
	}
	file_chalk_server_v1_environment_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[8].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[9].OneofWrappers = []any{}
	file_chalk_server_v1_environment_proto_msgTypes[10].OneofWrappers = []any{
		(*CloudConfig_Aws)(nil),
		(*CloudConfig_Gcp)(nil),
	}
	file_chalk_server_v1_environment_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_server_v1_environment_proto_rawDesc), len(file_chalk_server_v1_environment_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_environment_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_environment_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_environment_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_environment_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_environment_proto = out.File
	file_chalk_server_v1_environment_proto_goTypes = nil
	file_chalk_server_v1_environment_proto_depIdxs = nil
}
