// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/server/v1/team.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeamService_GetEnv_FullMethodName                   = "/chalk.server.v1.TeamService/GetEnv"
	TeamService_GetEnvironments_FullMethodName          = "/chalk.server.v1.TeamService/GetEnvironments"
	TeamService_GetAgent_FullMethodName                 = "/chalk.server.v1.TeamService/GetAgent"
	TeamService_GetDisplayAgent_FullMethodName          = "/chalk.server.v1.TeamService/GetDisplayAgent"
	TeamService_GetTeam_FullMethodName                  = "/chalk.server.v1.TeamService/GetTeam"
	TeamService_CreateTeam_FullMethodName               = "/chalk.server.v1.TeamService/CreateTeam"
	TeamService_CreateProject_FullMethodName            = "/chalk.server.v1.TeamService/CreateProject"
	TeamService_CreateEnvironment_FullMethodName        = "/chalk.server.v1.TeamService/CreateEnvironment"
	TeamService_GetAvailablePermissions_FullMethodName  = "/chalk.server.v1.TeamService/GetAvailablePermissions"
	TeamService_CreateServiceToken_FullMethodName       = "/chalk.server.v1.TeamService/CreateServiceToken"
	TeamService_DeleteServiceToken_FullMethodName       = "/chalk.server.v1.TeamService/DeleteServiceToken"
	TeamService_ListServiceTokens_FullMethodName        = "/chalk.server.v1.TeamService/ListServiceTokens"
	TeamService_UpdateServiceToken_FullMethodName       = "/chalk.server.v1.TeamService/UpdateServiceToken"
	TeamService_InviteTeamMember_FullMethodName         = "/chalk.server.v1.TeamService/InviteTeamMember"
	TeamService_ExpireTeamInvite_FullMethodName         = "/chalk.server.v1.TeamService/ExpireTeamInvite"
	TeamService_ListTeamInvites_FullMethodName          = "/chalk.server.v1.TeamService/ListTeamInvites"
	TeamService_UpsertFeaturePermissions_FullMethodName = "/chalk.server.v1.TeamService/UpsertFeaturePermissions"
	TeamService_UpdateScimGroupSettings_FullMethodName  = "/chalk.server.v1.TeamService/UpdateScimGroupSettings"
)

// TeamServiceClient is the client API for TeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamServiceClient interface {
	GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*GetEnvResponse, error)
	GetEnvironments(ctx context.Context, in *GetEnvironmentsRequest, opts ...grpc.CallOption) (*GetEnvironmentsResponse, error)
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	GetDisplayAgent(ctx context.Context, in *GetDisplayAgentRequest, opts ...grpc.CallOption) (*GetDisplayAgentResponse, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error)
	GetAvailablePermissions(ctx context.Context, in *GetAvailablePermissionsRequest, opts ...grpc.CallOption) (*GetAvailablePermissionsResponse, error)
	CreateServiceToken(ctx context.Context, in *CreateServiceTokenRequest, opts ...grpc.CallOption) (*CreateServiceTokenResponse, error)
	DeleteServiceToken(ctx context.Context, in *DeleteServiceTokenRequest, opts ...grpc.CallOption) (*DeleteServiceTokenResponse, error)
	ListServiceTokens(ctx context.Context, in *ListServiceTokensRequest, opts ...grpc.CallOption) (*ListServiceTokensResponse, error)
	UpdateServiceToken(ctx context.Context, in *UpdateServiceTokenRequest, opts ...grpc.CallOption) (*UpdateServiceTokenResponse, error)
	InviteTeamMember(ctx context.Context, in *InviteTeamMemberRequest, opts ...grpc.CallOption) (*InviteTeamMemberResponse, error)
	ExpireTeamInvite(ctx context.Context, in *ExpireTeamInviteRequest, opts ...grpc.CallOption) (*ExpireTeamInviteResponse, error)
	ListTeamInvites(ctx context.Context, in *ListTeamInvitesRequest, opts ...grpc.CallOption) (*ListTeamInvitesResponse, error)
	UpsertFeaturePermissions(ctx context.Context, in *UpsertFeaturePermissionsRequest, opts ...grpc.CallOption) (*UpsertFeaturePermissionsResponse, error)
	UpdateScimGroupSettings(ctx context.Context, in *UpdateScimGroupSettingsRequest, opts ...grpc.CallOption) (*UpdateScimGroupSettingsResponse, error)
}

type teamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamServiceClient(cc grpc.ClientConnInterface) TeamServiceClient {
	return &teamServiceClient{cc}
}

func (c *teamServiceClient) GetEnv(ctx context.Context, in *GetEnvRequest, opts ...grpc.CallOption) (*GetEnvResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvResponse)
	err := c.cc.Invoke(ctx, TeamService_GetEnv_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetEnvironments(ctx context.Context, in *GetEnvironmentsRequest, opts ...grpc.CallOption) (*GetEnvironmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvironmentsResponse)
	err := c.cc.Invoke(ctx, TeamService_GetEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, TeamService_GetAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetDisplayAgent(ctx context.Context, in *GetDisplayAgentRequest, opts ...grpc.CallOption) (*GetDisplayAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDisplayAgentResponse)
	err := c.cc.Invoke(ctx, TeamService_GetDisplayAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, TeamService_GetTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, TeamService_CreateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, TeamService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvironmentResponse)
	err := c.cc.Invoke(ctx, TeamService_CreateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) GetAvailablePermissions(ctx context.Context, in *GetAvailablePermissionsRequest, opts ...grpc.CallOption) (*GetAvailablePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailablePermissionsResponse)
	err := c.cc.Invoke(ctx, TeamService_GetAvailablePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) CreateServiceToken(ctx context.Context, in *CreateServiceTokenRequest, opts ...grpc.CallOption) (*CreateServiceTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceTokenResponse)
	err := c.cc.Invoke(ctx, TeamService_CreateServiceToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) DeleteServiceToken(ctx context.Context, in *DeleteServiceTokenRequest, opts ...grpc.CallOption) (*DeleteServiceTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServiceTokenResponse)
	err := c.cc.Invoke(ctx, TeamService_DeleteServiceToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListServiceTokens(ctx context.Context, in *ListServiceTokensRequest, opts ...grpc.CallOption) (*ListServiceTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServiceTokensResponse)
	err := c.cc.Invoke(ctx, TeamService_ListServiceTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateServiceToken(ctx context.Context, in *UpdateServiceTokenRequest, opts ...grpc.CallOption) (*UpdateServiceTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceTokenResponse)
	err := c.cc.Invoke(ctx, TeamService_UpdateServiceToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) InviteTeamMember(ctx context.Context, in *InviteTeamMemberRequest, opts ...grpc.CallOption) (*InviteTeamMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteTeamMemberResponse)
	err := c.cc.Invoke(ctx, TeamService_InviteTeamMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ExpireTeamInvite(ctx context.Context, in *ExpireTeamInviteRequest, opts ...grpc.CallOption) (*ExpireTeamInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpireTeamInviteResponse)
	err := c.cc.Invoke(ctx, TeamService_ExpireTeamInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) ListTeamInvites(ctx context.Context, in *ListTeamInvitesRequest, opts ...grpc.CallOption) (*ListTeamInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTeamInvitesResponse)
	err := c.cc.Invoke(ctx, TeamService_ListTeamInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpsertFeaturePermissions(ctx context.Context, in *UpsertFeaturePermissionsRequest, opts ...grpc.CallOption) (*UpsertFeaturePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertFeaturePermissionsResponse)
	err := c.cc.Invoke(ctx, TeamService_UpsertFeaturePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamServiceClient) UpdateScimGroupSettings(ctx context.Context, in *UpdateScimGroupSettingsRequest, opts ...grpc.CallOption) (*UpdateScimGroupSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScimGroupSettingsResponse)
	err := c.cc.Invoke(ctx, TeamService_UpdateScimGroupSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamServiceServer is the server API for TeamService service.
// All implementations must embed UnimplementedTeamServiceServer
// for forward compatibility.
type TeamServiceServer interface {
	GetEnv(context.Context, *GetEnvRequest) (*GetEnvResponse, error)
	GetEnvironments(context.Context, *GetEnvironmentsRequest) (*GetEnvironmentsResponse, error)
	GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	GetDisplayAgent(context.Context, *GetDisplayAgentRequest) (*GetDisplayAgentResponse, error)
	GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error)
	GetAvailablePermissions(context.Context, *GetAvailablePermissionsRequest) (*GetAvailablePermissionsResponse, error)
	CreateServiceToken(context.Context, *CreateServiceTokenRequest) (*CreateServiceTokenResponse, error)
	DeleteServiceToken(context.Context, *DeleteServiceTokenRequest) (*DeleteServiceTokenResponse, error)
	ListServiceTokens(context.Context, *ListServiceTokensRequest) (*ListServiceTokensResponse, error)
	UpdateServiceToken(context.Context, *UpdateServiceTokenRequest) (*UpdateServiceTokenResponse, error)
	InviteTeamMember(context.Context, *InviteTeamMemberRequest) (*InviteTeamMemberResponse, error)
	ExpireTeamInvite(context.Context, *ExpireTeamInviteRequest) (*ExpireTeamInviteResponse, error)
	ListTeamInvites(context.Context, *ListTeamInvitesRequest) (*ListTeamInvitesResponse, error)
	UpsertFeaturePermissions(context.Context, *UpsertFeaturePermissionsRequest) (*UpsertFeaturePermissionsResponse, error)
	UpdateScimGroupSettings(context.Context, *UpdateScimGroupSettingsRequest) (*UpdateScimGroupSettingsResponse, error)
	mustEmbedUnimplementedTeamServiceServer()
}

// UnimplementedTeamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeamServiceServer struct{}

func (UnimplementedTeamServiceServer) GetEnv(context.Context, *GetEnvRequest) (*GetEnvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedTeamServiceServer) GetEnvironments(context.Context, *GetEnvironmentsRequest) (*GetEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironments not implemented")
}
func (UnimplementedTeamServiceServer) GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedTeamServiceServer) GetDisplayAgent(context.Context, *GetDisplayAgentRequest) (*GetDisplayAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayAgent not implemented")
}
func (UnimplementedTeamServiceServer) GetTeam(context.Context, *GetTeamRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedTeamServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedTeamServiceServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedTeamServiceServer) GetAvailablePermissions(context.Context, *GetAvailablePermissionsRequest) (*GetAvailablePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePermissions not implemented")
}
func (UnimplementedTeamServiceServer) CreateServiceToken(context.Context, *CreateServiceTokenRequest) (*CreateServiceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceToken not implemented")
}
func (UnimplementedTeamServiceServer) DeleteServiceToken(context.Context, *DeleteServiceTokenRequest) (*DeleteServiceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceToken not implemented")
}
func (UnimplementedTeamServiceServer) ListServiceTokens(context.Context, *ListServiceTokensRequest) (*ListServiceTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceTokens not implemented")
}
func (UnimplementedTeamServiceServer) UpdateServiceToken(context.Context, *UpdateServiceTokenRequest) (*UpdateServiceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceToken not implemented")
}
func (UnimplementedTeamServiceServer) InviteTeamMember(context.Context, *InviteTeamMemberRequest) (*InviteTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteTeamMember not implemented")
}
func (UnimplementedTeamServiceServer) ExpireTeamInvite(context.Context, *ExpireTeamInviteRequest) (*ExpireTeamInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireTeamInvite not implemented")
}
func (UnimplementedTeamServiceServer) ListTeamInvites(context.Context, *ListTeamInvitesRequest) (*ListTeamInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamInvites not implemented")
}
func (UnimplementedTeamServiceServer) UpsertFeaturePermissions(context.Context, *UpsertFeaturePermissionsRequest) (*UpsertFeaturePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertFeaturePermissions not implemented")
}
func (UnimplementedTeamServiceServer) UpdateScimGroupSettings(context.Context, *UpdateScimGroupSettingsRequest) (*UpdateScimGroupSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScimGroupSettings not implemented")
}
func (UnimplementedTeamServiceServer) mustEmbedUnimplementedTeamServiceServer() {}
func (UnimplementedTeamServiceServer) testEmbeddedByValue()                     {}

// UnsafeTeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServiceServer will
// result in compilation errors.
type UnsafeTeamServiceServer interface {
	mustEmbedUnimplementedTeamServiceServer()
}

func RegisterTeamServiceServer(s grpc.ServiceRegistrar, srv TeamServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeamService_ServiceDesc, srv)
}

func _TeamService_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetEnv(ctx, req.(*GetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetEnvironments(ctx, req.(*GetEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetDisplayAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisplayAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetDisplayAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetDisplayAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetDisplayAgent(ctx, req.(*GetDisplayAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_GetAvailablePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailablePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).GetAvailablePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_GetAvailablePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).GetAvailablePermissions(ctx, req.(*GetAvailablePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_CreateServiceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).CreateServiceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_CreateServiceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).CreateServiceToken(ctx, req.(*CreateServiceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_DeleteServiceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).DeleteServiceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_DeleteServiceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).DeleteServiceToken(ctx, req.(*DeleteServiceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListServiceTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListServiceTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_ListServiceTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListServiceTokens(ctx, req.(*ListServiceTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateServiceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateServiceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_UpdateServiceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateServiceToken(ctx, req.(*UpdateServiceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_InviteTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).InviteTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_InviteTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).InviteTeamMember(ctx, req.(*InviteTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ExpireTeamInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireTeamInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ExpireTeamInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_ExpireTeamInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ExpireTeamInvite(ctx, req.(*ExpireTeamInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_ListTeamInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).ListTeamInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_ListTeamInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).ListTeamInvites(ctx, req.(*ListTeamInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpsertFeaturePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertFeaturePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpsertFeaturePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_UpsertFeaturePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpsertFeaturePermissions(ctx, req.(*UpsertFeaturePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamService_UpdateScimGroupSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScimGroupSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServiceServer).UpdateScimGroupSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamService_UpdateScimGroupSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServiceServer).UpdateScimGroupSettings(ctx, req.(*UpdateScimGroupSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamService_ServiceDesc is the grpc.ServiceDesc for TeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.server.v1.TeamService",
	HandlerType: (*TeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnv",
			Handler:    _TeamService_GetEnv_Handler,
		},
		{
			MethodName: "GetEnvironments",
			Handler:    _TeamService_GetEnvironments_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _TeamService_GetAgent_Handler,
		},
		{
			MethodName: "GetDisplayAgent",
			Handler:    _TeamService_GetDisplayAgent_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _TeamService_GetTeam_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _TeamService_CreateTeam_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _TeamService_CreateProject_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _TeamService_CreateEnvironment_Handler,
		},
		{
			MethodName: "GetAvailablePermissions",
			Handler:    _TeamService_GetAvailablePermissions_Handler,
		},
		{
			MethodName: "CreateServiceToken",
			Handler:    _TeamService_CreateServiceToken_Handler,
		},
		{
			MethodName: "DeleteServiceToken",
			Handler:    _TeamService_DeleteServiceToken_Handler,
		},
		{
			MethodName: "ListServiceTokens",
			Handler:    _TeamService_ListServiceTokens_Handler,
		},
		{
			MethodName: "UpdateServiceToken",
			Handler:    _TeamService_UpdateServiceToken_Handler,
		},
		{
			MethodName: "InviteTeamMember",
			Handler:    _TeamService_InviteTeamMember_Handler,
		},
		{
			MethodName: "ExpireTeamInvite",
			Handler:    _TeamService_ExpireTeamInvite_Handler,
		},
		{
			MethodName: "ListTeamInvites",
			Handler:    _TeamService_ListTeamInvites_Handler,
		},
		{
			MethodName: "UpsertFeaturePermissions",
			Handler:    _TeamService_UpsertFeaturePermissions_Handler,
		},
		{
			MethodName: "UpdateScimGroupSettings",
			Handler:    _TeamService_UpdateScimGroupSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/server/v1/team.proto",
}
