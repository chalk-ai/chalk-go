// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/server/v1/batch.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationKind int32

const (
	OperationKind_OPERATION_KIND_UNSPECIFIED OperationKind = 0
	OperationKind_OPERATION_KIND_CRON        OperationKind = 1
	OperationKind_OPERATION_KIND_MIGRATION   OperationKind = 2
)

// Enum value maps for OperationKind.
var (
	OperationKind_name = map[int32]string{
		0: "OPERATION_KIND_UNSPECIFIED",
		1: "OPERATION_KIND_CRON",
		2: "OPERATION_KIND_MIGRATION",
	}
	OperationKind_value = map[string]int32{
		"OPERATION_KIND_UNSPECIFIED": 0,
		"OPERATION_KIND_CRON":        1,
		"OPERATION_KIND_MIGRATION":   2,
	}
)

func (x OperationKind) Enum() *OperationKind {
	p := new(OperationKind)
	*p = x
	return p
}

func (x OperationKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_batch_proto_enumTypes[0].Descriptor()
}

func (OperationKind) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_batch_proto_enumTypes[0]
}

func (x OperationKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationKind.Descriptor instead.
func (OperationKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_batch_proto_rawDescGZIP(), []int{0}
}

type OperationStatus int32

const (
	OperationStatus_OPERATION_STATUS_UNSPECIFIED OperationStatus = 0
	OperationStatus_OPERATION_STATUS_PENDING     OperationStatus = 1
	OperationStatus_OPERATION_STATUS_WORKING     OperationStatus = 2
	OperationStatus_OPERATION_STATUS_COMPLETE    OperationStatus = 3
	OperationStatus_OPERATION_STATUS_FAILED      OperationStatus = 4
	OperationStatus_OPERATION_STATUS_SKIPPED     OperationStatus = 5
	OperationStatus_OPERATION_STATUS_CANCELED    OperationStatus = 6
)

// Enum value maps for OperationStatus.
var (
	OperationStatus_name = map[int32]string{
		0: "OPERATION_STATUS_UNSPECIFIED",
		1: "OPERATION_STATUS_PENDING",
		2: "OPERATION_STATUS_WORKING",
		3: "OPERATION_STATUS_COMPLETE",
		4: "OPERATION_STATUS_FAILED",
		5: "OPERATION_STATUS_SKIPPED",
		6: "OPERATION_STATUS_CANCELED",
	}
	OperationStatus_value = map[string]int32{
		"OPERATION_STATUS_UNSPECIFIED": 0,
		"OPERATION_STATUS_PENDING":     1,
		"OPERATION_STATUS_WORKING":     2,
		"OPERATION_STATUS_COMPLETE":    3,
		"OPERATION_STATUS_FAILED":      4,
		"OPERATION_STATUS_SKIPPED":     5,
		"OPERATION_STATUS_CANCELED":    6,
	}
)

func (x OperationStatus) Enum() *OperationStatus {
	p := new(OperationStatus)
	*p = x
	return p
}

func (x OperationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_server_v1_batch_proto_enumTypes[1].Descriptor()
}

func (OperationStatus) Type() protoreflect.EnumType {
	return &file_chalk_server_v1_batch_proto_enumTypes[1]
}

func (x OperationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus.Descriptor instead.
func (OperationStatus) EnumDescriptor() ([]byte, []int) {
	return file_chalk_server_v1_batch_proto_rawDescGZIP(), []int{1}
}

type ProgressCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	MaxObserved    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=max_observed,json=maxObserved,proto3" json:"max_observed,omitempty"`
	TotalDurationS float64                `protobuf:"fixed64,3,opt,name=total_duration_s,json=totalDurationS,proto3" json:"total_duration_s,omitempty"`
	// Note: These must be serialized as floats. Sometimes we compute more than 2^31 things,
	// and graphql will only serialize 31 bit numbers to int
	StoredOnline  float64                `protobuf:"fixed64,4,opt,name=stored_online,json=storedOnline,proto3" json:"stored_online,omitempty"`
	StoredOffline float64                `protobuf:"fixed64,5,opt,name=stored_offline,json=storedOffline,proto3" json:"stored_offline,omitempty"`
	Computed      float64                `protobuf:"fixed64,6,opt,name=computed,proto3" json:"computed,omitempty"`
	Dropped       float64                `protobuf:"fixed64,7,opt,name=dropped,proto3" json:"dropped,omitempty"`
	Failed        float64                `protobuf:"fixed64,8,opt,name=failed,proto3" json:"failed,omitempty"`
	Skipped       float64                `protobuf:"fixed64,9,opt,name=skipped,proto3" json:"skipped,omitempty"`
	End           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=end,proto3,oneof" json:"end,omitempty"`
}

func (x *ProgressCounts) Reset() {
	*x = ProgressCounts{}
	mi := &file_chalk_server_v1_batch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProgressCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressCounts) ProtoMessage() {}

func (x *ProgressCounts) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_batch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressCounts.ProtoReflect.Descriptor instead.
func (*ProgressCounts) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_batch_proto_rawDescGZIP(), []int{0}
}

func (x *ProgressCounts) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ProgressCounts) GetMaxObserved() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxObserved
	}
	return nil
}

func (x *ProgressCounts) GetTotalDurationS() float64 {
	if x != nil {
		return x.TotalDurationS
	}
	return 0
}

func (x *ProgressCounts) GetStoredOnline() float64 {
	if x != nil {
		return x.StoredOnline
	}
	return 0
}

func (x *ProgressCounts) GetStoredOffline() float64 {
	if x != nil {
		return x.StoredOffline
	}
	return 0
}

func (x *ProgressCounts) GetComputed() float64 {
	if x != nil {
		return x.Computed
	}
	return 0
}

func (x *ProgressCounts) GetDropped() float64 {
	if x != nil {
		return x.Dropped
	}
	return 0
}

func (x *ProgressCounts) GetFailed() float64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *ProgressCounts) GetSkipped() float64 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *ProgressCounts) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type ResolverOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolverFqn string          `protobuf:"bytes,1,opt,name=resolver_fqn,json=resolverFqn,proto3" json:"resolver_fqn,omitempty"`
	Status      OperationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=chalk.server.v1.OperationStatus" json:"status,omitempty"`
	Progress    *ProgressCounts `protobuf:"bytes,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *ResolverOperation) Reset() {
	*x = ResolverOperation{}
	mi := &file_chalk_server_v1_batch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverOperation) ProtoMessage() {}

func (x *ResolverOperation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_batch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverOperation.ProtoReflect.Descriptor instead.
func (*ResolverOperation) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_batch_proto_rawDescGZIP(), []int{1}
}

func (x *ResolverOperation) GetResolverFqn() string {
	if x != nil {
		return x.ResolverFqn
	}
	return ""
}

func (x *ResolverOperation) GetStatus() OperationStatus {
	if x != nil {
		return x.Status
	}
	return OperationStatus_OPERATION_STATUS_UNSPECIFIED
}

func (x *ResolverOperation) GetProgress() *ProgressCounts {
	if x != nil {
		return x.Progress
	}
	return nil
}

type BatchOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind          OperationKind        `protobuf:"varint,2,opt,name=kind,proto3,enum=chalk.server.v1.OperationKind" json:"kind,omitempty"`
	Status        OperationStatus      `protobuf:"varint,3,opt,name=status,proto3,enum=chalk.server.v1.OperationStatus" json:"status,omitempty"`
	Resolvers     []*ResolverOperation `protobuf:"bytes,4,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	Progress      *ProgressCounts      `protobuf:"bytes,5,opt,name=progress,proto3" json:"progress,omitempty"`
	EnvironmentId string               `protobuf:"bytes,6,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	TeamId        string               `protobuf:"bytes,7,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	DeploymentId  string               `protobuf:"bytes,8,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *BatchOperation) Reset() {
	*x = BatchOperation{}
	mi := &file_chalk_server_v1_batch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperation) ProtoMessage() {}

func (x *BatchOperation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_batch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperation.ProtoReflect.Descriptor instead.
func (*BatchOperation) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_batch_proto_rawDescGZIP(), []int{2}
}

func (x *BatchOperation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchOperation) GetKind() OperationKind {
	if x != nil {
		return x.Kind
	}
	return OperationKind_OPERATION_KIND_UNSPECIFIED
}

func (x *BatchOperation) GetStatus() OperationStatus {
	if x != nil {
		return x.Status
	}
	return OperationStatus_OPERATION_STATUS_UNSPECIFIED
}

func (x *BatchOperation) GetResolvers() []*ResolverOperation {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *BatchOperation) GetProgress() *ProgressCounts {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *BatchOperation) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *BatchOperation) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *BatchOperation) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

var File_chalk_server_v1_batch_proto protoreflect.FileDescriptor

var file_chalk_server_v1_batch_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9a, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0xad, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x66,
	0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x46, 0x71, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf2, 0x02, 0x0a,
	0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x2a, 0x66, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x49,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0xe8, 0x01, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x42, 0xba, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_server_v1_batch_proto_rawDescOnce sync.Once
	file_chalk_server_v1_batch_proto_rawDescData = file_chalk_server_v1_batch_proto_rawDesc
)

func file_chalk_server_v1_batch_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_batch_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_server_v1_batch_proto_rawDescData)
	})
	return file_chalk_server_v1_batch_proto_rawDescData
}

var file_chalk_server_v1_batch_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_server_v1_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_server_v1_batch_proto_goTypes = []any{
	(OperationKind)(0),            // 0: chalk.server.v1.OperationKind
	(OperationStatus)(0),          // 1: chalk.server.v1.OperationStatus
	(*ProgressCounts)(nil),        // 2: chalk.server.v1.ProgressCounts
	(*ResolverOperation)(nil),     // 3: chalk.server.v1.ResolverOperation
	(*BatchOperation)(nil),        // 4: chalk.server.v1.BatchOperation
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_chalk_server_v1_batch_proto_depIdxs = []int32{
	5, // 0: chalk.server.v1.ProgressCounts.start:type_name -> google.protobuf.Timestamp
	5, // 1: chalk.server.v1.ProgressCounts.max_observed:type_name -> google.protobuf.Timestamp
	5, // 2: chalk.server.v1.ProgressCounts.end:type_name -> google.protobuf.Timestamp
	1, // 3: chalk.server.v1.ResolverOperation.status:type_name -> chalk.server.v1.OperationStatus
	2, // 4: chalk.server.v1.ResolverOperation.progress:type_name -> chalk.server.v1.ProgressCounts
	0, // 5: chalk.server.v1.BatchOperation.kind:type_name -> chalk.server.v1.OperationKind
	1, // 6: chalk.server.v1.BatchOperation.status:type_name -> chalk.server.v1.OperationStatus
	3, // 7: chalk.server.v1.BatchOperation.resolvers:type_name -> chalk.server.v1.ResolverOperation
	2, // 8: chalk.server.v1.BatchOperation.progress:type_name -> chalk.server.v1.ProgressCounts
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_batch_proto_init() }
func file_chalk_server_v1_batch_proto_init() {
	if File_chalk_server_v1_batch_proto != nil {
		return
	}
	file_chalk_server_v1_batch_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_server_v1_batch_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_batch_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_batch_proto_depIdxs,
		EnumInfos:         file_chalk_server_v1_batch_proto_enumTypes,
		MessageInfos:      file_chalk_server_v1_batch_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_batch_proto = out.File
	file_chalk_server_v1_batch_proto_rawDesc = nil
	file_chalk_server_v1_batch_proto_goTypes = nil
	file_chalk_server_v1_batch_proto_depIdxs = nil
}
