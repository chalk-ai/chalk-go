// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/server/v1/scheduled_query_run.proto

package serverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduledQueryRun struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId       string                 `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId        *string                `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	RunId               *string                `protobuf:"bytes,4,opt,name=run_id,json=runId,proto3,oneof" json:"run_id,omitempty"`
	CronQueryId         int64                  `protobuf:"varint,5,opt,name=cron_query_id,json=cronQueryId,proto3" json:"cron_query_id,omitempty"`
	CronQueryScheduleId int64                  `protobuf:"varint,6,opt,name=cron_query_schedule_id,json=cronQueryScheduleId,proto3" json:"cron_query_schedule_id,omitempty"`
	CronName            string                 `protobuf:"bytes,7,opt,name=cron_name,json=cronName,proto3" json:"cron_name,omitempty"`
	GcrExecutionId      *string                `protobuf:"bytes,8,opt,name=gcr_execution_id,json=gcrExecutionId,proto3,oneof" json:"gcr_execution_id,omitempty"`
	GcrJobName          *string                `protobuf:"bytes,9,opt,name=gcr_job_name,json=gcrJobName,proto3,oneof" json:"gcr_job_name,omitempty"`
	OfflineQueryId      string                 `protobuf:"bytes,10,opt,name=offline_query_id,json=offlineQueryId,proto3" json:"offline_query_id,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ScheduledQueryRun) Reset() {
	*x = ScheduledQueryRun{}
	mi := &file_chalk_server_v1_scheduled_query_run_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduledQueryRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledQueryRun) ProtoMessage() {}

func (x *ScheduledQueryRun) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduled_query_run_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledQueryRun.ProtoReflect.Descriptor instead.
func (*ScheduledQueryRun) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduled_query_run_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduledQueryRun) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScheduledQueryRun) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *ScheduledQueryRun) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *ScheduledQueryRun) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *ScheduledQueryRun) GetCronQueryId() int64 {
	if x != nil {
		return x.CronQueryId
	}
	return 0
}

func (x *ScheduledQueryRun) GetCronQueryScheduleId() int64 {
	if x != nil {
		return x.CronQueryScheduleId
	}
	return 0
}

func (x *ScheduledQueryRun) GetCronName() string {
	if x != nil {
		return x.CronName
	}
	return ""
}

func (x *ScheduledQueryRun) GetGcrExecutionId() string {
	if x != nil && x.GcrExecutionId != nil {
		return *x.GcrExecutionId
	}
	return ""
}

func (x *ScheduledQueryRun) GetGcrJobName() string {
	if x != nil && x.GcrJobName != nil {
		return *x.GcrJobName
	}
	return ""
}

func (x *ScheduledQueryRun) GetOfflineQueryId() string {
	if x != nil {
		return x.OfflineQueryId
	}
	return ""
}

func (x *ScheduledQueryRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScheduledQueryRun) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetScheduledQueryRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetScheduledQueryRunRequest_RunId
	//	*GetScheduledQueryRunRequest_OfflineQueryId
	Identifier    isGetScheduledQueryRunRequest_Identifier `protobuf_oneof:"identifier"`
	GetMask       *fieldmaskpb.FieldMask                   `protobuf:"bytes,3,opt,name=get_mask,json=getMask,proto3" json:"get_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScheduledQueryRunRequest) Reset() {
	*x = GetScheduledQueryRunRequest{}
	mi := &file_chalk_server_v1_scheduled_query_run_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduledQueryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledQueryRunRequest) ProtoMessage() {}

func (x *GetScheduledQueryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduled_query_run_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledQueryRunRequest.ProtoReflect.Descriptor instead.
func (*GetScheduledQueryRunRequest) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduled_query_run_proto_rawDescGZIP(), []int{1}
}

func (x *GetScheduledQueryRunRequest) GetIdentifier() isGetScheduledQueryRunRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetScheduledQueryRunRequest) GetRunId() int64 {
	if x != nil {
		if x, ok := x.Identifier.(*GetScheduledQueryRunRequest_RunId); ok {
			return x.RunId
		}
	}
	return 0
}

func (x *GetScheduledQueryRunRequest) GetOfflineQueryId() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetScheduledQueryRunRequest_OfflineQueryId); ok {
			return x.OfflineQueryId
		}
	}
	return ""
}

func (x *GetScheduledQueryRunRequest) GetGetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.GetMask
	}
	return nil
}

type isGetScheduledQueryRunRequest_Identifier interface {
	isGetScheduledQueryRunRequest_Identifier()
}

type GetScheduledQueryRunRequest_RunId struct {
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId,proto3,oneof"`
}

type GetScheduledQueryRunRequest_OfflineQueryId struct {
	OfflineQueryId string `protobuf:"bytes,2,opt,name=offline_query_id,json=offlineQueryId,proto3,oneof"`
}

func (*GetScheduledQueryRunRequest_RunId) isGetScheduledQueryRunRequest_Identifier() {}

func (*GetScheduledQueryRunRequest_OfflineQueryId) isGetScheduledQueryRunRequest_Identifier() {}

type GetScheduledQueryRunResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ScheduledQueryRun *ScheduledQueryRun     `protobuf:"bytes,1,opt,name=scheduled_query_run,json=scheduledQueryRun,proto3" json:"scheduled_query_run,omitempty"`
	OfflineQuery      *OfflineQueryMeta      `protobuf:"bytes,2,opt,name=offline_query,json=offlineQuery,proto3,oneof" json:"offline_query,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetScheduledQueryRunResponse) Reset() {
	*x = GetScheduledQueryRunResponse{}
	mi := &file_chalk_server_v1_scheduled_query_run_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScheduledQueryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScheduledQueryRunResponse) ProtoMessage() {}

func (x *GetScheduledQueryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_server_v1_scheduled_query_run_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScheduledQueryRunResponse.ProtoReflect.Descriptor instead.
func (*GetScheduledQueryRunResponse) Descriptor() ([]byte, []int) {
	return file_chalk_server_v1_scheduled_query_run_proto_rawDescGZIP(), []int{2}
}

func (x *GetScheduledQueryRunResponse) GetScheduledQueryRun() *ScheduledQueryRun {
	if x != nil {
		return x.ScheduledQueryRun
	}
	return nil
}

func (x *GetScheduledQueryRunResponse) GetOfflineQuery() *OfflineQueryMeta {
	if x != nil {
		return x.OfflineQuery
	}
	return nil
}

var File_chalk_server_v1_scheduled_query_run_proto protoreflect.FileDescriptor

const file_chalk_server_v1_scheduled_query_run_proto_rawDesc = "" +
	"\n" +
	")chalk/server/v1/scheduled_query_run.proto\x12\x0fchalk.server.v1\x1a%chalk/server/v1/offline_queries.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbf\x04\n" +
	"\x11ScheduledQueryRun\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12%\n" +
	"\x0eenvironment_id\x18\x02 \x01(\tR\renvironmentId\x12(\n" +
	"\rdeployment_id\x18\x03 \x01(\tH\x00R\fdeploymentId\x88\x01\x01\x12\x1a\n" +
	"\x06run_id\x18\x04 \x01(\tH\x01R\x05runId\x88\x01\x01\x12\"\n" +
	"\rcron_query_id\x18\x05 \x01(\x03R\vcronQueryId\x123\n" +
	"\x16cron_query_schedule_id\x18\x06 \x01(\x03R\x13cronQueryScheduleId\x12\x1b\n" +
	"\tcron_name\x18\a \x01(\tR\bcronName\x12-\n" +
	"\x10gcr_execution_id\x18\b \x01(\tH\x02R\x0egcrExecutionId\x88\x01\x01\x12%\n" +
	"\fgcr_job_name\x18\t \x01(\tH\x03R\n" +
	"gcrJobName\x88\x01\x01\x12(\n" +
	"\x10offline_query_id\x18\n" +
	" \x01(\tR\x0eofflineQueryId\x129\n" +
	"\n" +
	"created_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAtB\x10\n" +
	"\x0e_deployment_idB\t\n" +
	"\a_run_idB\x13\n" +
	"\x11_gcr_execution_idB\x0f\n" +
	"\r_gcr_job_name\"\xa7\x01\n" +
	"\x1bGetScheduledQueryRunRequest\x12\x17\n" +
	"\x06run_id\x18\x01 \x01(\x03H\x00R\x05runId\x12*\n" +
	"\x10offline_query_id\x18\x02 \x01(\tH\x00R\x0eofflineQueryId\x125\n" +
	"\bget_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\agetMaskB\f\n" +
	"\n" +
	"identifier\"\xd1\x01\n" +
	"\x1cGetScheduledQueryRunResponse\x12R\n" +
	"\x13scheduled_query_run\x18\x01 \x01(\v2\".chalk.server.v1.ScheduledQueryRunR\x11scheduledQueryRun\x12K\n" +
	"\roffline_query\x18\x02 \x01(\v2!.chalk.server.v1.OfflineQueryMetaH\x00R\fofflineQuery\x88\x01\x01B\x10\n" +
	"\x0e_offline_queryB\xc6\x01\n" +
	"\x13com.chalk.server.v1B\x16ScheduledQueryRunProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/server/v1;serverv1\xa2\x02\x03CSX\xaa\x02\x0fChalk.Server.V1\xca\x02\x0fChalk\\Server\\V1\xe2\x02\x1bChalk\\Server\\V1\\GPBMetadata\xea\x02\x11Chalk::Server::V1b\x06proto3"

var (
	file_chalk_server_v1_scheduled_query_run_proto_rawDescOnce sync.Once
	file_chalk_server_v1_scheduled_query_run_proto_rawDescData []byte
)

func file_chalk_server_v1_scheduled_query_run_proto_rawDescGZIP() []byte {
	file_chalk_server_v1_scheduled_query_run_proto_rawDescOnce.Do(func() {
		file_chalk_server_v1_scheduled_query_run_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_server_v1_scheduled_query_run_proto_rawDesc), len(file_chalk_server_v1_scheduled_query_run_proto_rawDesc)))
	})
	return file_chalk_server_v1_scheduled_query_run_proto_rawDescData
}

var file_chalk_server_v1_scheduled_query_run_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_server_v1_scheduled_query_run_proto_goTypes = []any{
	(*ScheduledQueryRun)(nil),            // 0: chalk.server.v1.ScheduledQueryRun
	(*GetScheduledQueryRunRequest)(nil),  // 1: chalk.server.v1.GetScheduledQueryRunRequest
	(*GetScheduledQueryRunResponse)(nil), // 2: chalk.server.v1.GetScheduledQueryRunResponse
	(*timestamppb.Timestamp)(nil),        // 3: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),        // 4: google.protobuf.FieldMask
	(*OfflineQueryMeta)(nil),             // 5: chalk.server.v1.OfflineQueryMeta
}
var file_chalk_server_v1_scheduled_query_run_proto_depIdxs = []int32{
	3, // 0: chalk.server.v1.ScheduledQueryRun.created_at:type_name -> google.protobuf.Timestamp
	3, // 1: chalk.server.v1.ScheduledQueryRun.updated_at:type_name -> google.protobuf.Timestamp
	4, // 2: chalk.server.v1.GetScheduledQueryRunRequest.get_mask:type_name -> google.protobuf.FieldMask
	0, // 3: chalk.server.v1.GetScheduledQueryRunResponse.scheduled_query_run:type_name -> chalk.server.v1.ScheduledQueryRun
	5, // 4: chalk.server.v1.GetScheduledQueryRunResponse.offline_query:type_name -> chalk.server.v1.OfflineQueryMeta
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_chalk_server_v1_scheduled_query_run_proto_init() }
func file_chalk_server_v1_scheduled_query_run_proto_init() {
	if File_chalk_server_v1_scheduled_query_run_proto != nil {
		return
	}
	file_chalk_server_v1_offline_queries_proto_init()
	file_chalk_server_v1_scheduled_query_run_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_server_v1_scheduled_query_run_proto_msgTypes[1].OneofWrappers = []any{
		(*GetScheduledQueryRunRequest_RunId)(nil),
		(*GetScheduledQueryRunRequest_OfflineQueryId)(nil),
	}
	file_chalk_server_v1_scheduled_query_run_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_server_v1_scheduled_query_run_proto_rawDesc), len(file_chalk_server_v1_scheduled_query_run_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_server_v1_scheduled_query_run_proto_goTypes,
		DependencyIndexes: file_chalk_server_v1_scheduled_query_run_proto_depIdxs,
		MessageInfos:      file_chalk_server_v1_scheduled_query_run_proto_msgTypes,
	}.Build()
	File_chalk_server_v1_scheduled_query_run_proto = out.File
	file_chalk_server_v1_scheduled_query_run_proto_goTypes = nil
	file_chalk_server_v1_scheduled_query_run_proto_depIdxs = nil
}
