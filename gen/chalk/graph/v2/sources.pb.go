// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/graph/v2/sources.proto

package graphv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pointer to an underlying database source -- used by native sql resolvers to identify which DB they are for
type DatabaseSourceReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the database source -- e.g. postgres, bigquery
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the database source. The default source for the given type is represented by the empty string
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseSourceReference) Reset() {
	*x = DatabaseSourceReference{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceReference) ProtoMessage() {}

func (x *DatabaseSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceReference.ProtoReflect.Descriptor instead.
func (*DatabaseSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseSourceReference) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *DatabaseSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the database source -- e.g. postgres, bigquery
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the database source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE.
	Options       map[string]*structpb.Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseSource) Reset() {
	*x = DatabaseSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSource) ProtoMessage() {}

func (x *DatabaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSource.ProtoReflect.Descriptor instead.
func (*DatabaseSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseSource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *DatabaseSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseSource) GetOptions() map[string]*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

type DatabaseSourceGroup struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Name          string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultSource *DatabaseSourceReference            `protobuf:"bytes,2,opt,name=default_source,json=defaultSource,proto3" json:"default_source,omitempty"`
	TaggedSources map[string]*DatabaseSourceReference `protobuf:"bytes,3,rep,name=tagged_sources,json=taggedSources,proto3" json:"tagged_sources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseSourceGroup) Reset() {
	*x = DatabaseSourceGroup{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceGroup) ProtoMessage() {}

func (x *DatabaseSourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceGroup.ProtoReflect.Descriptor instead.
func (*DatabaseSourceGroup) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseSourceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseSourceGroup) GetDefaultSource() *DatabaseSourceReference {
	if x != nil {
		return x.DefaultSource
	}
	return nil
}

func (x *DatabaseSourceGroup) GetTaggedSources() map[string]*DatabaseSourceReference {
	if x != nil {
		return x.TaggedSources
	}
	return nil
}

// Pointer to an underlying stream source -- used by stream resolvers
type StreamSourceReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the stream source -- e.g. kafka, pubsub, sqs
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the stream source. The default source for the given type is represented by the empty string
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSourceReference) Reset() {
	*x = StreamSourceReference{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSourceReference) ProtoMessage() {}

func (x *StreamSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSourceReference.ProtoReflect.Descriptor instead.
func (*StreamSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{3}
}

func (x *StreamSourceReference) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *StreamSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StreamSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the stream source -- e.g. kafka, pubsub, sqs
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the stream source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE.
	Options       map[string]*structpb.Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{4}
}

func (x *StreamSource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *StreamSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamSource) GetOptions() map[string]*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

type SourceSecrets struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Secrets for sql and stream sources, in the style of integration variables
	Secrets       map[string]string `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceSecrets) Reset() {
	*x = SourceSecrets{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceSecrets) ProtoMessage() {}

func (x *SourceSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceSecrets.ProtoReflect.Descriptor instead.
func (*SourceSecrets) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{5}
}

func (x *SourceSecrets) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

var File_chalk_graph_v2_sources_proto protoreflect.FileDescriptor

const file_chalk_graph_v2_sources_proto_rawDesc = "" +
	"\n" +
	"\x1cchalk/graph/v2/sources.proto\x12\x0echalk.graph.v2\x1a\x1cgoogle/protobuf/struct.proto\"N\n" +
	"\x17DatabaseSourceReference\x12\x1f\n" +
	"\vsource_type\x18\x01 \x01(\tR\n" +
	"sourceType\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xe0\x01\n" +
	"\x0eDatabaseSource\x12\x1f\n" +
	"\vsource_type\x18\x01 \x01(\tR\n" +
	"sourceType\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12E\n" +
	"\aoptions\x18\x03 \x03(\v2+.chalk.graph.v2.DatabaseSource.OptionsEntryR\aoptions\x1aR\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xc3\x02\n" +
	"\x13DatabaseSourceGroup\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12N\n" +
	"\x0edefault_source\x18\x02 \x01(\v2'.chalk.graph.v2.DatabaseSourceReferenceR\rdefaultSource\x12]\n" +
	"\x0etagged_sources\x18\x03 \x03(\v26.chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntryR\rtaggedSources\x1ai\n" +
	"\x12TaggedSourcesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12=\n" +
	"\x05value\x18\x02 \x01(\v2'.chalk.graph.v2.DatabaseSourceReferenceR\x05value:\x028\x01\"L\n" +
	"\x15StreamSourceReference\x12\x1f\n" +
	"\vsource_type\x18\x01 \x01(\tR\n" +
	"sourceType\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xdc\x01\n" +
	"\fStreamSource\x12\x1f\n" +
	"\vsource_type\x18\x01 \x01(\tR\n" +
	"sourceType\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12C\n" +
	"\aoptions\x18\x03 \x03(\v2).chalk.graph.v2.StreamSource.OptionsEntryR\aoptions\x1aR\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\x91\x01\n" +
	"\rSourceSecrets\x12D\n" +
	"\asecrets\x18\x01 \x03(\v2*.chalk.graph.v2.SourceSecrets.SecretsEntryR\asecrets\x1a:\n" +
	"\fSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xb5\x01\n" +
	"\x12com.chalk.graph.v2B\fSourcesProtoP\x01Z7github.com/chalk-ai/chalk-go/gen/chalk/graph/v2;graphv2\xa2\x02\x03CGX\xaa\x02\x0eChalk.Graph.V2\xca\x02\x0eChalk\\Graph\\V2\xe2\x02\x1aChalk\\Graph\\V2\\GPBMetadata\xea\x02\x10Chalk::Graph::V2b\x06proto3"

var (
	file_chalk_graph_v2_sources_proto_rawDescOnce sync.Once
	file_chalk_graph_v2_sources_proto_rawDescData []byte
)

func file_chalk_graph_v2_sources_proto_rawDescGZIP() []byte {
	file_chalk_graph_v2_sources_proto_rawDescOnce.Do(func() {
		file_chalk_graph_v2_sources_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_graph_v2_sources_proto_rawDesc), len(file_chalk_graph_v2_sources_proto_rawDesc)))
	})
	return file_chalk_graph_v2_sources_proto_rawDescData
}

var file_chalk_graph_v2_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chalk_graph_v2_sources_proto_goTypes = []any{
	(*DatabaseSourceReference)(nil), // 0: chalk.graph.v2.DatabaseSourceReference
	(*DatabaseSource)(nil),          // 1: chalk.graph.v2.DatabaseSource
	(*DatabaseSourceGroup)(nil),     // 2: chalk.graph.v2.DatabaseSourceGroup
	(*StreamSourceReference)(nil),   // 3: chalk.graph.v2.StreamSourceReference
	(*StreamSource)(nil),            // 4: chalk.graph.v2.StreamSource
	(*SourceSecrets)(nil),           // 5: chalk.graph.v2.SourceSecrets
	nil,                             // 6: chalk.graph.v2.DatabaseSource.OptionsEntry
	nil,                             // 7: chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry
	nil,                             // 8: chalk.graph.v2.StreamSource.OptionsEntry
	nil,                             // 9: chalk.graph.v2.SourceSecrets.SecretsEntry
	(*structpb.Value)(nil),          // 10: google.protobuf.Value
}
var file_chalk_graph_v2_sources_proto_depIdxs = []int32{
	6,  // 0: chalk.graph.v2.DatabaseSource.options:type_name -> chalk.graph.v2.DatabaseSource.OptionsEntry
	0,  // 1: chalk.graph.v2.DatabaseSourceGroup.default_source:type_name -> chalk.graph.v2.DatabaseSourceReference
	7,  // 2: chalk.graph.v2.DatabaseSourceGroup.tagged_sources:type_name -> chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry
	8,  // 3: chalk.graph.v2.StreamSource.options:type_name -> chalk.graph.v2.StreamSource.OptionsEntry
	9,  // 4: chalk.graph.v2.SourceSecrets.secrets:type_name -> chalk.graph.v2.SourceSecrets.SecretsEntry
	10, // 5: chalk.graph.v2.DatabaseSource.OptionsEntry.value:type_name -> google.protobuf.Value
	0,  // 6: chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry.value:type_name -> chalk.graph.v2.DatabaseSourceReference
	10, // 7: chalk.graph.v2.StreamSource.OptionsEntry.value:type_name -> google.protobuf.Value
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_chalk_graph_v2_sources_proto_init() }
func file_chalk_graph_v2_sources_proto_init() {
	if File_chalk_graph_v2_sources_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_graph_v2_sources_proto_rawDesc), len(file_chalk_graph_v2_sources_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_graph_v2_sources_proto_goTypes,
		DependencyIndexes: file_chalk_graph_v2_sources_proto_depIdxs,
		MessageInfos:      file_chalk_graph_v2_sources_proto_msgTypes,
	}.Build()
	File_chalk_graph_v2_sources_proto = out.File
	file_chalk_graph_v2_sources_proto_goTypes = nil
	file_chalk_graph_v2_sources_proto_depIdxs = nil
}
