// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/graph/v2/sources.proto

package graphv2

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pointer to an underlying database source -- used by native sql resolvers to identify which DB they are for
type DatabaseSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the database source -- e.g. postgres, bigquery
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the database source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DatabaseSourceReference) Reset() {
	*x = DatabaseSourceReference{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceReference) ProtoMessage() {}

func (x *DatabaseSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceReference.ProtoReflect.Descriptor instead.
func (*DatabaseSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseSourceReference) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *DatabaseSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the database source -- e.g. postgres, bigquery
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the database source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE.
	Options map[string]*structpb.Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatabaseSource) Reset() {
	*x = DatabaseSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSource) ProtoMessage() {}

func (x *DatabaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSource.ProtoReflect.Descriptor instead.
func (*DatabaseSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseSource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *DatabaseSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseSource) GetOptions() map[string]*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

type DatabaseSourceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultSource *DatabaseSourceReference            `protobuf:"bytes,2,opt,name=default_source,json=defaultSource,proto3" json:"default_source,omitempty"`
	TaggedSources map[string]*DatabaseSourceReference `protobuf:"bytes,3,rep,name=tagged_sources,json=taggedSources,proto3" json:"tagged_sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatabaseSourceGroup) Reset() {
	*x = DatabaseSourceGroup{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceGroup) ProtoMessage() {}

func (x *DatabaseSourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceGroup.ProtoReflect.Descriptor instead.
func (*DatabaseSourceGroup) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseSourceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseSourceGroup) GetDefaultSource() *DatabaseSourceReference {
	if x != nil {
		return x.DefaultSource
	}
	return nil
}

func (x *DatabaseSourceGroup) GetTaggedSources() map[string]*DatabaseSourceReference {
	if x != nil {
		return x.TaggedSources
	}
	return nil
}

// Pointer to an underlying stream source -- used by stream resolvers
type StreamSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the stream source -- e.g. kafka, pubsub, sqs
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the stream source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StreamSourceReference) Reset() {
	*x = StreamSourceReference{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSourceReference) ProtoMessage() {}

func (x *StreamSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSourceReference.ProtoReflect.Descriptor instead.
func (*StreamSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{3}
}

func (x *StreamSourceReference) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *StreamSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StreamSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the stream source -- e.g. kafka, pubsub, sqs
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the stream source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE.
	Options map[string]*structpb.Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{4}
}

func (x *StreamSource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *StreamSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamSource) GetOptions() map[string]*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

// Start of hydrated sources: NONE OF THE BELOW ITEMS SHOULD BE PERSISTED
type HydratedSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*HydratedSource_Stream
	//	*HydratedSource_Database
	Source isHydratedSource_Source `protobuf_oneof:"source"`
}

func (x *HydratedSource) Reset() {
	*x = HydratedSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedSource) ProtoMessage() {}

func (x *HydratedSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedSource.ProtoReflect.Descriptor instead.
func (*HydratedSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{5}
}

func (m *HydratedSource) GetSource() isHydratedSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *HydratedSource) GetStream() *HydratedStreamSource {
	if x, ok := x.GetSource().(*HydratedSource_Stream); ok {
		return x.Stream
	}
	return nil
}

func (x *HydratedSource) GetDatabase() *HydratedDatabaseSource {
	if x, ok := x.GetSource().(*HydratedSource_Database); ok {
		return x.Database
	}
	return nil
}

type isHydratedSource_Source interface {
	isHydratedSource_Source()
}

type HydratedSource_Stream struct {
	Stream *HydratedStreamSource `protobuf:"bytes,1,opt,name=stream,proto3,oneof"`
}

type HydratedSource_Database struct {
	Database *HydratedDatabaseSource `protobuf:"bytes,2,opt,name=database,proto3,oneof"`
}

func (*HydratedSource_Stream) isHydratedSource_Source() {}

func (*HydratedSource_Database) isHydratedSource_Source() {}

type HydratedSourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*HydratedSource `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *HydratedSourceList) Reset() {
	*x = HydratedSourceList{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedSourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedSourceList) ProtoMessage() {}

func (x *HydratedSourceList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedSourceList.ProtoReflect.Descriptor instead.
func (*HydratedSourceList) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{6}
}

func (x *HydratedSourceList) GetSources() []*HydratedSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

type HydratedStreamSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*HydratedStreamSource_Kafka
	//	*HydratedStreamSource_Kinesis
	//	*HydratedStreamSource_Pubsub
	Source isHydratedStreamSource_Source `protobuf_oneof:"source"`
}

func (x *HydratedStreamSource) Reset() {
	*x = HydratedStreamSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedStreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedStreamSource) ProtoMessage() {}

func (x *HydratedStreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedStreamSource.ProtoReflect.Descriptor instead.
func (*HydratedStreamSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{7}
}

func (m *HydratedStreamSource) GetSource() isHydratedStreamSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *HydratedStreamSource) GetKafka() *KafkaSource {
	if x, ok := x.GetSource().(*HydratedStreamSource_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *HydratedStreamSource) GetKinesis() *KinesisSource {
	if x, ok := x.GetSource().(*HydratedStreamSource_Kinesis); ok {
		return x.Kinesis
	}
	return nil
}

func (x *HydratedStreamSource) GetPubsub() *PubSubSource {
	if x, ok := x.GetSource().(*HydratedStreamSource_Pubsub); ok {
		return x.Pubsub
	}
	return nil
}

type isHydratedStreamSource_Source interface {
	isHydratedStreamSource_Source()
}

type HydratedStreamSource_Kafka struct {
	Kafka *KafkaSource `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

type HydratedStreamSource_Kinesis struct {
	Kinesis *KinesisSource `protobuf:"bytes,2,opt,name=kinesis,proto3,oneof"`
}

type HydratedStreamSource_Pubsub struct {
	Pubsub *PubSubSource `protobuf:"bytes,3,opt,name=pubsub,proto3,oneof"`
}

func (*HydratedStreamSource_Kafka) isHydratedStreamSource_Source() {}

func (*HydratedStreamSource_Kinesis) isHydratedStreamSource_Source() {}

func (*HydratedStreamSource_Pubsub) isHydratedStreamSource_Source() {}

type KinesisSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StreamName                *string              `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3,oneof" json:"stream_name,omitempty"`
	StreamArn                 *string              `protobuf:"bytes,3,opt,name=stream_arn,json=streamArn,proto3,oneof" json:"stream_arn,omitempty"`
	RegionName                *string              `protobuf:"bytes,4,opt,name=region_name,json=regionName,proto3,oneof" json:"region_name,omitempty"`
	LateArrivalDeadline       *durationpb.Duration `protobuf:"bytes,5,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueStreamName *string              `protobuf:"bytes,6,opt,name=dead_letter_queue_stream_name,json=deadLetterQueueStreamName,proto3,oneof" json:"dead_letter_queue_stream_name,omitempty"`
	AwsAccessKeyId            *string              `protobuf:"bytes,7,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3,oneof" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey        *string              `protobuf:"bytes,8,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3,oneof" json:"aws_secret_access_key,omitempty"`
	AwsSessionToken           *string              `protobuf:"bytes,9,opt,name=aws_session_token,json=awsSessionToken,proto3,oneof" json:"aws_session_token,omitempty"`
	EndpointUrl               *string              `protobuf:"bytes,10,opt,name=endpoint_url,json=endpointUrl,proto3,oneof" json:"endpoint_url,omitempty"`
	ConsumerRoleArn           *string              `protobuf:"bytes,11,opt,name=consumer_role_arn,json=consumerRoleArn,proto3,oneof" json:"consumer_role_arn,omitempty"`
}

func (x *KinesisSource) Reset() {
	*x = KinesisSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KinesisSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KinesisSource) ProtoMessage() {}

func (x *KinesisSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KinesisSource.ProtoReflect.Descriptor instead.
func (*KinesisSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{8}
}

func (x *KinesisSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KinesisSource) GetStreamName() string {
	if x != nil && x.StreamName != nil {
		return *x.StreamName
	}
	return ""
}

func (x *KinesisSource) GetStreamArn() string {
	if x != nil && x.StreamArn != nil {
		return *x.StreamArn
	}
	return ""
}

func (x *KinesisSource) GetRegionName() string {
	if x != nil && x.RegionName != nil {
		return *x.RegionName
	}
	return ""
}

func (x *KinesisSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *KinesisSource) GetDeadLetterQueueStreamName() string {
	if x != nil && x.DeadLetterQueueStreamName != nil {
		return *x.DeadLetterQueueStreamName
	}
	return ""
}

func (x *KinesisSource) GetAwsAccessKeyId() string {
	if x != nil && x.AwsAccessKeyId != nil {
		return *x.AwsAccessKeyId
	}
	return ""
}

func (x *KinesisSource) GetAwsSecretAccessKey() string {
	if x != nil && x.AwsSecretAccessKey != nil {
		return *x.AwsSecretAccessKey
	}
	return ""
}

func (x *KinesisSource) GetAwsSessionToken() string {
	if x != nil && x.AwsSessionToken != nil {
		return *x.AwsSessionToken
	}
	return ""
}

func (x *KinesisSource) GetEndpointUrl() string {
	if x != nil && x.EndpointUrl != nil {
		return *x.EndpointUrl
	}
	return ""
}

func (x *KinesisSource) GetConsumerRoleArn() string {
	if x != nil && x.ConsumerRoleArn != nil {
		return *x.ConsumerRoleArn
	}
	return ""
}

type KafkaSourceBootstrapServers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []string `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *KafkaSourceBootstrapServers) Reset() {
	*x = KafkaSourceBootstrapServers{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaSourceBootstrapServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSourceBootstrapServers) ProtoMessage() {}

func (x *KafkaSourceBootstrapServers) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSourceBootstrapServers.ProtoReflect.Descriptor instead.
func (*KafkaSourceBootstrapServers) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{9}
}

func (x *KafkaSourceBootstrapServers) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

type KafkaSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BootstrapServers     *KafkaSourceBootstrapServers `protobuf:"bytes,2,opt,name=bootstrap_servers,json=bootstrapServers,proto3,oneof" json:"bootstrap_servers,omitempty"`
	Topic                *string                      `protobuf:"bytes,3,opt,name=topic,proto3,oneof" json:"topic,omitempty"`
	SslKeystoreLocation  *string                      `protobuf:"bytes,4,opt,name=ssl_keystore_location,json=sslKeystoreLocation,proto3,oneof" json:"ssl_keystore_location,omitempty"`
	SslCaFile            *string                      `protobuf:"bytes,5,opt,name=ssl_ca_file,json=sslCaFile,proto3,oneof" json:"ssl_ca_file,omitempty"`
	ClientIdPrefix       string                       `protobuf:"bytes,6,opt,name=client_id_prefix,json=clientIdPrefix,proto3" json:"client_id_prefix,omitempty"`
	GroupIdPrefix        string                       `protobuf:"bytes,7,opt,name=group_id_prefix,json=groupIdPrefix,proto3" json:"group_id_prefix,omitempty"`
	SecurityProtocol     string                       `protobuf:"bytes,8,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
	SaslMechanism        string                       `protobuf:"bytes,9,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	SaslUsername         *string                      `protobuf:"bytes,10,opt,name=sasl_username,json=saslUsername,proto3,oneof" json:"sasl_username,omitempty"`
	SaslPassword         *string                      `protobuf:"bytes,11,opt,name=sasl_password,json=saslPassword,proto3,oneof" json:"sasl_password,omitempty"`
	LateArrivalDeadline  *durationpb.Duration         `protobuf:"bytes,12,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueTopic *string                      `protobuf:"bytes,13,opt,name=dead_letter_queue_topic,json=deadLetterQueueTopic,proto3,oneof" json:"dead_letter_queue_topic,omitempty"`
}

func (x *KafkaSource) Reset() {
	*x = KafkaSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSource) ProtoMessage() {}

func (x *KafkaSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSource.ProtoReflect.Descriptor instead.
func (*KafkaSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{10}
}

func (x *KafkaSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaSource) GetBootstrapServers() *KafkaSourceBootstrapServers {
	if x != nil {
		return x.BootstrapServers
	}
	return nil
}

func (x *KafkaSource) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *KafkaSource) GetSslKeystoreLocation() string {
	if x != nil && x.SslKeystoreLocation != nil {
		return *x.SslKeystoreLocation
	}
	return ""
}

func (x *KafkaSource) GetSslCaFile() string {
	if x != nil && x.SslCaFile != nil {
		return *x.SslCaFile
	}
	return ""
}

func (x *KafkaSource) GetClientIdPrefix() string {
	if x != nil {
		return x.ClientIdPrefix
	}
	return ""
}

func (x *KafkaSource) GetGroupIdPrefix() string {
	if x != nil {
		return x.GroupIdPrefix
	}
	return ""
}

func (x *KafkaSource) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

func (x *KafkaSource) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *KafkaSource) GetSaslUsername() string {
	if x != nil && x.SaslUsername != nil {
		return *x.SaslUsername
	}
	return ""
}

func (x *KafkaSource) GetSaslPassword() string {
	if x != nil && x.SaslPassword != nil {
		return *x.SaslPassword
	}
	return ""
}

func (x *KafkaSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *KafkaSource) GetDeadLetterQueueTopic() string {
	if x != nil && x.DeadLetterQueueTopic != nil {
		return *x.DeadLetterQueueTopic
	}
	return ""
}

type PubSubSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId            *string              `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	SubscriptionId       *string              `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3,oneof" json:"subscription_id,omitempty"`
	LateArrivalDeadline  *durationpb.Duration `protobuf:"bytes,4,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueTopic *string              `protobuf:"bytes,5,opt,name=dead_letter_queue_topic,json=deadLetterQueueTopic,proto3,oneof" json:"dead_letter_queue_topic,omitempty"`
}

func (x *PubSubSource) Reset() {
	*x = PubSubSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubSource) ProtoMessage() {}

func (x *PubSubSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubSource.ProtoReflect.Descriptor instead.
func (*PubSubSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{11}
}

func (x *PubSubSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PubSubSource) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *PubSubSource) GetSubscriptionId() string {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return ""
}

func (x *PubSubSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *PubSubSource) GetDeadLetterQueueTopic() string {
	if x != nil && x.DeadLetterQueueTopic != nil {
		return *x.DeadLetterQueueTopic
	}
	return ""
}

type HydratedDatabaseSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*HydratedDatabaseSource_Bigquery
	//	*HydratedDatabaseSource_Cloudsql
	//	*HydratedDatabaseSource_Databricks
	//	*HydratedDatabaseSource_Mysql
	//	*HydratedDatabaseSource_Postgres
	//	*HydratedDatabaseSource_Redshift
	//	*HydratedDatabaseSource_Snowflake
	//	*HydratedDatabaseSource_Sqlite
	//	*HydratedDatabaseSource_Spanner
	//	*HydratedDatabaseSource_Trino
	//	*HydratedDatabaseSource_Dynamodb
	//	*HydratedDatabaseSource_Athena
	Source isHydratedDatabaseSource_Source `protobuf_oneof:"source"`
}

func (x *HydratedDatabaseSource) Reset() {
	*x = HydratedDatabaseSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HydratedDatabaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HydratedDatabaseSource) ProtoMessage() {}

func (x *HydratedDatabaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HydratedDatabaseSource.ProtoReflect.Descriptor instead.
func (*HydratedDatabaseSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{12}
}

func (m *HydratedDatabaseSource) GetSource() isHydratedDatabaseSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *HydratedDatabaseSource) GetBigquery() *BigQuerySource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Bigquery); ok {
		return x.Bigquery
	}
	return nil
}

func (x *HydratedDatabaseSource) GetCloudsql() *CloudSQLSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Cloudsql); ok {
		return x.Cloudsql
	}
	return nil
}

func (x *HydratedDatabaseSource) GetDatabricks() *DatabricksSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Databricks); ok {
		return x.Databricks
	}
	return nil
}

func (x *HydratedDatabaseSource) GetMysql() *MySQLSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (x *HydratedDatabaseSource) GetPostgres() *PostgresSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *HydratedDatabaseSource) GetRedshift() *RedshiftSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Redshift); ok {
		return x.Redshift
	}
	return nil
}

func (x *HydratedDatabaseSource) GetSnowflake() *SnowflakeSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Snowflake); ok {
		return x.Snowflake
	}
	return nil
}

func (x *HydratedDatabaseSource) GetSqlite() *SQLiteSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Sqlite); ok {
		return x.Sqlite
	}
	return nil
}

func (x *HydratedDatabaseSource) GetSpanner() *SpannerSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Spanner); ok {
		return x.Spanner
	}
	return nil
}

func (x *HydratedDatabaseSource) GetTrino() *TrinoSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Trino); ok {
		return x.Trino
	}
	return nil
}

func (x *HydratedDatabaseSource) GetDynamodb() *DynamoDBSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Dynamodb); ok {
		return x.Dynamodb
	}
	return nil
}

func (x *HydratedDatabaseSource) GetAthena() *AthenaSource {
	if x, ok := x.GetSource().(*HydratedDatabaseSource_Athena); ok {
		return x.Athena
	}
	return nil
}

type isHydratedDatabaseSource_Source interface {
	isHydratedDatabaseSource_Source()
}

type HydratedDatabaseSource_Bigquery struct {
	Bigquery *BigQuerySource `protobuf:"bytes,1,opt,name=bigquery,proto3,oneof"`
}

type HydratedDatabaseSource_Cloudsql struct {
	Cloudsql *CloudSQLSource `protobuf:"bytes,2,opt,name=cloudsql,proto3,oneof"`
}

type HydratedDatabaseSource_Databricks struct {
	Databricks *DatabricksSource `protobuf:"bytes,3,opt,name=databricks,proto3,oneof"`
}

type HydratedDatabaseSource_Mysql struct {
	Mysql *MySQLSource `protobuf:"bytes,4,opt,name=mysql,proto3,oneof"`
}

type HydratedDatabaseSource_Postgres struct {
	Postgres *PostgresSource `protobuf:"bytes,5,opt,name=postgres,proto3,oneof"`
}

type HydratedDatabaseSource_Redshift struct {
	Redshift *RedshiftSource `protobuf:"bytes,6,opt,name=redshift,proto3,oneof"`
}

type HydratedDatabaseSource_Snowflake struct {
	Snowflake *SnowflakeSource `protobuf:"bytes,7,opt,name=snowflake,proto3,oneof"`
}

type HydratedDatabaseSource_Sqlite struct {
	Sqlite *SQLiteSource `protobuf:"bytes,8,opt,name=sqlite,proto3,oneof"`
}

type HydratedDatabaseSource_Spanner struct {
	Spanner *SpannerSource `protobuf:"bytes,9,opt,name=spanner,proto3,oneof"`
}

type HydratedDatabaseSource_Trino struct {
	Trino *TrinoSource `protobuf:"bytes,10,opt,name=trino,proto3,oneof"`
}

type HydratedDatabaseSource_Dynamodb struct {
	Dynamodb *DynamoDBSource `protobuf:"bytes,11,opt,name=dynamodb,proto3,oneof"`
}

type HydratedDatabaseSource_Athena struct {
	Athena *AthenaSource `protobuf:"bytes,12,opt,name=athena,proto3,oneof"`
}

func (*HydratedDatabaseSource_Bigquery) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Cloudsql) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Databricks) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Mysql) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Postgres) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Redshift) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Snowflake) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Sqlite) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Spanner) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Trino) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Dynamodb) isHydratedDatabaseSource_Source() {}

func (*HydratedDatabaseSource_Athena) isHydratedDatabaseSource_Source() {}

type BigQuerySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project           *string                    `protobuf:"bytes,2,opt,name=project,proto3,oneof" json:"project,omitempty"`
	Dataset           *string                    `protobuf:"bytes,3,opt,name=dataset,proto3,oneof" json:"dataset,omitempty"`
	Location          *string                    `protobuf:"bytes,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
	CredentialsBase64 *string                    `protobuf:"bytes,5,opt,name=credentials_base64,json=credentialsBase64,proto3,oneof" json:"credentials_base64,omitempty"`
	CredentialsPath   *string                    `protobuf:"bytes,6,opt,name=credentials_path,json=credentialsPath,proto3,oneof" json:"credentials_path,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BigQuerySource) Reset() {
	*x = BigQuerySource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQuerySource) ProtoMessage() {}

func (x *BigQuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQuerySource.ProtoReflect.Descriptor instead.
func (*BigQuerySource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{13}
}

func (x *BigQuerySource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BigQuerySource) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *BigQuerySource) GetDataset() string {
	if x != nil && x.Dataset != nil {
		return *x.Dataset
	}
	return ""
}

func (x *BigQuerySource) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *BigQuerySource) GetCredentialsBase64() string {
	if x != nil && x.CredentialsBase64 != nil {
		return *x.CredentialsBase64
	}
	return ""
}

func (x *BigQuerySource) GetCredentialsPath() string {
	if x != nil && x.CredentialsPath != nil {
		return *x.CredentialsPath
	}
	return ""
}

func (x *BigQuerySource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *BigQuerySource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type CloudSQLSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Db              *string                    `protobuf:"bytes,2,opt,name=db,proto3,oneof" json:"db,omitempty"`
	User            *string                    `protobuf:"bytes,3,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Password        *string                    `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	InstanceName    *string                    `protobuf:"bytes,5,opt,name=instance_name,json=instanceName,proto3,oneof" json:"instance_name,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudSQLSource) Reset() {
	*x = CloudSQLSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSQLSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSQLSource) ProtoMessage() {}

func (x *CloudSQLSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSQLSource.ProtoReflect.Descriptor instead.
func (*CloudSQLSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{14}
}

func (x *CloudSQLSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudSQLSource) GetDb() string {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return ""
}

func (x *CloudSQLSource) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *CloudSQLSource) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CloudSQLSource) GetInstanceName() string {
	if x != nil && x.InstanceName != nil {
		return *x.InstanceName
	}
	return ""
}

func (x *CloudSQLSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *CloudSQLSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type DatabricksSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            *string                    `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Port            *int64                     `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Db              *string                    `protobuf:"bytes,4,opt,name=db,proto3,oneof" json:"db,omitempty"`
	HttpPath        *string                    `protobuf:"bytes,5,opt,name=http_path,json=httpPath,proto3,oneof" json:"http_path,omitempty"`
	AccessToken     *string                    `protobuf:"bytes,6,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatabricksSource) Reset() {
	*x = DatabricksSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabricksSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabricksSource) ProtoMessage() {}

func (x *DatabricksSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabricksSource.ProtoReflect.Descriptor instead.
func (*DatabricksSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{15}
}

func (x *DatabricksSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabricksSource) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *DatabricksSource) GetPort() int64 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *DatabricksSource) GetDb() string {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return ""
}

func (x *DatabricksSource) GetHttpPath() string {
	if x != nil && x.HttpPath != nil {
		return *x.HttpPath
	}
	return ""
}

func (x *DatabricksSource) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *DatabricksSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *DatabricksSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type DynamoDBSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AwsClientIdOverride     *string                    `protobuf:"bytes,2,opt,name=aws_client_id_override,json=awsClientIdOverride,proto3,oneof" json:"aws_client_id_override,omitempty"`
	AwsClientSecretOverride *string                    `protobuf:"bytes,3,opt,name=aws_client_secret_override,json=awsClientSecretOverride,proto3,oneof" json:"aws_client_secret_override,omitempty"`
	AwsRegionOverride       *string                    `protobuf:"bytes,4,opt,name=aws_region_override,json=awsRegionOverride,proto3,oneof" json:"aws_region_override,omitempty"`
	EndpointOverride        *string                    `protobuf:"bytes,5,opt,name=endpoint_override,json=endpointOverride,proto3,oneof" json:"endpoint_override,omitempty"`
	EngineArgs              map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs         map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DynamoDBSource) Reset() {
	*x = DynamoDBSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBSource) ProtoMessage() {}

func (x *DynamoDBSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBSource.ProtoReflect.Descriptor instead.
func (*DynamoDBSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{16}
}

func (x *DynamoDBSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DynamoDBSource) GetAwsClientIdOverride() string {
	if x != nil && x.AwsClientIdOverride != nil {
		return *x.AwsClientIdOverride
	}
	return ""
}

func (x *DynamoDBSource) GetAwsClientSecretOverride() string {
	if x != nil && x.AwsClientSecretOverride != nil {
		return *x.AwsClientSecretOverride
	}
	return ""
}

func (x *DynamoDBSource) GetAwsRegionOverride() string {
	if x != nil && x.AwsRegionOverride != nil {
		return *x.AwsRegionOverride
	}
	return ""
}

func (x *DynamoDBSource) GetEndpointOverride() string {
	if x != nil && x.EndpointOverride != nil {
		return *x.EndpointOverride
	}
	return ""
}

func (x *DynamoDBSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *DynamoDBSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type MySQLSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            *string                    `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Port            *int64                     `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Db              *string                    `protobuf:"bytes,4,opt,name=db,proto3,oneof" json:"db,omitempty"`
	User            *string                    `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Password        *string                    `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MySQLSource) Reset() {
	*x = MySQLSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLSource) ProtoMessage() {}

func (x *MySQLSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLSource.ProtoReflect.Descriptor instead.
func (*MySQLSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{17}
}

func (x *MySQLSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MySQLSource) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *MySQLSource) GetPort() int64 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *MySQLSource) GetDb() string {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return ""
}

func (x *MySQLSource) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *MySQLSource) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *MySQLSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *MySQLSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type PostgresSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            *string                    `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Port            *int64                     `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Db              *string                    `protobuf:"bytes,4,opt,name=db,proto3,oneof" json:"db,omitempty"`
	User            *string                    `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Password        *string                    `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostgresSource) Reset() {
	*x = PostgresSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSource) ProtoMessage() {}

func (x *PostgresSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSource.ProtoReflect.Descriptor instead.
func (*PostgresSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{18}
}

func (x *PostgresSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresSource) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *PostgresSource) GetPort() int64 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *PostgresSource) GetDb() string {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return ""
}

func (x *PostgresSource) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *PostgresSource) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *PostgresSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *PostgresSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type RedshiftSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host          *string `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Port          *int64  `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Db            *string `protobuf:"bytes,4,opt,name=db,proto3,oneof" json:"db,omitempty"`
	User          *string `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Password      *string `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
	UnloadIamRole *string `protobuf:"bytes,7,opt,name=unload_iam_role,json=unloadIamRole,proto3,oneof" json:"unload_iam_role,omitempty"`
	// optional string s3_client = 8; // TODO: Is a string to represent an s3 client correct? maybe create a new message type
	S3Bucket        *string                    `protobuf:"bytes,9,opt,name=s3_bucket,json=s3Bucket,proto3,oneof" json:"s3_bucket,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,11,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedshiftSource) Reset() {
	*x = RedshiftSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedshiftSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftSource) ProtoMessage() {}

func (x *RedshiftSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftSource.ProtoReflect.Descriptor instead.
func (*RedshiftSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{19}
}

func (x *RedshiftSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RedshiftSource) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *RedshiftSource) GetPort() int64 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *RedshiftSource) GetDb() string {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return ""
}

func (x *RedshiftSource) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *RedshiftSource) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *RedshiftSource) GetUnloadIamRole() string {
	if x != nil && x.UnloadIamRole != nil {
		return *x.UnloadIamRole
	}
	return ""
}

func (x *RedshiftSource) GetS3Bucket() string {
	if x != nil && x.S3Bucket != nil {
		return *x.S3Bucket
	}
	return ""
}

func (x *RedshiftSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *RedshiftSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type SnowflakeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Db                *string                    `protobuf:"bytes,2,opt,name=db,proto3,oneof" json:"db,omitempty"`
	Schema            *string                    `protobuf:"bytes,3,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
	Role              *string                    `protobuf:"bytes,4,opt,name=role,proto3,oneof" json:"role,omitempty"`
	User              *string                    `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Password          *string                    `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
	AccountIdentifier *string                    `protobuf:"bytes,7,opt,name=account_identifier,json=accountIdentifier,proto3,oneof" json:"account_identifier,omitempty"`
	Warehouse         *string                    `protobuf:"bytes,8,opt,name=warehouse,proto3,oneof" json:"warehouse,omitempty"`
	PrivateKeyB64     *string                    `protobuf:"bytes,9,opt,name=private_key_b64,json=privateKeyB64,proto3,oneof" json:"private_key_b64,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,11,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SnowflakeSource) Reset() {
	*x = SnowflakeSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnowflakeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeSource) ProtoMessage() {}

func (x *SnowflakeSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeSource.ProtoReflect.Descriptor instead.
func (*SnowflakeSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{20}
}

func (x *SnowflakeSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnowflakeSource) GetDb() string {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return ""
}

func (x *SnowflakeSource) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

func (x *SnowflakeSource) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *SnowflakeSource) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *SnowflakeSource) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SnowflakeSource) GetAccountIdentifier() string {
	if x != nil && x.AccountIdentifier != nil {
		return *x.AccountIdentifier
	}
	return ""
}

func (x *SnowflakeSource) GetWarehouse() string {
	if x != nil && x.Warehouse != nil {
		return *x.Warehouse
	}
	return ""
}

func (x *SnowflakeSource) GetPrivateKeyB64() string {
	if x != nil && x.PrivateKeyB64 != nil {
		return *x.PrivateKeyB64
	}
	return ""
}

func (x *SnowflakeSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SnowflakeSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type SQLiteSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileName        *string                    `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3,oneof" json:"file_name,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,3,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,4,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SQLiteSource) Reset() {
	*x = SQLiteSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLiteSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLiteSource) ProtoMessage() {}

func (x *SQLiteSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLiteSource.ProtoReflect.Descriptor instead.
func (*SQLiteSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{21}
}

func (x *SQLiteSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLiteSource) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *SQLiteSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SQLiteSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type SpannerSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project           *string                    `protobuf:"bytes,2,opt,name=project,proto3,oneof" json:"project,omitempty"`
	Instance          *string                    `protobuf:"bytes,3,opt,name=instance,proto3,oneof" json:"instance,omitempty"`
	Database          *string                    `protobuf:"bytes,4,opt,name=database,proto3,oneof" json:"database,omitempty"`
	CredentialsBase64 *string                    `protobuf:"bytes,5,opt,name=credentials_base64,json=credentialsBase64,proto3,oneof" json:"credentials_base64,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpannerSource) Reset() {
	*x = SpannerSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpannerSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpannerSource) ProtoMessage() {}

func (x *SpannerSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpannerSource.ProtoReflect.Descriptor instead.
func (*SpannerSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{22}
}

func (x *SpannerSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpannerSource) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *SpannerSource) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SpannerSource) GetDatabase() string {
	if x != nil && x.Database != nil {
		return *x.Database
	}
	return ""
}

func (x *SpannerSource) GetCredentialsBase64() string {
	if x != nil && x.CredentialsBase64 != nil {
		return *x.CredentialsBase64
	}
	return ""
}

func (x *SpannerSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SpannerSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type TrinoSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            *string                    `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Port            *int64                     `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Catalog         *string                    `protobuf:"bytes,4,opt,name=catalog,proto3,oneof" json:"catalog,omitempty"`
	Schema          *string                    `protobuf:"bytes,5,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
	User            *string                    `protobuf:"bytes,6,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Password        *string                    `protobuf:"bytes,7,opt,name=password,proto3,oneof" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrinoSource) Reset() {
	*x = TrinoSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrinoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrinoSource) ProtoMessage() {}

func (x *TrinoSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrinoSource.ProtoReflect.Descriptor instead.
func (*TrinoSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{23}
}

func (x *TrinoSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrinoSource) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *TrinoSource) GetPort() int64 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *TrinoSource) GetCatalog() string {
	if x != nil && x.Catalog != nil {
		return *x.Catalog
	}
	return ""
}

func (x *TrinoSource) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

func (x *TrinoSource) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *TrinoSource) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *TrinoSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *TrinoSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type AthenaSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AwsRegion          string                     `protobuf:"bytes,2,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	AwsAccessKeyId     *string                    `protobuf:"bytes,3,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3,oneof" json:"aws_access_key_id,omitempty"`
	AwsAccessKeySecret *string                    `protobuf:"bytes,4,opt,name=aws_access_key_secret,json=awsAccessKeySecret,proto3,oneof" json:"aws_access_key_secret,omitempty"`
	S3StagingDir       string                     `protobuf:"bytes,5,opt,name=s3_staging_dir,json=s3StagingDir,proto3" json:"s3_staging_dir,omitempty"`
	CatalogName        *string                    `protobuf:"bytes,6,opt,name=catalog_name,json=catalogName,proto3,oneof" json:"catalog_name,omitempty"`
	SchemaName         *string                    `protobuf:"bytes,7,opt,name=schema_name,json=schemaName,proto3,oneof" json:"schema_name,omitempty"`
	RoleArn            *string                    `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3,oneof" json:"role_arn,omitempty"`
	EngineArgs         map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs    map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkGroup          *string                    `protobuf:"bytes,11,opt,name=work_group,json=workGroup,proto3,oneof" json:"work_group,omitempty"`
}

func (x *AthenaSource) Reset() {
	*x = AthenaSource{}
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AthenaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthenaSource) ProtoMessage() {}

func (x *AthenaSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthenaSource.ProtoReflect.Descriptor instead.
func (*AthenaSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{24}
}

func (x *AthenaSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AthenaSource) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

func (x *AthenaSource) GetAwsAccessKeyId() string {
	if x != nil && x.AwsAccessKeyId != nil {
		return *x.AwsAccessKeyId
	}
	return ""
}

func (x *AthenaSource) GetAwsAccessKeySecret() string {
	if x != nil && x.AwsAccessKeySecret != nil {
		return *x.AwsAccessKeySecret
	}
	return ""
}

func (x *AthenaSource) GetS3StagingDir() string {
	if x != nil {
		return x.S3StagingDir
	}
	return ""
}

func (x *AthenaSource) GetCatalogName() string {
	if x != nil && x.CatalogName != nil {
		return *x.CatalogName
	}
	return ""
}

func (x *AthenaSource) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

func (x *AthenaSource) GetRoleArn() string {
	if x != nil && x.RoleArn != nil {
		return *x.RoleArn
	}
	return ""
}

func (x *AthenaSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *AthenaSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

func (x *AthenaSource) GetWorkGroup() string {
	if x != nil && x.WorkGroup != nil {
		return *x.WorkGroup
	}
	return ""
}

var File_chalk_graph_v2_sources_proto protoreflect.FileDescriptor

var file_chalk_graph_v2_sources_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x1a, 0x1a,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x02, 0x0a, 0x13,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x12, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4c, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xdc, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0,
	0x01, 0x0a, 0x0e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x4e, 0x0a, 0x12, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12,
	0x39, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd9, 0x05, 0x0a,
	0x0d, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x45, 0x0a, 0x1d, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x19, 0x64, 0x65, 0x61, 0x64,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x12, 0x61, 0x77, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x61,
	0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x72, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x64, 0x65,
	0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x22, 0x37, 0x0a, 0x1b, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x88, 0x06, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x15, 0x73, 0x73, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x13, 0x73, 0x73, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x5f,
	0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x09, 0x73, 0x73, 0x6c, 0x43, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x61, 0x73, 0x6c, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x73, 0x61,
	0x73, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x14, 0x64, 0x65, 0x61, 0x64, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x88,
	0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xbe, 0x02, 0x0a,
	0x0c, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x14, 0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xf2, 0x05,
	0x0a, 0x16, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x71, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x3c, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x6e, 0x6f,
	0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6e,
	0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x71,
	0x6c, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x51, 0x4c, 0x69,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x71, 0x6c, 0x69,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x05, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62,
	0x12, 0x36, 0x0a, 0x06, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xa7, 0x05, 0x0a, 0x0e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5f, 0x0a,
	0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a,
	0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xbb, 0x04, 0x0a,
	0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x64, 0x62, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5f, 0x0a,
	0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a,
	0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x64, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x04, 0x0a, 0x10, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x02, 0x64, 0x62, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x64, 0x62,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xde, 0x05, 0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x61, 0x77, 0x73, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x1a, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x17, 0x61, 0x77, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x11, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x77, 0x73,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x22, 0xba, 0x04, 0x0a, 0x0b, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x64, 0x62, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a,
	0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x64, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xc3, 0x04,
	0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x64, 0x62, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x64, 0x62, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0xb4, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x64, 0x62, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x75,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x61,
	0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x73,
	0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x64, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x89, 0x06, 0x0a, 0x0f, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x64, 0x62, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x36,
	0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x60, 0x0a,
	0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c,
	0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x64, 0x62, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x36, 0x34, 0x22, 0xbd, 0x03, 0x0a, 0x0c, 0x53, 0x51, 0x4c, 0x69, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a,
	0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x11,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x04, 0x0a, 0x0d, 0x53, 0x70, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x4e, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a,
	0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0xf1, 0x04, 0x0a, 0x0b,
	0x54, 0x72, 0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x72, 0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xb9, 0x06, 0x0a, 0x0c, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x33, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x33, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5d,
	0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x68, 0x65, 0x6e,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a,
	0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0xb5, 0x01, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x42, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2f, 0x76, 0x32, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x47,
	0x58, 0xaa, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x56, 0x32, 0xca, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x3a,
	0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_graph_v2_sources_proto_rawDescOnce sync.Once
	file_chalk_graph_v2_sources_proto_rawDescData = file_chalk_graph_v2_sources_proto_rawDesc
)

func file_chalk_graph_v2_sources_proto_rawDescGZIP() []byte {
	file_chalk_graph_v2_sources_proto_rawDescOnce.Do(func() {
		file_chalk_graph_v2_sources_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_graph_v2_sources_proto_rawDescData)
	})
	return file_chalk_graph_v2_sources_proto_rawDescData
}

var file_chalk_graph_v2_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_chalk_graph_v2_sources_proto_goTypes = []any{
	(*DatabaseSourceReference)(nil),     // 0: chalk.graph.v2.DatabaseSourceReference
	(*DatabaseSource)(nil),              // 1: chalk.graph.v2.DatabaseSource
	(*DatabaseSourceGroup)(nil),         // 2: chalk.graph.v2.DatabaseSourceGroup
	(*StreamSourceReference)(nil),       // 3: chalk.graph.v2.StreamSourceReference
	(*StreamSource)(nil),                // 4: chalk.graph.v2.StreamSource
	(*HydratedSource)(nil),              // 5: chalk.graph.v2.HydratedSource
	(*HydratedSourceList)(nil),          // 6: chalk.graph.v2.HydratedSourceList
	(*HydratedStreamSource)(nil),        // 7: chalk.graph.v2.HydratedStreamSource
	(*KinesisSource)(nil),               // 8: chalk.graph.v2.KinesisSource
	(*KafkaSourceBootstrapServers)(nil), // 9: chalk.graph.v2.KafkaSourceBootstrapServers
	(*KafkaSource)(nil),                 // 10: chalk.graph.v2.KafkaSource
	(*PubSubSource)(nil),                // 11: chalk.graph.v2.PubSubSource
	(*HydratedDatabaseSource)(nil),      // 12: chalk.graph.v2.HydratedDatabaseSource
	(*BigQuerySource)(nil),              // 13: chalk.graph.v2.BigQuerySource
	(*CloudSQLSource)(nil),              // 14: chalk.graph.v2.CloudSQLSource
	(*DatabricksSource)(nil),            // 15: chalk.graph.v2.DatabricksSource
	(*DynamoDBSource)(nil),              // 16: chalk.graph.v2.DynamoDBSource
	(*MySQLSource)(nil),                 // 17: chalk.graph.v2.MySQLSource
	(*PostgresSource)(nil),              // 18: chalk.graph.v2.PostgresSource
	(*RedshiftSource)(nil),              // 19: chalk.graph.v2.RedshiftSource
	(*SnowflakeSource)(nil),             // 20: chalk.graph.v2.SnowflakeSource
	(*SQLiteSource)(nil),                // 21: chalk.graph.v2.SQLiteSource
	(*SpannerSource)(nil),               // 22: chalk.graph.v2.SpannerSource
	(*TrinoSource)(nil),                 // 23: chalk.graph.v2.TrinoSource
	(*AthenaSource)(nil),                // 24: chalk.graph.v2.AthenaSource
	nil,                                 // 25: chalk.graph.v2.DatabaseSource.OptionsEntry
	nil,                                 // 26: chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry
	nil,                                 // 27: chalk.graph.v2.StreamSource.OptionsEntry
	nil,                                 // 28: chalk.graph.v2.BigQuerySource.EngineArgsEntry
	nil,                                 // 29: chalk.graph.v2.BigQuerySource.AsyncEngineArgsEntry
	nil,                                 // 30: chalk.graph.v2.CloudSQLSource.EngineArgsEntry
	nil,                                 // 31: chalk.graph.v2.CloudSQLSource.AsyncEngineArgsEntry
	nil,                                 // 32: chalk.graph.v2.DatabricksSource.EngineArgsEntry
	nil,                                 // 33: chalk.graph.v2.DatabricksSource.AsyncEngineArgsEntry
	nil,                                 // 34: chalk.graph.v2.DynamoDBSource.EngineArgsEntry
	nil,                                 // 35: chalk.graph.v2.DynamoDBSource.AsyncEngineArgsEntry
	nil,                                 // 36: chalk.graph.v2.MySQLSource.EngineArgsEntry
	nil,                                 // 37: chalk.graph.v2.MySQLSource.AsyncEngineArgsEntry
	nil,                                 // 38: chalk.graph.v2.PostgresSource.EngineArgsEntry
	nil,                                 // 39: chalk.graph.v2.PostgresSource.AsyncEngineArgsEntry
	nil,                                 // 40: chalk.graph.v2.RedshiftSource.EngineArgsEntry
	nil,                                 // 41: chalk.graph.v2.RedshiftSource.AsyncEngineArgsEntry
	nil,                                 // 42: chalk.graph.v2.SnowflakeSource.EngineArgsEntry
	nil,                                 // 43: chalk.graph.v2.SnowflakeSource.AsyncEngineArgsEntry
	nil,                                 // 44: chalk.graph.v2.SQLiteSource.EngineArgsEntry
	nil,                                 // 45: chalk.graph.v2.SQLiteSource.AsyncEngineArgsEntry
	nil,                                 // 46: chalk.graph.v2.SpannerSource.EngineArgsEntry
	nil,                                 // 47: chalk.graph.v2.SpannerSource.AsyncEngineArgsEntry
	nil,                                 // 48: chalk.graph.v2.TrinoSource.EngineArgsEntry
	nil,                                 // 49: chalk.graph.v2.TrinoSource.AsyncEngineArgsEntry
	nil,                                 // 50: chalk.graph.v2.AthenaSource.EngineArgsEntry
	nil,                                 // 51: chalk.graph.v2.AthenaSource.AsyncEngineArgsEntry
	(*durationpb.Duration)(nil),         // 52: google.protobuf.Duration
	(*structpb.Value)(nil),              // 53: google.protobuf.Value
	(*v1.ScalarValue)(nil),              // 54: chalk.arrow.v1.ScalarValue
}
var file_chalk_graph_v2_sources_proto_depIdxs = []int32{
	25, // 0: chalk.graph.v2.DatabaseSource.options:type_name -> chalk.graph.v2.DatabaseSource.OptionsEntry
	0,  // 1: chalk.graph.v2.DatabaseSourceGroup.default_source:type_name -> chalk.graph.v2.DatabaseSourceReference
	26, // 2: chalk.graph.v2.DatabaseSourceGroup.tagged_sources:type_name -> chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry
	27, // 3: chalk.graph.v2.StreamSource.options:type_name -> chalk.graph.v2.StreamSource.OptionsEntry
	7,  // 4: chalk.graph.v2.HydratedSource.stream:type_name -> chalk.graph.v2.HydratedStreamSource
	12, // 5: chalk.graph.v2.HydratedSource.database:type_name -> chalk.graph.v2.HydratedDatabaseSource
	5,  // 6: chalk.graph.v2.HydratedSourceList.sources:type_name -> chalk.graph.v2.HydratedSource
	10, // 7: chalk.graph.v2.HydratedStreamSource.kafka:type_name -> chalk.graph.v2.KafkaSource
	8,  // 8: chalk.graph.v2.HydratedStreamSource.kinesis:type_name -> chalk.graph.v2.KinesisSource
	11, // 9: chalk.graph.v2.HydratedStreamSource.pubsub:type_name -> chalk.graph.v2.PubSubSource
	52, // 10: chalk.graph.v2.KinesisSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	9,  // 11: chalk.graph.v2.KafkaSource.bootstrap_servers:type_name -> chalk.graph.v2.KafkaSourceBootstrapServers
	52, // 12: chalk.graph.v2.KafkaSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	52, // 13: chalk.graph.v2.PubSubSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	13, // 14: chalk.graph.v2.HydratedDatabaseSource.bigquery:type_name -> chalk.graph.v2.BigQuerySource
	14, // 15: chalk.graph.v2.HydratedDatabaseSource.cloudsql:type_name -> chalk.graph.v2.CloudSQLSource
	15, // 16: chalk.graph.v2.HydratedDatabaseSource.databricks:type_name -> chalk.graph.v2.DatabricksSource
	17, // 17: chalk.graph.v2.HydratedDatabaseSource.mysql:type_name -> chalk.graph.v2.MySQLSource
	18, // 18: chalk.graph.v2.HydratedDatabaseSource.postgres:type_name -> chalk.graph.v2.PostgresSource
	19, // 19: chalk.graph.v2.HydratedDatabaseSource.redshift:type_name -> chalk.graph.v2.RedshiftSource
	20, // 20: chalk.graph.v2.HydratedDatabaseSource.snowflake:type_name -> chalk.graph.v2.SnowflakeSource
	21, // 21: chalk.graph.v2.HydratedDatabaseSource.sqlite:type_name -> chalk.graph.v2.SQLiteSource
	22, // 22: chalk.graph.v2.HydratedDatabaseSource.spanner:type_name -> chalk.graph.v2.SpannerSource
	23, // 23: chalk.graph.v2.HydratedDatabaseSource.trino:type_name -> chalk.graph.v2.TrinoSource
	16, // 24: chalk.graph.v2.HydratedDatabaseSource.dynamodb:type_name -> chalk.graph.v2.DynamoDBSource
	24, // 25: chalk.graph.v2.HydratedDatabaseSource.athena:type_name -> chalk.graph.v2.AthenaSource
	28, // 26: chalk.graph.v2.BigQuerySource.engine_args:type_name -> chalk.graph.v2.BigQuerySource.EngineArgsEntry
	29, // 27: chalk.graph.v2.BigQuerySource.async_engine_args:type_name -> chalk.graph.v2.BigQuerySource.AsyncEngineArgsEntry
	30, // 28: chalk.graph.v2.CloudSQLSource.engine_args:type_name -> chalk.graph.v2.CloudSQLSource.EngineArgsEntry
	31, // 29: chalk.graph.v2.CloudSQLSource.async_engine_args:type_name -> chalk.graph.v2.CloudSQLSource.AsyncEngineArgsEntry
	32, // 30: chalk.graph.v2.DatabricksSource.engine_args:type_name -> chalk.graph.v2.DatabricksSource.EngineArgsEntry
	33, // 31: chalk.graph.v2.DatabricksSource.async_engine_args:type_name -> chalk.graph.v2.DatabricksSource.AsyncEngineArgsEntry
	34, // 32: chalk.graph.v2.DynamoDBSource.engine_args:type_name -> chalk.graph.v2.DynamoDBSource.EngineArgsEntry
	35, // 33: chalk.graph.v2.DynamoDBSource.async_engine_args:type_name -> chalk.graph.v2.DynamoDBSource.AsyncEngineArgsEntry
	36, // 34: chalk.graph.v2.MySQLSource.engine_args:type_name -> chalk.graph.v2.MySQLSource.EngineArgsEntry
	37, // 35: chalk.graph.v2.MySQLSource.async_engine_args:type_name -> chalk.graph.v2.MySQLSource.AsyncEngineArgsEntry
	38, // 36: chalk.graph.v2.PostgresSource.engine_args:type_name -> chalk.graph.v2.PostgresSource.EngineArgsEntry
	39, // 37: chalk.graph.v2.PostgresSource.async_engine_args:type_name -> chalk.graph.v2.PostgresSource.AsyncEngineArgsEntry
	40, // 38: chalk.graph.v2.RedshiftSource.engine_args:type_name -> chalk.graph.v2.RedshiftSource.EngineArgsEntry
	41, // 39: chalk.graph.v2.RedshiftSource.async_engine_args:type_name -> chalk.graph.v2.RedshiftSource.AsyncEngineArgsEntry
	42, // 40: chalk.graph.v2.SnowflakeSource.engine_args:type_name -> chalk.graph.v2.SnowflakeSource.EngineArgsEntry
	43, // 41: chalk.graph.v2.SnowflakeSource.async_engine_args:type_name -> chalk.graph.v2.SnowflakeSource.AsyncEngineArgsEntry
	44, // 42: chalk.graph.v2.SQLiteSource.engine_args:type_name -> chalk.graph.v2.SQLiteSource.EngineArgsEntry
	45, // 43: chalk.graph.v2.SQLiteSource.async_engine_args:type_name -> chalk.graph.v2.SQLiteSource.AsyncEngineArgsEntry
	46, // 44: chalk.graph.v2.SpannerSource.engine_args:type_name -> chalk.graph.v2.SpannerSource.EngineArgsEntry
	47, // 45: chalk.graph.v2.SpannerSource.async_engine_args:type_name -> chalk.graph.v2.SpannerSource.AsyncEngineArgsEntry
	48, // 46: chalk.graph.v2.TrinoSource.engine_args:type_name -> chalk.graph.v2.TrinoSource.EngineArgsEntry
	49, // 47: chalk.graph.v2.TrinoSource.async_engine_args:type_name -> chalk.graph.v2.TrinoSource.AsyncEngineArgsEntry
	50, // 48: chalk.graph.v2.AthenaSource.engine_args:type_name -> chalk.graph.v2.AthenaSource.EngineArgsEntry
	51, // 49: chalk.graph.v2.AthenaSource.async_engine_args:type_name -> chalk.graph.v2.AthenaSource.AsyncEngineArgsEntry
	53, // 50: chalk.graph.v2.DatabaseSource.OptionsEntry.value:type_name -> google.protobuf.Value
	0,  // 51: chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry.value:type_name -> chalk.graph.v2.DatabaseSourceReference
	53, // 52: chalk.graph.v2.StreamSource.OptionsEntry.value:type_name -> google.protobuf.Value
	54, // 53: chalk.graph.v2.BigQuerySource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 54: chalk.graph.v2.BigQuerySource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 55: chalk.graph.v2.CloudSQLSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 56: chalk.graph.v2.CloudSQLSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 57: chalk.graph.v2.DatabricksSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 58: chalk.graph.v2.DatabricksSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 59: chalk.graph.v2.DynamoDBSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 60: chalk.graph.v2.DynamoDBSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 61: chalk.graph.v2.MySQLSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 62: chalk.graph.v2.MySQLSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 63: chalk.graph.v2.PostgresSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 64: chalk.graph.v2.PostgresSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 65: chalk.graph.v2.RedshiftSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 66: chalk.graph.v2.RedshiftSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 67: chalk.graph.v2.SnowflakeSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 68: chalk.graph.v2.SnowflakeSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 69: chalk.graph.v2.SQLiteSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 70: chalk.graph.v2.SQLiteSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 71: chalk.graph.v2.SpannerSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 72: chalk.graph.v2.SpannerSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 73: chalk.graph.v2.TrinoSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 74: chalk.graph.v2.TrinoSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 75: chalk.graph.v2.AthenaSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	54, // 76: chalk.graph.v2.AthenaSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_chalk_graph_v2_sources_proto_init() }
func file_chalk_graph_v2_sources_proto_init() {
	if File_chalk_graph_v2_sources_proto != nil {
		return
	}
	file_chalk_graph_v2_sources_proto_msgTypes[5].OneofWrappers = []any{
		(*HydratedSource_Stream)(nil),
		(*HydratedSource_Database)(nil),
	}
	file_chalk_graph_v2_sources_proto_msgTypes[7].OneofWrappers = []any{
		(*HydratedStreamSource_Kafka)(nil),
		(*HydratedStreamSource_Kinesis)(nil),
		(*HydratedStreamSource_Pubsub)(nil),
	}
	file_chalk_graph_v2_sources_proto_msgTypes[8].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[10].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[11].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[12].OneofWrappers = []any{
		(*HydratedDatabaseSource_Bigquery)(nil),
		(*HydratedDatabaseSource_Cloudsql)(nil),
		(*HydratedDatabaseSource_Databricks)(nil),
		(*HydratedDatabaseSource_Mysql)(nil),
		(*HydratedDatabaseSource_Postgres)(nil),
		(*HydratedDatabaseSource_Redshift)(nil),
		(*HydratedDatabaseSource_Snowflake)(nil),
		(*HydratedDatabaseSource_Sqlite)(nil),
		(*HydratedDatabaseSource_Spanner)(nil),
		(*HydratedDatabaseSource_Trino)(nil),
		(*HydratedDatabaseSource_Dynamodb)(nil),
		(*HydratedDatabaseSource_Athena)(nil),
	}
	file_chalk_graph_v2_sources_proto_msgTypes[13].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[14].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[15].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[16].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[17].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[18].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[19].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[20].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[21].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[22].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[23].OneofWrappers = []any{}
	file_chalk_graph_v2_sources_proto_msgTypes[24].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_graph_v2_sources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_graph_v2_sources_proto_goTypes,
		DependencyIndexes: file_chalk_graph_v2_sources_proto_depIdxs,
		MessageInfos:      file_chalk_graph_v2_sources_proto_msgTypes,
	}.Build()
	File_chalk_graph_v2_sources_proto = out.File
	file_chalk_graph_v2_sources_proto_rawDesc = nil
	file_chalk_graph_v2_sources_proto_goTypes = nil
	file_chalk_graph_v2_sources_proto_depIdxs = nil
}
