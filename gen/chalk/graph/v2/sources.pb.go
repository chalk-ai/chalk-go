// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/graph/v2/sources.proto

package graphv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Pointer to an underlying database source -- used by native sql resolvers to identify which DB they are for
type DatabaseSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the database source -- e.g. postgres, bigquery
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the database source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DatabaseSourceReference) Reset() {
	*x = DatabaseSourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v2_sources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceReference) ProtoMessage() {}

func (x *DatabaseSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceReference.ProtoReflect.Descriptor instead.
func (*DatabaseSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseSourceReference) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *DatabaseSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the database source -- e.g. postgres, bigquery
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the database source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE.
	Options map[string]*structpb.Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatabaseSource) Reset() {
	*x = DatabaseSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v2_sources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSource) ProtoMessage() {}

func (x *DatabaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSource.ProtoReflect.Descriptor instead.
func (*DatabaseSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseSource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *DatabaseSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseSource) GetOptions() map[string]*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

type DatabaseSourceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultSource *DatabaseSourceReference            `protobuf:"bytes,2,opt,name=default_source,json=defaultSource,proto3" json:"default_source,omitempty"`
	TaggedSources map[string]*DatabaseSourceReference `protobuf:"bytes,3,rep,name=tagged_sources,json=taggedSources,proto3" json:"tagged_sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatabaseSourceGroup) Reset() {
	*x = DatabaseSourceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v2_sources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceGroup) ProtoMessage() {}

func (x *DatabaseSourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceGroup.ProtoReflect.Descriptor instead.
func (*DatabaseSourceGroup) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseSourceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseSourceGroup) GetDefaultSource() *DatabaseSourceReference {
	if x != nil {
		return x.DefaultSource
	}
	return nil
}

func (x *DatabaseSourceGroup) GetTaggedSources() map[string]*DatabaseSourceReference {
	if x != nil {
		return x.TaggedSources
	}
	return nil
}

// Pointer to an underlying stream source -- used by stream resolvers
type StreamSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the stream source -- e.g. kafka, pubsub, sqs
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the stream source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StreamSourceReference) Reset() {
	*x = StreamSourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v2_sources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSourceReference) ProtoMessage() {}

func (x *StreamSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSourceReference.ProtoReflect.Descriptor instead.
func (*StreamSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{3}
}

func (x *StreamSourceReference) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *StreamSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StreamSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the stream source -- e.g. kafka, pubsub, sqs
	SourceType string `protobuf:"bytes,1,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// The (customer provided) name for the stream source. The default source for the given type is represented by the empty string
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Additional source-specific options. DO NOT STORE CREDENTIALS IN HERE.
	Options map[string]*structpb.Value `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v2_sources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v2_sources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v2_sources_proto_rawDescGZIP(), []int{4}
}

func (x *StreamSource) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *StreamSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamSource) GetOptions() map[string]*structpb.Value {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_chalk_graph_v2_sources_proto protoreflect.FileDescriptor

var file_chalk_graph_v2_sources_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x17,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a,
	0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc3, 0x02, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x12, 0x54, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x52,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0xb5, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x42, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x32, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x47, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x5c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a,
	0x3a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chalk_graph_v2_sources_proto_rawDescOnce sync.Once
	file_chalk_graph_v2_sources_proto_rawDescData = file_chalk_graph_v2_sources_proto_rawDesc
)

func file_chalk_graph_v2_sources_proto_rawDescGZIP() []byte {
	file_chalk_graph_v2_sources_proto_rawDescOnce.Do(func() {
		file_chalk_graph_v2_sources_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_graph_v2_sources_proto_rawDescData)
	})
	return file_chalk_graph_v2_sources_proto_rawDescData
}

var file_chalk_graph_v2_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chalk_graph_v2_sources_proto_goTypes = []any{
	(*DatabaseSourceReference)(nil), // 0: chalk.graph.v2.DatabaseSourceReference
	(*DatabaseSource)(nil),          // 1: chalk.graph.v2.DatabaseSource
	(*DatabaseSourceGroup)(nil),     // 2: chalk.graph.v2.DatabaseSourceGroup
	(*StreamSourceReference)(nil),   // 3: chalk.graph.v2.StreamSourceReference
	(*StreamSource)(nil),            // 4: chalk.graph.v2.StreamSource
	nil,                             // 5: chalk.graph.v2.DatabaseSource.OptionsEntry
	nil,                             // 6: chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry
	nil,                             // 7: chalk.graph.v2.StreamSource.OptionsEntry
	(*structpb.Value)(nil),          // 8: google.protobuf.Value
}
var file_chalk_graph_v2_sources_proto_depIdxs = []int32{
	5, // 0: chalk.graph.v2.DatabaseSource.options:type_name -> chalk.graph.v2.DatabaseSource.OptionsEntry
	0, // 1: chalk.graph.v2.DatabaseSourceGroup.default_source:type_name -> chalk.graph.v2.DatabaseSourceReference
	6, // 2: chalk.graph.v2.DatabaseSourceGroup.tagged_sources:type_name -> chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry
	7, // 3: chalk.graph.v2.StreamSource.options:type_name -> chalk.graph.v2.StreamSource.OptionsEntry
	8, // 4: chalk.graph.v2.DatabaseSource.OptionsEntry.value:type_name -> google.protobuf.Value
	0, // 5: chalk.graph.v2.DatabaseSourceGroup.TaggedSourcesEntry.value:type_name -> chalk.graph.v2.DatabaseSourceReference
	8, // 6: chalk.graph.v2.StreamSource.OptionsEntry.value:type_name -> google.protobuf.Value
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_chalk_graph_v2_sources_proto_init() }
func file_chalk_graph_v2_sources_proto_init() {
	if File_chalk_graph_v2_sources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_graph_v2_sources_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DatabaseSourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v2_sources_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DatabaseSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v2_sources_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DatabaseSourceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v2_sources_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StreamSourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v2_sources_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StreamSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_graph_v2_sources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_graph_v2_sources_proto_goTypes,
		DependencyIndexes: file_chalk_graph_v2_sources_proto_depIdxs,
		MessageInfos:      file_chalk_graph_v2_sources_proto_msgTypes,
	}.Build()
	File_chalk_graph_v2_sources_proto = out.File
	file_chalk_graph_v2_sources_proto_rawDesc = nil
	file_chalk_graph_v2_sources_proto_goTypes = nil
	file_chalk_graph_v2_sources_proto_depIdxs = nil
}
