// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/graph/v1/sources.proto

package graphv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamSourceType int32

const (
	StreamSourceType_STREAM_SOURCE_TYPE_UNSPECIFIED StreamSourceType = 0
	StreamSourceType_STREAM_SOURCE_TYPE_KAFKA       StreamSourceType = 1
	StreamSourceType_STREAM_SOURCE_TYPE_KINESIS     StreamSourceType = 2
	StreamSourceType_STREAM_SOURCE_TYPE_PUBSUB      StreamSourceType = 3
)

// Enum value maps for StreamSourceType.
var (
	StreamSourceType_name = map[int32]string{
		0: "STREAM_SOURCE_TYPE_UNSPECIFIED",
		1: "STREAM_SOURCE_TYPE_KAFKA",
		2: "STREAM_SOURCE_TYPE_KINESIS",
		3: "STREAM_SOURCE_TYPE_PUBSUB",
	}
	StreamSourceType_value = map[string]int32{
		"STREAM_SOURCE_TYPE_UNSPECIFIED": 0,
		"STREAM_SOURCE_TYPE_KAFKA":       1,
		"STREAM_SOURCE_TYPE_KINESIS":     2,
		"STREAM_SOURCE_TYPE_PUBSUB":      3,
	}
)

func (x StreamSourceType) Enum() *StreamSourceType {
	p := new(StreamSourceType)
	*p = x
	return p
}

func (x StreamSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_sources_proto_enumTypes[0].Descriptor()
}

func (StreamSourceType) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_sources_proto_enumTypes[0]
}

func (x StreamSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamSourceType.Descriptor instead.
func (StreamSourceType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{0}
}

type DatabaseSourceType int32

const (
	DatabaseSourceType_DATABASE_SOURCE_TYPE_UNSPECIFIED DatabaseSourceType = 0
	DatabaseSourceType_DATABASE_SOURCE_TYPE_BIGQUERY    DatabaseSourceType = 1
	DatabaseSourceType_DATABASE_SOURCE_TYPE_CLOUDSQL    DatabaseSourceType = 2
	DatabaseSourceType_DATABASE_SOURCE_TYPE_DATABRICKS  DatabaseSourceType = 3
	DatabaseSourceType_DATABASE_SOURCE_TYPE_MYSQL       DatabaseSourceType = 4
	DatabaseSourceType_DATABASE_SOURCE_TYPE_POSTGRES    DatabaseSourceType = 5
	DatabaseSourceType_DATABASE_SOURCE_TYPE_REDSHIFT    DatabaseSourceType = 6
	DatabaseSourceType_DATABASE_SOURCE_TYPE_SNOWFLAKE   DatabaseSourceType = 7
	DatabaseSourceType_DATABASE_SOURCE_TYPE_SQLITE      DatabaseSourceType = 8
	DatabaseSourceType_DATABASE_SOURCE_TYPE_SPANNER     DatabaseSourceType = 9
	DatabaseSourceType_DATABASE_SOURCE_TYPE_TRINO       DatabaseSourceType = 10
	DatabaseSourceType_DATABASE_SOURCE_TYPE_DYNAMODB    DatabaseSourceType = 11
	DatabaseSourceType_DATABASE_SOURCE_TYPE_ATHENA      DatabaseSourceType = 12
)

// Enum value maps for DatabaseSourceType.
var (
	DatabaseSourceType_name = map[int32]string{
		0:  "DATABASE_SOURCE_TYPE_UNSPECIFIED",
		1:  "DATABASE_SOURCE_TYPE_BIGQUERY",
		2:  "DATABASE_SOURCE_TYPE_CLOUDSQL",
		3:  "DATABASE_SOURCE_TYPE_DATABRICKS",
		4:  "DATABASE_SOURCE_TYPE_MYSQL",
		5:  "DATABASE_SOURCE_TYPE_POSTGRES",
		6:  "DATABASE_SOURCE_TYPE_REDSHIFT",
		7:  "DATABASE_SOURCE_TYPE_SNOWFLAKE",
		8:  "DATABASE_SOURCE_TYPE_SQLITE",
		9:  "DATABASE_SOURCE_TYPE_SPANNER",
		10: "DATABASE_SOURCE_TYPE_TRINO",
		11: "DATABASE_SOURCE_TYPE_DYNAMODB",
		12: "DATABASE_SOURCE_TYPE_ATHENA",
	}
	DatabaseSourceType_value = map[string]int32{
		"DATABASE_SOURCE_TYPE_UNSPECIFIED": 0,
		"DATABASE_SOURCE_TYPE_BIGQUERY":    1,
		"DATABASE_SOURCE_TYPE_CLOUDSQL":    2,
		"DATABASE_SOURCE_TYPE_DATABRICKS":  3,
		"DATABASE_SOURCE_TYPE_MYSQL":       4,
		"DATABASE_SOURCE_TYPE_POSTGRES":    5,
		"DATABASE_SOURCE_TYPE_REDSHIFT":    6,
		"DATABASE_SOURCE_TYPE_SNOWFLAKE":   7,
		"DATABASE_SOURCE_TYPE_SQLITE":      8,
		"DATABASE_SOURCE_TYPE_SPANNER":     9,
		"DATABASE_SOURCE_TYPE_TRINO":       10,
		"DATABASE_SOURCE_TYPE_DYNAMODB":    11,
		"DATABASE_SOURCE_TYPE_ATHENA":      12,
	}
)

func (x DatabaseSourceType) Enum() *DatabaseSourceType {
	p := new(DatabaseSourceType)
	*p = x
	return p
}

func (x DatabaseSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_sources_proto_enumTypes[1].Descriptor()
}

func (DatabaseSourceType) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_sources_proto_enumTypes[1]
}

func (x DatabaseSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseSourceType.Descriptor instead.
func (DatabaseSourceType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{1}
}

type StreamSourceReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          StreamSourceType       `protobuf:"varint,1,opt,name=type,proto3,enum=chalk.graph.v1.StreamSourceType" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSourceReference) Reset() {
	*x = StreamSourceReference{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSourceReference) ProtoMessage() {}

func (x *StreamSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSourceReference.ProtoReflect.Descriptor instead.
func (*StreamSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{0}
}

func (x *StreamSourceReference) GetType() StreamSourceType {
	if x != nil {
		return x.Type
	}
	return StreamSourceType_STREAM_SOURCE_TYPE_UNSPECIFIED
}

func (x *StreamSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StreamSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*StreamSource_Kafka
	//	*StreamSource_Kinesis
	//	*StreamSource_Pubsub
	Source        isStreamSource_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{1}
}

func (x *StreamSource) GetSource() isStreamSource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *StreamSource) GetKafka() *KafkaSource {
	if x != nil {
		if x, ok := x.Source.(*StreamSource_Kafka); ok {
			return x.Kafka
		}
	}
	return nil
}

func (x *StreamSource) GetKinesis() *KinesisSource {
	if x != nil {
		if x, ok := x.Source.(*StreamSource_Kinesis); ok {
			return x.Kinesis
		}
	}
	return nil
}

func (x *StreamSource) GetPubsub() *PubSubSource {
	if x != nil {
		if x, ok := x.Source.(*StreamSource_Pubsub); ok {
			return x.Pubsub
		}
	}
	return nil
}

type isStreamSource_Source interface {
	isStreamSource_Source()
}

type StreamSource_Kafka struct {
	Kafka *KafkaSource `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

type StreamSource_Kinesis struct {
	Kinesis *KinesisSource `protobuf:"bytes,2,opt,name=kinesis,proto3,oneof"`
}

type StreamSource_Pubsub struct {
	Pubsub *PubSubSource `protobuf:"bytes,3,opt,name=pubsub,proto3,oneof"`
}

func (*StreamSource_Kafka) isStreamSource_Source() {}

func (*StreamSource_Kinesis) isStreamSource_Source() {}

func (*StreamSource_Pubsub) isStreamSource_Source() {}

type KinesisSource struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Name                      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StreamName                string                 `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	StreamArn                 string                 `protobuf:"bytes,3,opt,name=stream_arn,json=streamArn,proto3" json:"stream_arn,omitempty"`
	RegionName                string                 `protobuf:"bytes,4,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	LateArrivalDeadline       *durationpb.Duration   `protobuf:"bytes,5,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueStreamName string                 `protobuf:"bytes,6,opt,name=dead_letter_queue_stream_name,json=deadLetterQueueStreamName,proto3" json:"dead_letter_queue_stream_name,omitempty"`
	AwsAccessKeyId            string                 `protobuf:"bytes,7,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey        string                 `protobuf:"bytes,8,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty"`
	AwsSessionToken           string                 `protobuf:"bytes,9,opt,name=aws_session_token,json=awsSessionToken,proto3" json:"aws_session_token,omitempty"`
	EndpointUrl               string                 `protobuf:"bytes,10,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	ConsumerRoleArn           string                 `protobuf:"bytes,11,opt,name=consumer_role_arn,json=consumerRoleArn,proto3" json:"consumer_role_arn,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *KinesisSource) Reset() {
	*x = KinesisSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KinesisSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KinesisSource) ProtoMessage() {}

func (x *KinesisSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KinesisSource.ProtoReflect.Descriptor instead.
func (*KinesisSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{2}
}

func (x *KinesisSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KinesisSource) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *KinesisSource) GetStreamArn() string {
	if x != nil {
		return x.StreamArn
	}
	return ""
}

func (x *KinesisSource) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *KinesisSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *KinesisSource) GetDeadLetterQueueStreamName() string {
	if x != nil {
		return x.DeadLetterQueueStreamName
	}
	return ""
}

func (x *KinesisSource) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *KinesisSource) GetAwsSecretAccessKey() string {
	if x != nil {
		return x.AwsSecretAccessKey
	}
	return ""
}

func (x *KinesisSource) GetAwsSessionToken() string {
	if x != nil {
		return x.AwsSessionToken
	}
	return ""
}

func (x *KinesisSource) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *KinesisSource) GetConsumerRoleArn() string {
	if x != nil {
		return x.ConsumerRoleArn
	}
	return ""
}

type KafkaSource struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BootstrapServers     []string               `protobuf:"bytes,2,rep,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	Topic                string                 `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	SslKeystoreLocation  string                 `protobuf:"bytes,4,opt,name=ssl_keystore_location,json=sslKeystoreLocation,proto3" json:"ssl_keystore_location,omitempty"`
	SslCaFile            string                 `protobuf:"bytes,5,opt,name=ssl_ca_file,json=sslCaFile,proto3" json:"ssl_ca_file,omitempty"`
	ClientIdPrefix       string                 `protobuf:"bytes,6,opt,name=client_id_prefix,json=clientIdPrefix,proto3" json:"client_id_prefix,omitempty"`
	GroupIdPrefix        string                 `protobuf:"bytes,7,opt,name=group_id_prefix,json=groupIdPrefix,proto3" json:"group_id_prefix,omitempty"`
	SecurityProtocol     string                 `protobuf:"bytes,8,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
	SaslMechanism        string                 `protobuf:"bytes,9,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	SaslUsername         string                 `protobuf:"bytes,10,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	SaslPassword         string                 `protobuf:"bytes,11,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
	LateArrivalDeadline  *durationpb.Duration   `protobuf:"bytes,12,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueTopic string                 `protobuf:"bytes,13,opt,name=dead_letter_queue_topic,json=deadLetterQueueTopic,proto3" json:"dead_letter_queue_topic,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *KafkaSource) Reset() {
	*x = KafkaSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSource) ProtoMessage() {}

func (x *KafkaSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSource.ProtoReflect.Descriptor instead.
func (*KafkaSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaSource) GetBootstrapServers() []string {
	if x != nil {
		return x.BootstrapServers
	}
	return nil
}

func (x *KafkaSource) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaSource) GetSslKeystoreLocation() string {
	if x != nil {
		return x.SslKeystoreLocation
	}
	return ""
}

func (x *KafkaSource) GetSslCaFile() string {
	if x != nil {
		return x.SslCaFile
	}
	return ""
}

func (x *KafkaSource) GetClientIdPrefix() string {
	if x != nil {
		return x.ClientIdPrefix
	}
	return ""
}

func (x *KafkaSource) GetGroupIdPrefix() string {
	if x != nil {
		return x.GroupIdPrefix
	}
	return ""
}

func (x *KafkaSource) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

func (x *KafkaSource) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *KafkaSource) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *KafkaSource) GetSaslPassword() string {
	if x != nil {
		return x.SaslPassword
	}
	return ""
}

func (x *KafkaSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *KafkaSource) GetDeadLetterQueueTopic() string {
	if x != nil {
		return x.DeadLetterQueueTopic
	}
	return ""
}

type PubSubSource struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId            string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SubscriptionId       string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	LateArrivalDeadline  *durationpb.Duration   `protobuf:"bytes,4,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueTopic string                 `protobuf:"bytes,5,opt,name=dead_letter_queue_topic,json=deadLetterQueueTopic,proto3" json:"dead_letter_queue_topic,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PubSubSource) Reset() {
	*x = PubSubSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubSource) ProtoMessage() {}

func (x *PubSubSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubSource.ProtoReflect.Descriptor instead.
func (*PubSubSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{4}
}

func (x *PubSubSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PubSubSource) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PubSubSource) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *PubSubSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *PubSubSource) GetDeadLetterQueueTopic() string {
	if x != nil {
		return x.DeadLetterQueueTopic
	}
	return ""
}

type DatabaseSourceReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          DatabaseSourceType     `protobuf:"varint,1,opt,name=type,proto3,enum=chalk.graph.v1.DatabaseSourceType" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseSourceReference) Reset() {
	*x = DatabaseSourceReference{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceReference) ProtoMessage() {}

func (x *DatabaseSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceReference.ProtoReflect.Descriptor instead.
func (*DatabaseSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{5}
}

func (x *DatabaseSourceReference) GetType() DatabaseSourceType {
	if x != nil {
		return x.Type
	}
	return DatabaseSourceType_DATABASE_SOURCE_TYPE_UNSPECIFIED
}

func (x *DatabaseSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*DatabaseSource_Bigquery
	//	*DatabaseSource_Cloudsql
	//	*DatabaseSource_Databricks
	//	*DatabaseSource_Mysql
	//	*DatabaseSource_Postgres
	//	*DatabaseSource_Redshift
	//	*DatabaseSource_Snowflake
	//	*DatabaseSource_Sqlite
	//	*DatabaseSource_Spanner
	//	*DatabaseSource_Trino
	//	*DatabaseSource_Dynamodb
	//	*DatabaseSource_Athena
	//	*DatabaseSource_Clickhouse
	Source        isDatabaseSource_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseSource) Reset() {
	*x = DatabaseSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSource) ProtoMessage() {}

func (x *DatabaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSource.ProtoReflect.Descriptor instead.
func (*DatabaseSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{6}
}

func (x *DatabaseSource) GetSource() isDatabaseSource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DatabaseSource) GetBigquery() *BigQuerySource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Bigquery); ok {
			return x.Bigquery
		}
	}
	return nil
}

func (x *DatabaseSource) GetCloudsql() *CloudSQLSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Cloudsql); ok {
			return x.Cloudsql
		}
	}
	return nil
}

func (x *DatabaseSource) GetDatabricks() *DatabricksSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Databricks); ok {
			return x.Databricks
		}
	}
	return nil
}

func (x *DatabaseSource) GetMysql() *MySQLSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *DatabaseSource) GetPostgres() *PostgresSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Postgres); ok {
			return x.Postgres
		}
	}
	return nil
}

func (x *DatabaseSource) GetRedshift() *RedshiftSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Redshift); ok {
			return x.Redshift
		}
	}
	return nil
}

func (x *DatabaseSource) GetSnowflake() *SnowflakeSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Snowflake); ok {
			return x.Snowflake
		}
	}
	return nil
}

func (x *DatabaseSource) GetSqlite() *SQLiteSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Sqlite); ok {
			return x.Sqlite
		}
	}
	return nil
}

func (x *DatabaseSource) GetSpanner() *SpannerSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Spanner); ok {
			return x.Spanner
		}
	}
	return nil
}

func (x *DatabaseSource) GetTrino() *TrinoSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Trino); ok {
			return x.Trino
		}
	}
	return nil
}

func (x *DatabaseSource) GetDynamodb() *DynamoDBSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Dynamodb); ok {
			return x.Dynamodb
		}
	}
	return nil
}

func (x *DatabaseSource) GetAthena() *AthenaSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Athena); ok {
			return x.Athena
		}
	}
	return nil
}

func (x *DatabaseSource) GetClickhouse() *ClickhouseSource {
	if x != nil {
		if x, ok := x.Source.(*DatabaseSource_Clickhouse); ok {
			return x.Clickhouse
		}
	}
	return nil
}

type isDatabaseSource_Source interface {
	isDatabaseSource_Source()
}

type DatabaseSource_Bigquery struct {
	Bigquery *BigQuerySource `protobuf:"bytes,1,opt,name=bigquery,proto3,oneof"`
}

type DatabaseSource_Cloudsql struct {
	Cloudsql *CloudSQLSource `protobuf:"bytes,2,opt,name=cloudsql,proto3,oneof"`
}

type DatabaseSource_Databricks struct {
	Databricks *DatabricksSource `protobuf:"bytes,3,opt,name=databricks,proto3,oneof"`
}

type DatabaseSource_Mysql struct {
	Mysql *MySQLSource `protobuf:"bytes,4,opt,name=mysql,proto3,oneof"`
}

type DatabaseSource_Postgres struct {
	Postgres *PostgresSource `protobuf:"bytes,5,opt,name=postgres,proto3,oneof"`
}

type DatabaseSource_Redshift struct {
	Redshift *RedshiftSource `protobuf:"bytes,6,opt,name=redshift,proto3,oneof"`
}

type DatabaseSource_Snowflake struct {
	Snowflake *SnowflakeSource `protobuf:"bytes,7,opt,name=snowflake,proto3,oneof"`
}

type DatabaseSource_Sqlite struct {
	Sqlite *SQLiteSource `protobuf:"bytes,8,opt,name=sqlite,proto3,oneof"`
}

type DatabaseSource_Spanner struct {
	Spanner *SpannerSource `protobuf:"bytes,9,opt,name=spanner,proto3,oneof"`
}

type DatabaseSource_Trino struct {
	Trino *TrinoSource `protobuf:"bytes,10,opt,name=trino,proto3,oneof"`
}

type DatabaseSource_Dynamodb struct {
	Dynamodb *DynamoDBSource `protobuf:"bytes,11,opt,name=dynamodb,proto3,oneof"`
}

type DatabaseSource_Athena struct {
	Athena *AthenaSource `protobuf:"bytes,12,opt,name=athena,proto3,oneof"`
}

type DatabaseSource_Clickhouse struct {
	Clickhouse *ClickhouseSource `protobuf:"bytes,13,opt,name=clickhouse,proto3,oneof"`
}

func (*DatabaseSource_Bigquery) isDatabaseSource_Source() {}

func (*DatabaseSource_Cloudsql) isDatabaseSource_Source() {}

func (*DatabaseSource_Databricks) isDatabaseSource_Source() {}

func (*DatabaseSource_Mysql) isDatabaseSource_Source() {}

func (*DatabaseSource_Postgres) isDatabaseSource_Source() {}

func (*DatabaseSource_Redshift) isDatabaseSource_Source() {}

func (*DatabaseSource_Snowflake) isDatabaseSource_Source() {}

func (*DatabaseSource_Sqlite) isDatabaseSource_Source() {}

func (*DatabaseSource_Spanner) isDatabaseSource_Source() {}

func (*DatabaseSource_Trino) isDatabaseSource_Source() {}

func (*DatabaseSource_Dynamodb) isDatabaseSource_Source() {}

func (*DatabaseSource_Athena) isDatabaseSource_Source() {}

func (*DatabaseSource_Clickhouse) isDatabaseSource_Source() {}

type BigQuerySource struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project           string                     `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Dataset           string                     `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Location          string                     `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	CredentialsBase64 string                     `protobuf:"bytes,5,opt,name=credentials_base64,json=credentialsBase64,proto3" json:"credentials_base64,omitempty"`
	CredentialsPath   string                     `protobuf:"bytes,6,opt,name=credentials_path,json=credentialsPath,proto3" json:"credentials_path,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BigQuerySource) Reset() {
	*x = BigQuerySource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQuerySource) ProtoMessage() {}

func (x *BigQuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQuerySource.ProtoReflect.Descriptor instead.
func (*BigQuerySource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{7}
}

func (x *BigQuerySource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BigQuerySource) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BigQuerySource) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *BigQuerySource) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *BigQuerySource) GetCredentialsBase64() string {
	if x != nil {
		return x.CredentialsBase64
	}
	return ""
}

func (x *BigQuerySource) GetCredentialsPath() string {
	if x != nil {
		return x.CredentialsPath
	}
	return ""
}

func (x *BigQuerySource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *BigQuerySource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type CloudSQLSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Db              string                     `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	InstanceName    string                     `protobuf:"bytes,5,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CloudSQLSource) Reset() {
	*x = CloudSQLSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSQLSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSQLSource) ProtoMessage() {}

func (x *CloudSQLSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSQLSource.ProtoReflect.Descriptor instead.
func (*CloudSQLSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{8}
}

func (x *CloudSQLSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudSQLSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *CloudSQLSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CloudSQLSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CloudSQLSource) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CloudSQLSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *CloudSQLSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type DatabricksSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	HttpPath        string                     `protobuf:"bytes,5,opt,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"`
	AccessToken     string                     `protobuf:"bytes,6,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DatabricksSource) Reset() {
	*x = DatabricksSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabricksSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabricksSource) ProtoMessage() {}

func (x *DatabricksSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabricksSource.ProtoReflect.Descriptor instead.
func (*DatabricksSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{9}
}

func (x *DatabricksSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabricksSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabricksSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *DatabricksSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *DatabricksSource) GetHttpPath() string {
	if x != nil {
		return x.HttpPath
	}
	return ""
}

func (x *DatabricksSource) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DatabricksSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *DatabricksSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type DynamoDBSource struct {
	state                   protoimpl.MessageState     `protogen:"open.v1"`
	Name                    string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AwsClientIdOverride     *string                    `protobuf:"bytes,2,opt,name=aws_client_id_override,json=awsClientIdOverride,proto3,oneof" json:"aws_client_id_override,omitempty"`
	AwsClientSecretOverride *string                    `protobuf:"bytes,3,opt,name=aws_client_secret_override,json=awsClientSecretOverride,proto3,oneof" json:"aws_client_secret_override,omitempty"`
	AwsRegionOverride       *string                    `protobuf:"bytes,4,opt,name=aws_region_override,json=awsRegionOverride,proto3,oneof" json:"aws_region_override,omitempty"`
	EndpointOverride        *string                    `protobuf:"bytes,5,opt,name=endpoint_override,json=endpointOverride,proto3,oneof" json:"endpoint_override,omitempty"`
	EngineArgs              map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs         map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DynamoDBSource) Reset() {
	*x = DynamoDBSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBSource) ProtoMessage() {}

func (x *DynamoDBSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBSource.ProtoReflect.Descriptor instead.
func (*DynamoDBSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{10}
}

func (x *DynamoDBSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DynamoDBSource) GetAwsClientIdOverride() string {
	if x != nil && x.AwsClientIdOverride != nil {
		return *x.AwsClientIdOverride
	}
	return ""
}

func (x *DynamoDBSource) GetAwsClientSecretOverride() string {
	if x != nil && x.AwsClientSecretOverride != nil {
		return *x.AwsClientSecretOverride
	}
	return ""
}

func (x *DynamoDBSource) GetAwsRegionOverride() string {
	if x != nil && x.AwsRegionOverride != nil {
		return *x.AwsRegionOverride
	}
	return ""
}

func (x *DynamoDBSource) GetEndpointOverride() string {
	if x != nil && x.EndpointOverride != nil {
		return *x.EndpointOverride
	}
	return ""
}

func (x *DynamoDBSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *DynamoDBSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type MySQLSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MySQLSource) Reset() {
	*x = MySQLSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLSource) ProtoMessage() {}

func (x *MySQLSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLSource.ProtoReflect.Descriptor instead.
func (*MySQLSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{11}
}

func (x *MySQLSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MySQLSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *MySQLSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *MySQLSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MySQLSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *MySQLSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type PostgresSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PostgresSource) Reset() {
	*x = PostgresSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSource) ProtoMessage() {}

func (x *PostgresSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSource.ProtoReflect.Descriptor instead.
func (*PostgresSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{12}
}

func (x *PostgresSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *PostgresSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *PostgresSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgresSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgresSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *PostgresSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type RedshiftSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	S3Client        string                     `protobuf:"bytes,7,opt,name=s3_client,json=s3Client,proto3" json:"s3_client,omitempty"`
	S3Bucket        string                     `protobuf:"bytes,8,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnloadIamRole   string                     `protobuf:"bytes,11,opt,name=unload_iam_role,json=unloadIamRole,proto3" json:"unload_iam_role,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RedshiftSource) Reset() {
	*x = RedshiftSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedshiftSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftSource) ProtoMessage() {}

func (x *RedshiftSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftSource.ProtoReflect.Descriptor instead.
func (*RedshiftSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{13}
}

func (x *RedshiftSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RedshiftSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedshiftSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *RedshiftSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *RedshiftSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RedshiftSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedshiftSource) GetS3Client() string {
	if x != nil {
		return x.S3Client
	}
	return ""
}

func (x *RedshiftSource) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *RedshiftSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *RedshiftSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

func (x *RedshiftSource) GetUnloadIamRole() string {
	if x != nil {
		return x.UnloadIamRole
	}
	return ""
}

type SnowflakeSource struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Db                string                     `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	Schema            string                     `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Role              string                     `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	User              string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password          string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	AccountIdentifier string                     `protobuf:"bytes,7,opt,name=account_identifier,json=accountIdentifier,proto3" json:"account_identifier,omitempty"`
	Warehouse         string                     `protobuf:"bytes,8,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PrivateKeyB64     string                     `protobuf:"bytes,11,opt,name=private_key_b64,json=privateKeyB64,proto3" json:"private_key_b64,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SnowflakeSource) Reset() {
	*x = SnowflakeSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnowflakeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeSource) ProtoMessage() {}

func (x *SnowflakeSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeSource.ProtoReflect.Descriptor instead.
func (*SnowflakeSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{14}
}

func (x *SnowflakeSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnowflakeSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *SnowflakeSource) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SnowflakeSource) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *SnowflakeSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SnowflakeSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SnowflakeSource) GetAccountIdentifier() string {
	if x != nil {
		return x.AccountIdentifier
	}
	return ""
}

func (x *SnowflakeSource) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *SnowflakeSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SnowflakeSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

func (x *SnowflakeSource) GetPrivateKeyB64() string {
	if x != nil {
		return x.PrivateKeyB64
	}
	return ""
}

type SQLiteSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileName        string                     `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,3,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,4,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SQLiteSource) Reset() {
	*x = SQLiteSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLiteSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLiteSource) ProtoMessage() {}

func (x *SQLiteSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLiteSource.ProtoReflect.Descriptor instead.
func (*SQLiteSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{15}
}

func (x *SQLiteSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLiteSource) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SQLiteSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SQLiteSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type SpannerSource struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project           string                     `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Instance          string                     `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	Db                string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	CredentialsBase64 string                     `protobuf:"bytes,5,opt,name=credentials_base64,json=credentialsBase64,proto3" json:"credentials_base64,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SpannerSource) Reset() {
	*x = SpannerSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpannerSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpannerSource) ProtoMessage() {}

func (x *SpannerSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpannerSource.ProtoReflect.Descriptor instead.
func (*SpannerSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{16}
}

func (x *SpannerSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpannerSource) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SpannerSource) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SpannerSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *SpannerSource) GetCredentialsBase64() string {
	if x != nil {
		return x.CredentialsBase64
	}
	return ""
}

func (x *SpannerSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SpannerSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type TrinoSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Catalog         string                     `protobuf:"bytes,4,opt,name=catalog,proto3" json:"catalog,omitempty"`
	Schema          string                     `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	User            string                     `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TrinoSource) Reset() {
	*x = TrinoSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrinoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrinoSource) ProtoMessage() {}

func (x *TrinoSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrinoSource.ProtoReflect.Descriptor instead.
func (*TrinoSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{17}
}

func (x *TrinoSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrinoSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TrinoSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *TrinoSource) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *TrinoSource) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TrinoSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TrinoSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TrinoSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *TrinoSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type AthenaSource struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	Name               string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AwsRegion          string                     `protobuf:"bytes,2,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	AwsAccessKeyId     *string                    `protobuf:"bytes,3,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3,oneof" json:"aws_access_key_id,omitempty"`
	AwsAccessKeySecret *string                    `protobuf:"bytes,4,opt,name=aws_access_key_secret,json=awsAccessKeySecret,proto3,oneof" json:"aws_access_key_secret,omitempty"`
	S3StagingDir       string                     `protobuf:"bytes,5,opt,name=s3_staging_dir,json=s3StagingDir,proto3" json:"s3_staging_dir,omitempty"`
	CatalogName        *string                    `protobuf:"bytes,6,opt,name=catalog_name,json=catalogName,proto3,oneof" json:"catalog_name,omitempty"`
	SchemaName         *string                    `protobuf:"bytes,7,opt,name=schema_name,json=schemaName,proto3,oneof" json:"schema_name,omitempty"`
	RoleArn            *string                    `protobuf:"bytes,8,opt,name=role_arn,json=roleArn,proto3,oneof" json:"role_arn,omitempty"`
	EngineArgs         map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs    map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorkGroup          *string                    `protobuf:"bytes,11,opt,name=work_group,json=workGroup,proto3,oneof" json:"work_group,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AthenaSource) Reset() {
	*x = AthenaSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AthenaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthenaSource) ProtoMessage() {}

func (x *AthenaSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthenaSource.ProtoReflect.Descriptor instead.
func (*AthenaSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{18}
}

func (x *AthenaSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AthenaSource) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

func (x *AthenaSource) GetAwsAccessKeyId() string {
	if x != nil && x.AwsAccessKeyId != nil {
		return *x.AwsAccessKeyId
	}
	return ""
}

func (x *AthenaSource) GetAwsAccessKeySecret() string {
	if x != nil && x.AwsAccessKeySecret != nil {
		return *x.AwsAccessKeySecret
	}
	return ""
}

func (x *AthenaSource) GetS3StagingDir() string {
	if x != nil {
		return x.S3StagingDir
	}
	return ""
}

func (x *AthenaSource) GetCatalogName() string {
	if x != nil && x.CatalogName != nil {
		return *x.CatalogName
	}
	return ""
}

func (x *AthenaSource) GetSchemaName() string {
	if x != nil && x.SchemaName != nil {
		return *x.SchemaName
	}
	return ""
}

func (x *AthenaSource) GetRoleArn() string {
	if x != nil && x.RoleArn != nil {
		return *x.RoleArn
	}
	return ""
}

func (x *AthenaSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *AthenaSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

func (x *AthenaSource) GetWorkGroup() string {
	if x != nil && x.WorkGroup != nil {
		return *x.WorkGroup
	}
	return ""
}

type ClickhouseSource struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	UseTls          bool                       `protobuf:"varint,7,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClickhouseSource) Reset() {
	*x = ClickhouseSource{}
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseSource) ProtoMessage() {}

func (x *ClickhouseSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseSource.ProtoReflect.Descriptor instead.
func (*ClickhouseSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{19}
}

func (x *ClickhouseSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *ClickhouseSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseSource) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *ClickhouseSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *ClickhouseSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

var File_chalk_graph_v1_sources_proto protoreflect.FileDescriptor

const file_chalk_graph_v1_sources_proto_rawDesc = "" +
	"\n" +
	"\x1cchalk/graph/v1/sources.proto\x12\x0echalk.graph.v1\x1a\x1achalk/arrow/v1/arrow.proto\x1a\x1egoogle/protobuf/duration.proto\"a\n" +
	"\x15StreamSourceReference\x124\n" +
	"\x04type\x18\x01 \x01(\x0e2 .chalk.graph.v1.StreamSourceTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xc0\x01\n" +
	"\fStreamSource\x123\n" +
	"\x05kafka\x18\x01 \x01(\v2\x1b.chalk.graph.v1.KafkaSourceH\x00R\x05kafka\x129\n" +
	"\akinesis\x18\x02 \x01(\v2\x1d.chalk.graph.v1.KinesisSourceH\x00R\akinesis\x126\n" +
	"\x06pubsub\x18\x03 \x01(\v2\x1c.chalk.graph.v1.PubSubSourceH\x00R\x06pubsubB\b\n" +
	"\x06source\"\xee\x03\n" +
	"\rKinesisSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vstream_name\x18\x02 \x01(\tR\n" +
	"streamName\x12\x1d\n" +
	"\n" +
	"stream_arn\x18\x03 \x01(\tR\tstreamArn\x12\x1f\n" +
	"\vregion_name\x18\x04 \x01(\tR\n" +
	"regionName\x12M\n" +
	"\x15late_arrival_deadline\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x13lateArrivalDeadline\x12@\n" +
	"\x1ddead_letter_queue_stream_name\x18\x06 \x01(\tR\x19deadLetterQueueStreamName\x12)\n" +
	"\x11aws_access_key_id\x18\a \x01(\tR\x0eawsAccessKeyId\x121\n" +
	"\x15aws_secret_access_key\x18\b \x01(\tR\x12awsSecretAccessKey\x12*\n" +
	"\x11aws_session_token\x18\t \x01(\tR\x0fawsSessionToken\x12!\n" +
	"\fendpoint_url\x18\n" +
	" \x01(\tR\vendpointUrl\x12*\n" +
	"\x11consumer_role_arn\x18\v \x01(\tR\x0fconsumerRoleArn\"\xae\x04\n" +
	"\vKafkaSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12+\n" +
	"\x11bootstrap_servers\x18\x02 \x03(\tR\x10bootstrapServers\x12\x14\n" +
	"\x05topic\x18\x03 \x01(\tR\x05topic\x122\n" +
	"\x15ssl_keystore_location\x18\x04 \x01(\tR\x13sslKeystoreLocation\x12\x1e\n" +
	"\vssl_ca_file\x18\x05 \x01(\tR\tsslCaFile\x12(\n" +
	"\x10client_id_prefix\x18\x06 \x01(\tR\x0eclientIdPrefix\x12&\n" +
	"\x0fgroup_id_prefix\x18\a \x01(\tR\rgroupIdPrefix\x12+\n" +
	"\x11security_protocol\x18\b \x01(\tR\x10securityProtocol\x12%\n" +
	"\x0esasl_mechanism\x18\t \x01(\tR\rsaslMechanism\x12#\n" +
	"\rsasl_username\x18\n" +
	" \x01(\tR\fsaslUsername\x12#\n" +
	"\rsasl_password\x18\v \x01(\tR\fsaslPassword\x12M\n" +
	"\x15late_arrival_deadline\x18\f \x01(\v2\x19.google.protobuf.DurationR\x13lateArrivalDeadline\x125\n" +
	"\x17dead_letter_queue_topic\x18\r \x01(\tR\x14deadLetterQueueTopic\"\xf0\x01\n" +
	"\fPubSubSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\tR\x0esubscriptionId\x12M\n" +
	"\x15late_arrival_deadline\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x13lateArrivalDeadline\x125\n" +
	"\x17dead_letter_queue_topic\x18\x05 \x01(\tR\x14deadLetterQueueTopic\"e\n" +
	"\x17DatabaseSourceReference\x126\n" +
	"\x04type\x18\x01 \x01(\x0e2\".chalk.graph.v1.DatabaseSourceTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xae\x06\n" +
	"\x0eDatabaseSource\x12<\n" +
	"\bbigquery\x18\x01 \x01(\v2\x1e.chalk.graph.v1.BigQuerySourceH\x00R\bbigquery\x12<\n" +
	"\bcloudsql\x18\x02 \x01(\v2\x1e.chalk.graph.v1.CloudSQLSourceH\x00R\bcloudsql\x12B\n" +
	"\n" +
	"databricks\x18\x03 \x01(\v2 .chalk.graph.v1.DatabricksSourceH\x00R\n" +
	"databricks\x123\n" +
	"\x05mysql\x18\x04 \x01(\v2\x1b.chalk.graph.v1.MySQLSourceH\x00R\x05mysql\x12<\n" +
	"\bpostgres\x18\x05 \x01(\v2\x1e.chalk.graph.v1.PostgresSourceH\x00R\bpostgres\x12<\n" +
	"\bredshift\x18\x06 \x01(\v2\x1e.chalk.graph.v1.RedshiftSourceH\x00R\bredshift\x12?\n" +
	"\tsnowflake\x18\a \x01(\v2\x1f.chalk.graph.v1.SnowflakeSourceH\x00R\tsnowflake\x126\n" +
	"\x06sqlite\x18\b \x01(\v2\x1c.chalk.graph.v1.SQLiteSourceH\x00R\x06sqlite\x129\n" +
	"\aspanner\x18\t \x01(\v2\x1d.chalk.graph.v1.SpannerSourceH\x00R\aspanner\x123\n" +
	"\x05trino\x18\n" +
	" \x01(\v2\x1b.chalk.graph.v1.TrinoSourceH\x00R\x05trino\x12<\n" +
	"\bdynamodb\x18\v \x01(\v2\x1e.chalk.graph.v1.DynamoDBSourceH\x00R\bdynamodb\x126\n" +
	"\x06athena\x18\f \x01(\v2\x1c.chalk.graph.v1.AthenaSourceH\x00R\x06athena\x12B\n" +
	"\n" +
	"clickhouse\x18\r \x01(\v2 .chalk.graph.v1.ClickhouseSourceH\x00R\n" +
	"clickhouseB\b\n" +
	"\x06source\"\xbd\x04\n" +
	"\x0eBigQuerySource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aproject\x18\x02 \x01(\tR\aproject\x12\x18\n" +
	"\adataset\x18\x03 \x01(\tR\adataset\x12\x1a\n" +
	"\blocation\x18\x04 \x01(\tR\blocation\x12-\n" +
	"\x12credentials_base64\x18\x05 \x01(\tR\x11credentialsBase64\x12)\n" +
	"\x10credentials_path\x18\x06 \x01(\tR\x0fcredentialsPath\x12O\n" +
	"\vengine_args\x18\a \x03(\v2..chalk.graph.v1.BigQuerySource.EngineArgsEntryR\n" +
	"engineArgs\x12_\n" +
	"\x11async_engine_args\x18\b \x03(\v23.chalk.graph.v1.BigQuerySource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\xf8\x03\n" +
	"\x0eCloudSQLSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02db\x18\x02 \x01(\tR\x02db\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12#\n" +
	"\rinstance_name\x18\x05 \x01(\tR\finstanceName\x12O\n" +
	"\vengine_args\x18\x06 \x03(\v2..chalk.graph.v1.CloudSQLSource.EngineArgsEntryR\n" +
	"engineArgs\x12_\n" +
	"\x11async_engine_args\x18\a \x03(\v23.chalk.graph.v1.CloudSQLSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\x91\x04\n" +
	"\x10DatabricksSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\tR\x04port\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\tR\x02db\x12\x1b\n" +
	"\thttp_path\x18\x05 \x01(\tR\bhttpPath\x12!\n" +
	"\faccess_token\x18\x06 \x01(\tR\vaccessToken\x12Q\n" +
	"\vengine_args\x18\a \x03(\v20.chalk.graph.v1.DatabricksSource.EngineArgsEntryR\n" +
	"engineArgs\x12a\n" +
	"\x11async_engine_args\x18\b \x03(\v25.chalk.graph.v1.DatabricksSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\xde\x05\n" +
	"\x0eDynamoDBSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\x16aws_client_id_override\x18\x02 \x01(\tH\x00R\x13awsClientIdOverride\x88\x01\x01\x12@\n" +
	"\x1aaws_client_secret_override\x18\x03 \x01(\tH\x01R\x17awsClientSecretOverride\x88\x01\x01\x123\n" +
	"\x13aws_region_override\x18\x04 \x01(\tH\x02R\x11awsRegionOverride\x88\x01\x01\x120\n" +
	"\x11endpoint_override\x18\x05 \x01(\tH\x03R\x10endpointOverride\x88\x01\x01\x12O\n" +
	"\vengine_args\x18\x06 \x03(\v2..chalk.graph.v1.DynamoDBSource.EngineArgsEntryR\n" +
	"engineArgs\x12_\n" +
	"\x11async_engine_args\x18\a \x03(\v23.chalk.graph.v1.DynamoDBSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01B\x19\n" +
	"\x17_aws_client_id_overrideB\x1d\n" +
	"\x1b_aws_client_secret_overrideB\x16\n" +
	"\x14_aws_region_overrideB\x14\n" +
	"\x12_endpoint_override\"\xf2\x03\n" +
	"\vMySQLSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\tR\x04port\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\tR\x02db\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12L\n" +
	"\vengine_args\x18\a \x03(\v2+.chalk.graph.v1.MySQLSource.EngineArgsEntryR\n" +
	"engineArgs\x12\\\n" +
	"\x11async_engine_args\x18\b \x03(\v20.chalk.graph.v1.MySQLSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\xfb\x03\n" +
	"\x0ePostgresSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\tR\x04port\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\tR\x02db\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12O\n" +
	"\vengine_args\x18\a \x03(\v2..chalk.graph.v1.PostgresSource.EngineArgsEntryR\n" +
	"engineArgs\x12_\n" +
	"\x11async_engine_args\x18\b \x03(\v23.chalk.graph.v1.PostgresSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\xdd\x04\n" +
	"\x0eRedshiftSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\tR\x04port\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\tR\x02db\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12\x1b\n" +
	"\ts3_client\x18\a \x01(\tR\bs3Client\x12\x1b\n" +
	"\ts3_bucket\x18\b \x01(\tR\bs3Bucket\x12O\n" +
	"\vengine_args\x18\t \x03(\v2..chalk.graph.v1.RedshiftSource.EngineArgsEntryR\n" +
	"engineArgs\x12_\n" +
	"\x11async_engine_args\x18\n" +
	" \x03(\v23.chalk.graph.v1.RedshiftSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x12&\n" +
	"\x0funload_iam_role\x18\v \x01(\tR\runloadIamRole\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\xf7\x04\n" +
	"\x0fSnowflakeSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02db\x18\x02 \x01(\tR\x02db\x12\x16\n" +
	"\x06schema\x18\x03 \x01(\tR\x06schema\x12\x12\n" +
	"\x04role\x18\x04 \x01(\tR\x04role\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12-\n" +
	"\x12account_identifier\x18\a \x01(\tR\x11accountIdentifier\x12\x1c\n" +
	"\twarehouse\x18\b \x01(\tR\twarehouse\x12P\n" +
	"\vengine_args\x18\t \x03(\v2/.chalk.graph.v1.SnowflakeSource.EngineArgsEntryR\n" +
	"engineArgs\x12`\n" +
	"\x11async_engine_args\x18\n" +
	" \x03(\v24.chalk.graph.v1.SnowflakeSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x12&\n" +
	"\x0fprivate_key_b64\x18\v \x01(\tR\rprivateKeyB64\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\xaa\x03\n" +
	"\fSQLiteSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x12M\n" +
	"\vengine_args\x18\x03 \x03(\v2,.chalk.graph.v1.SQLiteSource.EngineArgsEntryR\n" +
	"engineArgs\x12]\n" +
	"\x11async_engine_args\x18\x04 \x03(\v21.chalk.graph.v1.SQLiteSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\x85\x04\n" +
	"\rSpannerSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aproject\x18\x02 \x01(\tR\aproject\x12\x1a\n" +
	"\binstance\x18\x03 \x01(\tR\binstance\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\tR\x02db\x12-\n" +
	"\x12credentials_base64\x18\x05 \x01(\tR\x11credentialsBase64\x12N\n" +
	"\vengine_args\x18\x06 \x03(\v2-.chalk.graph.v1.SpannerSource.EngineArgsEntryR\n" +
	"engineArgs\x12^\n" +
	"\x11async_engine_args\x18\a \x03(\v22.chalk.graph.v1.SpannerSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\x94\x04\n" +
	"\vTrinoSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\tR\x04port\x12\x18\n" +
	"\acatalog\x18\x04 \x01(\tR\acatalog\x12\x16\n" +
	"\x06schema\x18\x05 \x01(\tR\x06schema\x12\x12\n" +
	"\x04user\x18\x06 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\a \x01(\tR\bpassword\x12L\n" +
	"\vengine_args\x18\b \x03(\v2+.chalk.graph.v1.TrinoSource.EngineArgsEntryR\n" +
	"engineArgs\x12\\\n" +
	"\x11async_engine_args\x18\t \x03(\v20.chalk.graph.v1.TrinoSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\"\xb9\x06\n" +
	"\fAthenaSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"aws_region\x18\x02 \x01(\tR\tawsRegion\x12.\n" +
	"\x11aws_access_key_id\x18\x03 \x01(\tH\x00R\x0eawsAccessKeyId\x88\x01\x01\x126\n" +
	"\x15aws_access_key_secret\x18\x04 \x01(\tH\x01R\x12awsAccessKeySecret\x88\x01\x01\x12$\n" +
	"\x0es3_staging_dir\x18\x05 \x01(\tR\fs3StagingDir\x12&\n" +
	"\fcatalog_name\x18\x06 \x01(\tH\x02R\vcatalogName\x88\x01\x01\x12$\n" +
	"\vschema_name\x18\a \x01(\tH\x03R\n" +
	"schemaName\x88\x01\x01\x12\x1e\n" +
	"\brole_arn\x18\b \x01(\tH\x04R\aroleArn\x88\x01\x01\x12M\n" +
	"\vengine_args\x18\t \x03(\v2,.chalk.graph.v1.AthenaSource.EngineArgsEntryR\n" +
	"engineArgs\x12]\n" +
	"\x11async_engine_args\x18\n" +
	" \x03(\v21.chalk.graph.v1.AthenaSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x12\"\n" +
	"\n" +
	"work_group\x18\v \x01(\tH\x05R\tworkGroup\x88\x01\x01\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01B\x14\n" +
	"\x12_aws_access_key_idB\x18\n" +
	"\x16_aws_access_key_secretB\x0f\n" +
	"\r_catalog_nameB\x0e\n" +
	"\f_schema_nameB\v\n" +
	"\t_role_arnB\r\n" +
	"\v_work_group\"\x9a\x04\n" +
	"\x10ClickhouseSource\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\tR\x04port\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\tR\x02db\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12\x17\n" +
	"\ause_tls\x18\a \x01(\bR\x06useTls\x12Q\n" +
	"\vengine_args\x18\b \x03(\v20.chalk.graph.v1.ClickhouseSource.EngineArgsEntryR\n" +
	"engineArgs\x12a\n" +
	"\x11async_engine_args\x18\t \x03(\v25.chalk.graph.v1.ClickhouseSource.AsyncEngineArgsEntryR\x0fasyncEngineArgs\x1aZ\n" +
	"\x0fEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01\x1a_\n" +
	"\x14AsyncEngineArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value:\x028\x01*\x93\x01\n" +
	"\x10StreamSourceType\x12\"\n" +
	"\x1eSTREAM_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18STREAM_SOURCE_TYPE_KAFKA\x10\x01\x12\x1e\n" +
	"\x1aSTREAM_SOURCE_TYPE_KINESIS\x10\x02\x12\x1d\n" +
	"\x19STREAM_SOURCE_TYPE_PUBSUB\x10\x03*\xd6\x03\n" +
	"\x12DatabaseSourceType\x12$\n" +
	" DATABASE_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dDATABASE_SOURCE_TYPE_BIGQUERY\x10\x01\x12!\n" +
	"\x1dDATABASE_SOURCE_TYPE_CLOUDSQL\x10\x02\x12#\n" +
	"\x1fDATABASE_SOURCE_TYPE_DATABRICKS\x10\x03\x12\x1e\n" +
	"\x1aDATABASE_SOURCE_TYPE_MYSQL\x10\x04\x12!\n" +
	"\x1dDATABASE_SOURCE_TYPE_POSTGRES\x10\x05\x12!\n" +
	"\x1dDATABASE_SOURCE_TYPE_REDSHIFT\x10\x06\x12\"\n" +
	"\x1eDATABASE_SOURCE_TYPE_SNOWFLAKE\x10\a\x12\x1f\n" +
	"\x1bDATABASE_SOURCE_TYPE_SQLITE\x10\b\x12 \n" +
	"\x1cDATABASE_SOURCE_TYPE_SPANNER\x10\t\x12\x1e\n" +
	"\x1aDATABASE_SOURCE_TYPE_TRINO\x10\n" +
	"\x12!\n" +
	"\x1dDATABASE_SOURCE_TYPE_DYNAMODB\x10\v\x12\x1f\n" +
	"\x1bDATABASE_SOURCE_TYPE_ATHENA\x10\fB\xb5\x01\n" +
	"\x12com.chalk.graph.v1B\fSourcesProtoP\x01Z7github.com/chalk-ai/chalk-go/gen/chalk/graph/v1;graphv1\xa2\x02\x03CGX\xaa\x02\x0eChalk.Graph.V1\xca\x02\x0eChalk\\Graph\\V1\xe2\x02\x1aChalk\\Graph\\V1\\GPBMetadata\xea\x02\x10Chalk::Graph::V1b\x06proto3"

var (
	file_chalk_graph_v1_sources_proto_rawDescOnce sync.Once
	file_chalk_graph_v1_sources_proto_rawDescData []byte
)

func file_chalk_graph_v1_sources_proto_rawDescGZIP() []byte {
	file_chalk_graph_v1_sources_proto_rawDescOnce.Do(func() {
		file_chalk_graph_v1_sources_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_graph_v1_sources_proto_rawDesc), len(file_chalk_graph_v1_sources_proto_rawDesc)))
	})
	return file_chalk_graph_v1_sources_proto_rawDescData
}

var file_chalk_graph_v1_sources_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_graph_v1_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_chalk_graph_v1_sources_proto_goTypes = []any{
	(StreamSourceType)(0),           // 0: chalk.graph.v1.StreamSourceType
	(DatabaseSourceType)(0),         // 1: chalk.graph.v1.DatabaseSourceType
	(*StreamSourceReference)(nil),   // 2: chalk.graph.v1.StreamSourceReference
	(*StreamSource)(nil),            // 3: chalk.graph.v1.StreamSource
	(*KinesisSource)(nil),           // 4: chalk.graph.v1.KinesisSource
	(*KafkaSource)(nil),             // 5: chalk.graph.v1.KafkaSource
	(*PubSubSource)(nil),            // 6: chalk.graph.v1.PubSubSource
	(*DatabaseSourceReference)(nil), // 7: chalk.graph.v1.DatabaseSourceReference
	(*DatabaseSource)(nil),          // 8: chalk.graph.v1.DatabaseSource
	(*BigQuerySource)(nil),          // 9: chalk.graph.v1.BigQuerySource
	(*CloudSQLSource)(nil),          // 10: chalk.graph.v1.CloudSQLSource
	(*DatabricksSource)(nil),        // 11: chalk.graph.v1.DatabricksSource
	(*DynamoDBSource)(nil),          // 12: chalk.graph.v1.DynamoDBSource
	(*MySQLSource)(nil),             // 13: chalk.graph.v1.MySQLSource
	(*PostgresSource)(nil),          // 14: chalk.graph.v1.PostgresSource
	(*RedshiftSource)(nil),          // 15: chalk.graph.v1.RedshiftSource
	(*SnowflakeSource)(nil),         // 16: chalk.graph.v1.SnowflakeSource
	(*SQLiteSource)(nil),            // 17: chalk.graph.v1.SQLiteSource
	(*SpannerSource)(nil),           // 18: chalk.graph.v1.SpannerSource
	(*TrinoSource)(nil),             // 19: chalk.graph.v1.TrinoSource
	(*AthenaSource)(nil),            // 20: chalk.graph.v1.AthenaSource
	(*ClickhouseSource)(nil),        // 21: chalk.graph.v1.ClickhouseSource
	nil,                             // 22: chalk.graph.v1.BigQuerySource.EngineArgsEntry
	nil,                             // 23: chalk.graph.v1.BigQuerySource.AsyncEngineArgsEntry
	nil,                             // 24: chalk.graph.v1.CloudSQLSource.EngineArgsEntry
	nil,                             // 25: chalk.graph.v1.CloudSQLSource.AsyncEngineArgsEntry
	nil,                             // 26: chalk.graph.v1.DatabricksSource.EngineArgsEntry
	nil,                             // 27: chalk.graph.v1.DatabricksSource.AsyncEngineArgsEntry
	nil,                             // 28: chalk.graph.v1.DynamoDBSource.EngineArgsEntry
	nil,                             // 29: chalk.graph.v1.DynamoDBSource.AsyncEngineArgsEntry
	nil,                             // 30: chalk.graph.v1.MySQLSource.EngineArgsEntry
	nil,                             // 31: chalk.graph.v1.MySQLSource.AsyncEngineArgsEntry
	nil,                             // 32: chalk.graph.v1.PostgresSource.EngineArgsEntry
	nil,                             // 33: chalk.graph.v1.PostgresSource.AsyncEngineArgsEntry
	nil,                             // 34: chalk.graph.v1.RedshiftSource.EngineArgsEntry
	nil,                             // 35: chalk.graph.v1.RedshiftSource.AsyncEngineArgsEntry
	nil,                             // 36: chalk.graph.v1.SnowflakeSource.EngineArgsEntry
	nil,                             // 37: chalk.graph.v1.SnowflakeSource.AsyncEngineArgsEntry
	nil,                             // 38: chalk.graph.v1.SQLiteSource.EngineArgsEntry
	nil,                             // 39: chalk.graph.v1.SQLiteSource.AsyncEngineArgsEntry
	nil,                             // 40: chalk.graph.v1.SpannerSource.EngineArgsEntry
	nil,                             // 41: chalk.graph.v1.SpannerSource.AsyncEngineArgsEntry
	nil,                             // 42: chalk.graph.v1.TrinoSource.EngineArgsEntry
	nil,                             // 43: chalk.graph.v1.TrinoSource.AsyncEngineArgsEntry
	nil,                             // 44: chalk.graph.v1.AthenaSource.EngineArgsEntry
	nil,                             // 45: chalk.graph.v1.AthenaSource.AsyncEngineArgsEntry
	nil,                             // 46: chalk.graph.v1.ClickhouseSource.EngineArgsEntry
	nil,                             // 47: chalk.graph.v1.ClickhouseSource.AsyncEngineArgsEntry
	(*durationpb.Duration)(nil),     // 48: google.protobuf.Duration
	(*v1.ScalarValue)(nil),          // 49: chalk.arrow.v1.ScalarValue
}
var file_chalk_graph_v1_sources_proto_depIdxs = []int32{
	0,  // 0: chalk.graph.v1.StreamSourceReference.type:type_name -> chalk.graph.v1.StreamSourceType
	5,  // 1: chalk.graph.v1.StreamSource.kafka:type_name -> chalk.graph.v1.KafkaSource
	4,  // 2: chalk.graph.v1.StreamSource.kinesis:type_name -> chalk.graph.v1.KinesisSource
	6,  // 3: chalk.graph.v1.StreamSource.pubsub:type_name -> chalk.graph.v1.PubSubSource
	48, // 4: chalk.graph.v1.KinesisSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	48, // 5: chalk.graph.v1.KafkaSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	48, // 6: chalk.graph.v1.PubSubSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	1,  // 7: chalk.graph.v1.DatabaseSourceReference.type:type_name -> chalk.graph.v1.DatabaseSourceType
	9,  // 8: chalk.graph.v1.DatabaseSource.bigquery:type_name -> chalk.graph.v1.BigQuerySource
	10, // 9: chalk.graph.v1.DatabaseSource.cloudsql:type_name -> chalk.graph.v1.CloudSQLSource
	11, // 10: chalk.graph.v1.DatabaseSource.databricks:type_name -> chalk.graph.v1.DatabricksSource
	13, // 11: chalk.graph.v1.DatabaseSource.mysql:type_name -> chalk.graph.v1.MySQLSource
	14, // 12: chalk.graph.v1.DatabaseSource.postgres:type_name -> chalk.graph.v1.PostgresSource
	15, // 13: chalk.graph.v1.DatabaseSource.redshift:type_name -> chalk.graph.v1.RedshiftSource
	16, // 14: chalk.graph.v1.DatabaseSource.snowflake:type_name -> chalk.graph.v1.SnowflakeSource
	17, // 15: chalk.graph.v1.DatabaseSource.sqlite:type_name -> chalk.graph.v1.SQLiteSource
	18, // 16: chalk.graph.v1.DatabaseSource.spanner:type_name -> chalk.graph.v1.SpannerSource
	19, // 17: chalk.graph.v1.DatabaseSource.trino:type_name -> chalk.graph.v1.TrinoSource
	12, // 18: chalk.graph.v1.DatabaseSource.dynamodb:type_name -> chalk.graph.v1.DynamoDBSource
	20, // 19: chalk.graph.v1.DatabaseSource.athena:type_name -> chalk.graph.v1.AthenaSource
	21, // 20: chalk.graph.v1.DatabaseSource.clickhouse:type_name -> chalk.graph.v1.ClickhouseSource
	22, // 21: chalk.graph.v1.BigQuerySource.engine_args:type_name -> chalk.graph.v1.BigQuerySource.EngineArgsEntry
	23, // 22: chalk.graph.v1.BigQuerySource.async_engine_args:type_name -> chalk.graph.v1.BigQuerySource.AsyncEngineArgsEntry
	24, // 23: chalk.graph.v1.CloudSQLSource.engine_args:type_name -> chalk.graph.v1.CloudSQLSource.EngineArgsEntry
	25, // 24: chalk.graph.v1.CloudSQLSource.async_engine_args:type_name -> chalk.graph.v1.CloudSQLSource.AsyncEngineArgsEntry
	26, // 25: chalk.graph.v1.DatabricksSource.engine_args:type_name -> chalk.graph.v1.DatabricksSource.EngineArgsEntry
	27, // 26: chalk.graph.v1.DatabricksSource.async_engine_args:type_name -> chalk.graph.v1.DatabricksSource.AsyncEngineArgsEntry
	28, // 27: chalk.graph.v1.DynamoDBSource.engine_args:type_name -> chalk.graph.v1.DynamoDBSource.EngineArgsEntry
	29, // 28: chalk.graph.v1.DynamoDBSource.async_engine_args:type_name -> chalk.graph.v1.DynamoDBSource.AsyncEngineArgsEntry
	30, // 29: chalk.graph.v1.MySQLSource.engine_args:type_name -> chalk.graph.v1.MySQLSource.EngineArgsEntry
	31, // 30: chalk.graph.v1.MySQLSource.async_engine_args:type_name -> chalk.graph.v1.MySQLSource.AsyncEngineArgsEntry
	32, // 31: chalk.graph.v1.PostgresSource.engine_args:type_name -> chalk.graph.v1.PostgresSource.EngineArgsEntry
	33, // 32: chalk.graph.v1.PostgresSource.async_engine_args:type_name -> chalk.graph.v1.PostgresSource.AsyncEngineArgsEntry
	34, // 33: chalk.graph.v1.RedshiftSource.engine_args:type_name -> chalk.graph.v1.RedshiftSource.EngineArgsEntry
	35, // 34: chalk.graph.v1.RedshiftSource.async_engine_args:type_name -> chalk.graph.v1.RedshiftSource.AsyncEngineArgsEntry
	36, // 35: chalk.graph.v1.SnowflakeSource.engine_args:type_name -> chalk.graph.v1.SnowflakeSource.EngineArgsEntry
	37, // 36: chalk.graph.v1.SnowflakeSource.async_engine_args:type_name -> chalk.graph.v1.SnowflakeSource.AsyncEngineArgsEntry
	38, // 37: chalk.graph.v1.SQLiteSource.engine_args:type_name -> chalk.graph.v1.SQLiteSource.EngineArgsEntry
	39, // 38: chalk.graph.v1.SQLiteSource.async_engine_args:type_name -> chalk.graph.v1.SQLiteSource.AsyncEngineArgsEntry
	40, // 39: chalk.graph.v1.SpannerSource.engine_args:type_name -> chalk.graph.v1.SpannerSource.EngineArgsEntry
	41, // 40: chalk.graph.v1.SpannerSource.async_engine_args:type_name -> chalk.graph.v1.SpannerSource.AsyncEngineArgsEntry
	42, // 41: chalk.graph.v1.TrinoSource.engine_args:type_name -> chalk.graph.v1.TrinoSource.EngineArgsEntry
	43, // 42: chalk.graph.v1.TrinoSource.async_engine_args:type_name -> chalk.graph.v1.TrinoSource.AsyncEngineArgsEntry
	44, // 43: chalk.graph.v1.AthenaSource.engine_args:type_name -> chalk.graph.v1.AthenaSource.EngineArgsEntry
	45, // 44: chalk.graph.v1.AthenaSource.async_engine_args:type_name -> chalk.graph.v1.AthenaSource.AsyncEngineArgsEntry
	46, // 45: chalk.graph.v1.ClickhouseSource.engine_args:type_name -> chalk.graph.v1.ClickhouseSource.EngineArgsEntry
	47, // 46: chalk.graph.v1.ClickhouseSource.async_engine_args:type_name -> chalk.graph.v1.ClickhouseSource.AsyncEngineArgsEntry
	49, // 47: chalk.graph.v1.BigQuerySource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 48: chalk.graph.v1.BigQuerySource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 49: chalk.graph.v1.CloudSQLSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 50: chalk.graph.v1.CloudSQLSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 51: chalk.graph.v1.DatabricksSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 52: chalk.graph.v1.DatabricksSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 53: chalk.graph.v1.DynamoDBSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 54: chalk.graph.v1.DynamoDBSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 55: chalk.graph.v1.MySQLSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 56: chalk.graph.v1.MySQLSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 57: chalk.graph.v1.PostgresSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 58: chalk.graph.v1.PostgresSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 59: chalk.graph.v1.RedshiftSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 60: chalk.graph.v1.RedshiftSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 61: chalk.graph.v1.SnowflakeSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 62: chalk.graph.v1.SnowflakeSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 63: chalk.graph.v1.SQLiteSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 64: chalk.graph.v1.SQLiteSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 65: chalk.graph.v1.SpannerSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 66: chalk.graph.v1.SpannerSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 67: chalk.graph.v1.TrinoSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 68: chalk.graph.v1.TrinoSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 69: chalk.graph.v1.AthenaSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 70: chalk.graph.v1.AthenaSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 71: chalk.graph.v1.ClickhouseSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	49, // 72: chalk.graph.v1.ClickhouseSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_chalk_graph_v1_sources_proto_init() }
func file_chalk_graph_v1_sources_proto_init() {
	if File_chalk_graph_v1_sources_proto != nil {
		return
	}
	file_chalk_graph_v1_sources_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamSource_Kafka)(nil),
		(*StreamSource_Kinesis)(nil),
		(*StreamSource_Pubsub)(nil),
	}
	file_chalk_graph_v1_sources_proto_msgTypes[6].OneofWrappers = []any{
		(*DatabaseSource_Bigquery)(nil),
		(*DatabaseSource_Cloudsql)(nil),
		(*DatabaseSource_Databricks)(nil),
		(*DatabaseSource_Mysql)(nil),
		(*DatabaseSource_Postgres)(nil),
		(*DatabaseSource_Redshift)(nil),
		(*DatabaseSource_Snowflake)(nil),
		(*DatabaseSource_Sqlite)(nil),
		(*DatabaseSource_Spanner)(nil),
		(*DatabaseSource_Trino)(nil),
		(*DatabaseSource_Dynamodb)(nil),
		(*DatabaseSource_Athena)(nil),
		(*DatabaseSource_Clickhouse)(nil),
	}
	file_chalk_graph_v1_sources_proto_msgTypes[10].OneofWrappers = []any{}
	file_chalk_graph_v1_sources_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_graph_v1_sources_proto_rawDesc), len(file_chalk_graph_v1_sources_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_graph_v1_sources_proto_goTypes,
		DependencyIndexes: file_chalk_graph_v1_sources_proto_depIdxs,
		EnumInfos:         file_chalk_graph_v1_sources_proto_enumTypes,
		MessageInfos:      file_chalk_graph_v1_sources_proto_msgTypes,
	}.Build()
	File_chalk_graph_v1_sources_proto = out.File
	file_chalk_graph_v1_sources_proto_goTypes = nil
	file_chalk_graph_v1_sources_proto_depIdxs = nil
}
