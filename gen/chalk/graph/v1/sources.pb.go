// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/graph/v1/sources.proto

package graphv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamSourceType int32

const (
	StreamSourceType_STREAM_SOURCE_TYPE_UNSPECIFIED StreamSourceType = 0
	StreamSourceType_STREAM_SOURCE_TYPE_KAFKA       StreamSourceType = 1
	StreamSourceType_STREAM_SOURCE_TYPE_KINESIS     StreamSourceType = 2
	StreamSourceType_STREAM_SOURCE_TYPE_PUBSUB      StreamSourceType = 3
)

// Enum value maps for StreamSourceType.
var (
	StreamSourceType_name = map[int32]string{
		0: "STREAM_SOURCE_TYPE_UNSPECIFIED",
		1: "STREAM_SOURCE_TYPE_KAFKA",
		2: "STREAM_SOURCE_TYPE_KINESIS",
		3: "STREAM_SOURCE_TYPE_PUBSUB",
	}
	StreamSourceType_value = map[string]int32{
		"STREAM_SOURCE_TYPE_UNSPECIFIED": 0,
		"STREAM_SOURCE_TYPE_KAFKA":       1,
		"STREAM_SOURCE_TYPE_KINESIS":     2,
		"STREAM_SOURCE_TYPE_PUBSUB":      3,
	}
)

func (x StreamSourceType) Enum() *StreamSourceType {
	p := new(StreamSourceType)
	*p = x
	return p
}

func (x StreamSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_sources_proto_enumTypes[0].Descriptor()
}

func (StreamSourceType) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_sources_proto_enumTypes[0]
}

func (x StreamSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamSourceType.Descriptor instead.
func (StreamSourceType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{0}
}

type DatabaseSourceType int32

const (
	DatabaseSourceType_DATABASE_SOURCE_TYPE_UNSPECIFIED DatabaseSourceType = 0
	DatabaseSourceType_DATABASE_SOURCE_TYPE_BIGQUERY    DatabaseSourceType = 1
	DatabaseSourceType_DATABASE_SOURCE_TYPE_CLOUDSQL    DatabaseSourceType = 2
	DatabaseSourceType_DATABASE_SOURCE_TYPE_DATABRICKS  DatabaseSourceType = 3
	DatabaseSourceType_DATABASE_SOURCE_TYPE_MYSQL       DatabaseSourceType = 4
	DatabaseSourceType_DATABASE_SOURCE_TYPE_POSTGRES    DatabaseSourceType = 5
	DatabaseSourceType_DATABASE_SOURCE_TYPE_REDSHIFT    DatabaseSourceType = 6
	DatabaseSourceType_DATABASE_SOURCE_TYPE_SNOWFLAKE   DatabaseSourceType = 7
	DatabaseSourceType_DATABASE_SOURCE_TYPE_SQLITE      DatabaseSourceType = 8
	DatabaseSourceType_DATABASE_SOURCE_TYPE_SPANNER     DatabaseSourceType = 9
	DatabaseSourceType_DATABASE_SOURCE_TYPE_TRINO       DatabaseSourceType = 10
)

// Enum value maps for DatabaseSourceType.
var (
	DatabaseSourceType_name = map[int32]string{
		0:  "DATABASE_SOURCE_TYPE_UNSPECIFIED",
		1:  "DATABASE_SOURCE_TYPE_BIGQUERY",
		2:  "DATABASE_SOURCE_TYPE_CLOUDSQL",
		3:  "DATABASE_SOURCE_TYPE_DATABRICKS",
		4:  "DATABASE_SOURCE_TYPE_MYSQL",
		5:  "DATABASE_SOURCE_TYPE_POSTGRES",
		6:  "DATABASE_SOURCE_TYPE_REDSHIFT",
		7:  "DATABASE_SOURCE_TYPE_SNOWFLAKE",
		8:  "DATABASE_SOURCE_TYPE_SQLITE",
		9:  "DATABASE_SOURCE_TYPE_SPANNER",
		10: "DATABASE_SOURCE_TYPE_TRINO",
	}
	DatabaseSourceType_value = map[string]int32{
		"DATABASE_SOURCE_TYPE_UNSPECIFIED": 0,
		"DATABASE_SOURCE_TYPE_BIGQUERY":    1,
		"DATABASE_SOURCE_TYPE_CLOUDSQL":    2,
		"DATABASE_SOURCE_TYPE_DATABRICKS":  3,
		"DATABASE_SOURCE_TYPE_MYSQL":       4,
		"DATABASE_SOURCE_TYPE_POSTGRES":    5,
		"DATABASE_SOURCE_TYPE_REDSHIFT":    6,
		"DATABASE_SOURCE_TYPE_SNOWFLAKE":   7,
		"DATABASE_SOURCE_TYPE_SQLITE":      8,
		"DATABASE_SOURCE_TYPE_SPANNER":     9,
		"DATABASE_SOURCE_TYPE_TRINO":       10,
	}
)

func (x DatabaseSourceType) Enum() *DatabaseSourceType {
	p := new(DatabaseSourceType)
	*p = x
	return p
}

func (x DatabaseSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_sources_proto_enumTypes[1].Descriptor()
}

func (DatabaseSourceType) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_sources_proto_enumTypes[1]
}

func (x DatabaseSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseSourceType.Descriptor instead.
func (DatabaseSourceType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{1}
}

type StreamSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type StreamSourceType `protobuf:"varint,1,opt,name=type,proto3,enum=chalk.graph.v1.StreamSourceType" json:"type,omitempty"`
	Name string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StreamSourceReference) Reset() {
	*x = StreamSourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSourceReference) ProtoMessage() {}

func (x *StreamSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSourceReference.ProtoReflect.Descriptor instead.
func (*StreamSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{0}
}

func (x *StreamSourceReference) GetType() StreamSourceType {
	if x != nil {
		return x.Type
	}
	return StreamSourceType_STREAM_SOURCE_TYPE_UNSPECIFIED
}

func (x *StreamSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StreamSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*StreamSource_Kafka
	//	*StreamSource_Kinesis
	//	*StreamSource_Pubsub
	Source isStreamSource_Source `protobuf_oneof:"source"`
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{1}
}

func (m *StreamSource) GetSource() isStreamSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *StreamSource) GetKafka() *KafkaSource {
	if x, ok := x.GetSource().(*StreamSource_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *StreamSource) GetKinesis() *KinesisSource {
	if x, ok := x.GetSource().(*StreamSource_Kinesis); ok {
		return x.Kinesis
	}
	return nil
}

func (x *StreamSource) GetPubsub() *PubSubSource {
	if x, ok := x.GetSource().(*StreamSource_Pubsub); ok {
		return x.Pubsub
	}
	return nil
}

type isStreamSource_Source interface {
	isStreamSource_Source()
}

type StreamSource_Kafka struct {
	Kafka *KafkaSource `protobuf:"bytes,1,opt,name=kafka,proto3,oneof"`
}

type StreamSource_Kinesis struct {
	Kinesis *KinesisSource `protobuf:"bytes,2,opt,name=kinesis,proto3,oneof"`
}

type StreamSource_Pubsub struct {
	Pubsub *PubSubSource `protobuf:"bytes,3,opt,name=pubsub,proto3,oneof"`
}

func (*StreamSource_Kafka) isStreamSource_Source() {}

func (*StreamSource_Kinesis) isStreamSource_Source() {}

func (*StreamSource_Pubsub) isStreamSource_Source() {}

type KinesisSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StreamName                string               `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	StreamArn                 string               `protobuf:"bytes,3,opt,name=stream_arn,json=streamArn,proto3" json:"stream_arn,omitempty"`
	RegionName                string               `protobuf:"bytes,4,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	LateArrivalDeadline       *durationpb.Duration `protobuf:"bytes,5,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueStreamName string               `protobuf:"bytes,6,opt,name=dead_letter_queue_stream_name,json=deadLetterQueueStreamName,proto3" json:"dead_letter_queue_stream_name,omitempty"`
	AwsAccessKeyId            string               `protobuf:"bytes,7,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey        string               `protobuf:"bytes,8,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty"`
	AwsSessionToken           string               `protobuf:"bytes,9,opt,name=aws_session_token,json=awsSessionToken,proto3" json:"aws_session_token,omitempty"`
	EndpointUrl               string               `protobuf:"bytes,10,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	ConsumerRoleArn           string               `protobuf:"bytes,11,opt,name=consumer_role_arn,json=consumerRoleArn,proto3" json:"consumer_role_arn,omitempty"`
}

func (x *KinesisSource) Reset() {
	*x = KinesisSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KinesisSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KinesisSource) ProtoMessage() {}

func (x *KinesisSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KinesisSource.ProtoReflect.Descriptor instead.
func (*KinesisSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{2}
}

func (x *KinesisSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KinesisSource) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *KinesisSource) GetStreamArn() string {
	if x != nil {
		return x.StreamArn
	}
	return ""
}

func (x *KinesisSource) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *KinesisSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *KinesisSource) GetDeadLetterQueueStreamName() string {
	if x != nil {
		return x.DeadLetterQueueStreamName
	}
	return ""
}

func (x *KinesisSource) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *KinesisSource) GetAwsSecretAccessKey() string {
	if x != nil {
		return x.AwsSecretAccessKey
	}
	return ""
}

func (x *KinesisSource) GetAwsSessionToken() string {
	if x != nil {
		return x.AwsSessionToken
	}
	return ""
}

func (x *KinesisSource) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *KinesisSource) GetConsumerRoleArn() string {
	if x != nil {
		return x.ConsumerRoleArn
	}
	return ""
}

type KafkaSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BootstrapServers     []string             `protobuf:"bytes,2,rep,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	Topic                string               `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	SslKeystoreLocation  string               `protobuf:"bytes,4,opt,name=ssl_keystore_location,json=sslKeystoreLocation,proto3" json:"ssl_keystore_location,omitempty"`
	SslCaFile            string               `protobuf:"bytes,5,opt,name=ssl_ca_file,json=sslCaFile,proto3" json:"ssl_ca_file,omitempty"`
	ClientIdPrefix       string               `protobuf:"bytes,6,opt,name=client_id_prefix,json=clientIdPrefix,proto3" json:"client_id_prefix,omitempty"`
	GroupIdPrefix        string               `protobuf:"bytes,7,opt,name=group_id_prefix,json=groupIdPrefix,proto3" json:"group_id_prefix,omitempty"`
	SecurityProtocol     string               `protobuf:"bytes,8,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
	SaslMechanism        string               `protobuf:"bytes,9,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	SaslUsername         string               `protobuf:"bytes,10,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	SaslPassword         string               `protobuf:"bytes,11,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
	LateArrivalDeadline  *durationpb.Duration `protobuf:"bytes,12,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueTopic string               `protobuf:"bytes,13,opt,name=dead_letter_queue_topic,json=deadLetterQueueTopic,proto3" json:"dead_letter_queue_topic,omitempty"`
}

func (x *KafkaSource) Reset() {
	*x = KafkaSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSource) ProtoMessage() {}

func (x *KafkaSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSource.ProtoReflect.Descriptor instead.
func (*KafkaSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaSource) GetBootstrapServers() []string {
	if x != nil {
		return x.BootstrapServers
	}
	return nil
}

func (x *KafkaSource) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaSource) GetSslKeystoreLocation() string {
	if x != nil {
		return x.SslKeystoreLocation
	}
	return ""
}

func (x *KafkaSource) GetSslCaFile() string {
	if x != nil {
		return x.SslCaFile
	}
	return ""
}

func (x *KafkaSource) GetClientIdPrefix() string {
	if x != nil {
		return x.ClientIdPrefix
	}
	return ""
}

func (x *KafkaSource) GetGroupIdPrefix() string {
	if x != nil {
		return x.GroupIdPrefix
	}
	return ""
}

func (x *KafkaSource) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

func (x *KafkaSource) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *KafkaSource) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *KafkaSource) GetSaslPassword() string {
	if x != nil {
		return x.SaslPassword
	}
	return ""
}

func (x *KafkaSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *KafkaSource) GetDeadLetterQueueTopic() string {
	if x != nil {
		return x.DeadLetterQueueTopic
	}
	return ""
}

type PubSubSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId            string               `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SubscriptionId       string               `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	LateArrivalDeadline  *durationpb.Duration `protobuf:"bytes,4,opt,name=late_arrival_deadline,json=lateArrivalDeadline,proto3" json:"late_arrival_deadline,omitempty"`
	DeadLetterQueueTopic string               `protobuf:"bytes,5,opt,name=dead_letter_queue_topic,json=deadLetterQueueTopic,proto3" json:"dead_letter_queue_topic,omitempty"`
}

func (x *PubSubSource) Reset() {
	*x = PubSubSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubSource) ProtoMessage() {}

func (x *PubSubSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubSource.ProtoReflect.Descriptor instead.
func (*PubSubSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{4}
}

func (x *PubSubSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PubSubSource) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PubSubSource) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *PubSubSource) GetLateArrivalDeadline() *durationpb.Duration {
	if x != nil {
		return x.LateArrivalDeadline
	}
	return nil
}

func (x *PubSubSource) GetDeadLetterQueueTopic() string {
	if x != nil {
		return x.DeadLetterQueueTopic
	}
	return ""
}

type DatabaseSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DatabaseSourceType `protobuf:"varint,1,opt,name=type,proto3,enum=chalk.graph.v1.DatabaseSourceType" json:"type,omitempty"`
	Name string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DatabaseSourceReference) Reset() {
	*x = DatabaseSourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSourceReference) ProtoMessage() {}

func (x *DatabaseSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSourceReference.ProtoReflect.Descriptor instead.
func (*DatabaseSourceReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{5}
}

func (x *DatabaseSourceReference) GetType() DatabaseSourceType {
	if x != nil {
		return x.Type
	}
	return DatabaseSourceType_DATABASE_SOURCE_TYPE_UNSPECIFIED
}

func (x *DatabaseSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*DatabaseSource_Bigquery
	//	*DatabaseSource_Cloudsql
	//	*DatabaseSource_Databricks
	//	*DatabaseSource_Mysql
	//	*DatabaseSource_Postgres
	//	*DatabaseSource_Redshift
	//	*DatabaseSource_Snowflake
	//	*DatabaseSource_Sqlite
	//	*DatabaseSource_Spanner
	//	*DatabaseSource_Trino
	Source isDatabaseSource_Source `protobuf_oneof:"source"`
}

func (x *DatabaseSource) Reset() {
	*x = DatabaseSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSource) ProtoMessage() {}

func (x *DatabaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSource.ProtoReflect.Descriptor instead.
func (*DatabaseSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{6}
}

func (m *DatabaseSource) GetSource() isDatabaseSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *DatabaseSource) GetBigquery() *BigQuerySource {
	if x, ok := x.GetSource().(*DatabaseSource_Bigquery); ok {
		return x.Bigquery
	}
	return nil
}

func (x *DatabaseSource) GetCloudsql() *CloudSQLSource {
	if x, ok := x.GetSource().(*DatabaseSource_Cloudsql); ok {
		return x.Cloudsql
	}
	return nil
}

func (x *DatabaseSource) GetDatabricks() *DatabricksSource {
	if x, ok := x.GetSource().(*DatabaseSource_Databricks); ok {
		return x.Databricks
	}
	return nil
}

func (x *DatabaseSource) GetMysql() *MySQLSource {
	if x, ok := x.GetSource().(*DatabaseSource_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (x *DatabaseSource) GetPostgres() *PostgresSource {
	if x, ok := x.GetSource().(*DatabaseSource_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *DatabaseSource) GetRedshift() *RedshiftSource {
	if x, ok := x.GetSource().(*DatabaseSource_Redshift); ok {
		return x.Redshift
	}
	return nil
}

func (x *DatabaseSource) GetSnowflake() *SnowflakeSource {
	if x, ok := x.GetSource().(*DatabaseSource_Snowflake); ok {
		return x.Snowflake
	}
	return nil
}

func (x *DatabaseSource) GetSqlite() *SQLiteSource {
	if x, ok := x.GetSource().(*DatabaseSource_Sqlite); ok {
		return x.Sqlite
	}
	return nil
}

func (x *DatabaseSource) GetSpanner() *SpannerSource {
	if x, ok := x.GetSource().(*DatabaseSource_Spanner); ok {
		return x.Spanner
	}
	return nil
}

func (x *DatabaseSource) GetTrino() *TrinoSource {
	if x, ok := x.GetSource().(*DatabaseSource_Trino); ok {
		return x.Trino
	}
	return nil
}

type isDatabaseSource_Source interface {
	isDatabaseSource_Source()
}

type DatabaseSource_Bigquery struct {
	Bigquery *BigQuerySource `protobuf:"bytes,1,opt,name=bigquery,proto3,oneof"`
}

type DatabaseSource_Cloudsql struct {
	Cloudsql *CloudSQLSource `protobuf:"bytes,2,opt,name=cloudsql,proto3,oneof"`
}

type DatabaseSource_Databricks struct {
	Databricks *DatabricksSource `protobuf:"bytes,3,opt,name=databricks,proto3,oneof"`
}

type DatabaseSource_Mysql struct {
	Mysql *MySQLSource `protobuf:"bytes,4,opt,name=mysql,proto3,oneof"`
}

type DatabaseSource_Postgres struct {
	Postgres *PostgresSource `protobuf:"bytes,5,opt,name=postgres,proto3,oneof"`
}

type DatabaseSource_Redshift struct {
	Redshift *RedshiftSource `protobuf:"bytes,6,opt,name=redshift,proto3,oneof"`
}

type DatabaseSource_Snowflake struct {
	Snowflake *SnowflakeSource `protobuf:"bytes,7,opt,name=snowflake,proto3,oneof"`
}

type DatabaseSource_Sqlite struct {
	Sqlite *SQLiteSource `protobuf:"bytes,8,opt,name=sqlite,proto3,oneof"`
}

type DatabaseSource_Spanner struct {
	Spanner *SpannerSource `protobuf:"bytes,9,opt,name=spanner,proto3,oneof"`
}

type DatabaseSource_Trino struct {
	Trino *TrinoSource `protobuf:"bytes,10,opt,name=trino,proto3,oneof"`
}

func (*DatabaseSource_Bigquery) isDatabaseSource_Source() {}

func (*DatabaseSource_Cloudsql) isDatabaseSource_Source() {}

func (*DatabaseSource_Databricks) isDatabaseSource_Source() {}

func (*DatabaseSource_Mysql) isDatabaseSource_Source() {}

func (*DatabaseSource_Postgres) isDatabaseSource_Source() {}

func (*DatabaseSource_Redshift) isDatabaseSource_Source() {}

func (*DatabaseSource_Snowflake) isDatabaseSource_Source() {}

func (*DatabaseSource_Sqlite) isDatabaseSource_Source() {}

func (*DatabaseSource_Spanner) isDatabaseSource_Source() {}

func (*DatabaseSource_Trino) isDatabaseSource_Source() {}

type BigQuerySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project           string                     `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Dataset           string                     `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Location          string                     `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	CredentialsBase64 string                     `protobuf:"bytes,5,opt,name=credentials_base64,json=credentialsBase64,proto3" json:"credentials_base64,omitempty"`
	CredentialsPath   string                     `protobuf:"bytes,6,opt,name=credentials_path,json=credentialsPath,proto3" json:"credentials_path,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BigQuerySource) Reset() {
	*x = BigQuerySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigQuerySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQuerySource) ProtoMessage() {}

func (x *BigQuerySource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQuerySource.ProtoReflect.Descriptor instead.
func (*BigQuerySource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{7}
}

func (x *BigQuerySource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BigQuerySource) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BigQuerySource) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *BigQuerySource) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *BigQuerySource) GetCredentialsBase64() string {
	if x != nil {
		return x.CredentialsBase64
	}
	return ""
}

func (x *BigQuerySource) GetCredentialsPath() string {
	if x != nil {
		return x.CredentialsPath
	}
	return ""
}

func (x *BigQuerySource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *BigQuerySource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type CloudSQLSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Db              string                     `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	InstanceName    string                     `protobuf:"bytes,5,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudSQLSource) Reset() {
	*x = CloudSQLSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudSQLSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSQLSource) ProtoMessage() {}

func (x *CloudSQLSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSQLSource.ProtoReflect.Descriptor instead.
func (*CloudSQLSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{8}
}

func (x *CloudSQLSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudSQLSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *CloudSQLSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CloudSQLSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CloudSQLSource) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CloudSQLSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *CloudSQLSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type DatabricksSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	HttpPath        string                     `protobuf:"bytes,5,opt,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"`
	AccessToken     string                     `protobuf:"bytes,6,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DatabricksSource) Reset() {
	*x = DatabricksSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabricksSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabricksSource) ProtoMessage() {}

func (x *DatabricksSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabricksSource.ProtoReflect.Descriptor instead.
func (*DatabricksSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{9}
}

func (x *DatabricksSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabricksSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabricksSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *DatabricksSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *DatabricksSource) GetHttpPath() string {
	if x != nil {
		return x.HttpPath
	}
	return ""
}

func (x *DatabricksSource) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DatabricksSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *DatabricksSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type MySQLSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MySQLSource) Reset() {
	*x = MySQLSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLSource) ProtoMessage() {}

func (x *MySQLSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLSource.ProtoReflect.Descriptor instead.
func (*MySQLSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{10}
}

func (x *MySQLSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MySQLSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MySQLSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *MySQLSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *MySQLSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MySQLSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MySQLSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *MySQLSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type PostgresSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostgresSource) Reset() {
	*x = PostgresSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSource) ProtoMessage() {}

func (x *PostgresSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSource.ProtoReflect.Descriptor instead.
func (*PostgresSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{11}
}

func (x *PostgresSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *PostgresSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *PostgresSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgresSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PostgresSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *PostgresSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type RedshiftSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Db              string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	User            string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	S3Client        string                     `protobuf:"bytes,7,opt,name=s3_client,json=s3Client,proto3" json:"s3_client,omitempty"`
	S3Bucket        string                     `protobuf:"bytes,8,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedshiftSource) Reset() {
	*x = RedshiftSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedshiftSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedshiftSource) ProtoMessage() {}

func (x *RedshiftSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedshiftSource.ProtoReflect.Descriptor instead.
func (*RedshiftSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{12}
}

func (x *RedshiftSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RedshiftSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedshiftSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *RedshiftSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *RedshiftSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RedshiftSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedshiftSource) GetS3Client() string {
	if x != nil {
		return x.S3Client
	}
	return ""
}

func (x *RedshiftSource) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *RedshiftSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *RedshiftSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type SnowflakeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Db                string                     `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	Schema            string                     `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Role              string                     `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	User              string                     `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password          string                     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	AccountIdentifier string                     `protobuf:"bytes,7,opt,name=account_identifier,json=accountIdentifier,proto3" json:"account_identifier,omitempty"`
	Warehouse         string                     `protobuf:"bytes,8,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,10,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrivateKeyB64     string                     `protobuf:"bytes,11,opt,name=private_key_b64,json=privateKeyB64,proto3" json:"private_key_b64,omitempty"`
}

func (x *SnowflakeSource) Reset() {
	*x = SnowflakeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeSource) ProtoMessage() {}

func (x *SnowflakeSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeSource.ProtoReflect.Descriptor instead.
func (*SnowflakeSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{13}
}

func (x *SnowflakeSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnowflakeSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *SnowflakeSource) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SnowflakeSource) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *SnowflakeSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SnowflakeSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SnowflakeSource) GetAccountIdentifier() string {
	if x != nil {
		return x.AccountIdentifier
	}
	return ""
}

func (x *SnowflakeSource) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *SnowflakeSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SnowflakeSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

func (x *SnowflakeSource) GetPrivateKeyB64() string {
	if x != nil {
		return x.PrivateKeyB64
	}
	return ""
}

type SQLiteSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileName        string                     `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,3,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,4,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SQLiteSource) Reset() {
	*x = SQLiteSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLiteSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLiteSource) ProtoMessage() {}

func (x *SQLiteSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLiteSource.ProtoReflect.Descriptor instead.
func (*SQLiteSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{14}
}

func (x *SQLiteSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLiteSource) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SQLiteSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SQLiteSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type SpannerSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project           string                     `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Instance          string                     `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	Db                string                     `protobuf:"bytes,4,opt,name=db,proto3" json:"db,omitempty"`
	CredentialsBase64 string                     `protobuf:"bytes,5,opt,name=credentials_base64,json=credentialsBase64,proto3" json:"credentials_base64,omitempty"`
	EngineArgs        map[string]*v1.ScalarValue `protobuf:"bytes,6,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs   map[string]*v1.ScalarValue `protobuf:"bytes,7,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpannerSource) Reset() {
	*x = SpannerSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpannerSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpannerSource) ProtoMessage() {}

func (x *SpannerSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpannerSource.ProtoReflect.Descriptor instead.
func (*SpannerSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{15}
}

func (x *SpannerSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpannerSource) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SpannerSource) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SpannerSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *SpannerSource) GetCredentialsBase64() string {
	if x != nil {
		return x.CredentialsBase64
	}
	return ""
}

func (x *SpannerSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *SpannerSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

type TrinoSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host            string                     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Catalog         string                     `protobuf:"bytes,4,opt,name=catalog,proto3" json:"catalog,omitempty"`
	Schema          string                     `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	User            string                     `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Password        string                     `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	EngineArgs      map[string]*v1.ScalarValue `protobuf:"bytes,8,rep,name=engine_args,json=engineArgs,proto3" json:"engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AsyncEngineArgs map[string]*v1.ScalarValue `protobuf:"bytes,9,rep,name=async_engine_args,json=asyncEngineArgs,proto3" json:"async_engine_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrinoSource) Reset() {
	*x = TrinoSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_sources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrinoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrinoSource) ProtoMessage() {}

func (x *TrinoSource) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_sources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrinoSource.ProtoReflect.Descriptor instead.
func (*TrinoSource) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_sources_proto_rawDescGZIP(), []int{16}
}

func (x *TrinoSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrinoSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TrinoSource) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *TrinoSource) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *TrinoSource) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TrinoSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TrinoSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TrinoSource) GetEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.EngineArgs
	}
	return nil
}

func (x *TrinoSource) GetAsyncEngineArgs() map[string]*v1.ScalarValue {
	if x != nil {
		return x.AsyncEngineArgs
	}
	return nil
}

var File_chalk_graph_v1_sources_proto protoreflect.FileDescriptor

var file_chalk_graph_v1_sources_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1a,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x15, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x01,
	0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x12, 0x39, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x36,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0xee, 0x03, 0x0a, 0x0d, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64,
	0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72,
	0x6e, 0x22, 0xae, 0x04, 0x0a, 0x0b, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x73, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x73, 0x6c, 0x4b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b,
	0x73, 0x73, 0x6c, 0x5f, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x61, 0x73, 0x6c, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x61, 0x73, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4d, 0x0a, 0x15,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64,
	0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65,
	0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4d, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x65, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x04, 0x0a,
	0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x08, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x71, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x12, 0x3f, 0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x70, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0xbd, 0x04, 0x0a, 0x0e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf8, 0x03, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x51, 0x4c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x51, 0x4c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x5f, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a,
	0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91,
	0x04, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x51, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf2, 0x03, 0x0a, 0x0b, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4c,
	0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x11,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x03, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x64, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x33, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x4f,
	0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x5f, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x04,
	0x0a, 0x0f, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x64, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x60, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f,
	0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x62, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x36, 0x34, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x03, 0x0a, 0x0c, 0x53, 0x51, 0x4c, 0x69,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x04, 0x0a, 0x0d, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x62,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x4e, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x5e, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x04, 0x0a,
	0x0b, 0x54, 0x72, 0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x6e, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x0f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x14, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x93, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4b, 0x41, 0x46, 0x4b, 0x41, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4b, 0x49, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x03, 0x2a, 0x92, 0x03, 0x0a, 0x12, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x53, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10,
	0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52,
	0x45, 0x53, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44,
	0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4e, 0x4f, 0x57, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x49, 0x54, 0x45, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x09, 0x12, 0x1e,
	0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x4e, 0x4f, 0x10, 0x0a, 0x42, 0xb5,
	0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x47, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_graph_v1_sources_proto_rawDescOnce sync.Once
	file_chalk_graph_v1_sources_proto_rawDescData = file_chalk_graph_v1_sources_proto_rawDesc
)

func file_chalk_graph_v1_sources_proto_rawDescGZIP() []byte {
	file_chalk_graph_v1_sources_proto_rawDescOnce.Do(func() {
		file_chalk_graph_v1_sources_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_graph_v1_sources_proto_rawDescData)
	})
	return file_chalk_graph_v1_sources_proto_rawDescData
}

var file_chalk_graph_v1_sources_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_graph_v1_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_chalk_graph_v1_sources_proto_goTypes = []any{
	(StreamSourceType)(0),           // 0: chalk.graph.v1.StreamSourceType
	(DatabaseSourceType)(0),         // 1: chalk.graph.v1.DatabaseSourceType
	(*StreamSourceReference)(nil),   // 2: chalk.graph.v1.StreamSourceReference
	(*StreamSource)(nil),            // 3: chalk.graph.v1.StreamSource
	(*KinesisSource)(nil),           // 4: chalk.graph.v1.KinesisSource
	(*KafkaSource)(nil),             // 5: chalk.graph.v1.KafkaSource
	(*PubSubSource)(nil),            // 6: chalk.graph.v1.PubSubSource
	(*DatabaseSourceReference)(nil), // 7: chalk.graph.v1.DatabaseSourceReference
	(*DatabaseSource)(nil),          // 8: chalk.graph.v1.DatabaseSource
	(*BigQuerySource)(nil),          // 9: chalk.graph.v1.BigQuerySource
	(*CloudSQLSource)(nil),          // 10: chalk.graph.v1.CloudSQLSource
	(*DatabricksSource)(nil),        // 11: chalk.graph.v1.DatabricksSource
	(*MySQLSource)(nil),             // 12: chalk.graph.v1.MySQLSource
	(*PostgresSource)(nil),          // 13: chalk.graph.v1.PostgresSource
	(*RedshiftSource)(nil),          // 14: chalk.graph.v1.RedshiftSource
	(*SnowflakeSource)(nil),         // 15: chalk.graph.v1.SnowflakeSource
	(*SQLiteSource)(nil),            // 16: chalk.graph.v1.SQLiteSource
	(*SpannerSource)(nil),           // 17: chalk.graph.v1.SpannerSource
	(*TrinoSource)(nil),             // 18: chalk.graph.v1.TrinoSource
	nil,                             // 19: chalk.graph.v1.BigQuerySource.EngineArgsEntry
	nil,                             // 20: chalk.graph.v1.BigQuerySource.AsyncEngineArgsEntry
	nil,                             // 21: chalk.graph.v1.CloudSQLSource.EngineArgsEntry
	nil,                             // 22: chalk.graph.v1.CloudSQLSource.AsyncEngineArgsEntry
	nil,                             // 23: chalk.graph.v1.DatabricksSource.EngineArgsEntry
	nil,                             // 24: chalk.graph.v1.DatabricksSource.AsyncEngineArgsEntry
	nil,                             // 25: chalk.graph.v1.MySQLSource.EngineArgsEntry
	nil,                             // 26: chalk.graph.v1.MySQLSource.AsyncEngineArgsEntry
	nil,                             // 27: chalk.graph.v1.PostgresSource.EngineArgsEntry
	nil,                             // 28: chalk.graph.v1.PostgresSource.AsyncEngineArgsEntry
	nil,                             // 29: chalk.graph.v1.RedshiftSource.EngineArgsEntry
	nil,                             // 30: chalk.graph.v1.RedshiftSource.AsyncEngineArgsEntry
	nil,                             // 31: chalk.graph.v1.SnowflakeSource.EngineArgsEntry
	nil,                             // 32: chalk.graph.v1.SnowflakeSource.AsyncEngineArgsEntry
	nil,                             // 33: chalk.graph.v1.SQLiteSource.EngineArgsEntry
	nil,                             // 34: chalk.graph.v1.SQLiteSource.AsyncEngineArgsEntry
	nil,                             // 35: chalk.graph.v1.SpannerSource.EngineArgsEntry
	nil,                             // 36: chalk.graph.v1.SpannerSource.AsyncEngineArgsEntry
	nil,                             // 37: chalk.graph.v1.TrinoSource.EngineArgsEntry
	nil,                             // 38: chalk.graph.v1.TrinoSource.AsyncEngineArgsEntry
	(*durationpb.Duration)(nil),     // 39: google.protobuf.Duration
	(*v1.ScalarValue)(nil),          // 40: chalk.arrow.v1.ScalarValue
}
var file_chalk_graph_v1_sources_proto_depIdxs = []int32{
	0,  // 0: chalk.graph.v1.StreamSourceReference.type:type_name -> chalk.graph.v1.StreamSourceType
	5,  // 1: chalk.graph.v1.StreamSource.kafka:type_name -> chalk.graph.v1.KafkaSource
	4,  // 2: chalk.graph.v1.StreamSource.kinesis:type_name -> chalk.graph.v1.KinesisSource
	6,  // 3: chalk.graph.v1.StreamSource.pubsub:type_name -> chalk.graph.v1.PubSubSource
	39, // 4: chalk.graph.v1.KinesisSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	39, // 5: chalk.graph.v1.KafkaSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	39, // 6: chalk.graph.v1.PubSubSource.late_arrival_deadline:type_name -> google.protobuf.Duration
	1,  // 7: chalk.graph.v1.DatabaseSourceReference.type:type_name -> chalk.graph.v1.DatabaseSourceType
	9,  // 8: chalk.graph.v1.DatabaseSource.bigquery:type_name -> chalk.graph.v1.BigQuerySource
	10, // 9: chalk.graph.v1.DatabaseSource.cloudsql:type_name -> chalk.graph.v1.CloudSQLSource
	11, // 10: chalk.graph.v1.DatabaseSource.databricks:type_name -> chalk.graph.v1.DatabricksSource
	12, // 11: chalk.graph.v1.DatabaseSource.mysql:type_name -> chalk.graph.v1.MySQLSource
	13, // 12: chalk.graph.v1.DatabaseSource.postgres:type_name -> chalk.graph.v1.PostgresSource
	14, // 13: chalk.graph.v1.DatabaseSource.redshift:type_name -> chalk.graph.v1.RedshiftSource
	15, // 14: chalk.graph.v1.DatabaseSource.snowflake:type_name -> chalk.graph.v1.SnowflakeSource
	16, // 15: chalk.graph.v1.DatabaseSource.sqlite:type_name -> chalk.graph.v1.SQLiteSource
	17, // 16: chalk.graph.v1.DatabaseSource.spanner:type_name -> chalk.graph.v1.SpannerSource
	18, // 17: chalk.graph.v1.DatabaseSource.trino:type_name -> chalk.graph.v1.TrinoSource
	19, // 18: chalk.graph.v1.BigQuerySource.engine_args:type_name -> chalk.graph.v1.BigQuerySource.EngineArgsEntry
	20, // 19: chalk.graph.v1.BigQuerySource.async_engine_args:type_name -> chalk.graph.v1.BigQuerySource.AsyncEngineArgsEntry
	21, // 20: chalk.graph.v1.CloudSQLSource.engine_args:type_name -> chalk.graph.v1.CloudSQLSource.EngineArgsEntry
	22, // 21: chalk.graph.v1.CloudSQLSource.async_engine_args:type_name -> chalk.graph.v1.CloudSQLSource.AsyncEngineArgsEntry
	23, // 22: chalk.graph.v1.DatabricksSource.engine_args:type_name -> chalk.graph.v1.DatabricksSource.EngineArgsEntry
	24, // 23: chalk.graph.v1.DatabricksSource.async_engine_args:type_name -> chalk.graph.v1.DatabricksSource.AsyncEngineArgsEntry
	25, // 24: chalk.graph.v1.MySQLSource.engine_args:type_name -> chalk.graph.v1.MySQLSource.EngineArgsEntry
	26, // 25: chalk.graph.v1.MySQLSource.async_engine_args:type_name -> chalk.graph.v1.MySQLSource.AsyncEngineArgsEntry
	27, // 26: chalk.graph.v1.PostgresSource.engine_args:type_name -> chalk.graph.v1.PostgresSource.EngineArgsEntry
	28, // 27: chalk.graph.v1.PostgresSource.async_engine_args:type_name -> chalk.graph.v1.PostgresSource.AsyncEngineArgsEntry
	29, // 28: chalk.graph.v1.RedshiftSource.engine_args:type_name -> chalk.graph.v1.RedshiftSource.EngineArgsEntry
	30, // 29: chalk.graph.v1.RedshiftSource.async_engine_args:type_name -> chalk.graph.v1.RedshiftSource.AsyncEngineArgsEntry
	31, // 30: chalk.graph.v1.SnowflakeSource.engine_args:type_name -> chalk.graph.v1.SnowflakeSource.EngineArgsEntry
	32, // 31: chalk.graph.v1.SnowflakeSource.async_engine_args:type_name -> chalk.graph.v1.SnowflakeSource.AsyncEngineArgsEntry
	33, // 32: chalk.graph.v1.SQLiteSource.engine_args:type_name -> chalk.graph.v1.SQLiteSource.EngineArgsEntry
	34, // 33: chalk.graph.v1.SQLiteSource.async_engine_args:type_name -> chalk.graph.v1.SQLiteSource.AsyncEngineArgsEntry
	35, // 34: chalk.graph.v1.SpannerSource.engine_args:type_name -> chalk.graph.v1.SpannerSource.EngineArgsEntry
	36, // 35: chalk.graph.v1.SpannerSource.async_engine_args:type_name -> chalk.graph.v1.SpannerSource.AsyncEngineArgsEntry
	37, // 36: chalk.graph.v1.TrinoSource.engine_args:type_name -> chalk.graph.v1.TrinoSource.EngineArgsEntry
	38, // 37: chalk.graph.v1.TrinoSource.async_engine_args:type_name -> chalk.graph.v1.TrinoSource.AsyncEngineArgsEntry
	40, // 38: chalk.graph.v1.BigQuerySource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 39: chalk.graph.v1.BigQuerySource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 40: chalk.graph.v1.CloudSQLSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 41: chalk.graph.v1.CloudSQLSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 42: chalk.graph.v1.DatabricksSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 43: chalk.graph.v1.DatabricksSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 44: chalk.graph.v1.MySQLSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 45: chalk.graph.v1.MySQLSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 46: chalk.graph.v1.PostgresSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 47: chalk.graph.v1.PostgresSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 48: chalk.graph.v1.RedshiftSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 49: chalk.graph.v1.RedshiftSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 50: chalk.graph.v1.SnowflakeSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 51: chalk.graph.v1.SnowflakeSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 52: chalk.graph.v1.SQLiteSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 53: chalk.graph.v1.SQLiteSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 54: chalk.graph.v1.SpannerSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 55: chalk.graph.v1.SpannerSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 56: chalk.graph.v1.TrinoSource.EngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	40, // 57: chalk.graph.v1.TrinoSource.AsyncEngineArgsEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_chalk_graph_v1_sources_proto_init() }
func file_chalk_graph_v1_sources_proto_init() {
	if File_chalk_graph_v1_sources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_graph_v1_sources_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StreamSourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StreamSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*KinesisSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PubSubSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DatabaseSourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DatabaseSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BigQuerySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CloudSQLSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DatabricksSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MySQLSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PostgresSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RedshiftSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SnowflakeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SQLiteSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SpannerSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_sources_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TrinoSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_graph_v1_sources_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamSource_Kafka)(nil),
		(*StreamSource_Kinesis)(nil),
		(*StreamSource_Pubsub)(nil),
	}
	file_chalk_graph_v1_sources_proto_msgTypes[6].OneofWrappers = []any{
		(*DatabaseSource_Bigquery)(nil),
		(*DatabaseSource_Cloudsql)(nil),
		(*DatabaseSource_Databricks)(nil),
		(*DatabaseSource_Mysql)(nil),
		(*DatabaseSource_Postgres)(nil),
		(*DatabaseSource_Redshift)(nil),
		(*DatabaseSource_Snowflake)(nil),
		(*DatabaseSource_Sqlite)(nil),
		(*DatabaseSource_Spanner)(nil),
		(*DatabaseSource_Trino)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_graph_v1_sources_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_graph_v1_sources_proto_goTypes,
		DependencyIndexes: file_chalk_graph_v1_sources_proto_depIdxs,
		EnumInfos:         file_chalk_graph_v1_sources_proto_enumTypes,
		MessageInfos:      file_chalk_graph_v1_sources_proto_msgTypes,
	}.Build()
	File_chalk_graph_v1_sources_proto = out.File
	file_chalk_graph_v1_sources_proto_rawDesc = nil
	file_chalk_graph_v1_sources_proto_goTypes = nil
	file_chalk_graph_v1_sources_proto_depIdxs = nil
}
