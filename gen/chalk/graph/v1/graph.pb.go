// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: chalk/graph/v1/graph.proto

package graphv1

import (
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/expression/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolverKind int32

const (
	ResolverKind_RESOLVER_KIND_UNSPECIFIED ResolverKind = 0
	ResolverKind_RESOLVER_KIND_ONLINE      ResolverKind = 1
	ResolverKind_RESOLVER_KIND_OFFLINE     ResolverKind = 2
)

// Enum value maps for ResolverKind.
var (
	ResolverKind_name = map[int32]string{
		0: "RESOLVER_KIND_UNSPECIFIED",
		1: "RESOLVER_KIND_ONLINE",
		2: "RESOLVER_KIND_OFFLINE",
	}
	ResolverKind_value = map[string]int32{
		"RESOLVER_KIND_UNSPECIFIED": 0,
		"RESOLVER_KIND_ONLINE":      1,
		"RESOLVER_KIND_OFFLINE":     2,
	}
)

func (x ResolverKind) Enum() *ResolverKind {
	p := new(ResolverKind)
	*p = x
	return p
}

func (x ResolverKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolverKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[0].Descriptor()
}

func (ResolverKind) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[0]
}

func (x ResolverKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolverKind.Descriptor instead.
func (ResolverKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{0}
}

type WindowMode int32

const (
	WindowMode_WINDOW_MODE_UNSPECIFIED WindowMode = 0
	WindowMode_WINDOW_MODE_CONTINUOUS  WindowMode = 1
	WindowMode_WINDOW_MODE_TUMBLING    WindowMode = 2
	WindowMode_WINDOW_MODE_CDC         WindowMode = 3
)

// Enum value maps for WindowMode.
var (
	WindowMode_name = map[int32]string{
		0: "WINDOW_MODE_UNSPECIFIED",
		1: "WINDOW_MODE_CONTINUOUS",
		2: "WINDOW_MODE_TUMBLING",
		3: "WINDOW_MODE_CDC",
	}
	WindowMode_value = map[string]int32{
		"WINDOW_MODE_UNSPECIFIED": 0,
		"WINDOW_MODE_CONTINUOUS":  1,
		"WINDOW_MODE_TUMBLING":    2,
		"WINDOW_MODE_CDC":         3,
	}
)

func (x WindowMode) Enum() *WindowMode {
	p := new(WindowMode)
	*p = x
	return p
}

func (x WindowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[1].Descriptor()
}

func (WindowMode) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[1]
}

func (x WindowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowMode.Descriptor instead.
func (WindowMode) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{1}
}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureSets     []*FeatureSet     `protobuf:"bytes,1,rep,name=feature_sets,json=featureSets,proto3" json:"feature_sets,omitempty"`
	Resolvers       []*Resolver       `protobuf:"bytes,2,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	StreamResolvers []*StreamResolver `protobuf:"bytes,3,rep,name=stream_resolvers,json=streamResolvers,proto3" json:"stream_resolvers,omitempty"`
	SinkResolvers   []*SinkResolver   `protobuf:"bytes,4,rep,name=sink_resolvers,json=sinkResolvers,proto3" json:"sink_resolvers,omitempty"`
	DatabaseSources []*DatabaseSource `protobuf:"bytes,5,rep,name=database_sources,json=databaseSources,proto3" json:"database_sources,omitempty"`
	StreamSources   []*StreamSource   `protobuf:"bytes,6,rep,name=stream_sources,json=streamSources,proto3" json:"stream_sources,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{0}
}

func (x *Graph) GetFeatureSets() []*FeatureSet {
	if x != nil {
		return x.FeatureSets
	}
	return nil
}

func (x *Graph) GetResolvers() []*Resolver {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *Graph) GetStreamResolvers() []*StreamResolver {
	if x != nil {
		return x.StreamResolvers
	}
	return nil
}

func (x *Graph) GetSinkResolvers() []*SinkResolver {
	if x != nil {
		return x.SinkResolvers
	}
	return nil
}

func (x *Graph) GetDatabaseSources() []*DatabaseSource {
	if x != nil {
		return x.DatabaseSources
	}
	return nil
}

func (x *Graph) GetStreamSources() []*StreamSource {
	if x != nil {
		return x.StreamSources
	}
	return nil
}

type FeatureSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Features             []*FeatureType       `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	MaxStalenessDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=max_staleness_duration,json=maxStalenessDuration,proto3" json:"max_staleness_duration,omitempty"`
	IsSingleton          bool                 `protobuf:"varint,4,opt,name=is_singleton,json=isSingleton,proto3" json:"is_singleton,omitempty"`
	Tags                 []string             `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Owner                *string              `protobuf:"bytes,6,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The docstring of the class on which the features are defined.
	Doc                *string `protobuf:"bytes,7,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	EtlOfflineToOnline *bool   `protobuf:"varint,8,opt,name=etl_offline_to_online,json=etlOfflineToOnline,proto3,oneof" json:"etl_offline_to_online,omitempty"`
}

func (x *FeatureSet) Reset() {
	*x = FeatureSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSet) ProtoMessage() {}

func (x *FeatureSet) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSet.ProtoReflect.Descriptor instead.
func (*FeatureSet) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureSet) GetFeatures() []*FeatureType {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *FeatureSet) GetMaxStalenessDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStalenessDuration
	}
	return nil
}

func (x *FeatureSet) GetIsSingleton() bool {
	if x != nil {
		return x.IsSingleton
	}
	return false
}

func (x *FeatureSet) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FeatureSet) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *FeatureSet) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *FeatureSet) GetEtlOfflineToOnline() bool {
	if x != nil && x.EtlOfflineToOnline != nil {
		return *x.EtlOfflineToOnline
	}
	return false
}

type FeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FeatureType_Scalar
	//	*FeatureType_HasOne
	//	*FeatureType_HasMany
	//	*FeatureType_FeatureTime
	//	*FeatureType_Windowed
	Type isFeatureType_Type `protobuf_oneof:"type"`
}

func (x *FeatureType) Reset() {
	*x = FeatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureType) ProtoMessage() {}

func (x *FeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureType.ProtoReflect.Descriptor instead.
func (*FeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{2}
}

func (m *FeatureType) GetType() isFeatureType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FeatureType) GetScalar() *ScalarFeatureType {
	if x, ok := x.GetType().(*FeatureType_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (x *FeatureType) GetHasOne() *HasOneFeatureType {
	if x, ok := x.GetType().(*FeatureType_HasOne); ok {
		return x.HasOne
	}
	return nil
}

func (x *FeatureType) GetHasMany() *HasManyFeatureType {
	if x, ok := x.GetType().(*FeatureType_HasMany); ok {
		return x.HasMany
	}
	return nil
}

func (x *FeatureType) GetFeatureTime() *FeatureTimeFeatureType {
	if x, ok := x.GetType().(*FeatureType_FeatureTime); ok {
		return x.FeatureTime
	}
	return nil
}

func (x *FeatureType) GetWindowed() *WindowedFeatureType {
	if x, ok := x.GetType().(*FeatureType_Windowed); ok {
		return x.Windowed
	}
	return nil
}

type isFeatureType_Type interface {
	isFeatureType_Type()
}

type FeatureType_Scalar struct {
	Scalar *ScalarFeatureType `protobuf:"bytes,1,opt,name=scalar,proto3,oneof"`
}

type FeatureType_HasOne struct {
	HasOne *HasOneFeatureType `protobuf:"bytes,2,opt,name=has_one,json=hasOne,proto3,oneof"`
}

type FeatureType_HasMany struct {
	HasMany *HasManyFeatureType `protobuf:"bytes,3,opt,name=has_many,json=hasMany,proto3,oneof"`
}

type FeatureType_FeatureTime struct {
	FeatureTime *FeatureTimeFeatureType `protobuf:"bytes,4,opt,name=feature_time,json=featureTime,proto3,oneof"`
}

type FeatureType_Windowed struct {
	Windowed *WindowedFeatureType `protobuf:"bytes,5,opt,name=windowed,proto3,oneof"`
}

func (*FeatureType_Scalar) isFeatureType_Type() {}

func (*FeatureType_HasOne) isFeatureType_Type() {}

func (*FeatureType_HasMany) isFeatureType_Type() {}

func (*FeatureType_FeatureTime) isFeatureType_Type() {}

func (*FeatureType_Windowed) isFeatureType_Type() {}

type FeatureReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Path      []*FeatureReference `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	Df        *DataFrameType      `protobuf:"bytes,4,opt,name=df,proto3" json:"df,omitempty"`
}

func (x *FeatureReference) Reset() {
	*x = FeatureReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureReference) ProtoMessage() {}

func (x *FeatureReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureReference.ProtoReflect.Descriptor instead.
func (*FeatureReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FeatureReference) GetPath() []*FeatureReference {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FeatureReference) GetDf() *DataFrameType {
	if x != nil {
		return x.Df
	}
	return nil
}

type DataFrameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootNamespace   string              `protobuf:"bytes,1,opt,name=root_namespace,json=rootNamespace,proto3" json:"root_namespace,omitempty"`
	RequiredColumns []*FeatureReference `protobuf:"bytes,2,rep,name=required_columns,json=requiredColumns,proto3" json:"required_columns,omitempty"`
	OptionalColumns []*FeatureReference `protobuf:"bytes,3,rep,name=optional_columns,json=optionalColumns,proto3" json:"optional_columns,omitempty"`
	Filter          *v1.LogicalExprNode `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit           *uint64             `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *DataFrameType) Reset() {
	*x = DataFrameType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameType) ProtoMessage() {}

func (x *DataFrameType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameType.ProtoReflect.Descriptor instead.
func (*DataFrameType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{4}
}

func (x *DataFrameType) GetRootNamespace() string {
	if x != nil {
		return x.RootNamespace
	}
	return ""
}

func (x *DataFrameType) GetRequiredColumns() []*FeatureReference {
	if x != nil {
		return x.RequiredColumns
	}
	return nil
}

func (x *DataFrameType) GetOptionalColumns() []*FeatureReference {
	if x != nil {
		return x.OptionalColumns
	}
	return nil
}

func (x *DataFrameType) GetFilter() *v1.LogicalExprNode {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DataFrameType) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ScalarFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string  `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsAutogenerated bool    `protobuf:"varint,3,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	NoDisplay       bool    `protobuf:"varint,4,opt,name=no_display,json=noDisplay,proto3" json:"no_display,omitempty"`
	IsPrimary       bool    `protobuf:"varint,5,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsNullable      bool    `protobuf:"varint,6,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	InternalVersion *uint64 `protobuf:"varint,7,opt,name=internal_version,json=internalVersion,proto3,oneof" json:"internal_version,omitempty"`
	// This represents whatever arg the user passed into the `feature()` call.
	// If both set, this should take precedence over the value in `FeatureSet`.
	// If unset here, the value in `FeatureSet` should be used.
	MaxStalenessDuration *durationpb.Duration `protobuf:"bytes,8,opt,name=max_staleness_duration,json=maxStalenessDuration,proto3" json:"max_staleness_duration,omitempty"`
	OfflineTtlDuration   *durationpb.Duration `protobuf:"bytes,10,opt,name=offline_ttl_duration,json=offlineTtlDuration,proto3" json:"offline_ttl_duration,omitempty"`
	ArrowType            *v11.ArrowType       `protobuf:"bytes,11,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
	Version              *VersionInfo         `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	WindowInfo           *WindowInfo          `protobuf:"bytes,13,opt,name=window_info,json=windowInfo,proto3" json:"window_info,omitempty"`
	DefaultValue         *v11.ScalarValue     `protobuf:"bytes,14,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Tags                 []string             `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Description          *string              `protobuf:"bytes,16,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner                *string              `protobuf:"bytes,17,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Expression           *v1.LogicalExprNode  `protobuf:"bytes,18,opt,name=expression,proto3" json:"expression,omitempty"`
	Validations          []*FeatureValidation `protobuf:"bytes,19,rep,name=validations,proto3" json:"validations,omitempty"`
	LastFor              *FeatureReference    `protobuf:"bytes,20,opt,name=last_for,json=lastFor,proto3" json:"last_for,omitempty"`
	// This represents whatever arg the user passed into the `feature()` call.
	// If both set, this should take precedence over the value in `FeatureSet`.
	// If unset here, the value in `FeatureSet` should be used.
	EtlOfflineToOnline      *bool `protobuf:"varint,21,opt,name=etl_offline_to_online,json=etlOfflineToOnline,proto3,oneof" json:"etl_offline_to_online,omitempty"`
	IsDistancePseudofeature bool  `protobuf:"varint,22,opt,name=is_distance_pseudofeature,json=isDistancePseudofeature,proto3" json:"is_distance_pseudofeature,omitempty"`
}

func (x *ScalarFeatureType) Reset() {
	*x = ScalarFeatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFeatureType) ProtoMessage() {}

func (x *ScalarFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFeatureType.ProtoReflect.Descriptor instead.
func (*ScalarFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{5}
}

func (x *ScalarFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScalarFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScalarFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *ScalarFeatureType) GetNoDisplay() bool {
	if x != nil {
		return x.NoDisplay
	}
	return false
}

func (x *ScalarFeatureType) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *ScalarFeatureType) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *ScalarFeatureType) GetInternalVersion() uint64 {
	if x != nil && x.InternalVersion != nil {
		return *x.InternalVersion
	}
	return 0
}

func (x *ScalarFeatureType) GetMaxStalenessDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStalenessDuration
	}
	return nil
}

func (x *ScalarFeatureType) GetOfflineTtlDuration() *durationpb.Duration {
	if x != nil {
		return x.OfflineTtlDuration
	}
	return nil
}

func (x *ScalarFeatureType) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

func (x *ScalarFeatureType) GetVersion() *VersionInfo {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ScalarFeatureType) GetWindowInfo() *WindowInfo {
	if x != nil {
		return x.WindowInfo
	}
	return nil
}

func (x *ScalarFeatureType) GetDefaultValue() *v11.ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ScalarFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ScalarFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ScalarFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *ScalarFeatureType) GetExpression() *v1.LogicalExprNode {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ScalarFeatureType) GetValidations() []*FeatureValidation {
	if x != nil {
		return x.Validations
	}
	return nil
}

func (x *ScalarFeatureType) GetLastFor() *FeatureReference {
	if x != nil {
		return x.LastFor
	}
	return nil
}

func (x *ScalarFeatureType) GetEtlOfflineToOnline() bool {
	if x != nil && x.EtlOfflineToOnline != nil {
		return *x.EtlOfflineToOnline
	}
	return false
}

func (x *ScalarFeatureType) GetIsDistancePseudofeature() bool {
	if x != nil {
		return x.IsDistancePseudofeature
	}
	return false
}

type HasOneFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace        string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ForeignNamespace string              `protobuf:"bytes,3,opt,name=foreign_namespace,json=foreignNamespace,proto3" json:"foreign_namespace,omitempty"`
	Join             *v1.LogicalExprNode `protobuf:"bytes,4,opt,name=join,proto3" json:"join,omitempty"`
	IsNullable       bool                `protobuf:"varint,5,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	IsAutogenerated  bool                `protobuf:"varint,6,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	Tags             []string            `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Description      *string             `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner            *string             `protobuf:"bytes,9,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
}

func (x *HasOneFeatureType) Reset() {
	*x = HasOneFeatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasOneFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasOneFeatureType) ProtoMessage() {}

func (x *HasOneFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasOneFeatureType.ProtoReflect.Descriptor instead.
func (*HasOneFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{6}
}

func (x *HasOneFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HasOneFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HasOneFeatureType) GetForeignNamespace() string {
	if x != nil {
		return x.ForeignNamespace
	}
	return ""
}

func (x *HasOneFeatureType) GetJoin() *v1.LogicalExprNode {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *HasOneFeatureType) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *HasOneFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *HasOneFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HasOneFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *HasOneFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

type HasManyFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string               `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ForeignNamespace     string               `protobuf:"bytes,3,opt,name=foreign_namespace,json=foreignNamespace,proto3" json:"foreign_namespace,omitempty"`
	Join                 *v1.LogicalExprNode  `protobuf:"bytes,4,opt,name=join,proto3" json:"join,omitempty"`
	IsAutogenerated      bool                 `protobuf:"varint,5,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	MaxStalenessDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=max_staleness_duration,json=maxStalenessDuration,proto3" json:"max_staleness_duration,omitempty"`
	Tags                 []string             `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Description          *string              `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner                *string              `protobuf:"bytes,9,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
}

func (x *HasManyFeatureType) Reset() {
	*x = HasManyFeatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasManyFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasManyFeatureType) ProtoMessage() {}

func (x *HasManyFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasManyFeatureType.ProtoReflect.Descriptor instead.
func (*HasManyFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{7}
}

func (x *HasManyFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HasManyFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HasManyFeatureType) GetForeignNamespace() string {
	if x != nil {
		return x.ForeignNamespace
	}
	return ""
}

func (x *HasManyFeatureType) GetJoin() *v1.LogicalExprNode {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *HasManyFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *HasManyFeatureType) GetMaxStalenessDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStalenessDuration
	}
	return nil
}

func (x *HasManyFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HasManyFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *HasManyFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

type FeatureTimeFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsAutogenerated bool     `protobuf:"varint,3,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	Tags            []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Description     *string  `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner           *string  `protobuf:"bytes,6,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
}

func (x *FeatureTimeFeatureType) Reset() {
	*x = FeatureTimeFeatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureTimeFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureTimeFeatureType) ProtoMessage() {}

func (x *FeatureTimeFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureTimeFeatureType.ProtoReflect.Descriptor instead.
func (*FeatureTimeFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{8}
}

func (x *FeatureTimeFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureTimeFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FeatureTimeFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *FeatureTimeFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FeatureTimeFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FeatureTimeFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

type WindowedFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsAutogenerated bool                   `protobuf:"varint,3,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	WindowDurations []*durationpb.Duration `protobuf:"bytes,4,rep,name=window_durations,json=windowDurations,proto3" json:"window_durations,omitempty"`
}

func (x *WindowedFeatureType) Reset() {
	*x = WindowedFeatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowedFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowedFeatureType) ProtoMessage() {}

func (x *WindowedFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowedFeatureType.ProtoReflect.Descriptor instead.
func (*WindowedFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{9}
}

func (x *WindowedFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowedFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WindowedFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *WindowedFeatureType) GetWindowDurations() []*durationpb.Duration {
	if x != nil {
		return x.WindowDurations
	}
	return nil
}

type WindowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *WindowInfo) Reset() {
	*x = WindowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowInfo) ProtoMessage() {}

func (x *WindowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowInfo.ProtoReflect.Descriptor instead.
func (*WindowInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{10}
}

func (x *WindowInfo) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type FeatureInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature      *FeatureReference `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	DefaultValue *v11.ScalarValue  `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *FeatureInput) Reset() {
	*x = FeatureInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureInput) ProtoMessage() {}

func (x *FeatureInput) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureInput.ProtoReflect.Descriptor instead.
func (*FeatureInput) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{11}
}

func (x *FeatureInput) GetFeature() *FeatureReference {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *FeatureInput) GetDefaultValue() *v11.ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

type ResolverInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Annotation:
	//
	//	*ResolverInput_Feature
	//	*ResolverInput_Df
	//	*ResolverInput_State
	Annotation isResolverInput_Annotation `protobuf_oneof:"annotation"`
}

func (x *ResolverInput) Reset() {
	*x = ResolverInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverInput) ProtoMessage() {}

func (x *ResolverInput) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverInput.ProtoReflect.Descriptor instead.
func (*ResolverInput) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{12}
}

func (m *ResolverInput) GetAnnotation() isResolverInput_Annotation {
	if m != nil {
		return m.Annotation
	}
	return nil
}

func (x *ResolverInput) GetFeature() *FeatureInput {
	if x, ok := x.GetAnnotation().(*ResolverInput_Feature); ok {
		return x.Feature
	}
	return nil
}

func (x *ResolverInput) GetDf() *DataFrameType {
	if x, ok := x.GetAnnotation().(*ResolverInput_Df); ok {
		return x.Df
	}
	return nil
}

func (x *ResolverInput) GetState() *ResolverState {
	if x, ok := x.GetAnnotation().(*ResolverInput_State); ok {
		return x.State
	}
	return nil
}

type isResolverInput_Annotation interface {
	isResolverInput_Annotation()
}

type ResolverInput_Feature struct {
	Feature *FeatureInput `protobuf:"bytes,1,opt,name=feature,proto3,oneof"`
}

type ResolverInput_Df struct {
	Df *DataFrameType `protobuf:"bytes,2,opt,name=df,proto3,oneof"`
}

type ResolverInput_State struct {
	State *ResolverState `protobuf:"bytes,3,opt,name=state,proto3,oneof"`
}

func (*ResolverInput_Feature) isResolverInput_Annotation() {}

func (*ResolverInput_Df) isResolverInput_Annotation() {}

func (*ResolverInput_State) isResolverInput_Annotation() {}

type ResolverOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Annotation:
	//
	//	*ResolverOutput_Feature
	//	*ResolverOutput_Df
	Annotation isResolverOutput_Annotation `protobuf_oneof:"annotation"`
}

func (x *ResolverOutput) Reset() {
	*x = ResolverOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverOutput) ProtoMessage() {}

func (x *ResolverOutput) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverOutput.ProtoReflect.Descriptor instead.
func (*ResolverOutput) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{13}
}

func (m *ResolverOutput) GetAnnotation() isResolverOutput_Annotation {
	if m != nil {
		return m.Annotation
	}
	return nil
}

func (x *ResolverOutput) GetFeature() *FeatureReference {
	if x, ok := x.GetAnnotation().(*ResolverOutput_Feature); ok {
		return x.Feature
	}
	return nil
}

func (x *ResolverOutput) GetDf() *DataFrameType {
	if x, ok := x.GetAnnotation().(*ResolverOutput_Df); ok {
		return x.Df
	}
	return nil
}

type isResolverOutput_Annotation interface {
	isResolverOutput_Annotation()
}

type ResolverOutput_Feature struct {
	Feature *FeatureReference `protobuf:"bytes,1,opt,name=feature,proto3,oneof"`
}

type ResolverOutput_Df struct {
	Df *DataFrameType `protobuf:"bytes,2,opt,name=df,proto3,oneof"`
}

func (*ResolverOutput_Feature) isResolverOutput_Annotation() {}

func (*ResolverOutput_Df) isResolverOutput_Annotation() {}

type Resolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn         string                     `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Kind        ResolverKind               `protobuf:"varint,2,opt,name=kind,proto3,enum=chalk.graph.v1.ResolverKind" json:"kind,omitempty"`
	Inputs      []*ResolverInput           `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs     []*ResolverOutput          `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	IsGenerator bool                       `protobuf:"varint,5,opt,name=is_generator,json=isGenerator,proto3" json:"is_generator,omitempty"`
	DataSources []*DatabaseSourceReference `protobuf:"bytes,6,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	MachineType *string                    `protobuf:"bytes,7,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	Tags        []string                   `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Owner       *string                    `protobuf:"bytes,9,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The docstring of the python function
	Doc             *string                    `protobuf:"bytes,10,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	Environments    []string                   `protobuf:"bytes,11,rep,name=environments,proto3" json:"environments,omitempty"`
	TimeoutDuration *durationpb.Duration       `protobuf:"bytes,12,opt,name=timeout_duration,json=timeoutDuration,proto3" json:"timeout_duration,omitempty"`
	Schedule        *Schedule                  `protobuf:"bytes,13,opt,name=schedule,proto3" json:"schedule,omitempty"`
	When            *v1.LogicalExprNode        `protobuf:"bytes,14,opt,name=when,proto3" json:"when,omitempty"`
	CronFilter      *CronFilterWithFeatureArgs `protobuf:"bytes,15,opt,name=cron_filter,json=cronFilter,proto3" json:"cron_filter,omitempty"`
	Function        *FunctionReference         `protobuf:"bytes,16,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *Resolver) Reset() {
	*x = Resolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolver) ProtoMessage() {}

func (x *Resolver) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolver.ProtoReflect.Descriptor instead.
func (*Resolver) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{14}
}

func (x *Resolver) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *Resolver) GetKind() ResolverKind {
	if x != nil {
		return x.Kind
	}
	return ResolverKind_RESOLVER_KIND_UNSPECIFIED
}

func (x *Resolver) GetInputs() []*ResolverInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Resolver) GetOutputs() []*ResolverOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Resolver) GetIsGenerator() bool {
	if x != nil {
		return x.IsGenerator
	}
	return false
}

func (x *Resolver) GetDataSources() []*DatabaseSourceReference {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *Resolver) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *Resolver) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Resolver) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *Resolver) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *Resolver) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *Resolver) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *Resolver) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Resolver) GetWhen() *v1.LogicalExprNode {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Resolver) GetCronFilter() *CronFilterWithFeatureArgs {
	if x != nil {
		return x.CronFilter
	}
	return nil
}

func (x *Resolver) GetFunction() *FunctionReference {
	if x != nil {
		return x.Function
	}
	return nil
}

type SinkResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn              string               `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Inputs           []*ResolverInput     `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	BufferSize       *uint64              `protobuf:"varint,3,opt,name=buffer_size,json=bufferSize,proto3,oneof" json:"buffer_size,omitempty"`
	DebounceDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=debounce_duration,json=debounceDuration,proto3" json:"debounce_duration,omitempty"`
	MaxDelayDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=max_delay_duration,json=maxDelayDuration,proto3" json:"max_delay_duration,omitempty"`
	Upsert           bool                 `protobuf:"varint,6,opt,name=upsert,proto3" json:"upsert,omitempty"`
	// Types that are assignable to Integration:
	//
	//	*SinkResolver_StreamSource
	//	*SinkResolver_DatabaseSource
	Integration     isSinkResolver_Integration `protobuf_oneof:"integration"`
	MachineType     *string                    `protobuf:"bytes,9,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	Doc             *string                    `protobuf:"bytes,10,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	Owner           *string                    `protobuf:"bytes,11,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Environments    []string                   `protobuf:"bytes,12,rep,name=environments,proto3" json:"environments,omitempty"`
	TimeoutDuration *durationpb.Duration       `protobuf:"bytes,13,opt,name=timeout_duration,json=timeoutDuration,proto3" json:"timeout_duration,omitempty"`
	Function        *FunctionReference         `protobuf:"bytes,14,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *SinkResolver) Reset() {
	*x = SinkResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkResolver) ProtoMessage() {}

func (x *SinkResolver) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkResolver.ProtoReflect.Descriptor instead.
func (*SinkResolver) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{15}
}

func (x *SinkResolver) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *SinkResolver) GetInputs() []*ResolverInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SinkResolver) GetBufferSize() uint64 {
	if x != nil && x.BufferSize != nil {
		return *x.BufferSize
	}
	return 0
}

func (x *SinkResolver) GetDebounceDuration() *durationpb.Duration {
	if x != nil {
		return x.DebounceDuration
	}
	return nil
}

func (x *SinkResolver) GetMaxDelayDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxDelayDuration
	}
	return nil
}

func (x *SinkResolver) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (m *SinkResolver) GetIntegration() isSinkResolver_Integration {
	if m != nil {
		return m.Integration
	}
	return nil
}

func (x *SinkResolver) GetStreamSource() *StreamSourceReference {
	if x, ok := x.GetIntegration().(*SinkResolver_StreamSource); ok {
		return x.StreamSource
	}
	return nil
}

func (x *SinkResolver) GetDatabaseSource() *DatabaseSourceReference {
	if x, ok := x.GetIntegration().(*SinkResolver_DatabaseSource); ok {
		return x.DatabaseSource
	}
	return nil
}

func (x *SinkResolver) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *SinkResolver) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *SinkResolver) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *SinkResolver) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *SinkResolver) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *SinkResolver) GetFunction() *FunctionReference {
	if x != nil {
		return x.Function
	}
	return nil
}

type isSinkResolver_Integration interface {
	isSinkResolver_Integration()
}

type SinkResolver_StreamSource struct {
	StreamSource *StreamSourceReference `protobuf:"bytes,7,opt,name=stream_source,json=streamSource,proto3,oneof"`
}

type SinkResolver_DatabaseSource struct {
	DatabaseSource *DatabaseSourceReference `protobuf:"bytes,8,opt,name=database_source,json=databaseSource,proto3,oneof"`
}

func (*SinkResolver_StreamSource) isSinkResolver_Integration() {}

func (*SinkResolver_DatabaseSource) isSinkResolver_Integration() {}

type ParseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParseFunction                 *FunctionReference `protobuf:"bytes,1,opt,name=parse_function,json=parseFunction,proto3" json:"parse_function,omitempty"`
	ParseFunctionInputType        *v11.ArrowType     `protobuf:"bytes,2,opt,name=parse_function_input_type,json=parseFunctionInputType,proto3" json:"parse_function_input_type,omitempty"`
	ParseFunctionOutputType       *v11.ArrowType     `protobuf:"bytes,3,opt,name=parse_function_output_type,json=parseFunctionOutputType,proto3" json:"parse_function_output_type,omitempty"`
	IsParseFunctionOutputOptional bool               `protobuf:"varint,4,opt,name=is_parse_function_output_optional,json=isParseFunctionOutputOptional,proto3" json:"is_parse_function_output_optional,omitempty"`
}

func (x *ParseInfo) Reset() {
	*x = ParseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseInfo) ProtoMessage() {}

func (x *ParseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseInfo.ProtoReflect.Descriptor instead.
func (*ParseInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{16}
}

func (x *ParseInfo) GetParseFunction() *FunctionReference {
	if x != nil {
		return x.ParseFunction
	}
	return nil
}

func (x *ParseInfo) GetParseFunctionInputType() *v11.ArrowType {
	if x != nil {
		return x.ParseFunctionInputType
	}
	return nil
}

func (x *ParseInfo) GetParseFunctionOutputType() *v11.ArrowType {
	if x != nil {
		return x.ParseFunctionOutputType
	}
	return nil
}

func (x *ParseInfo) GetIsParseFunctionOutputOptional() bool {
	if x != nil {
		return x.IsParseFunctionOutputOptional
	}
	return false
}

type StreamResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn                    string                 `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Params                 []*StreamResolverParam `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	Outputs                []*ResolverOutput      `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	ExplicitSchema         *v11.ArrowType         `protobuf:"bytes,4,opt,name=explicit_schema,json=explicitSchema,proto3" json:"explicit_schema,omitempty"`
	Keys                   []*StreamKey           `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
	Source                 *StreamSourceReference `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	ParseInfo              *ParseInfo             `protobuf:"bytes,7,opt,name=parse_info,json=parseInfo,proto3" json:"parse_info,omitempty"`
	Mode                   WindowMode             `protobuf:"varint,8,opt,name=mode,proto3,enum=chalk.graph.v1.WindowMode" json:"mode,omitempty"`
	Environments           []string               `protobuf:"bytes,9,rep,name=environments,proto3" json:"environments,omitempty"`
	TimeoutDuration        *durationpb.Duration   `protobuf:"bytes,10,opt,name=timeout_duration,json=timeoutDuration,proto3" json:"timeout_duration,omitempty"`
	TimestampAttributeName *string                `protobuf:"bytes,11,opt,name=timestamp_attribute_name,json=timestampAttributeName,proto3,oneof" json:"timestamp_attribute_name,omitempty"`
	Owner                  *string                `protobuf:"bytes,12,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Doc                    *string                `protobuf:"bytes,13,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	MachineType            *string                `protobuf:"bytes,14,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	Function               *FunctionReference     `protobuf:"bytes,15,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *StreamResolver) Reset() {
	*x = StreamResolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolver) ProtoMessage() {}

func (x *StreamResolver) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolver.ProtoReflect.Descriptor instead.
func (*StreamResolver) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{17}
}

func (x *StreamResolver) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *StreamResolver) GetParams() []*StreamResolverParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *StreamResolver) GetOutputs() []*ResolverOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *StreamResolver) GetExplicitSchema() *v11.ArrowType {
	if x != nil {
		return x.ExplicitSchema
	}
	return nil
}

func (x *StreamResolver) GetKeys() []*StreamKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *StreamResolver) GetSource() *StreamSourceReference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *StreamResolver) GetParseInfo() *ParseInfo {
	if x != nil {
		return x.ParseInfo
	}
	return nil
}

func (x *StreamResolver) GetMode() WindowMode {
	if x != nil {
		return x.Mode
	}
	return WindowMode_WINDOW_MODE_UNSPECIFIED
}

func (x *StreamResolver) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *StreamResolver) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *StreamResolver) GetTimestampAttributeName() string {
	if x != nil && x.TimestampAttributeName != nil {
		return *x.TimestampAttributeName
	}
	return ""
}

func (x *StreamResolver) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *StreamResolver) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *StreamResolver) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *StreamResolver) GetFunction() *FunctionReference {
	if x != nil {
		return x.Function
	}
	return nil
}

type ResolverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initial   *v11.ScalarValue `protobuf:"bytes,1,opt,name=initial,proto3" json:"initial,omitempty"`
	ArrowType *v11.ArrowType   `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *ResolverState) Reset() {
	*x = ResolverState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverState) ProtoMessage() {}

func (x *ResolverState) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverState.ProtoReflect.Descriptor instead.
func (*ResolverState) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{18}
}

func (x *ResolverState) GetInitial() *v11.ScalarValue {
	if x != nil {
		return x.Initial
	}
	return nil
}

func (x *ResolverState) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type StreamResolverParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamResolverParam_Message
	//	*StreamResolverParam_MessageWindow
	//	*StreamResolverParam_State
	Type isStreamResolverParam_Type `protobuf_oneof:"type"`
}

func (x *StreamResolverParam) Reset() {
	*x = StreamResolverParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResolverParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolverParam) ProtoMessage() {}

func (x *StreamResolverParam) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolverParam.ProtoReflect.Descriptor instead.
func (*StreamResolverParam) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{19}
}

func (m *StreamResolverParam) GetType() isStreamResolverParam_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamResolverParam) GetMessage() *StreamResolverParamMessage {
	if x, ok := x.GetType().(*StreamResolverParam_Message); ok {
		return x.Message
	}
	return nil
}

func (x *StreamResolverParam) GetMessageWindow() *StreamResolverParamMessageWindow {
	if x, ok := x.GetType().(*StreamResolverParam_MessageWindow); ok {
		return x.MessageWindow
	}
	return nil
}

func (x *StreamResolverParam) GetState() *ResolverState {
	if x, ok := x.GetType().(*StreamResolverParam_State); ok {
		return x.State
	}
	return nil
}

type isStreamResolverParam_Type interface {
	isStreamResolverParam_Type()
}

type StreamResolverParam_Message struct {
	Message *StreamResolverParamMessage `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type StreamResolverParam_MessageWindow struct {
	MessageWindow *StreamResolverParamMessageWindow `protobuf:"bytes,2,opt,name=message_window,json=messageWindow,proto3,oneof"`
}

type StreamResolverParam_State struct {
	State *ResolverState `protobuf:"bytes,3,opt,name=state,proto3,oneof"`
}

func (*StreamResolverParam_Message) isStreamResolverParam_Type() {}

func (*StreamResolverParam_MessageWindow) isStreamResolverParam_Type() {}

func (*StreamResolverParam_State) isStreamResolverParam_Type() {}

type StreamResolverParamMessageWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArrowType *v11.ArrowType `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *StreamResolverParamMessageWindow) Reset() {
	*x = StreamResolverParamMessageWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResolverParamMessageWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolverParamMessageWindow) ProtoMessage() {}

func (x *StreamResolverParamMessageWindow) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolverParamMessageWindow.ProtoReflect.Descriptor instead.
func (*StreamResolverParamMessageWindow) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{20}
}

func (x *StreamResolverParamMessageWindow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamResolverParamMessageWindow) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type StreamResolverParamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArrowType *v11.ArrowType `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *StreamResolverParamMessage) Reset() {
	*x = StreamResolverParamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResolverParamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolverParamMessage) ProtoMessage() {}

func (x *StreamResolverParamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolverParamMessage.ProtoReflect.Descriptor instead.
func (*StreamResolverParamMessage) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{21}
}

func (x *StreamResolverParamMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamResolverParamMessage) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type FunctionReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Module             string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	FileName           string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FunctionDefinition string `protobuf:"bytes,4,opt,name=function_definition,json=functionDefinition,proto3" json:"function_definition,omitempty"`
}

func (x *FunctionReference) Reset() {
	*x = FunctionReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionReference) ProtoMessage() {}

func (x *FunctionReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionReference.ProtoReflect.Descriptor instead.
func (*FunctionReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{22}
}

func (x *FunctionReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionReference) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FunctionReference) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FunctionReference) GetFunctionDefinition() string {
	if x != nil {
		return x.FunctionDefinition
	}
	return ""
}

type StreamKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Feature *FeatureReference `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *StreamKey) Reset() {
	*x = StreamKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamKey) ProtoMessage() {}

func (x *StreamKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamKey.ProtoReflect.Descriptor instead.
func (*StreamKey) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{23}
}

func (x *StreamKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StreamKey) GetFeature() *FeatureReference {
	if x != nil {
		return x.Feature
	}
	return nil
}

type CronFilterWithFeatureArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FunctionReference  `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Args   []*FeatureReference `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *CronFilterWithFeatureArgs) Reset() {
	*x = CronFilterWithFeatureArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronFilterWithFeatureArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronFilterWithFeatureArgs) ProtoMessage() {}

func (x *CronFilterWithFeatureArgs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronFilterWithFeatureArgs.ProtoReflect.Descriptor instead.
func (*CronFilterWithFeatureArgs) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{24}
}

func (x *CronFilterWithFeatureArgs) GetFilter() *FunctionReference {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CronFilterWithFeatureArgs) GetArgs() []*FeatureReference {
	if x != nil {
		return x.Args
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Schedule:
	//
	//	*Schedule_Crontab
	//	*Schedule_Duration
	Schedule isSchedule_Schedule `protobuf_oneof:"schedule"`
	Filter   *FunctionReference  `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Sample   *FunctionReference  `protobuf:"bytes,4,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{25}
}

func (m *Schedule) GetSchedule() isSchedule_Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (x *Schedule) GetCrontab() string {
	if x, ok := x.GetSchedule().(*Schedule_Crontab); ok {
		return x.Crontab
	}
	return ""
}

func (x *Schedule) GetDuration() *durationpb.Duration {
	if x, ok := x.GetSchedule().(*Schedule_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Schedule) GetFilter() *FunctionReference {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Schedule) GetSample() *FunctionReference {
	if x != nil {
		return x.Sample
	}
	return nil
}

type isSchedule_Schedule interface {
	isSchedule_Schedule()
}

type Schedule_Crontab struct {
	Crontab string `protobuf:"bytes,1,opt,name=crontab,proto3,oneof"`
}

type Schedule_Duration struct {
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*Schedule_Crontab) isSchedule_Schedule() {}

func (*Schedule_Duration) isSchedule_Schedule() {}

type FeatureValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Validation:
	//
	//	*FeatureValidation_Min
	//	*FeatureValidation_Max
	//	*FeatureValidation_MinLength
	//	*FeatureValidation_MaxLength
	Validation isFeatureValidation_Validation `protobuf_oneof:"validation"`
	Strict     bool                           `protobuf:"varint,5,opt,name=strict,proto3" json:"strict,omitempty"`
}

func (x *FeatureValidation) Reset() {
	*x = FeatureValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureValidation) ProtoMessage() {}

func (x *FeatureValidation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureValidation.ProtoReflect.Descriptor instead.
func (*FeatureValidation) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{26}
}

func (m *FeatureValidation) GetValidation() isFeatureValidation_Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (x *FeatureValidation) GetMin() float32 {
	if x, ok := x.GetValidation().(*FeatureValidation_Min); ok {
		return x.Min
	}
	return 0
}

func (x *FeatureValidation) GetMax() float32 {
	if x, ok := x.GetValidation().(*FeatureValidation_Max); ok {
		return x.Max
	}
	return 0
}

func (x *FeatureValidation) GetMinLength() uint32 {
	if x, ok := x.GetValidation().(*FeatureValidation_MinLength); ok {
		return x.MinLength
	}
	return 0
}

func (x *FeatureValidation) GetMaxLength() uint32 {
	if x, ok := x.GetValidation().(*FeatureValidation_MaxLength); ok {
		return x.MaxLength
	}
	return 0
}

func (x *FeatureValidation) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

type isFeatureValidation_Validation interface {
	isFeatureValidation_Validation()
}

type FeatureValidation_Min struct {
	Min float32 `protobuf:"fixed32,1,opt,name=min,proto3,oneof"`
}

type FeatureValidation_Max struct {
	Max float32 `protobuf:"fixed32,2,opt,name=max,proto3,oneof"`
}

type FeatureValidation_MinLength struct {
	MinLength uint32 `protobuf:"varint,3,opt,name=min_length,json=minLength,proto3,oneof"`
}

type FeatureValidation_MaxLength struct {
	MaxLength uint32 `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3,oneof"`
}

func (*FeatureValidation_Min) isFeatureValidation_Validation() {}

func (*FeatureValidation_Max) isFeatureValidation_Validation() {}

func (*FeatureValidation_MinLength) isFeatureValidation_Validation() {}

func (*FeatureValidation_MaxLength) isFeatureValidation_Validation() {}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default uint32 `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	Maximum uint32 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{27}
}

func (x *VersionInfo) GetDefault() uint32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *VersionInfo) GetMaximum() uint32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

type StrictValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature     *FeatureReference    `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	Validations []*FeatureValidation `protobuf:"bytes,2,rep,name=validations,proto3" json:"validations,omitempty"`
}

func (x *StrictValidation) Reset() {
	*x = StrictValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_graph_v1_graph_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrictValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrictValidation) ProtoMessage() {}

func (x *StrictValidation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrictValidation.ProtoReflect.Descriptor instead.
func (*StrictValidation) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{28}
}

func (x *StrictValidation) GetFeature() *FeatureReference {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *StrictValidation) GetValidations() []*FeatureValidation {
	if x != nil {
		return x.Validations
	}
	return nil
}

var File_chalk_graph_v1_graph_proto protoreflect.FileDescriptor

var file_chalk_graph_v1_graph_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x03, 0x0a,
	0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x0d,
	0x73, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xf7, 0x02,
	0x0a, 0x0a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x64, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x64, 0x6f, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x65, 0x74, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x65, 0x74, 0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x6f, 0x63, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x65, 0x74, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x4f, 0x6e, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4f,
	0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d,
	0x61, 0x6e, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x10,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x02, 0x64, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x02, 0x64, 0x66, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x4b, 0x0a,
	0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe8, 0x08,
	0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x14, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x74, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x15, 0x65,
	0x74, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x12, 0x65, 0x74,
	0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x65, 0x74, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x11, 0x48, 0x61, 0x73,
	0x4f, 0x6e, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x99, 0x03, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6a, 0x6f, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4f,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0xe5, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x10,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x43, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x64, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x02, 0x64, 0x66, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x64, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x02, 0x64, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x06, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x03, 0x64, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x77, 0x68, 0x65,
	0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x6f, 0x63, 0x22,
	0x8d, 0x06, 0x0a, 0x0c, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x71, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x64, 0x6f, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0xcd, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a,
	0x1a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1d, 0x69, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0xb7, 0x06, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x66, 0x71, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x2d, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x3d,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x64,
	0x6f, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x6f, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf7, 0x01, 0x0a,
	0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x39, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xe1,
	0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x63,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x1f, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x93, 0x01, 0x0a, 0x10,
	0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2a, 0x62, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x55, 0x4d, 0x42,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x44, 0x43, 0x10, 0x03, 0x42, 0xb3, 0x01, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x42, 0x0a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76,
	0x31, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x47, 0x58, 0xaa,
	0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_graph_v1_graph_proto_rawDescOnce sync.Once
	file_chalk_graph_v1_graph_proto_rawDescData = file_chalk_graph_v1_graph_proto_rawDesc
)

func file_chalk_graph_v1_graph_proto_rawDescGZIP() []byte {
	file_chalk_graph_v1_graph_proto_rawDescOnce.Do(func() {
		file_chalk_graph_v1_graph_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_graph_v1_graph_proto_rawDescData)
	})
	return file_chalk_graph_v1_graph_proto_rawDescData
}

var file_chalk_graph_v1_graph_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_graph_v1_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_chalk_graph_v1_graph_proto_goTypes = []interface{}{
	(ResolverKind)(0),                        // 0: chalk.graph.v1.ResolverKind
	(WindowMode)(0),                          // 1: chalk.graph.v1.WindowMode
	(*Graph)(nil),                            // 2: chalk.graph.v1.Graph
	(*FeatureSet)(nil),                       // 3: chalk.graph.v1.FeatureSet
	(*FeatureType)(nil),                      // 4: chalk.graph.v1.FeatureType
	(*FeatureReference)(nil),                 // 5: chalk.graph.v1.FeatureReference
	(*DataFrameType)(nil),                    // 6: chalk.graph.v1.DataFrameType
	(*ScalarFeatureType)(nil),                // 7: chalk.graph.v1.ScalarFeatureType
	(*HasOneFeatureType)(nil),                // 8: chalk.graph.v1.HasOneFeatureType
	(*HasManyFeatureType)(nil),               // 9: chalk.graph.v1.HasManyFeatureType
	(*FeatureTimeFeatureType)(nil),           // 10: chalk.graph.v1.FeatureTimeFeatureType
	(*WindowedFeatureType)(nil),              // 11: chalk.graph.v1.WindowedFeatureType
	(*WindowInfo)(nil),                       // 12: chalk.graph.v1.WindowInfo
	(*FeatureInput)(nil),                     // 13: chalk.graph.v1.FeatureInput
	(*ResolverInput)(nil),                    // 14: chalk.graph.v1.ResolverInput
	(*ResolverOutput)(nil),                   // 15: chalk.graph.v1.ResolverOutput
	(*Resolver)(nil),                         // 16: chalk.graph.v1.Resolver
	(*SinkResolver)(nil),                     // 17: chalk.graph.v1.SinkResolver
	(*ParseInfo)(nil),                        // 18: chalk.graph.v1.ParseInfo
	(*StreamResolver)(nil),                   // 19: chalk.graph.v1.StreamResolver
	(*ResolverState)(nil),                    // 20: chalk.graph.v1.ResolverState
	(*StreamResolverParam)(nil),              // 21: chalk.graph.v1.StreamResolverParam
	(*StreamResolverParamMessageWindow)(nil), // 22: chalk.graph.v1.StreamResolverParamMessageWindow
	(*StreamResolverParamMessage)(nil),       // 23: chalk.graph.v1.StreamResolverParamMessage
	(*FunctionReference)(nil),                // 24: chalk.graph.v1.FunctionReference
	(*StreamKey)(nil),                        // 25: chalk.graph.v1.StreamKey
	(*CronFilterWithFeatureArgs)(nil),        // 26: chalk.graph.v1.CronFilterWithFeatureArgs
	(*Schedule)(nil),                         // 27: chalk.graph.v1.Schedule
	(*FeatureValidation)(nil),                // 28: chalk.graph.v1.FeatureValidation
	(*VersionInfo)(nil),                      // 29: chalk.graph.v1.VersionInfo
	(*StrictValidation)(nil),                 // 30: chalk.graph.v1.StrictValidation
	(*DatabaseSource)(nil),                   // 31: chalk.graph.v1.DatabaseSource
	(*StreamSource)(nil),                     // 32: chalk.graph.v1.StreamSource
	(*durationpb.Duration)(nil),              // 33: google.protobuf.Duration
	(*v1.LogicalExprNode)(nil),               // 34: chalk.expression.v1.LogicalExprNode
	(*v11.ArrowType)(nil),                    // 35: chalk.arrow.v1.ArrowType
	(*v11.ScalarValue)(nil),                  // 36: chalk.arrow.v1.ScalarValue
	(*DatabaseSourceReference)(nil),          // 37: chalk.graph.v1.DatabaseSourceReference
	(*StreamSourceReference)(nil),            // 38: chalk.graph.v1.StreamSourceReference
}
var file_chalk_graph_v1_graph_proto_depIdxs = []int32{
	3,  // 0: chalk.graph.v1.Graph.feature_sets:type_name -> chalk.graph.v1.FeatureSet
	16, // 1: chalk.graph.v1.Graph.resolvers:type_name -> chalk.graph.v1.Resolver
	19, // 2: chalk.graph.v1.Graph.stream_resolvers:type_name -> chalk.graph.v1.StreamResolver
	17, // 3: chalk.graph.v1.Graph.sink_resolvers:type_name -> chalk.graph.v1.SinkResolver
	31, // 4: chalk.graph.v1.Graph.database_sources:type_name -> chalk.graph.v1.DatabaseSource
	32, // 5: chalk.graph.v1.Graph.stream_sources:type_name -> chalk.graph.v1.StreamSource
	4,  // 6: chalk.graph.v1.FeatureSet.features:type_name -> chalk.graph.v1.FeatureType
	33, // 7: chalk.graph.v1.FeatureSet.max_staleness_duration:type_name -> google.protobuf.Duration
	7,  // 8: chalk.graph.v1.FeatureType.scalar:type_name -> chalk.graph.v1.ScalarFeatureType
	8,  // 9: chalk.graph.v1.FeatureType.has_one:type_name -> chalk.graph.v1.HasOneFeatureType
	9,  // 10: chalk.graph.v1.FeatureType.has_many:type_name -> chalk.graph.v1.HasManyFeatureType
	10, // 11: chalk.graph.v1.FeatureType.feature_time:type_name -> chalk.graph.v1.FeatureTimeFeatureType
	11, // 12: chalk.graph.v1.FeatureType.windowed:type_name -> chalk.graph.v1.WindowedFeatureType
	5,  // 13: chalk.graph.v1.FeatureReference.path:type_name -> chalk.graph.v1.FeatureReference
	6,  // 14: chalk.graph.v1.FeatureReference.df:type_name -> chalk.graph.v1.DataFrameType
	5,  // 15: chalk.graph.v1.DataFrameType.required_columns:type_name -> chalk.graph.v1.FeatureReference
	5,  // 16: chalk.graph.v1.DataFrameType.optional_columns:type_name -> chalk.graph.v1.FeatureReference
	34, // 17: chalk.graph.v1.DataFrameType.filter:type_name -> chalk.expression.v1.LogicalExprNode
	33, // 18: chalk.graph.v1.ScalarFeatureType.max_staleness_duration:type_name -> google.protobuf.Duration
	33, // 19: chalk.graph.v1.ScalarFeatureType.offline_ttl_duration:type_name -> google.protobuf.Duration
	35, // 20: chalk.graph.v1.ScalarFeatureType.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	29, // 21: chalk.graph.v1.ScalarFeatureType.version:type_name -> chalk.graph.v1.VersionInfo
	12, // 22: chalk.graph.v1.ScalarFeatureType.window_info:type_name -> chalk.graph.v1.WindowInfo
	36, // 23: chalk.graph.v1.ScalarFeatureType.default_value:type_name -> chalk.arrow.v1.ScalarValue
	34, // 24: chalk.graph.v1.ScalarFeatureType.expression:type_name -> chalk.expression.v1.LogicalExprNode
	28, // 25: chalk.graph.v1.ScalarFeatureType.validations:type_name -> chalk.graph.v1.FeatureValidation
	5,  // 26: chalk.graph.v1.ScalarFeatureType.last_for:type_name -> chalk.graph.v1.FeatureReference
	34, // 27: chalk.graph.v1.HasOneFeatureType.join:type_name -> chalk.expression.v1.LogicalExprNode
	34, // 28: chalk.graph.v1.HasManyFeatureType.join:type_name -> chalk.expression.v1.LogicalExprNode
	33, // 29: chalk.graph.v1.HasManyFeatureType.max_staleness_duration:type_name -> google.protobuf.Duration
	33, // 30: chalk.graph.v1.WindowedFeatureType.window_durations:type_name -> google.protobuf.Duration
	33, // 31: chalk.graph.v1.WindowInfo.duration:type_name -> google.protobuf.Duration
	5,  // 32: chalk.graph.v1.FeatureInput.feature:type_name -> chalk.graph.v1.FeatureReference
	36, // 33: chalk.graph.v1.FeatureInput.default_value:type_name -> chalk.arrow.v1.ScalarValue
	13, // 34: chalk.graph.v1.ResolverInput.feature:type_name -> chalk.graph.v1.FeatureInput
	6,  // 35: chalk.graph.v1.ResolverInput.df:type_name -> chalk.graph.v1.DataFrameType
	20, // 36: chalk.graph.v1.ResolverInput.state:type_name -> chalk.graph.v1.ResolverState
	5,  // 37: chalk.graph.v1.ResolverOutput.feature:type_name -> chalk.graph.v1.FeatureReference
	6,  // 38: chalk.graph.v1.ResolverOutput.df:type_name -> chalk.graph.v1.DataFrameType
	0,  // 39: chalk.graph.v1.Resolver.kind:type_name -> chalk.graph.v1.ResolverKind
	14, // 40: chalk.graph.v1.Resolver.inputs:type_name -> chalk.graph.v1.ResolverInput
	15, // 41: chalk.graph.v1.Resolver.outputs:type_name -> chalk.graph.v1.ResolverOutput
	37, // 42: chalk.graph.v1.Resolver.data_sources:type_name -> chalk.graph.v1.DatabaseSourceReference
	33, // 43: chalk.graph.v1.Resolver.timeout_duration:type_name -> google.protobuf.Duration
	27, // 44: chalk.graph.v1.Resolver.schedule:type_name -> chalk.graph.v1.Schedule
	34, // 45: chalk.graph.v1.Resolver.when:type_name -> chalk.expression.v1.LogicalExprNode
	26, // 46: chalk.graph.v1.Resolver.cron_filter:type_name -> chalk.graph.v1.CronFilterWithFeatureArgs
	24, // 47: chalk.graph.v1.Resolver.function:type_name -> chalk.graph.v1.FunctionReference
	14, // 48: chalk.graph.v1.SinkResolver.inputs:type_name -> chalk.graph.v1.ResolverInput
	33, // 49: chalk.graph.v1.SinkResolver.debounce_duration:type_name -> google.protobuf.Duration
	33, // 50: chalk.graph.v1.SinkResolver.max_delay_duration:type_name -> google.protobuf.Duration
	38, // 51: chalk.graph.v1.SinkResolver.stream_source:type_name -> chalk.graph.v1.StreamSourceReference
	37, // 52: chalk.graph.v1.SinkResolver.database_source:type_name -> chalk.graph.v1.DatabaseSourceReference
	33, // 53: chalk.graph.v1.SinkResolver.timeout_duration:type_name -> google.protobuf.Duration
	24, // 54: chalk.graph.v1.SinkResolver.function:type_name -> chalk.graph.v1.FunctionReference
	24, // 55: chalk.graph.v1.ParseInfo.parse_function:type_name -> chalk.graph.v1.FunctionReference
	35, // 56: chalk.graph.v1.ParseInfo.parse_function_input_type:type_name -> chalk.arrow.v1.ArrowType
	35, // 57: chalk.graph.v1.ParseInfo.parse_function_output_type:type_name -> chalk.arrow.v1.ArrowType
	21, // 58: chalk.graph.v1.StreamResolver.params:type_name -> chalk.graph.v1.StreamResolverParam
	15, // 59: chalk.graph.v1.StreamResolver.outputs:type_name -> chalk.graph.v1.ResolverOutput
	35, // 60: chalk.graph.v1.StreamResolver.explicit_schema:type_name -> chalk.arrow.v1.ArrowType
	25, // 61: chalk.graph.v1.StreamResolver.keys:type_name -> chalk.graph.v1.StreamKey
	38, // 62: chalk.graph.v1.StreamResolver.source:type_name -> chalk.graph.v1.StreamSourceReference
	18, // 63: chalk.graph.v1.StreamResolver.parse_info:type_name -> chalk.graph.v1.ParseInfo
	1,  // 64: chalk.graph.v1.StreamResolver.mode:type_name -> chalk.graph.v1.WindowMode
	33, // 65: chalk.graph.v1.StreamResolver.timeout_duration:type_name -> google.protobuf.Duration
	24, // 66: chalk.graph.v1.StreamResolver.function:type_name -> chalk.graph.v1.FunctionReference
	36, // 67: chalk.graph.v1.ResolverState.initial:type_name -> chalk.arrow.v1.ScalarValue
	35, // 68: chalk.graph.v1.ResolverState.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	23, // 69: chalk.graph.v1.StreamResolverParam.message:type_name -> chalk.graph.v1.StreamResolverParamMessage
	22, // 70: chalk.graph.v1.StreamResolverParam.message_window:type_name -> chalk.graph.v1.StreamResolverParamMessageWindow
	20, // 71: chalk.graph.v1.StreamResolverParam.state:type_name -> chalk.graph.v1.ResolverState
	35, // 72: chalk.graph.v1.StreamResolverParamMessageWindow.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	35, // 73: chalk.graph.v1.StreamResolverParamMessage.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	5,  // 74: chalk.graph.v1.StreamKey.feature:type_name -> chalk.graph.v1.FeatureReference
	24, // 75: chalk.graph.v1.CronFilterWithFeatureArgs.filter:type_name -> chalk.graph.v1.FunctionReference
	5,  // 76: chalk.graph.v1.CronFilterWithFeatureArgs.args:type_name -> chalk.graph.v1.FeatureReference
	33, // 77: chalk.graph.v1.Schedule.duration:type_name -> google.protobuf.Duration
	24, // 78: chalk.graph.v1.Schedule.filter:type_name -> chalk.graph.v1.FunctionReference
	24, // 79: chalk.graph.v1.Schedule.sample:type_name -> chalk.graph.v1.FunctionReference
	5,  // 80: chalk.graph.v1.StrictValidation.feature:type_name -> chalk.graph.v1.FeatureReference
	28, // 81: chalk.graph.v1.StrictValidation.validations:type_name -> chalk.graph.v1.FeatureValidation
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_chalk_graph_v1_graph_proto_init() }
func file_chalk_graph_v1_graph_proto_init() {
	if File_chalk_graph_v1_graph_proto != nil {
		return
	}
	file_chalk_graph_v1_sources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_graph_v1_graph_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrameType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarFeatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasOneFeatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasManyFeatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureTimeFeatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowedFeatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolverInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolverOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolverState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResolverParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResolverParamMessageWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResolverParamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronFilterWithFeatureArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_graph_v1_graph_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrictValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_graph_v1_graph_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FeatureType_Scalar)(nil),
		(*FeatureType_HasOne)(nil),
		(*FeatureType_HasMany)(nil),
		(*FeatureType_FeatureTime)(nil),
		(*FeatureType_Windowed)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ResolverInput_Feature)(nil),
		(*ResolverInput_Df)(nil),
		(*ResolverInput_State)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ResolverOutput_Feature)(nil),
		(*ResolverOutput_Df)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SinkResolver_StreamSource)(nil),
		(*SinkResolver_DatabaseSource)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_chalk_graph_v1_graph_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*StreamResolverParam_Message)(nil),
		(*StreamResolverParam_MessageWindow)(nil),
		(*StreamResolverParam_State)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Schedule_Crontab)(nil),
		(*Schedule_Duration)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*FeatureValidation_Min)(nil),
		(*FeatureValidation_Max)(nil),
		(*FeatureValidation_MinLength)(nil),
		(*FeatureValidation_MaxLength)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_graph_v1_graph_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_graph_v1_graph_proto_goTypes,
		DependencyIndexes: file_chalk_graph_v1_graph_proto_depIdxs,
		EnumInfos:         file_chalk_graph_v1_graph_proto_enumTypes,
		MessageInfos:      file_chalk_graph_v1_graph_proto_msgTypes,
	}.Build()
	File_chalk_graph_v1_graph_proto = out.File
	file_chalk_graph_v1_graph_proto_rawDesc = nil
	file_chalk_graph_v1_graph_proto_goTypes = nil
	file_chalk_graph_v1_graph_proto_depIdxs = nil
}
