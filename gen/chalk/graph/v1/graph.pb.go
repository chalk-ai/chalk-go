// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/graph/v1/graph.proto

package graphv1

import (
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/expression/v1"
	v2 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v2"
	v12 "github.com/chalk-ai/chalk-go/gen/chalk/lsp/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CacheStrategy int32

const (
	CacheStrategy_CACHE_STRATEGY_UNSPECIFIED              CacheStrategy = 0
	CacheStrategy_CACHE_STRATEGY_ALL                      CacheStrategy = 1
	CacheStrategy_CACHE_STRATEGY_NO_NULLS                 CacheStrategy = 2
	CacheStrategy_CACHE_STRATEGY_EVICT_NULLS              CacheStrategy = 3
	CacheStrategy_CACHE_STRATEGY_NO_DEFAULTS              CacheStrategy = 4
	CacheStrategy_CACHE_STRATEGY_EVICT_DEFAULTS           CacheStrategy = 5
	CacheStrategy_CACHE_STRATEGY_NO_NULLS_OR_DEFAULTS     CacheStrategy = 6
	CacheStrategy_CACHE_STRATEGY_EVICT_NULLS_AND_DEFAULTS CacheStrategy = 7
)

// Enum value maps for CacheStrategy.
var (
	CacheStrategy_name = map[int32]string{
		0: "CACHE_STRATEGY_UNSPECIFIED",
		1: "CACHE_STRATEGY_ALL",
		2: "CACHE_STRATEGY_NO_NULLS",
		3: "CACHE_STRATEGY_EVICT_NULLS",
		4: "CACHE_STRATEGY_NO_DEFAULTS",
		5: "CACHE_STRATEGY_EVICT_DEFAULTS",
		6: "CACHE_STRATEGY_NO_NULLS_OR_DEFAULTS",
		7: "CACHE_STRATEGY_EVICT_NULLS_AND_DEFAULTS",
	}
	CacheStrategy_value = map[string]int32{
		"CACHE_STRATEGY_UNSPECIFIED":              0,
		"CACHE_STRATEGY_ALL":                      1,
		"CACHE_STRATEGY_NO_NULLS":                 2,
		"CACHE_STRATEGY_EVICT_NULLS":              3,
		"CACHE_STRATEGY_NO_DEFAULTS":              4,
		"CACHE_STRATEGY_EVICT_DEFAULTS":           5,
		"CACHE_STRATEGY_NO_NULLS_OR_DEFAULTS":     6,
		"CACHE_STRATEGY_EVICT_NULLS_AND_DEFAULTS": 7,
	}
)

func (x CacheStrategy) Enum() *CacheStrategy {
	p := new(CacheStrategy)
	*p = x
	return p
}

func (x CacheStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[0].Descriptor()
}

func (CacheStrategy) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[0]
}

func (x CacheStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheStrategy.Descriptor instead.
func (CacheStrategy) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{0}
}

type ResolverKind int32

const (
	ResolverKind_RESOLVER_KIND_UNSPECIFIED ResolverKind = 0
	ResolverKind_RESOLVER_KIND_ONLINE      ResolverKind = 1
	ResolverKind_RESOLVER_KIND_OFFLINE     ResolverKind = 2
)

// Enum value maps for ResolverKind.
var (
	ResolverKind_name = map[int32]string{
		0: "RESOLVER_KIND_UNSPECIFIED",
		1: "RESOLVER_KIND_ONLINE",
		2: "RESOLVER_KIND_OFFLINE",
	}
	ResolverKind_value = map[string]int32{
		"RESOLVER_KIND_UNSPECIFIED": 0,
		"RESOLVER_KIND_ONLINE":      1,
		"RESOLVER_KIND_OFFLINE":     2,
	}
)

func (x ResolverKind) Enum() *ResolverKind {
	p := new(ResolverKind)
	*p = x
	return p
}

func (x ResolverKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolverKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[1].Descriptor()
}

func (ResolverKind) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[1]
}

func (x ResolverKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolverKind.Descriptor instead.
func (ResolverKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{1}
}

type ResourceHint int32

const (
	ResourceHint_RESOURCE_HINT_UNSPECIFIED ResourceHint = 0
	ResourceHint_RESOURCE_HINT_CPU         ResourceHint = 1
	ResourceHint_RESOURCE_HINT_IO          ResourceHint = 2
)

// Enum value maps for ResourceHint.
var (
	ResourceHint_name = map[int32]string{
		0: "RESOURCE_HINT_UNSPECIFIED",
		1: "RESOURCE_HINT_CPU",
		2: "RESOURCE_HINT_IO",
	}
	ResourceHint_value = map[string]int32{
		"RESOURCE_HINT_UNSPECIFIED": 0,
		"RESOURCE_HINT_CPU":         1,
		"RESOURCE_HINT_IO":          2,
	}
)

func (x ResourceHint) Enum() *ResourceHint {
	p := new(ResourceHint)
	*p = x
	return p
}

func (x ResourceHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceHint) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[2].Descriptor()
}

func (ResourceHint) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[2]
}

func (x ResourceHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceHint.Descriptor instead.
func (ResourceHint) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{2}
}

type Finalizer int32

const (
	Finalizer_FINALIZER_UNSPECIFIED Finalizer = 0
	Finalizer_FINALIZER_ONE_OR_NONE Finalizer = 1
	Finalizer_FINALIZER_ONE         Finalizer = 2
	Finalizer_FINALIZER_FIRST       Finalizer = 3
	Finalizer_FINALIZER_ALL         Finalizer = 4
)

// Enum value maps for Finalizer.
var (
	Finalizer_name = map[int32]string{
		0: "FINALIZER_UNSPECIFIED",
		1: "FINALIZER_ONE_OR_NONE",
		2: "FINALIZER_ONE",
		3: "FINALIZER_FIRST",
		4: "FINALIZER_ALL",
	}
	Finalizer_value = map[string]int32{
		"FINALIZER_UNSPECIFIED": 0,
		"FINALIZER_ONE_OR_NONE": 1,
		"FINALIZER_ONE":         2,
		"FINALIZER_FIRST":       3,
		"FINALIZER_ALL":         4,
	}
)

func (x Finalizer) Enum() *Finalizer {
	p := new(Finalizer)
	*p = x
	return p
}

func (x Finalizer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Finalizer) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[3].Descriptor()
}

func (Finalizer) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[3]
}

func (x Finalizer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Finalizer.Descriptor instead.
func (Finalizer) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{3}
}

type IncrementalMode int32

const (
	IncrementalMode_INCREMENTAL_MODE_UNSPECIFIED IncrementalMode = 0
	IncrementalMode_INCREMENTAL_MODE_ROW         IncrementalMode = 1
	IncrementalMode_INCREMENTAL_MODE_GROUP       IncrementalMode = 2
	IncrementalMode_INCREMENTAL_MODE_PARAMETER   IncrementalMode = 3
)

// Enum value maps for IncrementalMode.
var (
	IncrementalMode_name = map[int32]string{
		0: "INCREMENTAL_MODE_UNSPECIFIED",
		1: "INCREMENTAL_MODE_ROW",
		2: "INCREMENTAL_MODE_GROUP",
		3: "INCREMENTAL_MODE_PARAMETER",
	}
	IncrementalMode_value = map[string]int32{
		"INCREMENTAL_MODE_UNSPECIFIED": 0,
		"INCREMENTAL_MODE_ROW":         1,
		"INCREMENTAL_MODE_GROUP":       2,
		"INCREMENTAL_MODE_PARAMETER":   3,
	}
)

func (x IncrementalMode) Enum() *IncrementalMode {
	p := new(IncrementalMode)
	*p = x
	return p
}

func (x IncrementalMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncrementalMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[4].Descriptor()
}

func (IncrementalMode) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[4]
}

func (x IncrementalMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncrementalMode.Descriptor instead.
func (IncrementalMode) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{4}
}

type IncrementalTimestampMode int32

const (
	IncrementalTimestampMode_INCREMENTAL_TIMESTAMP_MODE_UNSPECIFIED             IncrementalTimestampMode = 0
	IncrementalTimestampMode_INCREMENTAL_TIMESTAMP_MODE_FEATURE_TIME            IncrementalTimestampMode = 1
	IncrementalTimestampMode_INCREMENTAL_TIMESTAMP_MODE_RESOLVER_EXECUTION_TIME IncrementalTimestampMode = 2
)

// Enum value maps for IncrementalTimestampMode.
var (
	IncrementalTimestampMode_name = map[int32]string{
		0: "INCREMENTAL_TIMESTAMP_MODE_UNSPECIFIED",
		1: "INCREMENTAL_TIMESTAMP_MODE_FEATURE_TIME",
		2: "INCREMENTAL_TIMESTAMP_MODE_RESOLVER_EXECUTION_TIME",
	}
	IncrementalTimestampMode_value = map[string]int32{
		"INCREMENTAL_TIMESTAMP_MODE_UNSPECIFIED":             0,
		"INCREMENTAL_TIMESTAMP_MODE_FEATURE_TIME":            1,
		"INCREMENTAL_TIMESTAMP_MODE_RESOLVER_EXECUTION_TIME": 2,
	}
)

func (x IncrementalTimestampMode) Enum() *IncrementalTimestampMode {
	p := new(IncrementalTimestampMode)
	*p = x
	return p
}

func (x IncrementalTimestampMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncrementalTimestampMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[5].Descriptor()
}

func (IncrementalTimestampMode) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[5]
}

func (x IncrementalTimestampMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncrementalTimestampMode.Descriptor instead.
func (IncrementalTimestampMode) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{5}
}

type WindowMode int32

const (
	WindowMode_WINDOW_MODE_UNSPECIFIED WindowMode = 0
	WindowMode_WINDOW_MODE_CONTINUOUS  WindowMode = 1
	WindowMode_WINDOW_MODE_TUMBLING    WindowMode = 2
	WindowMode_WINDOW_MODE_CDC         WindowMode = 3
)

// Enum value maps for WindowMode.
var (
	WindowMode_name = map[int32]string{
		0: "WINDOW_MODE_UNSPECIFIED",
		1: "WINDOW_MODE_CONTINUOUS",
		2: "WINDOW_MODE_TUMBLING",
		3: "WINDOW_MODE_CDC",
	}
	WindowMode_value = map[string]int32{
		"WINDOW_MODE_UNSPECIFIED": 0,
		"WINDOW_MODE_CONTINUOUS":  1,
		"WINDOW_MODE_TUMBLING":    2,
		"WINDOW_MODE_CDC":         3,
	}
)

func (x WindowMode) Enum() *WindowMode {
	p := new(WindowMode)
	*p = x
	return p
}

func (x WindowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_graph_v1_graph_proto_enumTypes[6].Descriptor()
}

func (WindowMode) Type() protoreflect.EnumType {
	return &file_chalk_graph_v1_graph_proto_enumTypes[6]
}

func (x WindowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowMode.Descriptor instead.
func (WindowMode) EnumDescriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{6}
}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureSets     []*FeatureSet     `protobuf:"bytes,1,rep,name=feature_sets,json=featureSets,proto3" json:"feature_sets,omitempty"`
	Resolvers       []*Resolver       `protobuf:"bytes,2,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	StreamResolvers []*StreamResolver `protobuf:"bytes,3,rep,name=stream_resolvers,json=streamResolvers,proto3" json:"stream_resolvers,omitempty"`
	SinkResolvers   []*SinkResolver   `protobuf:"bytes,4,rep,name=sink_resolvers,json=sinkResolvers,proto3" json:"sink_resolvers,omitempty"`
	// database_sources is deprecated; see database_sources_v2
	//
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	DatabaseSources []*DatabaseSource `protobuf:"bytes,5,rep,name=database_sources,json=databaseSources,proto3" json:"database_sources,omitempty"`
	// stream_sources is deprecated; see stream_sources_v2
	//
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	StreamSources        []*StreamSource           `protobuf:"bytes,6,rep,name=stream_sources,json=streamSources,proto3" json:"stream_sources,omitempty"`
	NamedQueries         []*NamedQuery             `protobuf:"bytes,7,rep,name=named_queries,json=namedQueries,proto3" json:"named_queries,omitempty"`
	DatabaseSourcesV2    []*v2.DatabaseSource      `protobuf:"bytes,8,rep,name=database_sources_v2,json=databaseSourcesV2,proto3" json:"database_sources_v2,omitempty"`
	DatabaseSourceGroups []*v2.DatabaseSourceGroup `protobuf:"bytes,10,rep,name=database_source_groups,json=databaseSourceGroups,proto3" json:"database_source_groups,omitempty"`
	StreamSourcesV2      []*v2.StreamSource        `protobuf:"bytes,9,rep,name=stream_sources_v2,json=streamSourcesV2,proto3" json:"stream_sources_v2,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{0}
}

func (x *Graph) GetFeatureSets() []*FeatureSet {
	if x != nil {
		return x.FeatureSets
	}
	return nil
}

func (x *Graph) GetResolvers() []*Resolver {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *Graph) GetStreamResolvers() []*StreamResolver {
	if x != nil {
		return x.StreamResolvers
	}
	return nil
}

func (x *Graph) GetSinkResolvers() []*SinkResolver {
	if x != nil {
		return x.SinkResolvers
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *Graph) GetDatabaseSources() []*DatabaseSource {
	if x != nil {
		return x.DatabaseSources
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *Graph) GetStreamSources() []*StreamSource {
	if x != nil {
		return x.StreamSources
	}
	return nil
}

func (x *Graph) GetNamedQueries() []*NamedQuery {
	if x != nil {
		return x.NamedQueries
	}
	return nil
}

func (x *Graph) GetDatabaseSourcesV2() []*v2.DatabaseSource {
	if x != nil {
		return x.DatabaseSourcesV2
	}
	return nil
}

func (x *Graph) GetDatabaseSourceGroups() []*v2.DatabaseSourceGroup {
	if x != nil {
		return x.DatabaseSourceGroups
	}
	return nil
}

func (x *Graph) GetStreamSourcesV2() []*v2.StreamSource {
	if x != nil {
		return x.StreamSourcesV2
	}
	return nil
}

type OverlayGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureSets []*FeatureSet `protobuf:"bytes,1,rep,name=feature_sets,json=featureSets,proto3" json:"feature_sets,omitempty"`
	// New feature fields to be added to existing feature classes
	FeatureFields         []*FeatureType     `protobuf:"bytes,2,rep,name=feature_fields,json=featureFields,proto3" json:"feature_fields,omitempty"`
	Resolvers             []*Resolver        `protobuf:"bytes,3,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	GeneratedSqlResolvers []*SQLResolverInfo `protobuf:"bytes,4,rep,name=generated_sql_resolvers,json=generatedSqlResolvers,proto3" json:"generated_sql_resolvers,omitempty"`
}

func (x *OverlayGraph) Reset() {
	*x = OverlayGraph{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverlayGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayGraph) ProtoMessage() {}

func (x *OverlayGraph) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayGraph.ProtoReflect.Descriptor instead.
func (*OverlayGraph) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{1}
}

func (x *OverlayGraph) GetFeatureSets() []*FeatureSet {
	if x != nil {
		return x.FeatureSets
	}
	return nil
}

func (x *OverlayGraph) GetFeatureFields() []*FeatureType {
	if x != nil {
		return x.FeatureFields
	}
	return nil
}

func (x *OverlayGraph) GetResolvers() []*Resolver {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *OverlayGraph) GetGeneratedSqlResolvers() []*SQLResolverInfo {
	if x != nil {
		return x.GeneratedSqlResolvers
	}
	return nil
}

type NamedQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QueryVersion   *string                         `protobuf:"bytes,2,opt,name=query_version,json=queryVersion,proto3,oneof" json:"query_version,omitempty"`
	Input          []string                        `protobuf:"bytes,3,rep,name=input,proto3" json:"input,omitempty"`
	Output         []string                        `protobuf:"bytes,4,rep,name=output,proto3" json:"output,omitempty"`
	Tags           []string                        `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Description    *string                         `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner          *string                         `protobuf:"bytes,7,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Meta           map[string]string               `protobuf:"bytes,8,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Staleness      map[string]*durationpb.Duration `protobuf:"bytes,9,rep,name=staleness,proto3" json:"staleness,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlannerOptions map[string]string               `protobuf:"bytes,10,rep,name=planner_options,json=plannerOptions,proto3" json:"planner_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FileName       string                          `protobuf:"bytes,11,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// required
	DeploymentId             *string              `protobuf:"bytes,12,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	SourceFileReference      *SourceFileReference `protobuf:"bytes,13,opt,name=source_file_reference,json=sourceFileReference,proto3,oneof" json:"source_file_reference,omitempty"`
	AdditionalLoggedFeatures []string             `protobuf:"bytes,14,rep,name=additional_logged_features,json=additionalLoggedFeatures,proto3" json:"additional_logged_features,omitempty"`
	ValidPlanNotRequired     *bool                `protobuf:"varint,15,opt,name=valid_plan_not_required,json=validPlanNotRequired,proto3,oneof" json:"valid_plan_not_required,omitempty"`
}

func (x *NamedQuery) Reset() {
	*x = NamedQuery{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedQuery) ProtoMessage() {}

func (x *NamedQuery) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedQuery.ProtoReflect.Descriptor instead.
func (*NamedQuery) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{2}
}

func (x *NamedQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedQuery) GetQueryVersion() string {
	if x != nil && x.QueryVersion != nil {
		return *x.QueryVersion
	}
	return ""
}

func (x *NamedQuery) GetInput() []string {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *NamedQuery) GetOutput() []string {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *NamedQuery) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NamedQuery) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NamedQuery) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *NamedQuery) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NamedQuery) GetStaleness() map[string]*durationpb.Duration {
	if x != nil {
		return x.Staleness
	}
	return nil
}

func (x *NamedQuery) GetPlannerOptions() map[string]string {
	if x != nil {
		return x.PlannerOptions
	}
	return nil
}

func (x *NamedQuery) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *NamedQuery) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *NamedQuery) GetSourceFileReference() *SourceFileReference {
	if x != nil {
		return x.SourceFileReference
	}
	return nil
}

func (x *NamedQuery) GetAdditionalLoggedFeatures() []string {
	if x != nil {
		return x.AdditionalLoggedFeatures
	}
	return nil
}

func (x *NamedQuery) GetValidPlanNotRequired() bool {
	if x != nil && x.ValidPlanNotRequired != nil {
		return *x.ValidPlanNotRequired
	}
	return false
}

type FeatureSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Features             []*FeatureType       `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
	MaxStalenessDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=max_staleness_duration,json=maxStalenessDuration,proto3" json:"max_staleness_duration,omitempty"`
	IsSingleton          bool                 `protobuf:"varint,4,opt,name=is_singleton,json=isSingleton,proto3" json:"is_singleton,omitempty"`
	Tags                 []string             `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Owner                *string              `protobuf:"bytes,6,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The docstring of the class on which the features are defined.
	Doc                *string `protobuf:"bytes,7,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	EtlOfflineToOnline *bool   `protobuf:"varint,8,opt,name=etl_offline_to_online,json=etlOfflineToOnline,proto3,oneof" json:"etl_offline_to_online,omitempty"`
	ClassPath          *string `protobuf:"bytes,9,opt,name=class_path,json=classPath,proto3,oneof" json:"class_path,omitempty"`
}

func (x *FeatureSet) Reset() {
	*x = FeatureSet{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSet) ProtoMessage() {}

func (x *FeatureSet) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSet.ProtoReflect.Descriptor instead.
func (*FeatureSet) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureSet) GetFeatures() []*FeatureType {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *FeatureSet) GetMaxStalenessDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStalenessDuration
	}
	return nil
}

func (x *FeatureSet) GetIsSingleton() bool {
	if x != nil {
		return x.IsSingleton
	}
	return false
}

func (x *FeatureSet) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FeatureSet) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *FeatureSet) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *FeatureSet) GetEtlOfflineToOnline() bool {
	if x != nil && x.EtlOfflineToOnline != nil {
		return *x.EtlOfflineToOnline
	}
	return false
}

func (x *FeatureSet) GetClassPath() string {
	if x != nil && x.ClassPath != nil {
		return *x.ClassPath
	}
	return ""
}

type FeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FeatureType_Scalar
	//	*FeatureType_HasOne
	//	*FeatureType_HasMany
	//	*FeatureType_FeatureTime
	//	*FeatureType_Windowed
	//	*FeatureType_GroupBy
	Type isFeatureType_Type `protobuf_oneof:"type"`
}

func (x *FeatureType) Reset() {
	*x = FeatureType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureType) ProtoMessage() {}

func (x *FeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureType.ProtoReflect.Descriptor instead.
func (*FeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{4}
}

func (m *FeatureType) GetType() isFeatureType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FeatureType) GetScalar() *ScalarFeatureType {
	if x, ok := x.GetType().(*FeatureType_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (x *FeatureType) GetHasOne() *HasOneFeatureType {
	if x, ok := x.GetType().(*FeatureType_HasOne); ok {
		return x.HasOne
	}
	return nil
}

func (x *FeatureType) GetHasMany() *HasManyFeatureType {
	if x, ok := x.GetType().(*FeatureType_HasMany); ok {
		return x.HasMany
	}
	return nil
}

func (x *FeatureType) GetFeatureTime() *FeatureTimeFeatureType {
	if x, ok := x.GetType().(*FeatureType_FeatureTime); ok {
		return x.FeatureTime
	}
	return nil
}

func (x *FeatureType) GetWindowed() *WindowedFeatureType {
	if x, ok := x.GetType().(*FeatureType_Windowed); ok {
		return x.Windowed
	}
	return nil
}

func (x *FeatureType) GetGroupBy() *GroupByFeatureType {
	if x, ok := x.GetType().(*FeatureType_GroupBy); ok {
		return x.GroupBy
	}
	return nil
}

type isFeatureType_Type interface {
	isFeatureType_Type()
}

type FeatureType_Scalar struct {
	Scalar *ScalarFeatureType `protobuf:"bytes,1,opt,name=scalar,proto3,oneof"`
}

type FeatureType_HasOne struct {
	HasOne *HasOneFeatureType `protobuf:"bytes,2,opt,name=has_one,json=hasOne,proto3,oneof"`
}

type FeatureType_HasMany struct {
	HasMany *HasManyFeatureType `protobuf:"bytes,3,opt,name=has_many,json=hasMany,proto3,oneof"`
}

type FeatureType_FeatureTime struct {
	FeatureTime *FeatureTimeFeatureType `protobuf:"bytes,4,opt,name=feature_time,json=featureTime,proto3,oneof"`
}

type FeatureType_Windowed struct {
	Windowed *WindowedFeatureType `protobuf:"bytes,5,opt,name=windowed,proto3,oneof"`
}

type FeatureType_GroupBy struct {
	GroupBy *GroupByFeatureType `protobuf:"bytes,6,opt,name=group_by,json=groupBy,proto3,oneof"`
}

func (*FeatureType_Scalar) isFeatureType_Type() {}

func (*FeatureType_HasOne) isFeatureType_Type() {}

func (*FeatureType_HasMany) isFeatureType_Type() {}

func (*FeatureType_FeatureTime) isFeatureType_Type() {}

func (*FeatureType_Windowed) isFeatureType_Type() {}

func (*FeatureType_GroupBy) isFeatureType_Type() {}

type FeatureReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Path      []*FeatureReference `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	Df        *DataFrameType      `protobuf:"bytes,4,opt,name=df,proto3" json:"df,omitempty"`
}

func (x *FeatureReference) Reset() {
	*x = FeatureReference{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureReference) ProtoMessage() {}

func (x *FeatureReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureReference.ProtoReflect.Descriptor instead.
func (*FeatureReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FeatureReference) GetPath() []*FeatureReference {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FeatureReference) GetDf() *DataFrameType {
	if x != nil {
		return x.Df
	}
	return nil
}

type DataFrameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootNamespace   string              `protobuf:"bytes,1,opt,name=root_namespace,json=rootNamespace,proto3" json:"root_namespace,omitempty"`
	RequiredColumns []*FeatureReference `protobuf:"bytes,2,rep,name=required_columns,json=requiredColumns,proto3" json:"required_columns,omitempty"`
	OptionalColumns []*FeatureReference `protobuf:"bytes,3,rep,name=optional_columns,json=optionalColumns,proto3" json:"optional_columns,omitempty"`
	Filter          *v1.LogicalExprNode `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit           *uint64             `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *DataFrameType) Reset() {
	*x = DataFrameType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataFrameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameType) ProtoMessage() {}

func (x *DataFrameType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameType.ProtoReflect.Descriptor instead.
func (*DataFrameType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{6}
}

func (x *DataFrameType) GetRootNamespace() string {
	if x != nil {
		return x.RootNamespace
	}
	return ""
}

func (x *DataFrameType) GetRequiredColumns() []*FeatureReference {
	if x != nil {
		return x.RequiredColumns
	}
	return nil
}

func (x *DataFrameType) GetOptionalColumns() []*FeatureReference {
	if x != nil {
		return x.OptionalColumns
	}
	return nil
}

func (x *DataFrameType) GetFilter() *v1.LogicalExprNode {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DataFrameType) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type GroupByFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace                string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsNullable               bool                   `protobuf:"varint,3,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	InternalVersion          *uint64                `protobuf:"varint,4,opt,name=internal_version,json=internalVersion,proto3,oneof" json:"internal_version,omitempty"`
	ArrowType                *v11.ArrowType         `protobuf:"bytes,5,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
	Aggregation              *WindowAggregation     `protobuf:"bytes,6,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	WindowDurations          []*durationpb.Duration `protobuf:"bytes,7,rep,name=window_durations,json=windowDurations,proto3" json:"window_durations,omitempty"`
	Expression               *v1.LogicalExprNode    `protobuf:"bytes,8,opt,name=expression,proto3" json:"expression,omitempty"`
	DefaultValue             *v11.ScalarValue       `protobuf:"bytes,9,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Tags                     []string               `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Description              *string                `protobuf:"bytes,11,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner                    *string                `protobuf:"bytes,12,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Validations              []*FeatureValidation   `protobuf:"bytes,13,rep,name=validations,proto3" json:"validations,omitempty"`
	AttributeName            string                 `protobuf:"bytes,14,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	UnversionedAttributeName string                 `protobuf:"bytes,15,opt,name=unversioned_attribute_name,json=unversionedAttributeName,proto3" json:"unversioned_attribute_name,omitempty"`
}

func (x *GroupByFeatureType) Reset() {
	*x = GroupByFeatureType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupByFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByFeatureType) ProtoMessage() {}

func (x *GroupByFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByFeatureType.ProtoReflect.Descriptor instead.
func (*GroupByFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{7}
}

func (x *GroupByFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupByFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GroupByFeatureType) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *GroupByFeatureType) GetInternalVersion() uint64 {
	if x != nil && x.InternalVersion != nil {
		return *x.InternalVersion
	}
	return 0
}

func (x *GroupByFeatureType) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

func (x *GroupByFeatureType) GetAggregation() *WindowAggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *GroupByFeatureType) GetWindowDurations() []*durationpb.Duration {
	if x != nil {
		return x.WindowDurations
	}
	return nil
}

func (x *GroupByFeatureType) GetExpression() *v1.LogicalExprNode {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *GroupByFeatureType) GetDefaultValue() *v11.ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *GroupByFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupByFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GroupByFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *GroupByFeatureType) GetValidations() []*FeatureValidation {
	if x != nil {
		return x.Validations
	}
	return nil
}

func (x *GroupByFeatureType) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *GroupByFeatureType) GetUnversionedAttributeName() string {
	if x != nil {
		return x.UnversionedAttributeName
	}
	return ""
}

type ScalarFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string  `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsAutogenerated bool    `protobuf:"varint,3,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	NoDisplay       bool    `protobuf:"varint,4,opt,name=no_display,json=noDisplay,proto3" json:"no_display,omitempty"`
	IsPrimary       bool    `protobuf:"varint,5,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsNullable      bool    `protobuf:"varint,6,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	InternalVersion *uint64 `protobuf:"varint,7,opt,name=internal_version,json=internalVersion,proto3,oneof" json:"internal_version,omitempty"`
	// This represents whatever arg the user passed into the `feature()` call.
	// If both set, this should take precedence over the value in `FeatureSet`.
	// If unset here, the value in `FeatureSet` should be used.
	MaxStalenessDuration *durationpb.Duration `protobuf:"bytes,8,opt,name=max_staleness_duration,json=maxStalenessDuration,proto3" json:"max_staleness_duration,omitempty"`
	OfflineTtlDuration   *durationpb.Duration `protobuf:"bytes,10,opt,name=offline_ttl_duration,json=offlineTtlDuration,proto3" json:"offline_ttl_duration,omitempty"`
	ArrowType            *v11.ArrowType       `protobuf:"bytes,11,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
	Version              *VersionInfo         `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	WindowInfo           *WindowInfo          `protobuf:"bytes,13,opt,name=window_info,json=windowInfo,proto3" json:"window_info,omitempty"`
	DefaultValue         *v11.ScalarValue     `protobuf:"bytes,14,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Tags                 []string             `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	Description          *string              `protobuf:"bytes,16,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner                *string              `protobuf:"bytes,17,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Expression           *v1.LogicalExprNode  `protobuf:"bytes,18,opt,name=expression,proto3" json:"expression,omitempty"`
	Validations          []*FeatureValidation `protobuf:"bytes,19,rep,name=validations,proto3" json:"validations,omitempty"`
	LastFor              *FeatureReference    `protobuf:"bytes,20,opt,name=last_for,json=lastFor,proto3" json:"last_for,omitempty"`
	// This represents whatever arg the user passed into the `feature()` call.
	// If both set, this should take precedence over the value in `FeatureSet`.
	// If unset here, the value in `FeatureSet` should be used.
	EtlOfflineToOnline      *bool  `protobuf:"varint,21,opt,name=etl_offline_to_online,json=etlOfflineToOnline,proto3,oneof" json:"etl_offline_to_online,omitempty"`
	IsDistancePseudofeature bool   `protobuf:"varint,22,opt,name=is_distance_pseudofeature,json=isDistancePseudofeature,proto3" json:"is_distance_pseudofeature,omitempty"`
	AttributeName           string `protobuf:"bytes,23,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	// Whether the user marked the feature as deprecated.
	IsDeprecated             bool                 `protobuf:"varint,24,opt,name=is_deprecated,json=isDeprecated,proto3" json:"is_deprecated,omitempty"`
	CacheStrategy            CacheStrategy        `protobuf:"varint,25,opt,name=cache_strategy,json=cacheStrategy,proto3,enum=chalk.graph.v1.CacheStrategy" json:"cache_strategy,omitempty"`
	StoreOnline              *bool                `protobuf:"varint,26,opt,name=store_online,json=storeOnline,proto3,oneof" json:"store_online,omitempty"`    // optional because proto default is false, but chalk defaults to true
	StoreOffline             *bool                `protobuf:"varint,27,opt,name=store_offline,json=storeOffline,proto3,oneof" json:"store_offline,omitempty"` // optional because proto default is false, but chalk defaults to true
	UnversionedAttributeName string               `protobuf:"bytes,28,opt,name=unversioned_attribute_name,json=unversionedAttributeName,proto3" json:"unversioned_attribute_name,omitempty"`
	RichTypeInfo             *FeatureRichTypeInfo `protobuf:"bytes,29,opt,name=rich_type_info,json=richTypeInfo,proto3,oneof" json:"rich_type_info,omitempty"`
}

func (x *ScalarFeatureType) Reset() {
	*x = ScalarFeatureType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScalarFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFeatureType) ProtoMessage() {}

func (x *ScalarFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFeatureType.ProtoReflect.Descriptor instead.
func (*ScalarFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{8}
}

func (x *ScalarFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScalarFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScalarFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *ScalarFeatureType) GetNoDisplay() bool {
	if x != nil {
		return x.NoDisplay
	}
	return false
}

func (x *ScalarFeatureType) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *ScalarFeatureType) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *ScalarFeatureType) GetInternalVersion() uint64 {
	if x != nil && x.InternalVersion != nil {
		return *x.InternalVersion
	}
	return 0
}

func (x *ScalarFeatureType) GetMaxStalenessDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStalenessDuration
	}
	return nil
}

func (x *ScalarFeatureType) GetOfflineTtlDuration() *durationpb.Duration {
	if x != nil {
		return x.OfflineTtlDuration
	}
	return nil
}

func (x *ScalarFeatureType) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

func (x *ScalarFeatureType) GetVersion() *VersionInfo {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ScalarFeatureType) GetWindowInfo() *WindowInfo {
	if x != nil {
		return x.WindowInfo
	}
	return nil
}

func (x *ScalarFeatureType) GetDefaultValue() *v11.ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ScalarFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ScalarFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ScalarFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *ScalarFeatureType) GetExpression() *v1.LogicalExprNode {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ScalarFeatureType) GetValidations() []*FeatureValidation {
	if x != nil {
		return x.Validations
	}
	return nil
}

func (x *ScalarFeatureType) GetLastFor() *FeatureReference {
	if x != nil {
		return x.LastFor
	}
	return nil
}

func (x *ScalarFeatureType) GetEtlOfflineToOnline() bool {
	if x != nil && x.EtlOfflineToOnline != nil {
		return *x.EtlOfflineToOnline
	}
	return false
}

func (x *ScalarFeatureType) GetIsDistancePseudofeature() bool {
	if x != nil {
		return x.IsDistancePseudofeature
	}
	return false
}

func (x *ScalarFeatureType) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *ScalarFeatureType) GetIsDeprecated() bool {
	if x != nil {
		return x.IsDeprecated
	}
	return false
}

func (x *ScalarFeatureType) GetCacheStrategy() CacheStrategy {
	if x != nil {
		return x.CacheStrategy
	}
	return CacheStrategy_CACHE_STRATEGY_UNSPECIFIED
}

func (x *ScalarFeatureType) GetStoreOnline() bool {
	if x != nil && x.StoreOnline != nil {
		return *x.StoreOnline
	}
	return false
}

func (x *ScalarFeatureType) GetStoreOffline() bool {
	if x != nil && x.StoreOffline != nil {
		return *x.StoreOffline
	}
	return false
}

func (x *ScalarFeatureType) GetUnversionedAttributeName() string {
	if x != nil {
		return x.UnversionedAttributeName
	}
	return ""
}

func (x *ScalarFeatureType) GetRichTypeInfo() *FeatureRichTypeInfo {
	if x != nil {
		return x.RichTypeInfo
	}
	return nil
}

type HasOneFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace                string              `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ForeignNamespace         string              `protobuf:"bytes,3,opt,name=foreign_namespace,json=foreignNamespace,proto3" json:"foreign_namespace,omitempty"`
	Join                     *v1.LogicalExprNode `protobuf:"bytes,4,opt,name=join,proto3" json:"join,omitempty"`
	IsNullable               bool                `protobuf:"varint,5,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	IsAutogenerated          bool                `protobuf:"varint,6,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	Tags                     []string            `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Description              *string             `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner                    *string             `protobuf:"bytes,9,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	AttributeName            string              `protobuf:"bytes,10,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	UnversionedAttributeName string              `protobuf:"bytes,11,opt,name=unversioned_attribute_name,json=unversionedAttributeName,proto3" json:"unversioned_attribute_name,omitempty"`
}

func (x *HasOneFeatureType) Reset() {
	*x = HasOneFeatureType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasOneFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasOneFeatureType) ProtoMessage() {}

func (x *HasOneFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasOneFeatureType.ProtoReflect.Descriptor instead.
func (*HasOneFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{9}
}

func (x *HasOneFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HasOneFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HasOneFeatureType) GetForeignNamespace() string {
	if x != nil {
		return x.ForeignNamespace
	}
	return ""
}

func (x *HasOneFeatureType) GetJoin() *v1.LogicalExprNode {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *HasOneFeatureType) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *HasOneFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *HasOneFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HasOneFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *HasOneFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *HasOneFeatureType) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *HasOneFeatureType) GetUnversionedAttributeName() string {
	if x != nil {
		return x.UnversionedAttributeName
	}
	return ""
}

type HasManyFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace                string               `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ForeignNamespace         string               `protobuf:"bytes,3,opt,name=foreign_namespace,json=foreignNamespace,proto3" json:"foreign_namespace,omitempty"`
	Join                     *v1.LogicalExprNode  `protobuf:"bytes,4,opt,name=join,proto3" json:"join,omitempty"`
	IsAutogenerated          bool                 `protobuf:"varint,5,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	MaxStalenessDuration     *durationpb.Duration `protobuf:"bytes,6,opt,name=max_staleness_duration,json=maxStalenessDuration,proto3" json:"max_staleness_duration,omitempty"`
	Tags                     []string             `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Description              *string              `protobuf:"bytes,8,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner                    *string              `protobuf:"bytes,9,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	AttributeName            string               `protobuf:"bytes,10,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	UnversionedAttributeName string               `protobuf:"bytes,11,opt,name=unversioned_attribute_name,json=unversionedAttributeName,proto3" json:"unversioned_attribute_name,omitempty"`
}

func (x *HasManyFeatureType) Reset() {
	*x = HasManyFeatureType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasManyFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasManyFeatureType) ProtoMessage() {}

func (x *HasManyFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasManyFeatureType.ProtoReflect.Descriptor instead.
func (*HasManyFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{10}
}

func (x *HasManyFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HasManyFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HasManyFeatureType) GetForeignNamespace() string {
	if x != nil {
		return x.ForeignNamespace
	}
	return ""
}

func (x *HasManyFeatureType) GetJoin() *v1.LogicalExprNode {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *HasManyFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *HasManyFeatureType) GetMaxStalenessDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStalenessDuration
	}
	return nil
}

func (x *HasManyFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HasManyFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *HasManyFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *HasManyFeatureType) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *HasManyFeatureType) GetUnversionedAttributeName() string {
	if x != nil {
		return x.UnversionedAttributeName
	}
	return ""
}

type FeatureTimeFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsAutogenerated bool     `protobuf:"varint,3,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	Tags            []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Description     *string  `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Owner           *string  `protobuf:"bytes,6,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	AttributeName   string   `protobuf:"bytes,7,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
}

func (x *FeatureTimeFeatureType) Reset() {
	*x = FeatureTimeFeatureType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureTimeFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureTimeFeatureType) ProtoMessage() {}

func (x *FeatureTimeFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureTimeFeatureType.ProtoReflect.Descriptor instead.
func (*FeatureTimeFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{11}
}

func (x *FeatureTimeFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureTimeFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FeatureTimeFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *FeatureTimeFeatureType) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FeatureTimeFeatureType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FeatureTimeFeatureType) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *FeatureTimeFeatureType) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

type WindowedFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace                string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	IsAutogenerated          bool                   `protobuf:"varint,3,opt,name=is_autogenerated,json=isAutogenerated,proto3" json:"is_autogenerated,omitempty"`
	WindowDurations          []*durationpb.Duration `protobuf:"bytes,4,rep,name=window_durations,json=windowDurations,proto3" json:"window_durations,omitempty"`
	AttributeName            string                 `protobuf:"bytes,5,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	UnversionedAttributeName string                 `protobuf:"bytes,6,opt,name=unversioned_attribute_name,json=unversionedAttributeName,proto3" json:"unversioned_attribute_name,omitempty"`
}

func (x *WindowedFeatureType) Reset() {
	*x = WindowedFeatureType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowedFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowedFeatureType) ProtoMessage() {}

func (x *WindowedFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowedFeatureType.ProtoReflect.Descriptor instead.
func (*WindowedFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{12}
}

func (x *WindowedFeatureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowedFeatureType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WindowedFeatureType) GetIsAutogenerated() bool {
	if x != nil {
		return x.IsAutogenerated
	}
	return false
}

func (x *WindowedFeatureType) GetWindowDurations() []*durationpb.Duration {
	if x != nil {
		return x.WindowDurations
	}
	return nil
}

func (x *WindowedFeatureType) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *WindowedFeatureType) GetUnversionedAttributeName() string {
	if x != nil {
		return x.UnversionedAttributeName
	}
	return ""
}

type WindowAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace      string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	GroupBy        []*FeatureReference   `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	BucketDuration *durationpb.Duration  `protobuf:"bytes,3,opt,name=bucket_duration,json=bucketDuration,proto3" json:"bucket_duration,omitempty"`
	Aggregation    string                `protobuf:"bytes,4,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	AggregateOn    *FeatureReference     `protobuf:"bytes,5,opt,name=aggregate_on,json=aggregateOn,proto3,oneof" json:"aggregate_on,omitempty"`
	ArrowType      *v11.ArrowType        `protobuf:"bytes,6,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
	Filters        []*v1.LogicalExprNode `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty"`
	// The resolver to use for back-filling the materialized aggregate.
	// If not provided, the data will be back filled using the resolver
	// that would run for an offline query.
	BackfillResolver *string `protobuf:"bytes,8,opt,name=backfill_resolver,json=backfillResolver,proto3,oneof" json:"backfill_resolver,omitempty"`
	// The amount of time before the start of the previous backfill
	// to consider when running the backfill resolver. Set this parameter
	// to the be equal to the latest arriving data in the backfill window.
	BackfillLookbackDuration *durationpb.Duration `protobuf:"bytes,9,opt,name=backfill_lookback_duration,json=backfillLookbackDuration,proto3,oneof" json:"backfill_lookback_duration,omitempty"`
	// The time at which to start back filling the materialized aggregate.
	// If not provided, the backfill consider the earliest available data returned
	// by the `backfill_resolver`.
	BackfillStartTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=backfill_start_time,json=backfillStartTime,proto3,oneof" json:"backfill_start_time,omitempty"`
	// The resolver to use for continuous updates to the materialized aggregate.
	// If not provided, the data will be updated using the resolver that would run
	// for an online query.
	ContinuousResolver *string `protobuf:"bytes,11,opt,name=continuous_resolver,json=continuousResolver,proto3,oneof" json:"continuous_resolver,omitempty"`
	// The period for which to use the continuous resolver, instead
	// of relying upon the last backfill. If not provided, and a continuous
	// resolver is provided, this will be set to backfill_lookback_duration.
	ContinuousBufferDuration *durationpb.Duration `protobuf:"bytes,12,opt,name=continuous_buffer_duration,json=continuousBufferDuration,proto3,oneof" json:"continuous_buffer_duration,omitempty"`
	// A crontab or duration string to specify the schedule for back filling the
	// materialized aggregate.
	BackfillSchedule *string `protobuf:"bytes,13,opt,name=backfill_schedule,json=backfillSchedule,proto3,oneof" json:"backfill_schedule,omitempty"`
	// The lower bound of the first bucket. All buckets are aligned to this time.
	BucketStart *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=bucket_start,json=bucketStart,proto3" json:"bucket_start,omitempty"`
}

func (x *WindowAggregation) Reset() {
	*x = WindowAggregation{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowAggregation) ProtoMessage() {}

func (x *WindowAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowAggregation.ProtoReflect.Descriptor instead.
func (*WindowAggregation) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{13}
}

func (x *WindowAggregation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WindowAggregation) GetGroupBy() []*FeatureReference {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *WindowAggregation) GetBucketDuration() *durationpb.Duration {
	if x != nil {
		return x.BucketDuration
	}
	return nil
}

func (x *WindowAggregation) GetAggregation() string {
	if x != nil {
		return x.Aggregation
	}
	return ""
}

func (x *WindowAggregation) GetAggregateOn() *FeatureReference {
	if x != nil {
		return x.AggregateOn
	}
	return nil
}

func (x *WindowAggregation) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

func (x *WindowAggregation) GetFilters() []*v1.LogicalExprNode {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *WindowAggregation) GetBackfillResolver() string {
	if x != nil && x.BackfillResolver != nil {
		return *x.BackfillResolver
	}
	return ""
}

func (x *WindowAggregation) GetBackfillLookbackDuration() *durationpb.Duration {
	if x != nil {
		return x.BackfillLookbackDuration
	}
	return nil
}

func (x *WindowAggregation) GetBackfillStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BackfillStartTime
	}
	return nil
}

func (x *WindowAggregation) GetContinuousResolver() string {
	if x != nil && x.ContinuousResolver != nil {
		return *x.ContinuousResolver
	}
	return ""
}

func (x *WindowAggregation) GetContinuousBufferDuration() *durationpb.Duration {
	if x != nil {
		return x.ContinuousBufferDuration
	}
	return nil
}

func (x *WindowAggregation) GetBackfillSchedule() string {
	if x != nil && x.BackfillSchedule != nil {
		return *x.BackfillSchedule
	}
	return ""
}

func (x *WindowAggregation) GetBucketStart() *timestamppb.Timestamp {
	if x != nil {
		return x.BucketStart
	}
	return nil
}

type WindowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration    *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Aggregation *WindowAggregation   `protobuf:"bytes,2,opt,name=aggregation,proto3,oneof" json:"aggregation,omitempty"`
}

func (x *WindowInfo) Reset() {
	*x = WindowInfo{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowInfo) ProtoMessage() {}

func (x *WindowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowInfo.ProtoReflect.Descriptor instead.
func (*WindowInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{14}
}

func (x *WindowInfo) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *WindowInfo) GetAggregation() *WindowAggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

type FeatureInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature      *FeatureReference `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	DefaultValue *v11.ScalarValue  `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *FeatureInput) Reset() {
	*x = FeatureInput{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureInput) ProtoMessage() {}

func (x *FeatureInput) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureInput.ProtoReflect.Descriptor instead.
func (*FeatureInput) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{15}
}

func (x *FeatureInput) GetFeature() *FeatureReference {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *FeatureInput) GetDefaultValue() *v11.ScalarValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

type ResolverInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Annotation:
	//
	//	*ResolverInput_Feature
	//	*ResolverInput_Df
	//	*ResolverInput_State
	Annotation isResolverInput_Annotation `protobuf_oneof:"annotation"`
}

func (x *ResolverInput) Reset() {
	*x = ResolverInput{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverInput) ProtoMessage() {}

func (x *ResolverInput) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverInput.ProtoReflect.Descriptor instead.
func (*ResolverInput) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{16}
}

func (m *ResolverInput) GetAnnotation() isResolverInput_Annotation {
	if m != nil {
		return m.Annotation
	}
	return nil
}

func (x *ResolverInput) GetFeature() *FeatureInput {
	if x, ok := x.GetAnnotation().(*ResolverInput_Feature); ok {
		return x.Feature
	}
	return nil
}

func (x *ResolverInput) GetDf() *DataFrameType {
	if x, ok := x.GetAnnotation().(*ResolverInput_Df); ok {
		return x.Df
	}
	return nil
}

func (x *ResolverInput) GetState() *ResolverState {
	if x, ok := x.GetAnnotation().(*ResolverInput_State); ok {
		return x.State
	}
	return nil
}

type isResolverInput_Annotation interface {
	isResolverInput_Annotation()
}

type ResolverInput_Feature struct {
	Feature *FeatureInput `protobuf:"bytes,1,opt,name=feature,proto3,oneof"`
}

type ResolverInput_Df struct {
	Df *DataFrameType `protobuf:"bytes,2,opt,name=df,proto3,oneof"`
}

type ResolverInput_State struct {
	State *ResolverState `protobuf:"bytes,3,opt,name=state,proto3,oneof"`
}

func (*ResolverInput_Feature) isResolverInput_Annotation() {}

func (*ResolverInput_Df) isResolverInput_Annotation() {}

func (*ResolverInput_State) isResolverInput_Annotation() {}

type ResolverOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Annotation:
	//
	//	*ResolverOutput_Feature
	//	*ResolverOutput_Df
	Annotation isResolverOutput_Annotation `protobuf_oneof:"annotation"`
}

func (x *ResolverOutput) Reset() {
	*x = ResolverOutput{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverOutput) ProtoMessage() {}

func (x *ResolverOutput) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverOutput.ProtoReflect.Descriptor instead.
func (*ResolverOutput) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{17}
}

func (m *ResolverOutput) GetAnnotation() isResolverOutput_Annotation {
	if m != nil {
		return m.Annotation
	}
	return nil
}

func (x *ResolverOutput) GetFeature() *FeatureReference {
	if x, ok := x.GetAnnotation().(*ResolverOutput_Feature); ok {
		return x.Feature
	}
	return nil
}

func (x *ResolverOutput) GetDf() *DataFrameType {
	if x, ok := x.GetAnnotation().(*ResolverOutput_Df); ok {
		return x.Df
	}
	return nil
}

type isResolverOutput_Annotation interface {
	isResolverOutput_Annotation()
}

type ResolverOutput_Feature struct {
	Feature *FeatureReference `protobuf:"bytes,1,opt,name=feature,proto3,oneof"`
}

type ResolverOutput_Df struct {
	Df *DataFrameType `protobuf:"bytes,2,opt,name=df,proto3,oneof"`
}

func (*ResolverOutput_Feature) isResolverOutput_Annotation() {}

func (*ResolverOutput_Df) isResolverOutput_Annotation() {}

type Resolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn         string            `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Kind        ResolverKind      `protobuf:"varint,2,opt,name=kind,proto3,enum=chalk.graph.v1.ResolverKind" json:"kind,omitempty"`
	Inputs      []*ResolverInput  `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs     []*ResolverOutput `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	IsGenerator bool              `protobuf:"varint,5,opt,name=is_generator,json=isGenerator,proto3" json:"is_generator,omitempty"`
	// data_sources is deprecated; see data_sources_v2
	//
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	DataSources []*DatabaseSourceReference `protobuf:"bytes,6,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	MachineType *string                    `protobuf:"bytes,7,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	Tags        []string                   `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Owner       *string                    `protobuf:"bytes,9,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The docstring of the python function
	Doc             *string                       `protobuf:"bytes,10,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	Environments    []string                      `protobuf:"bytes,11,rep,name=environments,proto3" json:"environments,omitempty"`
	TimeoutDuration *durationpb.Duration          `protobuf:"bytes,12,opt,name=timeout_duration,json=timeoutDuration,proto3" json:"timeout_duration,omitempty"`
	Schedule        *Schedule                     `protobuf:"bytes,13,opt,name=schedule,proto3" json:"schedule,omitempty"`
	When            *v1.LogicalExprNode           `protobuf:"bytes,14,opt,name=when,proto3" json:"when,omitempty"`
	CronFilter      *CronFilterWithFeatureArgs    `protobuf:"bytes,15,opt,name=cron_filter,json=cronFilter,proto3" json:"cron_filter,omitempty"`
	Function        *FunctionReference            `protobuf:"bytes,16,opt,name=function,proto3" json:"function,omitempty"`
	ResourceHint    ResourceHint                  `protobuf:"varint,17,opt,name=resource_hint,json=resourceHint,proto3,enum=chalk.graph.v1.ResourceHint" json:"resource_hint,omitempty"`
	IsStatic        bool                          `protobuf:"varint,18,opt,name=is_static,json=isStatic,proto3" json:"is_static,omitempty"`
	IsTotal         *bool                         `protobuf:"varint,19,opt,name=is_total,json=isTotal,proto3,oneof" json:"is_total,omitempty"`
	UniqueOn        []string                      `protobuf:"bytes,20,rep,name=unique_on,json=uniqueOn,proto3" json:"unique_on,omitempty"`
	PartitionedBy   []string                      `protobuf:"bytes,21,rep,name=partitioned_by,json=partitionedBy,proto3" json:"partitioned_by,omitempty"`
	DataSourcesV2   []*v2.DatabaseSourceReference `protobuf:"bytes,22,rep,name=data_sources_v2,json=dataSourcesV2,proto3" json:"data_sources_v2,omitempty"`
	StaticOperation *v1.LogicalExprNode           `protobuf:"bytes,23,opt,name=static_operation,json=staticOperation,proto3" json:"static_operation,omitempty"`
	SqlSettings     *SQLResolverSettings          `protobuf:"bytes,24,opt,name=sql_settings,json=sqlSettings,proto3,oneof" json:"sql_settings,omitempty"`
}

func (x *Resolver) Reset() {
	*x = Resolver{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolver) ProtoMessage() {}

func (x *Resolver) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolver.ProtoReflect.Descriptor instead.
func (*Resolver) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{18}
}

func (x *Resolver) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *Resolver) GetKind() ResolverKind {
	if x != nil {
		return x.Kind
	}
	return ResolverKind_RESOLVER_KIND_UNSPECIFIED
}

func (x *Resolver) GetInputs() []*ResolverInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Resolver) GetOutputs() []*ResolverOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Resolver) GetIsGenerator() bool {
	if x != nil {
		return x.IsGenerator
	}
	return false
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *Resolver) GetDataSources() []*DatabaseSourceReference {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *Resolver) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *Resolver) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Resolver) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *Resolver) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *Resolver) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *Resolver) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *Resolver) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Resolver) GetWhen() *v1.LogicalExprNode {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Resolver) GetCronFilter() *CronFilterWithFeatureArgs {
	if x != nil {
		return x.CronFilter
	}
	return nil
}

func (x *Resolver) GetFunction() *FunctionReference {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *Resolver) GetResourceHint() ResourceHint {
	if x != nil {
		return x.ResourceHint
	}
	return ResourceHint_RESOURCE_HINT_UNSPECIFIED
}

func (x *Resolver) GetIsStatic() bool {
	if x != nil {
		return x.IsStatic
	}
	return false
}

func (x *Resolver) GetIsTotal() bool {
	if x != nil && x.IsTotal != nil {
		return *x.IsTotal
	}
	return false
}

func (x *Resolver) GetUniqueOn() []string {
	if x != nil {
		return x.UniqueOn
	}
	return nil
}

func (x *Resolver) GetPartitionedBy() []string {
	if x != nil {
		return x.PartitionedBy
	}
	return nil
}

func (x *Resolver) GetDataSourcesV2() []*v2.DatabaseSourceReference {
	if x != nil {
		return x.DataSourcesV2
	}
	return nil
}

func (x *Resolver) GetStaticOperation() *v1.LogicalExprNode {
	if x != nil {
		return x.StaticOperation
	}
	return nil
}

func (x *Resolver) GetSqlSettings() *SQLResolverSettings {
	if x != nil {
		return x.SqlSettings
	}
	return nil
}

type SinkResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn              string               `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Inputs           []*ResolverInput     `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	BufferSize       *uint64              `protobuf:"varint,3,opt,name=buffer_size,json=bufferSize,proto3,oneof" json:"buffer_size,omitempty"`
	DebounceDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=debounce_duration,json=debounceDuration,proto3" json:"debounce_duration,omitempty"`
	MaxDelayDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=max_delay_duration,json=maxDelayDuration,proto3" json:"max_delay_duration,omitempty"`
	Upsert           bool                 `protobuf:"varint,6,opt,name=upsert,proto3" json:"upsert,omitempty"`
	// Types that are assignable to Integration:
	//
	//	*SinkResolver_StreamSource
	//	*SinkResolver_DatabaseSource
	//	*SinkResolver_StreamSourceV2
	//	*SinkResolver_DatabaseSourceV2
	Integration     isSinkResolver_Integration `protobuf_oneof:"integration"`
	MachineType     *string                    `protobuf:"bytes,9,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	Doc             *string                    `protobuf:"bytes,10,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	Owner           *string                    `protobuf:"bytes,11,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Environments    []string                   `protobuf:"bytes,12,rep,name=environments,proto3" json:"environments,omitempty"`
	TimeoutDuration *durationpb.Duration       `protobuf:"bytes,13,opt,name=timeout_duration,json=timeoutDuration,proto3" json:"timeout_duration,omitempty"`
	Function        *FunctionReference         `protobuf:"bytes,14,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *SinkResolver) Reset() {
	*x = SinkResolver{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinkResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkResolver) ProtoMessage() {}

func (x *SinkResolver) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkResolver.ProtoReflect.Descriptor instead.
func (*SinkResolver) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{19}
}

func (x *SinkResolver) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *SinkResolver) GetInputs() []*ResolverInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SinkResolver) GetBufferSize() uint64 {
	if x != nil && x.BufferSize != nil {
		return *x.BufferSize
	}
	return 0
}

func (x *SinkResolver) GetDebounceDuration() *durationpb.Duration {
	if x != nil {
		return x.DebounceDuration
	}
	return nil
}

func (x *SinkResolver) GetMaxDelayDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxDelayDuration
	}
	return nil
}

func (x *SinkResolver) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (m *SinkResolver) GetIntegration() isSinkResolver_Integration {
	if m != nil {
		return m.Integration
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *SinkResolver) GetStreamSource() *StreamSourceReference {
	if x, ok := x.GetIntegration().(*SinkResolver_StreamSource); ok {
		return x.StreamSource
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *SinkResolver) GetDatabaseSource() *DatabaseSourceReference {
	if x, ok := x.GetIntegration().(*SinkResolver_DatabaseSource); ok {
		return x.DatabaseSource
	}
	return nil
}

func (x *SinkResolver) GetStreamSourceV2() *v2.StreamSourceReference {
	if x, ok := x.GetIntegration().(*SinkResolver_StreamSourceV2); ok {
		return x.StreamSourceV2
	}
	return nil
}

func (x *SinkResolver) GetDatabaseSourceV2() *v2.DatabaseSourceReference {
	if x, ok := x.GetIntegration().(*SinkResolver_DatabaseSourceV2); ok {
		return x.DatabaseSourceV2
	}
	return nil
}

func (x *SinkResolver) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *SinkResolver) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *SinkResolver) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *SinkResolver) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *SinkResolver) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *SinkResolver) GetFunction() *FunctionReference {
	if x != nil {
		return x.Function
	}
	return nil
}

type isSinkResolver_Integration interface {
	isSinkResolver_Integration()
}

type SinkResolver_StreamSource struct {
	// stream_source is deprecated; see stream_source_v2
	//
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	StreamSource *StreamSourceReference `protobuf:"bytes,7,opt,name=stream_source,json=streamSource,proto3,oneof"`
}

type SinkResolver_DatabaseSource struct {
	// database_source is deprecated; see database_source_v2
	//
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	DatabaseSource *DatabaseSourceReference `protobuf:"bytes,8,opt,name=database_source,json=databaseSource,proto3,oneof"`
}

type SinkResolver_StreamSourceV2 struct {
	StreamSourceV2 *v2.StreamSourceReference `protobuf:"bytes,15,opt,name=stream_source_v2,json=streamSourceV2,proto3,oneof"`
}

type SinkResolver_DatabaseSourceV2 struct {
	DatabaseSourceV2 *v2.DatabaseSourceReference `protobuf:"bytes,16,opt,name=database_source_v2,json=databaseSourceV2,proto3,oneof"`
}

func (*SinkResolver_StreamSource) isSinkResolver_Integration() {}

func (*SinkResolver_DatabaseSource) isSinkResolver_Integration() {}

func (*SinkResolver_StreamSourceV2) isSinkResolver_Integration() {}

func (*SinkResolver_DatabaseSourceV2) isSinkResolver_Integration() {}

type ParseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParseFunction                 *FunctionReference `protobuf:"bytes,1,opt,name=parse_function,json=parseFunction,proto3" json:"parse_function,omitempty"`
	ParseFunctionInputType        *v11.ArrowType     `protobuf:"bytes,2,opt,name=parse_function_input_type,json=parseFunctionInputType,proto3" json:"parse_function_input_type,omitempty"`
	ParseFunctionOutputType       *v11.ArrowType     `protobuf:"bytes,3,opt,name=parse_function_output_type,json=parseFunctionOutputType,proto3" json:"parse_function_output_type,omitempty"`
	IsParseFunctionOutputOptional bool               `protobuf:"varint,4,opt,name=is_parse_function_output_optional,json=isParseFunctionOutputOptional,proto3" json:"is_parse_function_output_optional,omitempty"`
	// These are the `__name__` of the type of the parameter/return annotations.
	ParseFunctionInputTypeName  string `protobuf:"bytes,5,opt,name=parse_function_input_type_name,json=parseFunctionInputTypeName,proto3" json:"parse_function_input_type_name,omitempty"`
	ParseFunctionOutputTypeName string `protobuf:"bytes,6,opt,name=parse_function_output_type_name,json=parseFunctionOutputTypeName,proto3" json:"parse_function_output_type_name,omitempty"`
}

func (x *ParseInfo) Reset() {
	*x = ParseInfo{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseInfo) ProtoMessage() {}

func (x *ParseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseInfo.ProtoReflect.Descriptor instead.
func (*ParseInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{20}
}

func (x *ParseInfo) GetParseFunction() *FunctionReference {
	if x != nil {
		return x.ParseFunction
	}
	return nil
}

func (x *ParseInfo) GetParseFunctionInputType() *v11.ArrowType {
	if x != nil {
		return x.ParseFunctionInputType
	}
	return nil
}

func (x *ParseInfo) GetParseFunctionOutputType() *v11.ArrowType {
	if x != nil {
		return x.ParseFunctionOutputType
	}
	return nil
}

func (x *ParseInfo) GetIsParseFunctionOutputOptional() bool {
	if x != nil {
		return x.IsParseFunctionOutputOptional
	}
	return false
}

func (x *ParseInfo) GetParseFunctionInputTypeName() string {
	if x != nil {
		return x.ParseFunctionInputTypeName
	}
	return ""
}

func (x *ParseInfo) GetParseFunctionOutputTypeName() string {
	if x != nil {
		return x.ParseFunctionOutputTypeName
	}
	return ""
}

type StreamResolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn            string                 `protobuf:"bytes,1,opt,name=fqn,proto3" json:"fqn,omitempty"`
	Params         []*StreamResolverParam `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	Outputs        []*ResolverOutput      `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	ExplicitSchema *v11.ArrowType         `protobuf:"bytes,4,opt,name=explicit_schema,json=explicitSchema,proto3" json:"explicit_schema,omitempty"`
	Keys           []*StreamKey           `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	Source                          *StreamSourceReference    `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	ParseInfo                       *ParseInfo                `protobuf:"bytes,7,opt,name=parse_info,json=parseInfo,proto3" json:"parse_info,omitempty"`
	Mode                            WindowMode                `protobuf:"varint,8,opt,name=mode,proto3,enum=chalk.graph.v1.WindowMode" json:"mode,omitempty"`
	Environments                    []string                  `protobuf:"bytes,9,rep,name=environments,proto3" json:"environments,omitempty"`
	TimeoutDuration                 *durationpb.Duration      `protobuf:"bytes,10,opt,name=timeout_duration,json=timeoutDuration,proto3" json:"timeout_duration,omitempty"`
	TimestampAttributeName          *string                   `protobuf:"bytes,11,opt,name=timestamp_attribute_name,json=timestampAttributeName,proto3,oneof" json:"timestamp_attribute_name,omitempty"`
	Owner                           *string                   `protobuf:"bytes,12,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Doc                             *string                   `protobuf:"bytes,13,opt,name=doc,proto3,oneof" json:"doc,omitempty"`
	MachineType                     *string                   `protobuf:"bytes,14,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	Function                        *FunctionReference        `protobuf:"bytes,15,opt,name=function,proto3" json:"function,omitempty"`
	SourceV2                        *v2.StreamSourceReference `protobuf:"bytes,16,opt,name=source_v2,json=sourceV2,proto3" json:"source_v2,omitempty"`
	UpdatesMaterializedAggregations bool                      `protobuf:"varint,17,opt,name=updates_materialized_aggregations,json=updatesMaterializedAggregations,proto3" json:"updates_materialized_aggregations,omitempty"`
}

func (x *StreamResolver) Reset() {
	*x = StreamResolver{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolver) ProtoMessage() {}

func (x *StreamResolver) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolver.ProtoReflect.Descriptor instead.
func (*StreamResolver) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{21}
}

func (x *StreamResolver) GetFqn() string {
	if x != nil {
		return x.Fqn
	}
	return ""
}

func (x *StreamResolver) GetParams() []*StreamResolverParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *StreamResolver) GetOutputs() []*ResolverOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *StreamResolver) GetExplicitSchema() *v11.ArrowType {
	if x != nil {
		return x.ExplicitSchema
	}
	return nil
}

func (x *StreamResolver) GetKeys() []*StreamKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *StreamResolver) GetSource() *StreamSourceReference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *StreamResolver) GetParseInfo() *ParseInfo {
	if x != nil {
		return x.ParseInfo
	}
	return nil
}

func (x *StreamResolver) GetMode() WindowMode {
	if x != nil {
		return x.Mode
	}
	return WindowMode_WINDOW_MODE_UNSPECIFIED
}

func (x *StreamResolver) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *StreamResolver) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *StreamResolver) GetTimestampAttributeName() string {
	if x != nil && x.TimestampAttributeName != nil {
		return *x.TimestampAttributeName
	}
	return ""
}

func (x *StreamResolver) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *StreamResolver) GetDoc() string {
	if x != nil && x.Doc != nil {
		return *x.Doc
	}
	return ""
}

func (x *StreamResolver) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *StreamResolver) GetFunction() *FunctionReference {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *StreamResolver) GetSourceV2() *v2.StreamSourceReference {
	if x != nil {
		return x.SourceV2
	}
	return nil
}

func (x *StreamResolver) GetUpdatesMaterializedAggregations() bool {
	if x != nil {
		return x.UpdatesMaterializedAggregations
	}
	return false
}

type ResolverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initial   *v11.ScalarValue `protobuf:"bytes,1,opt,name=initial,proto3" json:"initial,omitempty"`
	ArrowType *v11.ArrowType   `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *ResolverState) Reset() {
	*x = ResolverState{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverState) ProtoMessage() {}

func (x *ResolverState) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverState.ProtoReflect.Descriptor instead.
func (*ResolverState) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{22}
}

func (x *ResolverState) GetInitial() *v11.ScalarValue {
	if x != nil {
		return x.Initial
	}
	return nil
}

func (x *ResolverState) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type StreamResolverParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamResolverParam_Message
	//	*StreamResolverParam_MessageWindow
	//	*StreamResolverParam_State
	Type isStreamResolverParam_Type `protobuf_oneof:"type"`
}

func (x *StreamResolverParam) Reset() {
	*x = StreamResolverParam{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResolverParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolverParam) ProtoMessage() {}

func (x *StreamResolverParam) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolverParam.ProtoReflect.Descriptor instead.
func (*StreamResolverParam) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{23}
}

func (m *StreamResolverParam) GetType() isStreamResolverParam_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamResolverParam) GetMessage() *StreamResolverParamMessage {
	if x, ok := x.GetType().(*StreamResolverParam_Message); ok {
		return x.Message
	}
	return nil
}

func (x *StreamResolverParam) GetMessageWindow() *StreamResolverParamMessageWindow {
	if x, ok := x.GetType().(*StreamResolverParam_MessageWindow); ok {
		return x.MessageWindow
	}
	return nil
}

func (x *StreamResolverParam) GetState() *ResolverState {
	if x, ok := x.GetType().(*StreamResolverParam_State); ok {
		return x.State
	}
	return nil
}

type isStreamResolverParam_Type interface {
	isStreamResolverParam_Type()
}

type StreamResolverParam_Message struct {
	Message *StreamResolverParamMessage `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type StreamResolverParam_MessageWindow struct {
	MessageWindow *StreamResolverParamMessageWindow `protobuf:"bytes,2,opt,name=message_window,json=messageWindow,proto3,oneof"`
}

type StreamResolverParam_State struct {
	State *ResolverState `protobuf:"bytes,3,opt,name=state,proto3,oneof"`
}

func (*StreamResolverParam_Message) isStreamResolverParam_Type() {}

func (*StreamResolverParam_MessageWindow) isStreamResolverParam_Type() {}

func (*StreamResolverParam_State) isStreamResolverParam_Type() {}

type StreamResolverParamMessageWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArrowType *v11.ArrowType `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *StreamResolverParamMessageWindow) Reset() {
	*x = StreamResolverParamMessageWindow{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResolverParamMessageWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolverParamMessageWindow) ProtoMessage() {}

func (x *StreamResolverParamMessageWindow) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolverParamMessageWindow.ProtoReflect.Descriptor instead.
func (*StreamResolverParamMessageWindow) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{24}
}

func (x *StreamResolverParamMessageWindow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamResolverParamMessageWindow) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type StreamResolverParamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArrowType *v11.ArrowType `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
}

func (x *StreamResolverParamMessage) Reset() {
	*x = StreamResolverParamMessage{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResolverParamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResolverParamMessage) ProtoMessage() {}

func (x *StreamResolverParamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResolverParamMessage.ProtoReflect.Descriptor instead.
func (*StreamResolverParamMessage) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{25}
}

func (x *StreamResolverParamMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamResolverParamMessage) GetArrowType() *v11.ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

type FunctionReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Module             string                             `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	FileName           string                             `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FunctionDefinition string                             `protobuf:"bytes,4,opt,name=function_definition,json=functionDefinition,proto3" json:"function_definition,omitempty"`
	SourceLine         *int32                             `protobuf:"varint,5,opt,name=source_line,json=sourceLine,proto3,oneof" json:"source_line,omitempty"`
	CapturedGlobals    []*FunctionReferenceCapturedGlobal `protobuf:"bytes,6,rep,name=captured_globals,json=capturedGlobals,proto3" json:"captured_globals,omitempty"`
}

func (x *FunctionReference) Reset() {
	*x = FunctionReference{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionReference) ProtoMessage() {}

func (x *FunctionReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionReference.ProtoReflect.Descriptor instead.
func (*FunctionReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{26}
}

func (x *FunctionReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionReference) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FunctionReference) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FunctionReference) GetFunctionDefinition() string {
	if x != nil {
		return x.FunctionDefinition
	}
	return ""
}

func (x *FunctionReference) GetSourceLine() int32 {
	if x != nil && x.SourceLine != nil {
		return *x.SourceLine
	}
	return 0
}

func (x *FunctionReference) GetCapturedGlobals() []*FunctionReferenceCapturedGlobal {
	if x != nil {
		return x.CapturedGlobals
	}
	return nil
}

type FunctionReferenceCapturedGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalName string `protobuf:"bytes,3,opt,name=global_name,json=globalName,proto3" json:"global_name,omitempty"`
	// Types that are assignable to CapturedGlobal:
	//
	//	*FunctionReferenceCapturedGlobal_Builtin
	//	*FunctionReferenceCapturedGlobal_FeatureClass
	//	*FunctionReferenceCapturedGlobal_Enum
	//	*FunctionReferenceCapturedGlobal_Module
	//	*FunctionReferenceCapturedGlobal_ModuleMember
	//	*FunctionReferenceCapturedGlobal_Function
	//	*FunctionReferenceCapturedGlobal_Struct
	//	*FunctionReferenceCapturedGlobal_Variable
	//	*FunctionReferenceCapturedGlobal_Proto
	CapturedGlobal  isFunctionReferenceCapturedGlobal_CapturedGlobal `protobuf_oneof:"captured_global"`
	SourceReference *SourceFileReference                             `protobuf:"bytes,9,opt,name=source_reference,json=sourceReference,proto3,oneof" json:"source_reference,omitempty"`
}

func (x *FunctionReferenceCapturedGlobal) Reset() {
	*x = FunctionReferenceCapturedGlobal{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionReferenceCapturedGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionReferenceCapturedGlobal) ProtoMessage() {}

func (x *FunctionReferenceCapturedGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionReferenceCapturedGlobal.ProtoReflect.Descriptor instead.
func (*FunctionReferenceCapturedGlobal) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{27}
}

func (x *FunctionReferenceCapturedGlobal) GetGlobalName() string {
	if x != nil {
		return x.GlobalName
	}
	return ""
}

func (m *FunctionReferenceCapturedGlobal) GetCapturedGlobal() isFunctionReferenceCapturedGlobal_CapturedGlobal {
	if m != nil {
		return m.CapturedGlobal
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetBuiltin() *FunctionGlobalCapturedBuiltin {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_Builtin); ok {
		return x.Builtin
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetFeatureClass() *FunctionGlobalCapturedFeatureClass {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_FeatureClass); ok {
		return x.FeatureClass
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetEnum() *FunctionGlobalCapturedEnum {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetModule() *FunctionGlobalCapturedModule {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_Module); ok {
		return x.Module
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetModuleMember() *FunctionGlobalCapturedModuleMember {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_ModuleMember); ok {
		return x.ModuleMember
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetFunction() *FunctionGlobalCapturedFunction {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_Function); ok {
		return x.Function
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetStruct() *FunctionGlobalCapturedStruct {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetVariable() *FunctionGlobalCapturedVariable {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_Variable); ok {
		return x.Variable
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetProto() *FunctionGlobalCapturedProto {
	if x, ok := x.GetCapturedGlobal().(*FunctionReferenceCapturedGlobal_Proto); ok {
		return x.Proto
	}
	return nil
}

func (x *FunctionReferenceCapturedGlobal) GetSourceReference() *SourceFileReference {
	if x != nil {
		return x.SourceReference
	}
	return nil
}

type isFunctionReferenceCapturedGlobal_CapturedGlobal interface {
	isFunctionReferenceCapturedGlobal_CapturedGlobal()
}

type FunctionReferenceCapturedGlobal_Builtin struct {
	Builtin *FunctionGlobalCapturedBuiltin `protobuf:"bytes,1,opt,name=builtin,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_FeatureClass struct {
	FeatureClass *FunctionGlobalCapturedFeatureClass `protobuf:"bytes,2,opt,name=feature_class,json=featureClass,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_Enum struct {
	Enum *FunctionGlobalCapturedEnum `protobuf:"bytes,4,opt,name=enum,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_Module struct {
	Module *FunctionGlobalCapturedModule `protobuf:"bytes,5,opt,name=module,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_ModuleMember struct {
	ModuleMember *FunctionGlobalCapturedModuleMember `protobuf:"bytes,7,opt,name=module_member,json=moduleMember,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_Function struct {
	Function *FunctionGlobalCapturedFunction `protobuf:"bytes,6,opt,name=function,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_Struct struct {
	Struct *FunctionGlobalCapturedStruct `protobuf:"bytes,8,opt,name=struct,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_Variable struct {
	Variable *FunctionGlobalCapturedVariable `protobuf:"bytes,10,opt,name=variable,proto3,oneof"`
}

type FunctionReferenceCapturedGlobal_Proto struct {
	Proto *FunctionGlobalCapturedProto `protobuf:"bytes,11,opt,name=proto,proto3,oneof"`
}

func (*FunctionReferenceCapturedGlobal_Builtin) isFunctionReferenceCapturedGlobal_CapturedGlobal() {}

func (*FunctionReferenceCapturedGlobal_FeatureClass) isFunctionReferenceCapturedGlobal_CapturedGlobal() {
}

func (*FunctionReferenceCapturedGlobal_Enum) isFunctionReferenceCapturedGlobal_CapturedGlobal() {}

func (*FunctionReferenceCapturedGlobal_Module) isFunctionReferenceCapturedGlobal_CapturedGlobal() {}

func (*FunctionReferenceCapturedGlobal_ModuleMember) isFunctionReferenceCapturedGlobal_CapturedGlobal() {
}

func (*FunctionReferenceCapturedGlobal_Function) isFunctionReferenceCapturedGlobal_CapturedGlobal() {}

func (*FunctionReferenceCapturedGlobal_Struct) isFunctionReferenceCapturedGlobal_CapturedGlobal() {}

func (*FunctionReferenceCapturedGlobal_Variable) isFunctionReferenceCapturedGlobal_CapturedGlobal() {}

func (*FunctionReferenceCapturedGlobal_Proto) isFunctionReferenceCapturedGlobal_CapturedGlobal() {}

type FunctionGlobalCapturedBuiltin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuiltinName string `protobuf:"bytes,1,opt,name=builtin_name,json=builtinName,proto3" json:"builtin_name,omitempty"`
}

func (x *FunctionGlobalCapturedBuiltin) Reset() {
	*x = FunctionGlobalCapturedBuiltin{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedBuiltin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedBuiltin) ProtoMessage() {}

func (x *FunctionGlobalCapturedBuiltin) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedBuiltin.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedBuiltin) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{28}
}

func (x *FunctionGlobalCapturedBuiltin) GetBuiltinName() string {
	if x != nil {
		return x.BuiltinName
	}
	return ""
}

type FunctionGlobalCapturedVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FunctionGlobalCapturedVariable) Reset() {
	*x = FunctionGlobalCapturedVariable{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedVariable) ProtoMessage() {}

func (x *FunctionGlobalCapturedVariable) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedVariable.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedVariable) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{29}
}

func (x *FunctionGlobalCapturedVariable) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FunctionGlobalCapturedVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FunctionGlobalCapturedStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module  string         `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Name    string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PaDtype *v11.ArrowType `protobuf:"bytes,3,opt,name=pa_dtype,json=paDtype,proto3" json:"pa_dtype,omitempty"`
}

func (x *FunctionGlobalCapturedStruct) Reset() {
	*x = FunctionGlobalCapturedStruct{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedStruct) ProtoMessage() {}

func (x *FunctionGlobalCapturedStruct) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedStruct.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedStruct) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{30}
}

func (x *FunctionGlobalCapturedStruct) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FunctionGlobalCapturedStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionGlobalCapturedStruct) GetPaDtype() *v11.ArrowType {
	if x != nil {
		return x.PaDtype
	}
	return nil
}

type FunctionGlobalCapturedEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module    string                      `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Name      string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MemberMap map[string]*v11.ScalarValue `protobuf:"bytes,3,rep,name=member_map,json=memberMap,proto3" json:"member_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bases     []*v11.ArrowType            `protobuf:"bytes,4,rep,name=bases,proto3" json:"bases,omitempty"`
}

func (x *FunctionGlobalCapturedEnum) Reset() {
	*x = FunctionGlobalCapturedEnum{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedEnum) ProtoMessage() {}

func (x *FunctionGlobalCapturedEnum) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedEnum.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedEnum) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{31}
}

func (x *FunctionGlobalCapturedEnum) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FunctionGlobalCapturedEnum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionGlobalCapturedEnum) GetMemberMap() map[string]*v11.ScalarValue {
	if x != nil {
		return x.MemberMap
	}
	return nil
}

func (x *FunctionGlobalCapturedEnum) GetBases() []*v11.ArrowType {
	if x != nil {
		return x.Bases
	}
	return nil
}

type FunctionGlobalCapturedFeatureClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureClassName string `protobuf:"bytes,1,opt,name=feature_class_name,json=featureClassName,proto3" json:"feature_class_name,omitempty"`
}

func (x *FunctionGlobalCapturedFeatureClass) Reset() {
	*x = FunctionGlobalCapturedFeatureClass{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedFeatureClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedFeatureClass) ProtoMessage() {}

func (x *FunctionGlobalCapturedFeatureClass) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedFeatureClass.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedFeatureClass) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{32}
}

func (x *FunctionGlobalCapturedFeatureClass) GetFeatureClassName() string {
	if x != nil {
		return x.FeatureClassName
	}
	return ""
}

type FunctionGlobalCapturedModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FunctionGlobalCapturedModule) Reset() {
	*x = FunctionGlobalCapturedModule{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedModule) ProtoMessage() {}

func (x *FunctionGlobalCapturedModule) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedModule.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedModule) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{33}
}

func (x *FunctionGlobalCapturedModule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FunctionGlobalCapturedModuleMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Imported classes/functions, e.g. json.encoder.JSONEncoder
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"` // name of the module, e.g. `json.encoder`
	Qualname   string `protobuf:"bytes,2,opt,name=qualname,proto3" json:"qualname,omitempty"`                       // name of the class or function, e.g. `JSONEncoder``. Not present for modules.
}

func (x *FunctionGlobalCapturedModuleMember) Reset() {
	*x = FunctionGlobalCapturedModuleMember{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedModuleMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedModuleMember) ProtoMessage() {}

func (x *FunctionGlobalCapturedModuleMember) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedModuleMember.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedModuleMember) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{34}
}

func (x *FunctionGlobalCapturedModuleMember) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *FunctionGlobalCapturedModuleMember) GetQualname() string {
	if x != nil {
		return x.Qualname
	}
	return ""
}

type FunctionGlobalCapturedFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          string                             `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	CapturedGlobals []*FunctionReferenceCapturedGlobal `protobuf:"bytes,2,rep,name=captured_globals,json=capturedGlobals,proto3" json:"captured_globals,omitempty"`
	Module          *string                            `protobuf:"bytes,3,opt,name=module,proto3,oneof" json:"module,omitempty"`
	Name            string                             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FunctionGlobalCapturedFunction) Reset() {
	*x = FunctionGlobalCapturedFunction{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedFunction) ProtoMessage() {}

func (x *FunctionGlobalCapturedFunction) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedFunction.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedFunction) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{35}
}

func (x *FunctionGlobalCapturedFunction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *FunctionGlobalCapturedFunction) GetCapturedGlobals() []*FunctionReferenceCapturedGlobal {
	if x != nil {
		return x.CapturedGlobals
	}
	return nil
}

func (x *FunctionGlobalCapturedFunction) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

func (x *FunctionGlobalCapturedFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FunctionGlobalCapturedProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	Fd           []byte         `protobuf:"bytes,3,opt,name=fd,proto3" json:"fd,omitempty"`
	SerializedFd []byte         `protobuf:"bytes,6,opt,name=serialized_fd,json=serializedFd,proto3" json:"serialized_fd,omitempty"`
	PaDtype      *v11.ArrowType `protobuf:"bytes,4,opt,name=pa_dtype,json=paDtype,proto3" json:"pa_dtype,omitempty"`
	FullName     string         `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (x *FunctionGlobalCapturedProto) Reset() {
	*x = FunctionGlobalCapturedProto{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGlobalCapturedProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGlobalCapturedProto) ProtoMessage() {}

func (x *FunctionGlobalCapturedProto) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGlobalCapturedProto.ProtoReflect.Descriptor instead.
func (*FunctionGlobalCapturedProto) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{36}
}

func (x *FunctionGlobalCapturedProto) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FunctionGlobalCapturedProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *FunctionGlobalCapturedProto) GetFd() []byte {
	if x != nil {
		return x.Fd
	}
	return nil
}

func (x *FunctionGlobalCapturedProto) GetSerializedFd() []byte {
	if x != nil {
		return x.SerializedFd
	}
	return nil
}

func (x *FunctionGlobalCapturedProto) GetPaDtype() *v11.ArrowType {
	if x != nil {
		return x.PaDtype
	}
	return nil
}

func (x *FunctionGlobalCapturedProto) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type SourceFileReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range    *v12.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Code     *string    `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	FileName string     `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *SourceFileReference) Reset() {
	*x = SourceFileReference{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceFileReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceFileReference) ProtoMessage() {}

func (x *SourceFileReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceFileReference.ProtoReflect.Descriptor instead.
func (*SourceFileReference) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{37}
}

func (x *SourceFileReference) GetRange() *v12.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SourceFileReference) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *SourceFileReference) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type StreamKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Feature *FeatureReference `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *StreamKey) Reset() {
	*x = StreamKey{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamKey) ProtoMessage() {}

func (x *StreamKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamKey.ProtoReflect.Descriptor instead.
func (*StreamKey) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{38}
}

func (x *StreamKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StreamKey) GetFeature() *FeatureReference {
	if x != nil {
		return x.Feature
	}
	return nil
}

type SQLResolverSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Finalizer             Finalizer            `protobuf:"varint,1,opt,name=finalizer,proto3,enum=chalk.graph.v1.Finalizer" json:"finalizer,omitempty"`
	IncrementalSettings   *IncrementalSettings `protobuf:"bytes,2,opt,name=incremental_settings,json=incrementalSettings,proto3,oneof" json:"incremental_settings,omitempty"`
	FieldsRootFqn         map[string]string    `protobuf:"bytes,3,rep,name=fields_root_fqn,json=fieldsRootFqn,proto3" json:"fields_root_fqn,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EscapedParamNameToFqn map[string]string    `protobuf:"bytes,4,rep,name=escaped_param_name_to_fqn,json=escapedParamNameToFqn,proto3" json:"escaped_param_name_to_fqn,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SQLResolverSettings) Reset() {
	*x = SQLResolverSettings{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLResolverSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLResolverSettings) ProtoMessage() {}

func (x *SQLResolverSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLResolverSettings.ProtoReflect.Descriptor instead.
func (*SQLResolverSettings) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{39}
}

func (x *SQLResolverSettings) GetFinalizer() Finalizer {
	if x != nil {
		return x.Finalizer
	}
	return Finalizer_FINALIZER_UNSPECIFIED
}

func (x *SQLResolverSettings) GetIncrementalSettings() *IncrementalSettings {
	if x != nil {
		return x.IncrementalSettings
	}
	return nil
}

func (x *SQLResolverSettings) GetFieldsRootFqn() map[string]string {
	if x != nil {
		return x.FieldsRootFqn
	}
	return nil
}

func (x *SQLResolverSettings) GetEscapedParamNameToFqn() map[string]string {
	if x != nil {
		return x.EscapedParamNameToFqn
	}
	return nil
}

type IncrementalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode              IncrementalMode          `protobuf:"varint,1,opt,name=mode,proto3,enum=chalk.graph.v1.IncrementalMode" json:"mode,omitempty"`
	LookbackPeriod    *durationpb.Duration     `protobuf:"bytes,2,opt,name=lookback_period,json=lookbackPeriod,proto3,oneof" json:"lookback_period,omitempty"`
	IncrementalColumn *string                  `protobuf:"bytes,3,opt,name=incremental_column,json=incrementalColumn,proto3,oneof" json:"incremental_column,omitempty"`
	TimestampMode     IncrementalTimestampMode `protobuf:"varint,4,opt,name=timestamp_mode,json=timestampMode,proto3,enum=chalk.graph.v1.IncrementalTimestampMode" json:"timestamp_mode,omitempty"`
}

func (x *IncrementalSettings) Reset() {
	*x = IncrementalSettings{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncrementalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementalSettings) ProtoMessage() {}

func (x *IncrementalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementalSettings.ProtoReflect.Descriptor instead.
func (*IncrementalSettings) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{40}
}

func (x *IncrementalSettings) GetMode() IncrementalMode {
	if x != nil {
		return x.Mode
	}
	return IncrementalMode_INCREMENTAL_MODE_UNSPECIFIED
}

func (x *IncrementalSettings) GetLookbackPeriod() *durationpb.Duration {
	if x != nil {
		return x.LookbackPeriod
	}
	return nil
}

func (x *IncrementalSettings) GetIncrementalColumn() string {
	if x != nil && x.IncrementalColumn != nil {
		return *x.IncrementalColumn
	}
	return ""
}

func (x *IncrementalSettings) GetTimestampMode() IncrementalTimestampMode {
	if x != nil {
		return x.TimestampMode
	}
	return IncrementalTimestampMode_INCREMENTAL_TIMESTAMP_MODE_UNSPECIFIED
}

type SQLResolverCommentDict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         *bool                `protobuf:"varint,1,opt,name=total,proto3,oneof" json:"total,omitempty"`
	Source        *string              `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Resolves      *string              `protobuf:"bytes,3,opt,name=resolves,proto3,oneof" json:"resolves,omitempty"`
	Namespace     *string              `protobuf:"bytes,4,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	Incremental   *IncrementalSettings `protobuf:"bytes,5,opt,name=incremental,proto3,oneof" json:"incremental,omitempty"`
	Tags          []string             `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Environment   []string             `protobuf:"bytes,7,rep,name=environment,proto3" json:"environment,omitempty"`
	Count         *Finalizer           `protobuf:"varint,8,opt,name=count,proto3,enum=chalk.graph.v1.Finalizer,oneof" json:"count,omitempty"`
	Cron          *Schedule            `protobuf:"bytes,9,opt,name=cron,proto3,oneof" json:"cron,omitempty"`
	MachineType   *string              `protobuf:"bytes,10,opt,name=machine_type,json=machineType,proto3,oneof" json:"machine_type,omitempty"`
	Owner         *string              `protobuf:"bytes,11,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Type          *string              `protobuf:"bytes,12,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Timeout       *string              `protobuf:"bytes,13,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	Fields        map[string]string    `protobuf:"bytes,14,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UniqueOn      []string             `protobuf:"bytes,15,rep,name=unique_on,json=uniqueOn,proto3" json:"unique_on,omitempty"`
	PartitionedBy []string             `protobuf:"bytes,16,rep,name=partitioned_by,json=partitionedBy,proto3" json:"partitioned_by,omitempty"`
}

func (x *SQLResolverCommentDict) Reset() {
	*x = SQLResolverCommentDict{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLResolverCommentDict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLResolverCommentDict) ProtoMessage() {}

func (x *SQLResolverCommentDict) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLResolverCommentDict.ProtoReflect.Descriptor instead.
func (*SQLResolverCommentDict) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{41}
}

func (x *SQLResolverCommentDict) GetTotal() bool {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return false
}

func (x *SQLResolverCommentDict) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *SQLResolverCommentDict) GetResolves() string {
	if x != nil && x.Resolves != nil {
		return *x.Resolves
	}
	return ""
}

func (x *SQLResolverCommentDict) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *SQLResolverCommentDict) GetIncremental() *IncrementalSettings {
	if x != nil {
		return x.Incremental
	}
	return nil
}

func (x *SQLResolverCommentDict) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SQLResolverCommentDict) GetEnvironment() []string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *SQLResolverCommentDict) GetCount() Finalizer {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Finalizer_FINALIZER_UNSPECIFIED
}

func (x *SQLResolverCommentDict) GetCron() *Schedule {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *SQLResolverCommentDict) GetMachineType() string {
	if x != nil && x.MachineType != nil {
		return *x.MachineType
	}
	return ""
}

func (x *SQLResolverCommentDict) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *SQLResolverCommentDict) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *SQLResolverCommentDict) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *SQLResolverCommentDict) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SQLResolverCommentDict) GetUniqueOn() []string {
	if x != nil {
		return x.UniqueOn
	}
	return nil
}

func (x *SQLResolverCommentDict) GetPartitionedBy() []string {
	if x != nil {
		return x.PartitionedBy
	}
	return nil
}

type SQLResolverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resolver name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Filepath of the resolver, or None if it doesn't come from a file in the deployment.
	Filepath *string `protobuf:"bytes,2,opt,name=filepath,proto3,oneof" json:"filepath,omitempty"`
	// Source of the SQL query
	SqlString string `protobuf:"bytes,3,opt,name=sql_string,json=sqlString,proto3" json:"sql_string,omitempty"`
	// This overrides any comments present in the sql string itself (e.g. `-- tags: a,b,...`)
	OverrideCommentDict *SQLResolverCommentDict `protobuf:"bytes,4,opt,name=override_comment_dict,json=overrideCommentDict,proto3,oneof" json:"override_comment_dict,omitempty"`
}

func (x *SQLResolverInfo) Reset() {
	*x = SQLResolverInfo{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLResolverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLResolverInfo) ProtoMessage() {}

func (x *SQLResolverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLResolverInfo.ProtoReflect.Descriptor instead.
func (*SQLResolverInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{42}
}

func (x *SQLResolverInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLResolverInfo) GetFilepath() string {
	if x != nil && x.Filepath != nil {
		return *x.Filepath
	}
	return ""
}

func (x *SQLResolverInfo) GetSqlString() string {
	if x != nil {
		return x.SqlString
	}
	return ""
}

func (x *SQLResolverInfo) GetOverrideCommentDict() *SQLResolverCommentDict {
	if x != nil {
		return x.OverrideCommentDict
	}
	return nil
}

type CronFilterWithFeatureArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *FunctionReference  `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Args   []*FeatureReference `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *CronFilterWithFeatureArgs) Reset() {
	*x = CronFilterWithFeatureArgs{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronFilterWithFeatureArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronFilterWithFeatureArgs) ProtoMessage() {}

func (x *CronFilterWithFeatureArgs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronFilterWithFeatureArgs.ProtoReflect.Descriptor instead.
func (*CronFilterWithFeatureArgs) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{43}
}

func (x *CronFilterWithFeatureArgs) GetFilter() *FunctionReference {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CronFilterWithFeatureArgs) GetArgs() []*FeatureReference {
	if x != nil {
		return x.Args
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Schedule:
	//
	//	*Schedule_Crontab
	//	*Schedule_Duration
	Schedule isSchedule_Schedule `protobuf_oneof:"schedule"`
	Filter   *FunctionReference  `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Sample   *FunctionReference  `protobuf:"bytes,4,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{44}
}

func (m *Schedule) GetSchedule() isSchedule_Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (x *Schedule) GetCrontab() string {
	if x, ok := x.GetSchedule().(*Schedule_Crontab); ok {
		return x.Crontab
	}
	return ""
}

func (x *Schedule) GetDuration() *durationpb.Duration {
	if x, ok := x.GetSchedule().(*Schedule_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Schedule) GetFilter() *FunctionReference {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Schedule) GetSample() *FunctionReference {
	if x != nil {
		return x.Sample
	}
	return nil
}

type isSchedule_Schedule interface {
	isSchedule_Schedule()
}

type Schedule_Crontab struct {
	Crontab string `protobuf:"bytes,1,opt,name=crontab,proto3,oneof"`
}

type Schedule_Duration struct {
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*Schedule_Crontab) isSchedule_Schedule() {}

func (*Schedule_Duration) isSchedule_Schedule() {}

type FeatureValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Validation:
	//
	//	*FeatureValidation_Min
	//	*FeatureValidation_Max
	//	*FeatureValidation_MinLength
	//	*FeatureValidation_MaxLength
	//	*FeatureValidation_MinArrow
	//	*FeatureValidation_MaxArrow
	//	*FeatureValidation_MinLengthArrow
	//	*FeatureValidation_MaxLengthArrow
	//	*FeatureValidation_Contains
	Validation isFeatureValidation_Validation `protobuf_oneof:"validation"`
	Strict     bool                           `protobuf:"varint,5,opt,name=strict,proto3" json:"strict,omitempty"`
}

func (x *FeatureValidation) Reset() {
	*x = FeatureValidation{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureValidation) ProtoMessage() {}

func (x *FeatureValidation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureValidation.ProtoReflect.Descriptor instead.
func (*FeatureValidation) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{45}
}

func (m *FeatureValidation) GetValidation() isFeatureValidation_Validation {
	if m != nil {
		return m.Validation
	}
	return nil
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *FeatureValidation) GetMin() float32 {
	if x, ok := x.GetValidation().(*FeatureValidation_Min); ok {
		return x.Min
	}
	return 0
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *FeatureValidation) GetMax() float32 {
	if x, ok := x.GetValidation().(*FeatureValidation_Max); ok {
		return x.Max
	}
	return 0
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *FeatureValidation) GetMinLength() uint32 {
	if x, ok := x.GetValidation().(*FeatureValidation_MinLength); ok {
		return x.MinLength
	}
	return 0
}

// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
func (x *FeatureValidation) GetMaxLength() uint32 {
	if x, ok := x.GetValidation().(*FeatureValidation_MaxLength); ok {
		return x.MaxLength
	}
	return 0
}

func (x *FeatureValidation) GetMinArrow() *v11.ScalarValue {
	if x, ok := x.GetValidation().(*FeatureValidation_MinArrow); ok {
		return x.MinArrow
	}
	return nil
}

func (x *FeatureValidation) GetMaxArrow() *v11.ScalarValue {
	if x, ok := x.GetValidation().(*FeatureValidation_MaxArrow); ok {
		return x.MaxArrow
	}
	return nil
}

func (x *FeatureValidation) GetMinLengthArrow() *v11.ScalarValue {
	if x, ok := x.GetValidation().(*FeatureValidation_MinLengthArrow); ok {
		return x.MinLengthArrow
	}
	return nil
}

func (x *FeatureValidation) GetMaxLengthArrow() *v11.ScalarValue {
	if x, ok := x.GetValidation().(*FeatureValidation_MaxLengthArrow); ok {
		return x.MaxLengthArrow
	}
	return nil
}

func (x *FeatureValidation) GetContains() *v11.ScalarValue {
	if x, ok := x.GetValidation().(*FeatureValidation_Contains); ok {
		return x.Contains
	}
	return nil
}

func (x *FeatureValidation) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

type isFeatureValidation_Validation interface {
	isFeatureValidation_Validation()
}

type FeatureValidation_Min struct {
	// Deprecated since they don't store the full type information (e.g. different numeric types)
	// Use the *_arrow fields (6-9) instead.
	//
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	Min float32 `protobuf:"fixed32,1,opt,name=min,proto3,oneof"`
}

type FeatureValidation_Max struct {
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	Max float32 `protobuf:"fixed32,2,opt,name=max,proto3,oneof"`
}

type FeatureValidation_MinLength struct {
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	MinLength uint32 `protobuf:"varint,3,opt,name=min_length,json=minLength,proto3,oneof"`
}

type FeatureValidation_MaxLength struct {
	// Deprecated: Marked as deprecated in chalk/graph/v1/graph.proto.
	MaxLength uint32 `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3,oneof"`
}

type FeatureValidation_MinArrow struct {
	MinArrow *v11.ScalarValue `protobuf:"bytes,6,opt,name=min_arrow,json=minArrow,proto3,oneof"`
}

type FeatureValidation_MaxArrow struct {
	MaxArrow *v11.ScalarValue `protobuf:"bytes,7,opt,name=max_arrow,json=maxArrow,proto3,oneof"`
}

type FeatureValidation_MinLengthArrow struct {
	MinLengthArrow *v11.ScalarValue `protobuf:"bytes,8,opt,name=min_length_arrow,json=minLengthArrow,proto3,oneof"`
}

type FeatureValidation_MaxLengthArrow struct {
	MaxLengthArrow *v11.ScalarValue `protobuf:"bytes,9,opt,name=max_length_arrow,json=maxLengthArrow,proto3,oneof"`
}

type FeatureValidation_Contains struct {
	Contains *v11.ScalarValue `protobuf:"bytes,10,opt,name=contains,proto3,oneof"`
}

func (*FeatureValidation_Min) isFeatureValidation_Validation() {}

func (*FeatureValidation_Max) isFeatureValidation_Validation() {}

func (*FeatureValidation_MinLength) isFeatureValidation_Validation() {}

func (*FeatureValidation_MaxLength) isFeatureValidation_Validation() {}

func (*FeatureValidation_MinArrow) isFeatureValidation_Validation() {}

func (*FeatureValidation_MaxArrow) isFeatureValidation_Validation() {}

func (*FeatureValidation_MinLengthArrow) isFeatureValidation_Validation() {}

func (*FeatureValidation_MaxLengthArrow) isFeatureValidation_Validation() {}

func (*FeatureValidation_Contains) isFeatureValidation_Validation() {}

type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default uint32 `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	Maximum uint32 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{46}
}

func (x *VersionInfo) GetDefault() uint32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *VersionInfo) GetMaximum() uint32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

type StrictValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature     *FeatureReference    `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	Validations []*FeatureValidation `protobuf:"bytes,2,rep,name=validations,proto3" json:"validations,omitempty"`
}

func (x *StrictValidation) Reset() {
	*x = StrictValidation{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrictValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrictValidation) ProtoMessage() {}

func (x *StrictValidation) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrictValidation.ProtoReflect.Descriptor instead.
func (*StrictValidation) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{47}
}

func (x *StrictValidation) GetFeature() *FeatureReference {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *StrictValidation) GetValidations() []*FeatureValidation {
	if x != nil {
		return x.Validations
	}
	return nil
}

type FeatureEncoder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Encoder:
	//
	//	*FeatureEncoder_GlobalFunctionReference
	Encoder isFeatureEncoder_Encoder `protobuf_oneof:"encoder"`
}

func (x *FeatureEncoder) Reset() {
	*x = FeatureEncoder{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureEncoder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureEncoder) ProtoMessage() {}

func (x *FeatureEncoder) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureEncoder.ProtoReflect.Descriptor instead.
func (*FeatureEncoder) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{48}
}

func (m *FeatureEncoder) GetEncoder() isFeatureEncoder_Encoder {
	if m != nil {
		return m.Encoder
	}
	return nil
}

func (x *FeatureEncoder) GetGlobalFunctionReference() *FunctionGlobalCapturedFunction {
	if x, ok := x.GetEncoder().(*FeatureEncoder_GlobalFunctionReference); ok {
		return x.GlobalFunctionReference
	}
	return nil
}

type isFeatureEncoder_Encoder interface {
	isFeatureEncoder_Encoder()
}

type FeatureEncoder_GlobalFunctionReference struct {
	GlobalFunctionReference *FunctionGlobalCapturedFunction `protobuf:"bytes,1,opt,name=global_function_reference,json=globalFunctionReference,proto3,oneof"`
}

func (*FeatureEncoder_GlobalFunctionReference) isFeatureEncoder_Encoder() {}

type FeatureDecoder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Decoder:
	//
	//	*FeatureDecoder_GlobalFunctionReference
	Decoder isFeatureDecoder_Decoder `protobuf_oneof:"decoder"`
}

func (x *FeatureDecoder) Reset() {
	*x = FeatureDecoder{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureDecoder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureDecoder) ProtoMessage() {}

func (x *FeatureDecoder) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureDecoder.ProtoReflect.Descriptor instead.
func (*FeatureDecoder) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{49}
}

func (m *FeatureDecoder) GetDecoder() isFeatureDecoder_Decoder {
	if m != nil {
		return m.Decoder
	}
	return nil
}

func (x *FeatureDecoder) GetGlobalFunctionReference() *FunctionGlobalCapturedFunction {
	if x, ok := x.GetDecoder().(*FeatureDecoder_GlobalFunctionReference); ok {
		return x.GlobalFunctionReference
	}
	return nil
}

type isFeatureDecoder_Decoder interface {
	isFeatureDecoder_Decoder()
}

type FeatureDecoder_GlobalFunctionReference struct {
	GlobalFunctionReference *FunctionGlobalCapturedFunction `protobuf:"bytes,1,opt,name=global_function_reference,json=globalFunctionReference,proto3,oneof"`
}

func (*FeatureDecoder_GlobalFunctionReference) isFeatureDecoder_Decoder() {}

// Represents a generic typ annotation, e.g. Dict[str, List[Optional[SomeClass]]] etc.
type RichClassType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	Qualname   string `protobuf:"bytes,2,opt,name=qualname,proto3" json:"qualname,omitempty"`
	// The type parameters inside the []
	Params []*RichClassType `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *RichClassType) Reset() {
	*x = RichClassType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RichClassType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichClassType) ProtoMessage() {}

func (x *RichClassType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichClassType.ProtoReflect.Descriptor instead.
func (*RichClassType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{50}
}

func (x *RichClassType) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *RichClassType) GetQualname() string {
	if x != nil {
		return x.Qualname
	}
	return ""
}

func (x *RichClassType) GetParams() []*RichClassType {
	if x != nil {
		return x.Params
	}
	return nil
}

type FeatureRichType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FeatureRichType_ClassType
	Type isFeatureRichType_Type `protobuf_oneof:"type"`
}

func (x *FeatureRichType) Reset() {
	*x = FeatureRichType{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureRichType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureRichType) ProtoMessage() {}

func (x *FeatureRichType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureRichType.ProtoReflect.Descriptor instead.
func (*FeatureRichType) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{51}
}

func (m *FeatureRichType) GetType() isFeatureRichType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FeatureRichType) GetClassType() *RichClassType {
	if x, ok := x.GetType().(*FeatureRichType_ClassType); ok {
		return x.ClassType
	}
	return nil
}

type isFeatureRichType_Type interface {
	isFeatureRichType_Type()
}

type FeatureRichType_ClassType struct {
	ClassType *RichClassType `protobuf:"bytes,1,opt,name=class_type,json=classType,proto3,oneof"`
}

func (*FeatureRichType_ClassType) isFeatureRichType_Type() {}

type FeatureRichTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RichTypeIsSameAsPrimitiveType bool             `protobuf:"varint,1,opt,name=rich_type_is_same_as_primitive_type,json=richTypeIsSameAsPrimitiveType,proto3" json:"rich_type_is_same_as_primitive_type,omitempty"`
	Encoder                       *FeatureEncoder  `protobuf:"bytes,2,opt,name=encoder,proto3,oneof" json:"encoder,omitempty"`
	Decoder                       *FeatureDecoder  `protobuf:"bytes,3,opt,name=decoder,proto3,oneof" json:"decoder,omitempty"`
	RichType                      *FeatureRichType `protobuf:"bytes,4,opt,name=rich_type,json=richType,proto3,oneof" json:"rich_type,omitempty"`
	RichTypeName                  *string          `protobuf:"bytes,5,opt,name=rich_type_name,json=richTypeName,proto3,oneof" json:"rich_type_name,omitempty"`
}

func (x *FeatureRichTypeInfo) Reset() {
	*x = FeatureRichTypeInfo{}
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureRichTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureRichTypeInfo) ProtoMessage() {}

func (x *FeatureRichTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_graph_v1_graph_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureRichTypeInfo.ProtoReflect.Descriptor instead.
func (*FeatureRichTypeInfo) Descriptor() ([]byte, []int) {
	return file_chalk_graph_v1_graph_proto_rawDescGZIP(), []int{52}
}

func (x *FeatureRichTypeInfo) GetRichTypeIsSameAsPrimitiveType() bool {
	if x != nil {
		return x.RichTypeIsSameAsPrimitiveType
	}
	return false
}

func (x *FeatureRichTypeInfo) GetEncoder() *FeatureEncoder {
	if x != nil {
		return x.Encoder
	}
	return nil
}

func (x *FeatureRichTypeInfo) GetDecoder() *FeatureDecoder {
	if x != nil {
		return x.Decoder
	}
	return nil
}

func (x *FeatureRichTypeInfo) GetRichType() *FeatureRichType {
	if x != nil {
		return x.RichType
	}
	return nil
}

func (x *FeatureRichTypeInfo) GetRichTypeName() string {
	if x != nil && x.RichTypeName != nil {
		return *x.RichTypeName
	}
	return ""
}

var File_chalk_graph_v1_graph_proto protoreflect.FileDescriptor

var file_chalk_graph_v1_graph_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x6c, 0x73, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x05, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3d, 0x0a,
	0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x0f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x13, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x76, 0x32, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x56, 0x32, 0x12, 0x59, 0x0a,
	0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x56, 0x32, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x57,
	0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x22, 0x92, 0x08, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x15, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x04, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xaa, 0x03, 0x0a,
	0x0a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x64,
	0x6f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x65, 0x74, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x12, 0x65, 0x74, 0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x6f, 0x63,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x74, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xa2, 0x03, 0x0a, 0x0b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x4f, 0x6e, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x4f, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa9,
	0x01, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x02, 0x64,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x64, 0x66, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x93, 0x06, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x90, 0x0c, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e,
	0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x74, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x15, 0x65, 0x74, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x12, 0x65, 0x74, 0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x19,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1a,
	0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x69,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x69, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x06, 0x52, 0x0c, 0x72, 0x69, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x74,
	0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcd, 0x03, 0x0a, 0x11, 0x48, 0x61,
	0x73, 0x4f, 0x6e, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xfe, 0x03, 0x0a, 0x12, 0x48, 0x61,
	0x73, 0x4d, 0x61, 0x6e, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x16, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x13, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x10, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x75,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x08, 0x0a, 0x11, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52,
	0x11, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x1a, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x18, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2f, 0x0a, 0x02, 0x64, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x02, 0x64,
	0x66, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x64, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x02, 0x64, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x09, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x38,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x77, 0x68, 0x65,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x69, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1e,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x56, 0x32, 0x12, 0x4f, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x04, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x64, 0x6f, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xc1, 0x07, 0x0a, 0x0c, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x56, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x32, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x64, 0x6f, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x44, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x6f, 0x63, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xd7, 0x03, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54,
	0x0a, 0x19, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x17, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x21,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xcb, 0x07, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x03, 0x64, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x32, 0x12, 0x4a, 0x0a, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x6f, 0x63, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xf7, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x59, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x35, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x20, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a,
	0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x11, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x5a, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xf3, 0x06, 0x0a, 0x1f,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x0d, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x46, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x59, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x4c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x43, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x42, 0x0a, 0x1d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x70, 0x61, 0x5f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70,
	0x61, 0x44, 0x74, 0x79, 0x70, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x58, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x0e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x22, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x1c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x61, 0x0a, 0x22, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a,
	0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x1b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x02, 0x66, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x66, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x61,
	0x5f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x61, 0x44, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a,
	0x13, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6c, 0x73, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x59,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xaa, 0x04, 0x0a, 0x13, 0x53, 0x51,
	0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52,
	0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x14, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74,
	0x46, 0x71, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x6f, 0x6f, 0x74, 0x46, 0x71, 0x6e, 0x12, 0x78, 0x0a, 0x19, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x71, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x46, 0x71, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x65, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x71,
	0x6e, 0x1a, 0x40, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x46,
	0x71, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x71, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc3, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xc8, 0x06, 0x0a,
	0x16, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x04, 0x52,
	0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x48,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x63,
	0x72, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x48, 0x06, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x4f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x5f, 0x0a, 0x15, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x63, 0x74, 0x48, 0x01, 0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x12,
	0x37, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xf8, 0x03, 0x0a, 0x11, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x41, 0x72, 0x72,
	0x6f, 0x77, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x47, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89,
	0x01, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x12, 0x6c, 0x0a, 0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x6c, 0x0a,
	0x19, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x52, 0x69, 0x63, 0x68, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x59, 0x0a, 0x0f,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x69, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x69, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4a, 0x0a, 0x23, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x73, 0x5f,
	0x73, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x69,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x50, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x48, 0x01, 0x52, 0x07, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x69, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x69, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52,
	0x08, 0x72, 0x69, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x69, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x2a, 0x9d, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x47, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41,
	0x43, 0x48, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x41,
	0x43, 0x48, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x53, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x07,
	0x2a, 0x62, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x48, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x4f, 0x10, 0x02,
	0x2a, 0x7c, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x52,
	0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x2a, 0x89,
	0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e,
	0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xab, 0x01, 0x0a, 0x18, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x36, 0x0a, 0x32, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54,
	0x55, 0x4d, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x44, 0x43, 0x10, 0x03, 0x42, 0xb3,
	0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x47, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_graph_v1_graph_proto_rawDescOnce sync.Once
	file_chalk_graph_v1_graph_proto_rawDescData = file_chalk_graph_v1_graph_proto_rawDesc
)

func file_chalk_graph_v1_graph_proto_rawDescGZIP() []byte {
	file_chalk_graph_v1_graph_proto_rawDescOnce.Do(func() {
		file_chalk_graph_v1_graph_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_graph_v1_graph_proto_rawDescData)
	})
	return file_chalk_graph_v1_graph_proto_rawDescData
}

var file_chalk_graph_v1_graph_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_chalk_graph_v1_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_chalk_graph_v1_graph_proto_goTypes = []any{
	(CacheStrategy)(0),                         // 0: chalk.graph.v1.CacheStrategy
	(ResolverKind)(0),                          // 1: chalk.graph.v1.ResolverKind
	(ResourceHint)(0),                          // 2: chalk.graph.v1.ResourceHint
	(Finalizer)(0),                             // 3: chalk.graph.v1.Finalizer
	(IncrementalMode)(0),                       // 4: chalk.graph.v1.IncrementalMode
	(IncrementalTimestampMode)(0),              // 5: chalk.graph.v1.IncrementalTimestampMode
	(WindowMode)(0),                            // 6: chalk.graph.v1.WindowMode
	(*Graph)(nil),                              // 7: chalk.graph.v1.Graph
	(*OverlayGraph)(nil),                       // 8: chalk.graph.v1.OverlayGraph
	(*NamedQuery)(nil),                         // 9: chalk.graph.v1.NamedQuery
	(*FeatureSet)(nil),                         // 10: chalk.graph.v1.FeatureSet
	(*FeatureType)(nil),                        // 11: chalk.graph.v1.FeatureType
	(*FeatureReference)(nil),                   // 12: chalk.graph.v1.FeatureReference
	(*DataFrameType)(nil),                      // 13: chalk.graph.v1.DataFrameType
	(*GroupByFeatureType)(nil),                 // 14: chalk.graph.v1.GroupByFeatureType
	(*ScalarFeatureType)(nil),                  // 15: chalk.graph.v1.ScalarFeatureType
	(*HasOneFeatureType)(nil),                  // 16: chalk.graph.v1.HasOneFeatureType
	(*HasManyFeatureType)(nil),                 // 17: chalk.graph.v1.HasManyFeatureType
	(*FeatureTimeFeatureType)(nil),             // 18: chalk.graph.v1.FeatureTimeFeatureType
	(*WindowedFeatureType)(nil),                // 19: chalk.graph.v1.WindowedFeatureType
	(*WindowAggregation)(nil),                  // 20: chalk.graph.v1.WindowAggregation
	(*WindowInfo)(nil),                         // 21: chalk.graph.v1.WindowInfo
	(*FeatureInput)(nil),                       // 22: chalk.graph.v1.FeatureInput
	(*ResolverInput)(nil),                      // 23: chalk.graph.v1.ResolverInput
	(*ResolverOutput)(nil),                     // 24: chalk.graph.v1.ResolverOutput
	(*Resolver)(nil),                           // 25: chalk.graph.v1.Resolver
	(*SinkResolver)(nil),                       // 26: chalk.graph.v1.SinkResolver
	(*ParseInfo)(nil),                          // 27: chalk.graph.v1.ParseInfo
	(*StreamResolver)(nil),                     // 28: chalk.graph.v1.StreamResolver
	(*ResolverState)(nil),                      // 29: chalk.graph.v1.ResolverState
	(*StreamResolverParam)(nil),                // 30: chalk.graph.v1.StreamResolverParam
	(*StreamResolverParamMessageWindow)(nil),   // 31: chalk.graph.v1.StreamResolverParamMessageWindow
	(*StreamResolverParamMessage)(nil),         // 32: chalk.graph.v1.StreamResolverParamMessage
	(*FunctionReference)(nil),                  // 33: chalk.graph.v1.FunctionReference
	(*FunctionReferenceCapturedGlobal)(nil),    // 34: chalk.graph.v1.FunctionReferenceCapturedGlobal
	(*FunctionGlobalCapturedBuiltin)(nil),      // 35: chalk.graph.v1.FunctionGlobalCapturedBuiltin
	(*FunctionGlobalCapturedVariable)(nil),     // 36: chalk.graph.v1.FunctionGlobalCapturedVariable
	(*FunctionGlobalCapturedStruct)(nil),       // 37: chalk.graph.v1.FunctionGlobalCapturedStruct
	(*FunctionGlobalCapturedEnum)(nil),         // 38: chalk.graph.v1.FunctionGlobalCapturedEnum
	(*FunctionGlobalCapturedFeatureClass)(nil), // 39: chalk.graph.v1.FunctionGlobalCapturedFeatureClass
	(*FunctionGlobalCapturedModule)(nil),       // 40: chalk.graph.v1.FunctionGlobalCapturedModule
	(*FunctionGlobalCapturedModuleMember)(nil), // 41: chalk.graph.v1.FunctionGlobalCapturedModuleMember
	(*FunctionGlobalCapturedFunction)(nil),     // 42: chalk.graph.v1.FunctionGlobalCapturedFunction
	(*FunctionGlobalCapturedProto)(nil),        // 43: chalk.graph.v1.FunctionGlobalCapturedProto
	(*SourceFileReference)(nil),                // 44: chalk.graph.v1.SourceFileReference
	(*StreamKey)(nil),                          // 45: chalk.graph.v1.StreamKey
	(*SQLResolverSettings)(nil),                // 46: chalk.graph.v1.SQLResolverSettings
	(*IncrementalSettings)(nil),                // 47: chalk.graph.v1.IncrementalSettings
	(*SQLResolverCommentDict)(nil),             // 48: chalk.graph.v1.SQLResolverCommentDict
	(*SQLResolverInfo)(nil),                    // 49: chalk.graph.v1.SQLResolverInfo
	(*CronFilterWithFeatureArgs)(nil),          // 50: chalk.graph.v1.CronFilterWithFeatureArgs
	(*Schedule)(nil),                           // 51: chalk.graph.v1.Schedule
	(*FeatureValidation)(nil),                  // 52: chalk.graph.v1.FeatureValidation
	(*VersionInfo)(nil),                        // 53: chalk.graph.v1.VersionInfo
	(*StrictValidation)(nil),                   // 54: chalk.graph.v1.StrictValidation
	(*FeatureEncoder)(nil),                     // 55: chalk.graph.v1.FeatureEncoder
	(*FeatureDecoder)(nil),                     // 56: chalk.graph.v1.FeatureDecoder
	(*RichClassType)(nil),                      // 57: chalk.graph.v1.RichClassType
	(*FeatureRichType)(nil),                    // 58: chalk.graph.v1.FeatureRichType
	(*FeatureRichTypeInfo)(nil),                // 59: chalk.graph.v1.FeatureRichTypeInfo
	nil,                                        // 60: chalk.graph.v1.NamedQuery.MetaEntry
	nil,                                        // 61: chalk.graph.v1.NamedQuery.StalenessEntry
	nil,                                        // 62: chalk.graph.v1.NamedQuery.PlannerOptionsEntry
	nil,                                        // 63: chalk.graph.v1.FunctionGlobalCapturedEnum.MemberMapEntry
	nil,                                        // 64: chalk.graph.v1.SQLResolverSettings.FieldsRootFqnEntry
	nil,                                        // 65: chalk.graph.v1.SQLResolverSettings.EscapedParamNameToFqnEntry
	nil,                                        // 66: chalk.graph.v1.SQLResolverCommentDict.FieldsEntry
	(*DatabaseSource)(nil),                     // 67: chalk.graph.v1.DatabaseSource
	(*StreamSource)(nil),                       // 68: chalk.graph.v1.StreamSource
	(*v2.DatabaseSource)(nil),                  // 69: chalk.graph.v2.DatabaseSource
	(*v2.DatabaseSourceGroup)(nil),             // 70: chalk.graph.v2.DatabaseSourceGroup
	(*v2.StreamSource)(nil),                    // 71: chalk.graph.v2.StreamSource
	(*durationpb.Duration)(nil),                // 72: google.protobuf.Duration
	(*v1.LogicalExprNode)(nil),                 // 73: chalk.expression.v1.LogicalExprNode
	(*v11.ArrowType)(nil),                      // 74: chalk.arrow.v1.ArrowType
	(*v11.ScalarValue)(nil),                    // 75: chalk.arrow.v1.ScalarValue
	(*timestamppb.Timestamp)(nil),              // 76: google.protobuf.Timestamp
	(*DatabaseSourceReference)(nil),            // 77: chalk.graph.v1.DatabaseSourceReference
	(*v2.DatabaseSourceReference)(nil),         // 78: chalk.graph.v2.DatabaseSourceReference
	(*StreamSourceReference)(nil),              // 79: chalk.graph.v1.StreamSourceReference
	(*v2.StreamSourceReference)(nil),           // 80: chalk.graph.v2.StreamSourceReference
	(*v12.Range)(nil),                          // 81: chalk.lsp.v1.Range
}
var file_chalk_graph_v1_graph_proto_depIdxs = []int32{
	10,  // 0: chalk.graph.v1.Graph.feature_sets:type_name -> chalk.graph.v1.FeatureSet
	25,  // 1: chalk.graph.v1.Graph.resolvers:type_name -> chalk.graph.v1.Resolver
	28,  // 2: chalk.graph.v1.Graph.stream_resolvers:type_name -> chalk.graph.v1.StreamResolver
	26,  // 3: chalk.graph.v1.Graph.sink_resolvers:type_name -> chalk.graph.v1.SinkResolver
	67,  // 4: chalk.graph.v1.Graph.database_sources:type_name -> chalk.graph.v1.DatabaseSource
	68,  // 5: chalk.graph.v1.Graph.stream_sources:type_name -> chalk.graph.v1.StreamSource
	9,   // 6: chalk.graph.v1.Graph.named_queries:type_name -> chalk.graph.v1.NamedQuery
	69,  // 7: chalk.graph.v1.Graph.database_sources_v2:type_name -> chalk.graph.v2.DatabaseSource
	70,  // 8: chalk.graph.v1.Graph.database_source_groups:type_name -> chalk.graph.v2.DatabaseSourceGroup
	71,  // 9: chalk.graph.v1.Graph.stream_sources_v2:type_name -> chalk.graph.v2.StreamSource
	10,  // 10: chalk.graph.v1.OverlayGraph.feature_sets:type_name -> chalk.graph.v1.FeatureSet
	11,  // 11: chalk.graph.v1.OverlayGraph.feature_fields:type_name -> chalk.graph.v1.FeatureType
	25,  // 12: chalk.graph.v1.OverlayGraph.resolvers:type_name -> chalk.graph.v1.Resolver
	49,  // 13: chalk.graph.v1.OverlayGraph.generated_sql_resolvers:type_name -> chalk.graph.v1.SQLResolverInfo
	60,  // 14: chalk.graph.v1.NamedQuery.meta:type_name -> chalk.graph.v1.NamedQuery.MetaEntry
	61,  // 15: chalk.graph.v1.NamedQuery.staleness:type_name -> chalk.graph.v1.NamedQuery.StalenessEntry
	62,  // 16: chalk.graph.v1.NamedQuery.planner_options:type_name -> chalk.graph.v1.NamedQuery.PlannerOptionsEntry
	44,  // 17: chalk.graph.v1.NamedQuery.source_file_reference:type_name -> chalk.graph.v1.SourceFileReference
	11,  // 18: chalk.graph.v1.FeatureSet.features:type_name -> chalk.graph.v1.FeatureType
	72,  // 19: chalk.graph.v1.FeatureSet.max_staleness_duration:type_name -> google.protobuf.Duration
	15,  // 20: chalk.graph.v1.FeatureType.scalar:type_name -> chalk.graph.v1.ScalarFeatureType
	16,  // 21: chalk.graph.v1.FeatureType.has_one:type_name -> chalk.graph.v1.HasOneFeatureType
	17,  // 22: chalk.graph.v1.FeatureType.has_many:type_name -> chalk.graph.v1.HasManyFeatureType
	18,  // 23: chalk.graph.v1.FeatureType.feature_time:type_name -> chalk.graph.v1.FeatureTimeFeatureType
	19,  // 24: chalk.graph.v1.FeatureType.windowed:type_name -> chalk.graph.v1.WindowedFeatureType
	14,  // 25: chalk.graph.v1.FeatureType.group_by:type_name -> chalk.graph.v1.GroupByFeatureType
	12,  // 26: chalk.graph.v1.FeatureReference.path:type_name -> chalk.graph.v1.FeatureReference
	13,  // 27: chalk.graph.v1.FeatureReference.df:type_name -> chalk.graph.v1.DataFrameType
	12,  // 28: chalk.graph.v1.DataFrameType.required_columns:type_name -> chalk.graph.v1.FeatureReference
	12,  // 29: chalk.graph.v1.DataFrameType.optional_columns:type_name -> chalk.graph.v1.FeatureReference
	73,  // 30: chalk.graph.v1.DataFrameType.filter:type_name -> chalk.expression.v1.LogicalExprNode
	74,  // 31: chalk.graph.v1.GroupByFeatureType.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	20,  // 32: chalk.graph.v1.GroupByFeatureType.aggregation:type_name -> chalk.graph.v1.WindowAggregation
	72,  // 33: chalk.graph.v1.GroupByFeatureType.window_durations:type_name -> google.protobuf.Duration
	73,  // 34: chalk.graph.v1.GroupByFeatureType.expression:type_name -> chalk.expression.v1.LogicalExprNode
	75,  // 35: chalk.graph.v1.GroupByFeatureType.default_value:type_name -> chalk.arrow.v1.ScalarValue
	52,  // 36: chalk.graph.v1.GroupByFeatureType.validations:type_name -> chalk.graph.v1.FeatureValidation
	72,  // 37: chalk.graph.v1.ScalarFeatureType.max_staleness_duration:type_name -> google.protobuf.Duration
	72,  // 38: chalk.graph.v1.ScalarFeatureType.offline_ttl_duration:type_name -> google.protobuf.Duration
	74,  // 39: chalk.graph.v1.ScalarFeatureType.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	53,  // 40: chalk.graph.v1.ScalarFeatureType.version:type_name -> chalk.graph.v1.VersionInfo
	21,  // 41: chalk.graph.v1.ScalarFeatureType.window_info:type_name -> chalk.graph.v1.WindowInfo
	75,  // 42: chalk.graph.v1.ScalarFeatureType.default_value:type_name -> chalk.arrow.v1.ScalarValue
	73,  // 43: chalk.graph.v1.ScalarFeatureType.expression:type_name -> chalk.expression.v1.LogicalExprNode
	52,  // 44: chalk.graph.v1.ScalarFeatureType.validations:type_name -> chalk.graph.v1.FeatureValidation
	12,  // 45: chalk.graph.v1.ScalarFeatureType.last_for:type_name -> chalk.graph.v1.FeatureReference
	0,   // 46: chalk.graph.v1.ScalarFeatureType.cache_strategy:type_name -> chalk.graph.v1.CacheStrategy
	59,  // 47: chalk.graph.v1.ScalarFeatureType.rich_type_info:type_name -> chalk.graph.v1.FeatureRichTypeInfo
	73,  // 48: chalk.graph.v1.HasOneFeatureType.join:type_name -> chalk.expression.v1.LogicalExprNode
	73,  // 49: chalk.graph.v1.HasManyFeatureType.join:type_name -> chalk.expression.v1.LogicalExprNode
	72,  // 50: chalk.graph.v1.HasManyFeatureType.max_staleness_duration:type_name -> google.protobuf.Duration
	72,  // 51: chalk.graph.v1.WindowedFeatureType.window_durations:type_name -> google.protobuf.Duration
	12,  // 52: chalk.graph.v1.WindowAggregation.group_by:type_name -> chalk.graph.v1.FeatureReference
	72,  // 53: chalk.graph.v1.WindowAggregation.bucket_duration:type_name -> google.protobuf.Duration
	12,  // 54: chalk.graph.v1.WindowAggregation.aggregate_on:type_name -> chalk.graph.v1.FeatureReference
	74,  // 55: chalk.graph.v1.WindowAggregation.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	73,  // 56: chalk.graph.v1.WindowAggregation.filters:type_name -> chalk.expression.v1.LogicalExprNode
	72,  // 57: chalk.graph.v1.WindowAggregation.backfill_lookback_duration:type_name -> google.protobuf.Duration
	76,  // 58: chalk.graph.v1.WindowAggregation.backfill_start_time:type_name -> google.protobuf.Timestamp
	72,  // 59: chalk.graph.v1.WindowAggregation.continuous_buffer_duration:type_name -> google.protobuf.Duration
	76,  // 60: chalk.graph.v1.WindowAggregation.bucket_start:type_name -> google.protobuf.Timestamp
	72,  // 61: chalk.graph.v1.WindowInfo.duration:type_name -> google.protobuf.Duration
	20,  // 62: chalk.graph.v1.WindowInfo.aggregation:type_name -> chalk.graph.v1.WindowAggregation
	12,  // 63: chalk.graph.v1.FeatureInput.feature:type_name -> chalk.graph.v1.FeatureReference
	75,  // 64: chalk.graph.v1.FeatureInput.default_value:type_name -> chalk.arrow.v1.ScalarValue
	22,  // 65: chalk.graph.v1.ResolverInput.feature:type_name -> chalk.graph.v1.FeatureInput
	13,  // 66: chalk.graph.v1.ResolverInput.df:type_name -> chalk.graph.v1.DataFrameType
	29,  // 67: chalk.graph.v1.ResolverInput.state:type_name -> chalk.graph.v1.ResolverState
	12,  // 68: chalk.graph.v1.ResolverOutput.feature:type_name -> chalk.graph.v1.FeatureReference
	13,  // 69: chalk.graph.v1.ResolverOutput.df:type_name -> chalk.graph.v1.DataFrameType
	1,   // 70: chalk.graph.v1.Resolver.kind:type_name -> chalk.graph.v1.ResolverKind
	23,  // 71: chalk.graph.v1.Resolver.inputs:type_name -> chalk.graph.v1.ResolverInput
	24,  // 72: chalk.graph.v1.Resolver.outputs:type_name -> chalk.graph.v1.ResolverOutput
	77,  // 73: chalk.graph.v1.Resolver.data_sources:type_name -> chalk.graph.v1.DatabaseSourceReference
	72,  // 74: chalk.graph.v1.Resolver.timeout_duration:type_name -> google.protobuf.Duration
	51,  // 75: chalk.graph.v1.Resolver.schedule:type_name -> chalk.graph.v1.Schedule
	73,  // 76: chalk.graph.v1.Resolver.when:type_name -> chalk.expression.v1.LogicalExprNode
	50,  // 77: chalk.graph.v1.Resolver.cron_filter:type_name -> chalk.graph.v1.CronFilterWithFeatureArgs
	33,  // 78: chalk.graph.v1.Resolver.function:type_name -> chalk.graph.v1.FunctionReference
	2,   // 79: chalk.graph.v1.Resolver.resource_hint:type_name -> chalk.graph.v1.ResourceHint
	78,  // 80: chalk.graph.v1.Resolver.data_sources_v2:type_name -> chalk.graph.v2.DatabaseSourceReference
	73,  // 81: chalk.graph.v1.Resolver.static_operation:type_name -> chalk.expression.v1.LogicalExprNode
	46,  // 82: chalk.graph.v1.Resolver.sql_settings:type_name -> chalk.graph.v1.SQLResolverSettings
	23,  // 83: chalk.graph.v1.SinkResolver.inputs:type_name -> chalk.graph.v1.ResolverInput
	72,  // 84: chalk.graph.v1.SinkResolver.debounce_duration:type_name -> google.protobuf.Duration
	72,  // 85: chalk.graph.v1.SinkResolver.max_delay_duration:type_name -> google.protobuf.Duration
	79,  // 86: chalk.graph.v1.SinkResolver.stream_source:type_name -> chalk.graph.v1.StreamSourceReference
	77,  // 87: chalk.graph.v1.SinkResolver.database_source:type_name -> chalk.graph.v1.DatabaseSourceReference
	80,  // 88: chalk.graph.v1.SinkResolver.stream_source_v2:type_name -> chalk.graph.v2.StreamSourceReference
	78,  // 89: chalk.graph.v1.SinkResolver.database_source_v2:type_name -> chalk.graph.v2.DatabaseSourceReference
	72,  // 90: chalk.graph.v1.SinkResolver.timeout_duration:type_name -> google.protobuf.Duration
	33,  // 91: chalk.graph.v1.SinkResolver.function:type_name -> chalk.graph.v1.FunctionReference
	33,  // 92: chalk.graph.v1.ParseInfo.parse_function:type_name -> chalk.graph.v1.FunctionReference
	74,  // 93: chalk.graph.v1.ParseInfo.parse_function_input_type:type_name -> chalk.arrow.v1.ArrowType
	74,  // 94: chalk.graph.v1.ParseInfo.parse_function_output_type:type_name -> chalk.arrow.v1.ArrowType
	30,  // 95: chalk.graph.v1.StreamResolver.params:type_name -> chalk.graph.v1.StreamResolverParam
	24,  // 96: chalk.graph.v1.StreamResolver.outputs:type_name -> chalk.graph.v1.ResolverOutput
	74,  // 97: chalk.graph.v1.StreamResolver.explicit_schema:type_name -> chalk.arrow.v1.ArrowType
	45,  // 98: chalk.graph.v1.StreamResolver.keys:type_name -> chalk.graph.v1.StreamKey
	79,  // 99: chalk.graph.v1.StreamResolver.source:type_name -> chalk.graph.v1.StreamSourceReference
	27,  // 100: chalk.graph.v1.StreamResolver.parse_info:type_name -> chalk.graph.v1.ParseInfo
	6,   // 101: chalk.graph.v1.StreamResolver.mode:type_name -> chalk.graph.v1.WindowMode
	72,  // 102: chalk.graph.v1.StreamResolver.timeout_duration:type_name -> google.protobuf.Duration
	33,  // 103: chalk.graph.v1.StreamResolver.function:type_name -> chalk.graph.v1.FunctionReference
	80,  // 104: chalk.graph.v1.StreamResolver.source_v2:type_name -> chalk.graph.v2.StreamSourceReference
	75,  // 105: chalk.graph.v1.ResolverState.initial:type_name -> chalk.arrow.v1.ScalarValue
	74,  // 106: chalk.graph.v1.ResolverState.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	32,  // 107: chalk.graph.v1.StreamResolverParam.message:type_name -> chalk.graph.v1.StreamResolverParamMessage
	31,  // 108: chalk.graph.v1.StreamResolverParam.message_window:type_name -> chalk.graph.v1.StreamResolverParamMessageWindow
	29,  // 109: chalk.graph.v1.StreamResolverParam.state:type_name -> chalk.graph.v1.ResolverState
	74,  // 110: chalk.graph.v1.StreamResolverParamMessageWindow.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	74,  // 111: chalk.graph.v1.StreamResolverParamMessage.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	34,  // 112: chalk.graph.v1.FunctionReference.captured_globals:type_name -> chalk.graph.v1.FunctionReferenceCapturedGlobal
	35,  // 113: chalk.graph.v1.FunctionReferenceCapturedGlobal.builtin:type_name -> chalk.graph.v1.FunctionGlobalCapturedBuiltin
	39,  // 114: chalk.graph.v1.FunctionReferenceCapturedGlobal.feature_class:type_name -> chalk.graph.v1.FunctionGlobalCapturedFeatureClass
	38,  // 115: chalk.graph.v1.FunctionReferenceCapturedGlobal.enum:type_name -> chalk.graph.v1.FunctionGlobalCapturedEnum
	40,  // 116: chalk.graph.v1.FunctionReferenceCapturedGlobal.module:type_name -> chalk.graph.v1.FunctionGlobalCapturedModule
	41,  // 117: chalk.graph.v1.FunctionReferenceCapturedGlobal.module_member:type_name -> chalk.graph.v1.FunctionGlobalCapturedModuleMember
	42,  // 118: chalk.graph.v1.FunctionReferenceCapturedGlobal.function:type_name -> chalk.graph.v1.FunctionGlobalCapturedFunction
	37,  // 119: chalk.graph.v1.FunctionReferenceCapturedGlobal.struct:type_name -> chalk.graph.v1.FunctionGlobalCapturedStruct
	36,  // 120: chalk.graph.v1.FunctionReferenceCapturedGlobal.variable:type_name -> chalk.graph.v1.FunctionGlobalCapturedVariable
	43,  // 121: chalk.graph.v1.FunctionReferenceCapturedGlobal.proto:type_name -> chalk.graph.v1.FunctionGlobalCapturedProto
	44,  // 122: chalk.graph.v1.FunctionReferenceCapturedGlobal.source_reference:type_name -> chalk.graph.v1.SourceFileReference
	74,  // 123: chalk.graph.v1.FunctionGlobalCapturedStruct.pa_dtype:type_name -> chalk.arrow.v1.ArrowType
	63,  // 124: chalk.graph.v1.FunctionGlobalCapturedEnum.member_map:type_name -> chalk.graph.v1.FunctionGlobalCapturedEnum.MemberMapEntry
	74,  // 125: chalk.graph.v1.FunctionGlobalCapturedEnum.bases:type_name -> chalk.arrow.v1.ArrowType
	34,  // 126: chalk.graph.v1.FunctionGlobalCapturedFunction.captured_globals:type_name -> chalk.graph.v1.FunctionReferenceCapturedGlobal
	74,  // 127: chalk.graph.v1.FunctionGlobalCapturedProto.pa_dtype:type_name -> chalk.arrow.v1.ArrowType
	81,  // 128: chalk.graph.v1.SourceFileReference.range:type_name -> chalk.lsp.v1.Range
	12,  // 129: chalk.graph.v1.StreamKey.feature:type_name -> chalk.graph.v1.FeatureReference
	3,   // 130: chalk.graph.v1.SQLResolverSettings.finalizer:type_name -> chalk.graph.v1.Finalizer
	47,  // 131: chalk.graph.v1.SQLResolverSettings.incremental_settings:type_name -> chalk.graph.v1.IncrementalSettings
	64,  // 132: chalk.graph.v1.SQLResolverSettings.fields_root_fqn:type_name -> chalk.graph.v1.SQLResolverSettings.FieldsRootFqnEntry
	65,  // 133: chalk.graph.v1.SQLResolverSettings.escaped_param_name_to_fqn:type_name -> chalk.graph.v1.SQLResolverSettings.EscapedParamNameToFqnEntry
	4,   // 134: chalk.graph.v1.IncrementalSettings.mode:type_name -> chalk.graph.v1.IncrementalMode
	72,  // 135: chalk.graph.v1.IncrementalSettings.lookback_period:type_name -> google.protobuf.Duration
	5,   // 136: chalk.graph.v1.IncrementalSettings.timestamp_mode:type_name -> chalk.graph.v1.IncrementalTimestampMode
	47,  // 137: chalk.graph.v1.SQLResolverCommentDict.incremental:type_name -> chalk.graph.v1.IncrementalSettings
	3,   // 138: chalk.graph.v1.SQLResolverCommentDict.count:type_name -> chalk.graph.v1.Finalizer
	51,  // 139: chalk.graph.v1.SQLResolverCommentDict.cron:type_name -> chalk.graph.v1.Schedule
	66,  // 140: chalk.graph.v1.SQLResolverCommentDict.fields:type_name -> chalk.graph.v1.SQLResolverCommentDict.FieldsEntry
	48,  // 141: chalk.graph.v1.SQLResolverInfo.override_comment_dict:type_name -> chalk.graph.v1.SQLResolverCommentDict
	33,  // 142: chalk.graph.v1.CronFilterWithFeatureArgs.filter:type_name -> chalk.graph.v1.FunctionReference
	12,  // 143: chalk.graph.v1.CronFilterWithFeatureArgs.args:type_name -> chalk.graph.v1.FeatureReference
	72,  // 144: chalk.graph.v1.Schedule.duration:type_name -> google.protobuf.Duration
	33,  // 145: chalk.graph.v1.Schedule.filter:type_name -> chalk.graph.v1.FunctionReference
	33,  // 146: chalk.graph.v1.Schedule.sample:type_name -> chalk.graph.v1.FunctionReference
	75,  // 147: chalk.graph.v1.FeatureValidation.min_arrow:type_name -> chalk.arrow.v1.ScalarValue
	75,  // 148: chalk.graph.v1.FeatureValidation.max_arrow:type_name -> chalk.arrow.v1.ScalarValue
	75,  // 149: chalk.graph.v1.FeatureValidation.min_length_arrow:type_name -> chalk.arrow.v1.ScalarValue
	75,  // 150: chalk.graph.v1.FeatureValidation.max_length_arrow:type_name -> chalk.arrow.v1.ScalarValue
	75,  // 151: chalk.graph.v1.FeatureValidation.contains:type_name -> chalk.arrow.v1.ScalarValue
	12,  // 152: chalk.graph.v1.StrictValidation.feature:type_name -> chalk.graph.v1.FeatureReference
	52,  // 153: chalk.graph.v1.StrictValidation.validations:type_name -> chalk.graph.v1.FeatureValidation
	42,  // 154: chalk.graph.v1.FeatureEncoder.global_function_reference:type_name -> chalk.graph.v1.FunctionGlobalCapturedFunction
	42,  // 155: chalk.graph.v1.FeatureDecoder.global_function_reference:type_name -> chalk.graph.v1.FunctionGlobalCapturedFunction
	57,  // 156: chalk.graph.v1.RichClassType.params:type_name -> chalk.graph.v1.RichClassType
	57,  // 157: chalk.graph.v1.FeatureRichType.class_type:type_name -> chalk.graph.v1.RichClassType
	55,  // 158: chalk.graph.v1.FeatureRichTypeInfo.encoder:type_name -> chalk.graph.v1.FeatureEncoder
	56,  // 159: chalk.graph.v1.FeatureRichTypeInfo.decoder:type_name -> chalk.graph.v1.FeatureDecoder
	58,  // 160: chalk.graph.v1.FeatureRichTypeInfo.rich_type:type_name -> chalk.graph.v1.FeatureRichType
	72,  // 161: chalk.graph.v1.NamedQuery.StalenessEntry.value:type_name -> google.protobuf.Duration
	75,  // 162: chalk.graph.v1.FunctionGlobalCapturedEnum.MemberMapEntry.value:type_name -> chalk.arrow.v1.ScalarValue
	163, // [163:163] is the sub-list for method output_type
	163, // [163:163] is the sub-list for method input_type
	163, // [163:163] is the sub-list for extension type_name
	163, // [163:163] is the sub-list for extension extendee
	0,   // [0:163] is the sub-list for field type_name
}

func init() { file_chalk_graph_v1_graph_proto_init() }
func file_chalk_graph_v1_graph_proto_init() {
	if File_chalk_graph_v1_graph_proto != nil {
		return
	}
	file_chalk_graph_v1_sources_proto_init()
	file_chalk_graph_v1_graph_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[4].OneofWrappers = []any{
		(*FeatureType_Scalar)(nil),
		(*FeatureType_HasOne)(nil),
		(*FeatureType_HasMany)(nil),
		(*FeatureType_FeatureTime)(nil),
		(*FeatureType_Windowed)(nil),
		(*FeatureType_GroupBy)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[6].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[7].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[8].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[9].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[10].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[11].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[13].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[14].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[16].OneofWrappers = []any{
		(*ResolverInput_Feature)(nil),
		(*ResolverInput_Df)(nil),
		(*ResolverInput_State)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[17].OneofWrappers = []any{
		(*ResolverOutput_Feature)(nil),
		(*ResolverOutput_Df)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[18].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[19].OneofWrappers = []any{
		(*SinkResolver_StreamSource)(nil),
		(*SinkResolver_DatabaseSource)(nil),
		(*SinkResolver_StreamSourceV2)(nil),
		(*SinkResolver_DatabaseSourceV2)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[21].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[23].OneofWrappers = []any{
		(*StreamResolverParam_Message)(nil),
		(*StreamResolverParam_MessageWindow)(nil),
		(*StreamResolverParam_State)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[26].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[27].OneofWrappers = []any{
		(*FunctionReferenceCapturedGlobal_Builtin)(nil),
		(*FunctionReferenceCapturedGlobal_FeatureClass)(nil),
		(*FunctionReferenceCapturedGlobal_Enum)(nil),
		(*FunctionReferenceCapturedGlobal_Module)(nil),
		(*FunctionReferenceCapturedGlobal_ModuleMember)(nil),
		(*FunctionReferenceCapturedGlobal_Function)(nil),
		(*FunctionReferenceCapturedGlobal_Struct)(nil),
		(*FunctionReferenceCapturedGlobal_Variable)(nil),
		(*FunctionReferenceCapturedGlobal_Proto)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[35].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[37].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[39].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[40].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[41].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[42].OneofWrappers = []any{}
	file_chalk_graph_v1_graph_proto_msgTypes[44].OneofWrappers = []any{
		(*Schedule_Crontab)(nil),
		(*Schedule_Duration)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[45].OneofWrappers = []any{
		(*FeatureValidation_Min)(nil),
		(*FeatureValidation_Max)(nil),
		(*FeatureValidation_MinLength)(nil),
		(*FeatureValidation_MaxLength)(nil),
		(*FeatureValidation_MinArrow)(nil),
		(*FeatureValidation_MaxArrow)(nil),
		(*FeatureValidation_MinLengthArrow)(nil),
		(*FeatureValidation_MaxLengthArrow)(nil),
		(*FeatureValidation_Contains)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[48].OneofWrappers = []any{
		(*FeatureEncoder_GlobalFunctionReference)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[49].OneofWrappers = []any{
		(*FeatureDecoder_GlobalFunctionReference)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[51].OneofWrappers = []any{
		(*FeatureRichType_ClassType)(nil),
	}
	file_chalk_graph_v1_graph_proto_msgTypes[52].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_graph_v1_graph_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_graph_v1_graph_proto_goTypes,
		DependencyIndexes: file_chalk_graph_v1_graph_proto_depIdxs,
		EnumInfos:         file_chalk_graph_v1_graph_proto_enumTypes,
		MessageInfos:      file_chalk_graph_v1_graph_proto_msgTypes,
	}.Build()
	File_chalk_graph_v1_graph_proto = out.File
	file_chalk_graph_v1_graph_proto_rawDesc = nil
	file_chalk_graph_v1_graph_proto_goTypes = nil
	file_chalk_graph_v1_graph_proto_depIdxs = nil
}
