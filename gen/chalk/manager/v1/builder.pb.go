// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/manager/v1/builder.proto

package managerv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KafkaTopic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Partitions    int32                  `protobuf:"varint,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	Replication   *int32                 `protobuf:"varint,3,opt,name=replication,proto3,oneof" json:"replication,omitempty"`
	RetentionMs   int32                  `protobuf:"varint,4,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaTopic) Reset() {
	*x = KafkaTopic{}
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTopic) ProtoMessage() {}

func (x *KafkaTopic) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTopic.ProtoReflect.Descriptor instead.
func (*KafkaTopic) Descriptor() ([]byte, []int) {
	return file_chalk_manager_v1_builder_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaTopic) GetPartitions() int32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *KafkaTopic) GetReplication() int32 {
	if x != nil && x.Replication != nil {
		return *x.Replication
	}
	return 0
}

func (x *KafkaTopic) GetRetentionMs() int32 {
	if x != nil {
		return x.RetentionMs
	}
	return 0
}

type CreateKafkaTopicsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []*KafkaTopic          `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKafkaTopicsRequest) Reset() {
	*x = CreateKafkaTopicsRequest{}
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKafkaTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKafkaTopicsRequest) ProtoMessage() {}

func (x *CreateKafkaTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKafkaTopicsRequest.ProtoReflect.Descriptor instead.
func (*CreateKafkaTopicsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_manager_v1_builder_proto_rawDescGZIP(), []int{1}
}

func (x *CreateKafkaTopicsRequest) GetTopics() []*KafkaTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type CreateKafkaTopicsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKafkaTopicsResponse) Reset() {
	*x = CreateKafkaTopicsResponse{}
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKafkaTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKafkaTopicsResponse) ProtoMessage() {}

func (x *CreateKafkaTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKafkaTopicsResponse.ProtoReflect.Descriptor instead.
func (*CreateKafkaTopicsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_manager_v1_builder_proto_rawDescGZIP(), []int{2}
}

type GetKafkaTopicsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaTopicsRequest) Reset() {
	*x = GetKafkaTopicsRequest{}
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaTopicsRequest) ProtoMessage() {}

func (x *GetKafkaTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaTopicsRequest.ProtoReflect.Descriptor instead.
func (*GetKafkaTopicsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_manager_v1_builder_proto_rawDescGZIP(), []int{3}
}

type GetKafkaTopicsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []*KafkaTopic          `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKafkaTopicsResponse) Reset() {
	*x = GetKafkaTopicsResponse{}
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKafkaTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKafkaTopicsResponse) ProtoMessage() {}

func (x *GetKafkaTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_manager_v1_builder_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKafkaTopicsResponse.ProtoReflect.Descriptor instead.
func (*GetKafkaTopicsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_manager_v1_builder_proto_rawDescGZIP(), []int{4}
}

func (x *GetKafkaTopicsResponse) GetTopics() []*KafkaTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

var File_chalk_manager_v1_builder_proto protoreflect.FileDescriptor

const file_chalk_manager_v1_builder_proto_rawDesc = "" +
	"\n" +
	"\x1echalk/manager/v1/builder.proto\x12\x10chalk.manager.v1\x1a\x1fchalk/auth/v1/permissions.proto\"\x9a\x01\n" +
	"\n" +
	"KafkaTopic\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"partitions\x18\x02 \x01(\x05R\n" +
	"partitions\x12%\n" +
	"\vreplication\x18\x03 \x01(\x05H\x00R\vreplication\x88\x01\x01\x12!\n" +
	"\fretention_ms\x18\x04 \x01(\x05R\vretentionMsB\x0e\n" +
	"\f_replication\"P\n" +
	"\x18CreateKafkaTopicsRequest\x124\n" +
	"\x06topics\x18\x01 \x03(\v2\x1c.chalk.manager.v1.KafkaTopicR\x06topics\"\x1b\n" +
	"\x19CreateKafkaTopicsResponse\"\x17\n" +
	"\x15GetKafkaTopicsRequest\"N\n" +
	"\x16GetKafkaTopicsResponse\x124\n" +
	"\x06topics\x18\x01 \x03(\v2\x1c.chalk.manager.v1.KafkaTopicR\x06topics2\xf4\x01\n" +
	"\x15ClusterBuilderService\x12q\n" +
	"\x11CreateKafkaTopics\x12*.chalk.manager.v1.CreateKafkaTopicsRequest\x1a+.chalk.manager.v1.CreateKafkaTopicsResponse\"\x03\x80}\n" +
	"\x12h\n" +
	"\x0eGetKafkaTopics\x12'.chalk.manager.v1.GetKafkaTopicsRequest\x1a(.chalk.manager.v1.GetKafkaTopicsResponse\"\x03\x80}\n" +
	"B\xc3\x01\n" +
	"\x14com.chalk.manager.v1B\fBuilderProtoP\x01Z;github.com/chalk-ai/chalk-go/gen/chalk/manager/v1;managerv1\xa2\x02\x03CMX\xaa\x02\x10Chalk.Manager.V1\xca\x02\x10Chalk\\Manager\\V1\xe2\x02\x1cChalk\\Manager\\V1\\GPBMetadata\xea\x02\x12Chalk::Manager::V1b\x06proto3"

var (
	file_chalk_manager_v1_builder_proto_rawDescOnce sync.Once
	file_chalk_manager_v1_builder_proto_rawDescData []byte
)

func file_chalk_manager_v1_builder_proto_rawDescGZIP() []byte {
	file_chalk_manager_v1_builder_proto_rawDescOnce.Do(func() {
		file_chalk_manager_v1_builder_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_manager_v1_builder_proto_rawDesc), len(file_chalk_manager_v1_builder_proto_rawDesc)))
	})
	return file_chalk_manager_v1_builder_proto_rawDescData
}

var file_chalk_manager_v1_builder_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chalk_manager_v1_builder_proto_goTypes = []any{
	(*KafkaTopic)(nil),                // 0: chalk.manager.v1.KafkaTopic
	(*CreateKafkaTopicsRequest)(nil),  // 1: chalk.manager.v1.CreateKafkaTopicsRequest
	(*CreateKafkaTopicsResponse)(nil), // 2: chalk.manager.v1.CreateKafkaTopicsResponse
	(*GetKafkaTopicsRequest)(nil),     // 3: chalk.manager.v1.GetKafkaTopicsRequest
	(*GetKafkaTopicsResponse)(nil),    // 4: chalk.manager.v1.GetKafkaTopicsResponse
}
var file_chalk_manager_v1_builder_proto_depIdxs = []int32{
	0, // 0: chalk.manager.v1.CreateKafkaTopicsRequest.topics:type_name -> chalk.manager.v1.KafkaTopic
	0, // 1: chalk.manager.v1.GetKafkaTopicsResponse.topics:type_name -> chalk.manager.v1.KafkaTopic
	1, // 2: chalk.manager.v1.ClusterBuilderService.CreateKafkaTopics:input_type -> chalk.manager.v1.CreateKafkaTopicsRequest
	3, // 3: chalk.manager.v1.ClusterBuilderService.GetKafkaTopics:input_type -> chalk.manager.v1.GetKafkaTopicsRequest
	2, // 4: chalk.manager.v1.ClusterBuilderService.CreateKafkaTopics:output_type -> chalk.manager.v1.CreateKafkaTopicsResponse
	4, // 5: chalk.manager.v1.ClusterBuilderService.GetKafkaTopics:output_type -> chalk.manager.v1.GetKafkaTopicsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_manager_v1_builder_proto_init() }
func file_chalk_manager_v1_builder_proto_init() {
	if File_chalk_manager_v1_builder_proto != nil {
		return
	}
	file_chalk_manager_v1_builder_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_manager_v1_builder_proto_rawDesc), len(file_chalk_manager_v1_builder_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_manager_v1_builder_proto_goTypes,
		DependencyIndexes: file_chalk_manager_v1_builder_proto_depIdxs,
		MessageInfos:      file_chalk_manager_v1_builder_proto_msgTypes,
	}.Build()
	File_chalk_manager_v1_builder_proto = out.File
	file_chalk_manager_v1_builder_proto_goTypes = nil
	file_chalk_manager_v1_builder_proto_depIdxs = nil
}
