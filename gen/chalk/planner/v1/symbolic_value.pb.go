// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/planner/v1/symbolic_value.proto

package plannerv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/python/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SymbolicValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty *v1.Ty `protobuf:"bytes,1,opt,name=ty,proto3" json:"ty,omitempty"`
	// Types that are assignable to Subclass:
	//
	//	*SymbolicValue_SymbolicParameter
	//	*SymbolicValue_SymbolicConst
	//	*SymbolicValue_SymbolicFuncCall
	//	*SymbolicValue_SymbolicBranch
	//	*SymbolicValue_SymbolicStructClassConstructor
	//	*SymbolicValue_SymbolicFeatureClassConstructor
	//	*SymbolicValue_SymbolicConfluentKafkaSerializationContext
	//	*SymbolicValue_SymbolicLambdaParameter
	//	*SymbolicValue_SymbolicLambdaFunction
	//	*SymbolicValue_SymbolicStructField
	//	*SymbolicValue_SymbolicStructPack
	//	*SymbolicValue_SymbolicSlice
	//	*SymbolicValue_SymbolicTuple
	//	*SymbolicValue_SymbolicDict
	//	*SymbolicValue_SequenceMatcherSymbolicValue
	//	*SymbolicValue_SymbolicProtobufMessageClass
	//	*SymbolicValue_SymbolicProtoEnum
	Subclass isSymbolicValue_Subclass `protobuf_oneof:"subclass"`
}

func (x *SymbolicValue) Reset() {
	*x = SymbolicValue{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicValue) ProtoMessage() {}

func (x *SymbolicValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicValue.ProtoReflect.Descriptor instead.
func (*SymbolicValue) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{0}
}

func (x *SymbolicValue) GetTy() *v1.Ty {
	if x != nil {
		return x.Ty
	}
	return nil
}

func (m *SymbolicValue) GetSubclass() isSymbolicValue_Subclass {
	if m != nil {
		return m.Subclass
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicParameter() *SymbolicParameter {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicParameter); ok {
		return x.SymbolicParameter
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicConst() *v1.SymbolicConst {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicConst); ok {
		return x.SymbolicConst
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicFuncCall() *SymbolicFuncCall {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicFuncCall); ok {
		return x.SymbolicFuncCall
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicBranch() *SymbolicBranch {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicBranch); ok {
		return x.SymbolicBranch
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicStructClassConstructor() *SymbolicStructClassConstructor {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicStructClassConstructor); ok {
		return x.SymbolicStructClassConstructor
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicFeatureClassConstructor() *SymbolicFeatureClassConstructor {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicFeatureClassConstructor); ok {
		return x.SymbolicFeatureClassConstructor
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicConfluentKafkaSerializationContext() *SymbolicConfluentKafkaSerializationContext {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicConfluentKafkaSerializationContext); ok {
		return x.SymbolicConfluentKafkaSerializationContext
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicLambdaParameter() *SymbolicLambdaParameter {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicLambdaParameter); ok {
		return x.SymbolicLambdaParameter
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicLambdaFunction() *SymbolicLambdaFunction {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicLambdaFunction); ok {
		return x.SymbolicLambdaFunction
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicStructField() *SymbolicStructField {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicStructField); ok {
		return x.SymbolicStructField
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicStructPack() *SymbolicStructPack {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicStructPack); ok {
		return x.SymbolicStructPack
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicSlice() *SymbolicSlice {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicSlice); ok {
		return x.SymbolicSlice
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicTuple() *SymbolicTuple {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicTuple); ok {
		return x.SymbolicTuple
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicDict() *SymbolicDict {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicDict); ok {
		return x.SymbolicDict
	}
	return nil
}

func (x *SymbolicValue) GetSequenceMatcherSymbolicValue() *SequenceMatcherSymbolicValue {
	if x, ok := x.GetSubclass().(*SymbolicValue_SequenceMatcherSymbolicValue); ok {
		return x.SequenceMatcherSymbolicValue
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicProtobufMessageClass() *SymbolicProtobufMessageClass {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicProtobufMessageClass); ok {
		return x.SymbolicProtobufMessageClass
	}
	return nil
}

func (x *SymbolicValue) GetSymbolicProtoEnum() *SymbolicProtoEnum {
	if x, ok := x.GetSubclass().(*SymbolicValue_SymbolicProtoEnum); ok {
		return x.SymbolicProtoEnum
	}
	return nil
}

type isSymbolicValue_Subclass interface {
	isSymbolicValue_Subclass()
}

type SymbolicValue_SymbolicParameter struct {
	SymbolicParameter *SymbolicParameter `protobuf:"bytes,2,opt,name=symbolic_parameter,json=symbolicParameter,proto3,oneof"`
}

type SymbolicValue_SymbolicConst struct {
	// note that SymbolicConst also has a field ty. we should ensure that
	// SymbolicValue.ty == SymbolicConst.ty
	SymbolicConst *v1.SymbolicConst `protobuf:"bytes,3,opt,name=symbolic_const,json=symbolicConst,proto3,oneof"`
}

type SymbolicValue_SymbolicFuncCall struct {
	SymbolicFuncCall *SymbolicFuncCall `protobuf:"bytes,4,opt,name=symbolic_func_call,json=symbolicFuncCall,proto3,oneof"`
}

type SymbolicValue_SymbolicBranch struct {
	SymbolicBranch *SymbolicBranch `protobuf:"bytes,5,opt,name=symbolic_branch,json=symbolicBranch,proto3,oneof"`
}

type SymbolicValue_SymbolicStructClassConstructor struct {
	SymbolicStructClassConstructor *SymbolicStructClassConstructor `protobuf:"bytes,6,opt,name=symbolic_struct_class_constructor,json=symbolicStructClassConstructor,proto3,oneof"`
}

type SymbolicValue_SymbolicFeatureClassConstructor struct {
	SymbolicFeatureClassConstructor *SymbolicFeatureClassConstructor `protobuf:"bytes,7,opt,name=symbolic_feature_class_constructor,json=symbolicFeatureClassConstructor,proto3,oneof"`
}

type SymbolicValue_SymbolicConfluentKafkaSerializationContext struct {
	SymbolicConfluentKafkaSerializationContext *SymbolicConfluentKafkaSerializationContext `protobuf:"bytes,8,opt,name=symbolic_confluent_kafka_serialization_context,json=symbolicConfluentKafkaSerializationContext,proto3,oneof"`
}

type SymbolicValue_SymbolicLambdaParameter struct {
	SymbolicLambdaParameter *SymbolicLambdaParameter `protobuf:"bytes,9,opt,name=symbolic_lambda_parameter,json=symbolicLambdaParameter,proto3,oneof"`
}

type SymbolicValue_SymbolicLambdaFunction struct {
	SymbolicLambdaFunction *SymbolicLambdaFunction `protobuf:"bytes,10,opt,name=symbolic_lambda_function,json=symbolicLambdaFunction,proto3,oneof"`
}

type SymbolicValue_SymbolicStructField struct {
	SymbolicStructField *SymbolicStructField `protobuf:"bytes,11,opt,name=symbolic_struct_field,json=symbolicStructField,proto3,oneof"`
}

type SymbolicValue_SymbolicStructPack struct {
	SymbolicStructPack *SymbolicStructPack `protobuf:"bytes,12,opt,name=symbolic_struct_pack,json=symbolicStructPack,proto3,oneof"`
}

type SymbolicValue_SymbolicSlice struct {
	SymbolicSlice *SymbolicSlice `protobuf:"bytes,13,opt,name=symbolic_slice,json=symbolicSlice,proto3,oneof"`
}

type SymbolicValue_SymbolicTuple struct {
	SymbolicTuple *SymbolicTuple `protobuf:"bytes,14,opt,name=symbolic_tuple,json=symbolicTuple,proto3,oneof"`
}

type SymbolicValue_SymbolicDict struct {
	SymbolicDict *SymbolicDict `protobuf:"bytes,15,opt,name=symbolic_dict,json=symbolicDict,proto3,oneof"`
}

type SymbolicValue_SequenceMatcherSymbolicValue struct {
	SequenceMatcherSymbolicValue *SequenceMatcherSymbolicValue `protobuf:"bytes,16,opt,name=sequence_matcher_symbolic_value,json=sequenceMatcherSymbolicValue,proto3,oneof"`
}

type SymbolicValue_SymbolicProtobufMessageClass struct {
	SymbolicProtobufMessageClass *SymbolicProtobufMessageClass `protobuf:"bytes,17,opt,name=symbolic_protobuf_message_class,json=symbolicProtobufMessageClass,proto3,oneof"`
}

type SymbolicValue_SymbolicProtoEnum struct {
	SymbolicProtoEnum *SymbolicProtoEnum `protobuf:"bytes,18,opt,name=symbolic_proto_enum,json=symbolicProtoEnum,proto3,oneof"`
}

func (*SymbolicValue_SymbolicParameter) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicConst) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicFuncCall) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicBranch) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicStructClassConstructor) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicFeatureClassConstructor) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicConfluentKafkaSerializationContext) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicLambdaParameter) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicLambdaFunction) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicStructField) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicStructPack) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicSlice) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicTuple) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicDict) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SequenceMatcherSymbolicValue) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicProtobufMessageClass) isSymbolicValue_Subclass() {}

func (*SymbolicValue_SymbolicProtoEnum) isSymbolicValue_Subclass() {}

type SymbolicParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Index int64  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *SymbolicParameter) Reset() {
	*x = SymbolicParameter{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicParameter) ProtoMessage() {}

func (x *SymbolicParameter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicParameter.ProtoReflect.Descriptor instead.
func (*SymbolicParameter) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{1}
}

func (x *SymbolicParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SymbolicParameter) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type SymbolicFuncCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName string           `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Args         []*SymbolicValue `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *SymbolicFuncCall) Reset() {
	*x = SymbolicFuncCall{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicFuncCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicFuncCall) ProtoMessage() {}

func (x *SymbolicFuncCall) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicFuncCall.ProtoReflect.Descriptor instead.
func (*SymbolicFuncCall) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{2}
}

func (x *SymbolicFuncCall) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SymbolicFuncCall) GetArgs() []*SymbolicValue {
	if x != nil {
		return x.Args
	}
	return nil
}

type SymbolicBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *SymbolicValue `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	IfTrue    *SymbolicValue `protobuf:"bytes,2,opt,name=if_true,json=ifTrue,proto3" json:"if_true,omitempty"`
	IfFalse   *SymbolicValue `protobuf:"bytes,3,opt,name=if_false,json=ifFalse,proto3" json:"if_false,omitempty"`
}

func (x *SymbolicBranch) Reset() {
	*x = SymbolicBranch{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicBranch) ProtoMessage() {}

func (x *SymbolicBranch) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicBranch.ProtoReflect.Descriptor instead.
func (*SymbolicBranch) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{3}
}

func (x *SymbolicBranch) GetCondition() *SymbolicValue {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SymbolicBranch) GetIfTrue() *SymbolicValue {
	if x != nil {
		return x.IfTrue
	}
	return nil
}

func (x *SymbolicBranch) GetIfFalse() *SymbolicValue {
	if x != nil {
		return x.IfFalse
	}
	return nil
}

type SymbolicStructClassConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StructName string                    `protobuf:"bytes,1,opt,name=struct_name,json=structName,proto3" json:"struct_name,omitempty"`
	Fields     map[string]*SymbolicValue `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SymbolicStructClassConstructor) Reset() {
	*x = SymbolicStructClassConstructor{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicStructClassConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicStructClassConstructor) ProtoMessage() {}

func (x *SymbolicStructClassConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicStructClassConstructor.ProtoReflect.Descriptor instead.
func (*SymbolicStructClassConstructor) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{4}
}

func (x *SymbolicStructClassConstructor) GetStructName() string {
	if x != nil {
		return x.StructName
	}
	return ""
}

func (x *SymbolicStructClassConstructor) GetFields() map[string]*SymbolicValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SymbolicFeatureClassConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructorNamespace string                    `protobuf:"bytes,1,opt,name=constructor_namespace,json=constructorNamespace,proto3" json:"constructor_namespace,omitempty"`
	Fields               map[string]*SymbolicValue `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SymbolicFeatureClassConstructor) Reset() {
	*x = SymbolicFeatureClassConstructor{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicFeatureClassConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicFeatureClassConstructor) ProtoMessage() {}

func (x *SymbolicFeatureClassConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicFeatureClassConstructor.ProtoReflect.Descriptor instead.
func (*SymbolicFeatureClassConstructor) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{5}
}

func (x *SymbolicFeatureClassConstructor) GetConstructorNamespace() string {
	if x != nil {
		return x.ConstructorNamespace
	}
	return ""
}

func (x *SymbolicFeatureClassConstructor) GetFields() map[string]*SymbolicValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SymbolicConfluentKafkaSerializationContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic        *SymbolicValue `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	MessageField *SymbolicValue `protobuf:"bytes,2,opt,name=message_field,json=messageField,proto3" json:"message_field,omitempty"`
}

func (x *SymbolicConfluentKafkaSerializationContext) Reset() {
	*x = SymbolicConfluentKafkaSerializationContext{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicConfluentKafkaSerializationContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicConfluentKafkaSerializationContext) ProtoMessage() {}

func (x *SymbolicConfluentKafkaSerializationContext) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicConfluentKafkaSerializationContext.ProtoReflect.Descriptor instead.
func (*SymbolicConfluentKafkaSerializationContext) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{6}
}

func (x *SymbolicConfluentKafkaSerializationContext) GetTopic() *SymbolicValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *SymbolicConfluentKafkaSerializationContext) GetMessageField() *SymbolicValue {
	if x != nil {
		return x.MessageField
	}
	return nil
}

type SymbolicLambdaParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SymbolicLambdaParameter) Reset() {
	*x = SymbolicLambdaParameter{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicLambdaParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicLambdaParameter) ProtoMessage() {}

func (x *SymbolicLambdaParameter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicLambdaParameter.ProtoReflect.Descriptor instead.
func (*SymbolicLambdaParameter) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{7}
}

func (x *SymbolicLambdaParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SymbolicLambdaFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// these parameters must be of type SymbolicLambdaParameter.
	Parameters []*SymbolicValue `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Body       *SymbolicValue   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SymbolicLambdaFunction) Reset() {
	*x = SymbolicLambdaFunction{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicLambdaFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicLambdaFunction) ProtoMessage() {}

func (x *SymbolicLambdaFunction) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicLambdaFunction.ProtoReflect.Descriptor instead.
func (*SymbolicLambdaFunction) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{8}
}

func (x *SymbolicLambdaFunction) GetParameters() []*SymbolicValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SymbolicLambdaFunction) GetBody() *SymbolicValue {
	if x != nil {
		return x.Body
	}
	return nil
}

type SymbolicStructField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Struct *SymbolicValue `protobuf:"bytes,1,opt,name=struct,proto3" json:"struct,omitempty"`
	// Types that are assignable to FieldName:
	//
	//	*SymbolicStructField_FieldNameStr
	//	*SymbolicStructField_FieldNameInt
	FieldName isSymbolicStructField_FieldName `protobuf_oneof:"field_name"`
}

func (x *SymbolicStructField) Reset() {
	*x = SymbolicStructField{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicStructField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicStructField) ProtoMessage() {}

func (x *SymbolicStructField) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicStructField.ProtoReflect.Descriptor instead.
func (*SymbolicStructField) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{9}
}

func (x *SymbolicStructField) GetStruct() *SymbolicValue {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (m *SymbolicStructField) GetFieldName() isSymbolicStructField_FieldName {
	if m != nil {
		return m.FieldName
	}
	return nil
}

func (x *SymbolicStructField) GetFieldNameStr() string {
	if x, ok := x.GetFieldName().(*SymbolicStructField_FieldNameStr); ok {
		return x.FieldNameStr
	}
	return ""
}

func (x *SymbolicStructField) GetFieldNameInt() int64 {
	if x, ok := x.GetFieldName().(*SymbolicStructField_FieldNameInt); ok {
		return x.FieldNameInt
	}
	return 0
}

type isSymbolicStructField_FieldName interface {
	isSymbolicStructField_FieldName()
}

type SymbolicStructField_FieldNameStr struct {
	FieldNameStr string `protobuf:"bytes,2,opt,name=field_name_str,json=fieldNameStr,proto3,oneof"`
}

type SymbolicStructField_FieldNameInt struct {
	FieldNameInt int64 `protobuf:"varint,3,opt,name=field_name_int,json=fieldNameInt,proto3,oneof"`
}

func (*SymbolicStructField_FieldNameStr) isSymbolicStructField_FieldName() {}

func (*SymbolicStructField_FieldNameInt) isSymbolicStructField_FieldName() {}

type SymbolicStructPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*SymbolicValue `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SymbolicStructPack) Reset() {
	*x = SymbolicStructPack{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicStructPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicStructPack) ProtoMessage() {}

func (x *SymbolicStructPack) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicStructPack.ProtoReflect.Descriptor instead.
func (*SymbolicStructPack) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{10}
}

func (x *SymbolicStructPack) GetFields() map[string]*SymbolicValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SymbolicSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower *SymbolicValue `protobuf:"bytes,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper *SymbolicValue `protobuf:"bytes,2,opt,name=upper,proto3" json:"upper,omitempty"`
	Step  *SymbolicValue `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *SymbolicSlice) Reset() {
	*x = SymbolicSlice{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicSlice) ProtoMessage() {}

func (x *SymbolicSlice) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicSlice.ProtoReflect.Descriptor instead.
func (*SymbolicSlice) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{11}
}

func (x *SymbolicSlice) GetLower() *SymbolicValue {
	if x != nil {
		return x.Lower
	}
	return nil
}

func (x *SymbolicSlice) GetUpper() *SymbolicValue {
	if x != nil {
		return x.Upper
	}
	return nil
}

func (x *SymbolicSlice) GetStep() *SymbolicValue {
	if x != nil {
		return x.Step
	}
	return nil
}

type SymbolicTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*SymbolicValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SymbolicTuple) Reset() {
	*x = SymbolicTuple{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicTuple) ProtoMessage() {}

func (x *SymbolicTuple) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicTuple.ProtoReflect.Descriptor instead.
func (*SymbolicTuple) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{12}
}

func (x *SymbolicTuple) GetValues() []*SymbolicValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type SymbolicDict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValuesKeys   []*SymbolicValue `protobuf:"bytes,1,rep,name=values_keys,json=valuesKeys,proto3" json:"values_keys,omitempty"`
	ValuesValues []*SymbolicValue `protobuf:"bytes,2,rep,name=values_values,json=valuesValues,proto3" json:"values_values,omitempty"`
}

func (x *SymbolicDict) Reset() {
	*x = SymbolicDict{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicDict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicDict) ProtoMessage() {}

func (x *SymbolicDict) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicDict.ProtoReflect.Descriptor instead.
func (*SymbolicDict) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{13}
}

func (x *SymbolicDict) GetValuesKeys() []*SymbolicValue {
	if x != nil {
		return x.ValuesKeys
	}
	return nil
}

func (x *SymbolicDict) GetValuesValues() []*SymbolicValue {
	if x != nil {
		return x.ValuesValues
	}
	return nil
}

type SequenceMatcherSymbolicValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *SymbolicValue `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B *SymbolicValue `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *SequenceMatcherSymbolicValue) Reset() {
	*x = SequenceMatcherSymbolicValue{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequenceMatcherSymbolicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceMatcherSymbolicValue) ProtoMessage() {}

func (x *SequenceMatcherSymbolicValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceMatcherSymbolicValue.ProtoReflect.Descriptor instead.
func (*SequenceMatcherSymbolicValue) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{14}
}

func (x *SequenceMatcherSymbolicValue) GetA() *SymbolicValue {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *SequenceMatcherSymbolicValue) GetB() *SymbolicValue {
	if x != nil {
		return x.B
	}
	return nil
}

type SymbolicProtobufMessageClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName  string  `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	ModuleName *string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3,oneof" json:"module_name,omitempty"`
}

func (x *SymbolicProtobufMessageClass) Reset() {
	*x = SymbolicProtobufMessageClass{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicProtobufMessageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicProtobufMessageClass) ProtoMessage() {}

func (x *SymbolicProtobufMessageClass) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicProtobufMessageClass.ProtoReflect.Descriptor instead.
func (*SymbolicProtobufMessageClass) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{15}
}

func (x *SymbolicProtobufMessageClass) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SymbolicProtobufMessageClass) GetModuleName() string {
	if x != nil && x.ModuleName != nil {
		return *x.ModuleName
	}
	return ""
}

type SymbolicProtoEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName         string           `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	ModuleName        string           `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	FullQualifiedName string           `protobuf:"bytes,3,opt,name=full_qualified_name,json=fullQualifiedName,proto3" json:"full_qualified_name,omitempty"`
	ValueToNameMap    map[int64]string `protobuf:"bytes,4,rep,name=value_to_name_map,json=valueToNameMap,proto3" json:"value_to_name_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SymbolicProtoEnum) Reset() {
	*x = SymbolicProtoEnum{}
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicProtoEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicProtoEnum) ProtoMessage() {}

func (x *SymbolicProtoEnum) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_symbolic_value_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicProtoEnum.ProtoReflect.Descriptor instead.
func (*SymbolicProtoEnum) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP(), []int{16}
}

func (x *SymbolicProtoEnum) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SymbolicProtoEnum) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SymbolicProtoEnum) GetFullQualifiedName() string {
	if x != nil {
		return x.FullQualifiedName
	}
	return ""
}

func (x *SymbolicProtoEnum) GetValueToNameMap() map[int64]string {
	if x != nil {
		return x.ValueToNameMap
	}
	return nil
}

var File_chalk_planner_v1_symbolic_value_proto protoreflect.FileDescriptor

var file_chalk_planner_v1_symbolic_value_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x0d, 0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x02, 0x74, 0x79, 0x12, 0x54, 0x0a,
	0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x7d, 0x0a,
	0x21, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x80, 0x01, 0x0a,
	0x22, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0xa2, 0x01, 0x0a, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x2a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x67, 0x0a, 0x19, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63,
	0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x63, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a,
	0x18, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x13, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x58, 0x0a, 0x14, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63,
	0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x45,
	0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x44, 0x69, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x44, 0x69, 0x63, 0x74, 0x12, 0x77, 0x0a, 0x1f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x1c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x77,
	0x0a, 0x1f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x11, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6c, 0x0a, 0x10, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x69, 0x63, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x66, 0x5f,
	0x74, 0x72, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x66, 0x54,
	0x72, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x66, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x22,
	0xf3, 0x01, 0x0a, 0x1e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x1f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x69, 0x63, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa9, 0x01, 0x0a, 0x2a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x2d, 0x0a,
	0x17, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x16, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xac, 0x01,
	0x0a, 0x13, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a,
	0x12, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x0d, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x48,
	0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x44, 0x69, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x7c, 0x0a, 0x1c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2d, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x61,
	0x12, 0x2d, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x62, 0x22,
	0x73, 0x0a, 0x1c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x41,
	0x0a, 0x13, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x50, 0x58, 0xaa, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_planner_v1_symbolic_value_proto_rawDescOnce sync.Once
	file_chalk_planner_v1_symbolic_value_proto_rawDescData = file_chalk_planner_v1_symbolic_value_proto_rawDesc
)

func file_chalk_planner_v1_symbolic_value_proto_rawDescGZIP() []byte {
	file_chalk_planner_v1_symbolic_value_proto_rawDescOnce.Do(func() {
		file_chalk_planner_v1_symbolic_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_planner_v1_symbolic_value_proto_rawDescData)
	})
	return file_chalk_planner_v1_symbolic_value_proto_rawDescData
}

var file_chalk_planner_v1_symbolic_value_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_chalk_planner_v1_symbolic_value_proto_goTypes = []any{
	(*SymbolicValue)(nil),                              // 0: chalk.planner.v1.SymbolicValue
	(*SymbolicParameter)(nil),                          // 1: chalk.planner.v1.SymbolicParameter
	(*SymbolicFuncCall)(nil),                           // 2: chalk.planner.v1.SymbolicFuncCall
	(*SymbolicBranch)(nil),                             // 3: chalk.planner.v1.SymbolicBranch
	(*SymbolicStructClassConstructor)(nil),             // 4: chalk.planner.v1.SymbolicStructClassConstructor
	(*SymbolicFeatureClassConstructor)(nil),            // 5: chalk.planner.v1.SymbolicFeatureClassConstructor
	(*SymbolicConfluentKafkaSerializationContext)(nil), // 6: chalk.planner.v1.SymbolicConfluentKafkaSerializationContext
	(*SymbolicLambdaParameter)(nil),                    // 7: chalk.planner.v1.SymbolicLambdaParameter
	(*SymbolicLambdaFunction)(nil),                     // 8: chalk.planner.v1.SymbolicLambdaFunction
	(*SymbolicStructField)(nil),                        // 9: chalk.planner.v1.SymbolicStructField
	(*SymbolicStructPack)(nil),                         // 10: chalk.planner.v1.SymbolicStructPack
	(*SymbolicSlice)(nil),                              // 11: chalk.planner.v1.SymbolicSlice
	(*SymbolicTuple)(nil),                              // 12: chalk.planner.v1.SymbolicTuple
	(*SymbolicDict)(nil),                               // 13: chalk.planner.v1.SymbolicDict
	(*SequenceMatcherSymbolicValue)(nil),               // 14: chalk.planner.v1.SequenceMatcherSymbolicValue
	(*SymbolicProtobufMessageClass)(nil),               // 15: chalk.planner.v1.SymbolicProtobufMessageClass
	(*SymbolicProtoEnum)(nil),                          // 16: chalk.planner.v1.SymbolicProtoEnum
	nil,                                                // 17: chalk.planner.v1.SymbolicStructClassConstructor.FieldsEntry
	nil,                                                // 18: chalk.planner.v1.SymbolicFeatureClassConstructor.FieldsEntry
	nil,                                                // 19: chalk.planner.v1.SymbolicStructPack.FieldsEntry
	nil,                                                // 20: chalk.planner.v1.SymbolicProtoEnum.ValueToNameMapEntry
	(*v1.Ty)(nil),                                      // 21: chalk.python.v1.Ty
	(*v1.SymbolicConst)(nil),                           // 22: chalk.python.v1.SymbolicConst
}
var file_chalk_planner_v1_symbolic_value_proto_depIdxs = []int32{
	21, // 0: chalk.planner.v1.SymbolicValue.ty:type_name -> chalk.python.v1.Ty
	1,  // 1: chalk.planner.v1.SymbolicValue.symbolic_parameter:type_name -> chalk.planner.v1.SymbolicParameter
	22, // 2: chalk.planner.v1.SymbolicValue.symbolic_const:type_name -> chalk.python.v1.SymbolicConst
	2,  // 3: chalk.planner.v1.SymbolicValue.symbolic_func_call:type_name -> chalk.planner.v1.SymbolicFuncCall
	3,  // 4: chalk.planner.v1.SymbolicValue.symbolic_branch:type_name -> chalk.planner.v1.SymbolicBranch
	4,  // 5: chalk.planner.v1.SymbolicValue.symbolic_struct_class_constructor:type_name -> chalk.planner.v1.SymbolicStructClassConstructor
	5,  // 6: chalk.planner.v1.SymbolicValue.symbolic_feature_class_constructor:type_name -> chalk.planner.v1.SymbolicFeatureClassConstructor
	6,  // 7: chalk.planner.v1.SymbolicValue.symbolic_confluent_kafka_serialization_context:type_name -> chalk.planner.v1.SymbolicConfluentKafkaSerializationContext
	7,  // 8: chalk.planner.v1.SymbolicValue.symbolic_lambda_parameter:type_name -> chalk.planner.v1.SymbolicLambdaParameter
	8,  // 9: chalk.planner.v1.SymbolicValue.symbolic_lambda_function:type_name -> chalk.planner.v1.SymbolicLambdaFunction
	9,  // 10: chalk.planner.v1.SymbolicValue.symbolic_struct_field:type_name -> chalk.planner.v1.SymbolicStructField
	10, // 11: chalk.planner.v1.SymbolicValue.symbolic_struct_pack:type_name -> chalk.planner.v1.SymbolicStructPack
	11, // 12: chalk.planner.v1.SymbolicValue.symbolic_slice:type_name -> chalk.planner.v1.SymbolicSlice
	12, // 13: chalk.planner.v1.SymbolicValue.symbolic_tuple:type_name -> chalk.planner.v1.SymbolicTuple
	13, // 14: chalk.planner.v1.SymbolicValue.symbolic_dict:type_name -> chalk.planner.v1.SymbolicDict
	14, // 15: chalk.planner.v1.SymbolicValue.sequence_matcher_symbolic_value:type_name -> chalk.planner.v1.SequenceMatcherSymbolicValue
	15, // 16: chalk.planner.v1.SymbolicValue.symbolic_protobuf_message_class:type_name -> chalk.planner.v1.SymbolicProtobufMessageClass
	16, // 17: chalk.planner.v1.SymbolicValue.symbolic_proto_enum:type_name -> chalk.planner.v1.SymbolicProtoEnum
	0,  // 18: chalk.planner.v1.SymbolicFuncCall.args:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 19: chalk.planner.v1.SymbolicBranch.condition:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 20: chalk.planner.v1.SymbolicBranch.if_true:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 21: chalk.planner.v1.SymbolicBranch.if_false:type_name -> chalk.planner.v1.SymbolicValue
	17, // 22: chalk.planner.v1.SymbolicStructClassConstructor.fields:type_name -> chalk.planner.v1.SymbolicStructClassConstructor.FieldsEntry
	18, // 23: chalk.planner.v1.SymbolicFeatureClassConstructor.fields:type_name -> chalk.planner.v1.SymbolicFeatureClassConstructor.FieldsEntry
	0,  // 24: chalk.planner.v1.SymbolicConfluentKafkaSerializationContext.topic:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 25: chalk.planner.v1.SymbolicConfluentKafkaSerializationContext.message_field:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 26: chalk.planner.v1.SymbolicLambdaFunction.parameters:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 27: chalk.planner.v1.SymbolicLambdaFunction.body:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 28: chalk.planner.v1.SymbolicStructField.struct:type_name -> chalk.planner.v1.SymbolicValue
	19, // 29: chalk.planner.v1.SymbolicStructPack.fields:type_name -> chalk.planner.v1.SymbolicStructPack.FieldsEntry
	0,  // 30: chalk.planner.v1.SymbolicSlice.lower:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 31: chalk.planner.v1.SymbolicSlice.upper:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 32: chalk.planner.v1.SymbolicSlice.step:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 33: chalk.planner.v1.SymbolicTuple.values:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 34: chalk.planner.v1.SymbolicDict.values_keys:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 35: chalk.planner.v1.SymbolicDict.values_values:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 36: chalk.planner.v1.SequenceMatcherSymbolicValue.a:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 37: chalk.planner.v1.SequenceMatcherSymbolicValue.b:type_name -> chalk.planner.v1.SymbolicValue
	20, // 38: chalk.planner.v1.SymbolicProtoEnum.value_to_name_map:type_name -> chalk.planner.v1.SymbolicProtoEnum.ValueToNameMapEntry
	0,  // 39: chalk.planner.v1.SymbolicStructClassConstructor.FieldsEntry.value:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 40: chalk.planner.v1.SymbolicFeatureClassConstructor.FieldsEntry.value:type_name -> chalk.planner.v1.SymbolicValue
	0,  // 41: chalk.planner.v1.SymbolicStructPack.FieldsEntry.value:type_name -> chalk.planner.v1.SymbolicValue
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_chalk_planner_v1_symbolic_value_proto_init() }
func file_chalk_planner_v1_symbolic_value_proto_init() {
	if File_chalk_planner_v1_symbolic_value_proto != nil {
		return
	}
	file_chalk_planner_v1_symbolic_value_proto_msgTypes[0].OneofWrappers = []any{
		(*SymbolicValue_SymbolicParameter)(nil),
		(*SymbolicValue_SymbolicConst)(nil),
		(*SymbolicValue_SymbolicFuncCall)(nil),
		(*SymbolicValue_SymbolicBranch)(nil),
		(*SymbolicValue_SymbolicStructClassConstructor)(nil),
		(*SymbolicValue_SymbolicFeatureClassConstructor)(nil),
		(*SymbolicValue_SymbolicConfluentKafkaSerializationContext)(nil),
		(*SymbolicValue_SymbolicLambdaParameter)(nil),
		(*SymbolicValue_SymbolicLambdaFunction)(nil),
		(*SymbolicValue_SymbolicStructField)(nil),
		(*SymbolicValue_SymbolicStructPack)(nil),
		(*SymbolicValue_SymbolicSlice)(nil),
		(*SymbolicValue_SymbolicTuple)(nil),
		(*SymbolicValue_SymbolicDict)(nil),
		(*SymbolicValue_SequenceMatcherSymbolicValue)(nil),
		(*SymbolicValue_SymbolicProtobufMessageClass)(nil),
		(*SymbolicValue_SymbolicProtoEnum)(nil),
	}
	file_chalk_planner_v1_symbolic_value_proto_msgTypes[9].OneofWrappers = []any{
		(*SymbolicStructField_FieldNameStr)(nil),
		(*SymbolicStructField_FieldNameInt)(nil),
	}
	file_chalk_planner_v1_symbolic_value_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_planner_v1_symbolic_value_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_planner_v1_symbolic_value_proto_goTypes,
		DependencyIndexes: file_chalk_planner_v1_symbolic_value_proto_depIdxs,
		MessageInfos:      file_chalk_planner_v1_symbolic_value_proto_msgTypes,
	}.Build()
	File_chalk_planner_v1_symbolic_value_proto = out.File
	file_chalk_planner_v1_symbolic_value_proto_rawDesc = nil
	file_chalk_planner_v1_symbolic_value_proto_goTypes = nil
	file_chalk_planner_v1_symbolic_value_proto_depIdxs = nil
}
