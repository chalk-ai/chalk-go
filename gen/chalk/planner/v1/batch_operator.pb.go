// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/planner/v1/batch_operator.proto

package plannerv1

import (
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	v12 "github.com/chalk-ai/chalk-go/gen/chalk/expression/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum of supported BatchOperators.
type OperatorType int32

const (
	OperatorType_OPERATOR_TYPE_UNSPECIFIED                                    OperatorType = 0
	OperatorType_OPERATOR_TYPE_ADD_CHILD_INDEX_COL                            OperatorType = 1
	OperatorType_OPERATOR_TYPE_ADD_INDEX_COL                                  OperatorType = 2
	OperatorType_OPERATOR_TYPE_BATCH_AGG_OPERATOR                             OperatorType = 3
	OperatorType_OPERATOR_TYPE_BATCH_DWHAGG_OPERATOR                          OperatorType = 4
	OperatorType_OPERATOR_TYPE_BATCH_RENAME                                   OperatorType = 5
	OperatorType_OPERATOR_TYPE_BIGTABLE_CACHE_LOOKUP                          OperatorType = 6
	OperatorType_OPERATOR_TYPE_CACHE_LOOKUP                                   OperatorType = 7
	OperatorType_OPERATOR_TYPE_CACHE_LOOKUP_HAS_MANY                          OperatorType = 8
	OperatorType_OPERATOR_TYPE_COMPUTE_CRON_OUTPUT_SUMMARY                    OperatorType = 9
	OperatorType_OPERATOR_TYPE_CPP_CACHE_LOOKUP                               OperatorType = 10
	OperatorType_OPERATOR_TYPE_DATAFRAME_MERGE_OPERATOR                       OperatorType = 11
	OperatorType_OPERATOR_TYPE_DATASET_SCAN                                   OperatorType = 12
	OperatorType_OPERATOR_TYPE_DEBUG_COMMENT_OPERATOR                         OperatorType = 13
	OperatorType_OPERATOR_TYPE_DEFAULT_INJECTOR                               OperatorType = 14
	OperatorType_OPERATOR_TYPE_DISTINCT_ON                                    OperatorType = 15
	OperatorType_OPERATOR_TYPE_DROP_CHILD_INDEX_COL                           OperatorType = 16
	OperatorType_OPERATOR_TYPE_DROP_COLUMNS                                   OperatorType = 17
	OperatorType_OPERATOR_TYPE_DYNAMO_DBCACHE_LOOKUP                          OperatorType = 18
	OperatorType_OPERATOR_TYPE_EXPLODE_HAS_MANY_OPERATOR                      OperatorType = 19
	OperatorType_OPERATOR_TYPE_EXTRA_TABLES_TO_SCALARS                        OperatorType = 20
	OperatorType_OPERATOR_TYPE_FILTER_MISSING                                 OperatorType = 21
	OperatorType_OPERATOR_TYPE_FINAL_PROJECT                                  OperatorType = 22
	OperatorType_OPERATOR_TYPE_GIVENS_SCAN                                    OperatorType = 23
	OperatorType_OPERATOR_TYPE_HAS_MANY_INPUT_OPERATOR                        OperatorType = 24
	OperatorType_OPERATOR_TYPE_HAS_MANY_OUTPUT_JOIN_OPERATOR                  OperatorType = 25
	OperatorType_OPERATOR_TYPE_IGNORE_OUTPUT                                  OperatorType = 26
	OperatorType_OPERATOR_TYPE_INTERMEDIATE_FEATURE_METRIC_RECORDING_OPERATOR OperatorType = 27
	OperatorType_OPERATOR_TYPE_JOIN_SINGLETONS_OPERATOR                       OperatorType = 28
	OperatorType_OPERATOR_TYPE_LATERAL_JOIN_INPUT_OPERATOR                    OperatorType = 29
	OperatorType_OPERATOR_TYPE_LATERAL_JOIN_OUTPUT_OPERATOR                   OperatorType = 30
	OperatorType_OPERATOR_TYPE_LATERAL_JOIN_RESOLVER                          OperatorType = 31
	OperatorType_OPERATOR_TYPE_LIFT_RESULT_TO_GROUP                           OperatorType = 32
	OperatorType_OPERATOR_TYPE_LIGHTNING_REDIS_CACHE_LOOKUP                   OperatorType = 33
	OperatorType_OPERATOR_TYPE_MERGE_JOIN_OPERATOR                            OperatorType = 34
	OperatorType_OPERATOR_TYPE_METRICS_PUBLISHER                              OperatorType = 35
	OperatorType_OPERATOR_TYPE_NEAREST_NEIGHBOR_SUB_PLAN_JOIN                 OperatorType = 36
	OperatorType_OPERATOR_TYPE_NEW_DATAFRAME_RESOLVER_OPERATOR                OperatorType = 37
	OperatorType_OPERATOR_TYPE_NEW_OFFLINE_CACHE_LOOKUP                       OperatorType = 38
	OperatorType_OPERATOR_TYPE_NON_BUS_PERSIST_OPERATOR                       OperatorType = 39
	OperatorType_OPERATOR_TYPE_OFFLINE_CACHE_SAMPLER                          OperatorType = 40
	OperatorType_OPERATOR_TYPE_ONE_TO_ONE_SCALAR_RESOLVER                     OperatorType = 41
	OperatorType_OPERATOR_TYPE_ONLINE_STORE_AGG_WRITER                        OperatorType = 42
	OperatorType_OPERATOR_TYPE_ONLINE_VECTOR_SEARCH                           OperatorType = 43
	OperatorType_OPERATOR_TYPE_OPTIMISTIC_LOAD                                OperatorType = 44
	OperatorType_OPERATOR_TYPE_OUTPUT_UNDERSCORE_OPERATOR                     OperatorType = 45
	OperatorType_OPERATOR_TYPE_PACK_GROUPS_INTO_STRUCTS                       OperatorType = 46
	OperatorType_OPERATOR_TYPE_PARQUET_WRITER                                 OperatorType = 47
	OperatorType_OPERATOR_TYPE_PROJECT                                        OperatorType = 48
	OperatorType_OPERATOR_TYPE_PROMOTE_SPINE                                  OperatorType = 49
	OperatorType_OPERATOR_TYPE_PUSH_DFTO_RESULT                               OperatorType = 50
	OperatorType_OPERATOR_TYPE_PUSH_HAS_MANY_TO_RESULT                        OperatorType = 51
	OperatorType_OPERATOR_TYPE_REMOVE_LARGE_LISTS_FROM_SCHEMA                 OperatorType = 52
	OperatorType_OPERATOR_TYPE_RENAME_INDEX_COLUMN_OPERATOR                   OperatorType = 53
	OperatorType_OPERATOR_TYPE_REPLAY                                         OperatorType = 54
	OperatorType_OPERATOR_TYPE_RESULT_BUS_PERSIST_OPERATOR_V2                 OperatorType = 55
	OperatorType_OPERATOR_TYPE_RUN_IN_BACKGROUND                              OperatorType = 56
	OperatorType_OPERATOR_TYPE_SQLDATAFRAME_RESOLVER_OPERATOR                 OperatorType = 57
	OperatorType_OPERATOR_TYPE_SQLLATERAL_JOIN_RESOLVER_OPERATOR              OperatorType = 58
	OperatorType_OPERATOR_TYPE_SQLSCALAR_RESOLVER_OPERATOR                    OperatorType = 59
	OperatorType_OPERATOR_TYPE_STATS_COLLECTOR                                OperatorType = 60
	OperatorType_OPERATOR_TYPE_STREAMING_AGG_WRITE_OPERATOR                   OperatorType = 61
	OperatorType_OPERATOR_TYPE_SUB_PLAN_FILTER                                OperatorType = 62
	OperatorType_OPERATOR_TYPE_SUB_PLAN_JOIN                                  OperatorType = 63
	OperatorType_OPERATOR_TYPE_SYMBOLIC_EXPRESSION_FALLBACK                   OperatorType = 64
	OperatorType_OPERATOR_TYPE_UNDERSCORE_SCALAR_RESOLVER_OPERATOR            OperatorType = 65
	OperatorType_OPERATOR_TYPE_UNION_OPERATOR                                 OperatorType = 66
	OperatorType_OPERATOR_TYPE_VALUES_PERSISTER                               OperatorType = 67
)

// Enum value maps for OperatorType.
var (
	OperatorType_name = map[int32]string{
		0:  "OPERATOR_TYPE_UNSPECIFIED",
		1:  "OPERATOR_TYPE_ADD_CHILD_INDEX_COL",
		2:  "OPERATOR_TYPE_ADD_INDEX_COL",
		3:  "OPERATOR_TYPE_BATCH_AGG_OPERATOR",
		4:  "OPERATOR_TYPE_BATCH_DWHAGG_OPERATOR",
		5:  "OPERATOR_TYPE_BATCH_RENAME",
		6:  "OPERATOR_TYPE_BIGTABLE_CACHE_LOOKUP",
		7:  "OPERATOR_TYPE_CACHE_LOOKUP",
		8:  "OPERATOR_TYPE_CACHE_LOOKUP_HAS_MANY",
		9:  "OPERATOR_TYPE_COMPUTE_CRON_OUTPUT_SUMMARY",
		10: "OPERATOR_TYPE_CPP_CACHE_LOOKUP",
		11: "OPERATOR_TYPE_DATAFRAME_MERGE_OPERATOR",
		12: "OPERATOR_TYPE_DATASET_SCAN",
		13: "OPERATOR_TYPE_DEBUG_COMMENT_OPERATOR",
		14: "OPERATOR_TYPE_DEFAULT_INJECTOR",
		15: "OPERATOR_TYPE_DISTINCT_ON",
		16: "OPERATOR_TYPE_DROP_CHILD_INDEX_COL",
		17: "OPERATOR_TYPE_DROP_COLUMNS",
		18: "OPERATOR_TYPE_DYNAMO_DBCACHE_LOOKUP",
		19: "OPERATOR_TYPE_EXPLODE_HAS_MANY_OPERATOR",
		20: "OPERATOR_TYPE_EXTRA_TABLES_TO_SCALARS",
		21: "OPERATOR_TYPE_FILTER_MISSING",
		22: "OPERATOR_TYPE_FINAL_PROJECT",
		23: "OPERATOR_TYPE_GIVENS_SCAN",
		24: "OPERATOR_TYPE_HAS_MANY_INPUT_OPERATOR",
		25: "OPERATOR_TYPE_HAS_MANY_OUTPUT_JOIN_OPERATOR",
		26: "OPERATOR_TYPE_IGNORE_OUTPUT",
		27: "OPERATOR_TYPE_INTERMEDIATE_FEATURE_METRIC_RECORDING_OPERATOR",
		28: "OPERATOR_TYPE_JOIN_SINGLETONS_OPERATOR",
		29: "OPERATOR_TYPE_LATERAL_JOIN_INPUT_OPERATOR",
		30: "OPERATOR_TYPE_LATERAL_JOIN_OUTPUT_OPERATOR",
		31: "OPERATOR_TYPE_LATERAL_JOIN_RESOLVER",
		32: "OPERATOR_TYPE_LIFT_RESULT_TO_GROUP",
		33: "OPERATOR_TYPE_LIGHTNING_REDIS_CACHE_LOOKUP",
		34: "OPERATOR_TYPE_MERGE_JOIN_OPERATOR",
		35: "OPERATOR_TYPE_METRICS_PUBLISHER",
		36: "OPERATOR_TYPE_NEAREST_NEIGHBOR_SUB_PLAN_JOIN",
		37: "OPERATOR_TYPE_NEW_DATAFRAME_RESOLVER_OPERATOR",
		38: "OPERATOR_TYPE_NEW_OFFLINE_CACHE_LOOKUP",
		39: "OPERATOR_TYPE_NON_BUS_PERSIST_OPERATOR",
		40: "OPERATOR_TYPE_OFFLINE_CACHE_SAMPLER",
		41: "OPERATOR_TYPE_ONE_TO_ONE_SCALAR_RESOLVER",
		42: "OPERATOR_TYPE_ONLINE_STORE_AGG_WRITER",
		43: "OPERATOR_TYPE_ONLINE_VECTOR_SEARCH",
		44: "OPERATOR_TYPE_OPTIMISTIC_LOAD",
		45: "OPERATOR_TYPE_OUTPUT_UNDERSCORE_OPERATOR",
		46: "OPERATOR_TYPE_PACK_GROUPS_INTO_STRUCTS",
		47: "OPERATOR_TYPE_PARQUET_WRITER",
		48: "OPERATOR_TYPE_PROJECT",
		49: "OPERATOR_TYPE_PROMOTE_SPINE",
		50: "OPERATOR_TYPE_PUSH_DFTO_RESULT",
		51: "OPERATOR_TYPE_PUSH_HAS_MANY_TO_RESULT",
		52: "OPERATOR_TYPE_REMOVE_LARGE_LISTS_FROM_SCHEMA",
		53: "OPERATOR_TYPE_RENAME_INDEX_COLUMN_OPERATOR",
		54: "OPERATOR_TYPE_REPLAY",
		55: "OPERATOR_TYPE_RESULT_BUS_PERSIST_OPERATOR_V2",
		56: "OPERATOR_TYPE_RUN_IN_BACKGROUND",
		57: "OPERATOR_TYPE_SQLDATAFRAME_RESOLVER_OPERATOR",
		58: "OPERATOR_TYPE_SQLLATERAL_JOIN_RESOLVER_OPERATOR",
		59: "OPERATOR_TYPE_SQLSCALAR_RESOLVER_OPERATOR",
		60: "OPERATOR_TYPE_STATS_COLLECTOR",
		61: "OPERATOR_TYPE_STREAMING_AGG_WRITE_OPERATOR",
		62: "OPERATOR_TYPE_SUB_PLAN_FILTER",
		63: "OPERATOR_TYPE_SUB_PLAN_JOIN",
		64: "OPERATOR_TYPE_SYMBOLIC_EXPRESSION_FALLBACK",
		65: "OPERATOR_TYPE_UNDERSCORE_SCALAR_RESOLVER_OPERATOR",
		66: "OPERATOR_TYPE_UNION_OPERATOR",
		67: "OPERATOR_TYPE_VALUES_PERSISTER",
	}
	OperatorType_value = map[string]int32{
		"OPERATOR_TYPE_UNSPECIFIED":                                    0,
		"OPERATOR_TYPE_ADD_CHILD_INDEX_COL":                            1,
		"OPERATOR_TYPE_ADD_INDEX_COL":                                  2,
		"OPERATOR_TYPE_BATCH_AGG_OPERATOR":                             3,
		"OPERATOR_TYPE_BATCH_DWHAGG_OPERATOR":                          4,
		"OPERATOR_TYPE_BATCH_RENAME":                                   5,
		"OPERATOR_TYPE_BIGTABLE_CACHE_LOOKUP":                          6,
		"OPERATOR_TYPE_CACHE_LOOKUP":                                   7,
		"OPERATOR_TYPE_CACHE_LOOKUP_HAS_MANY":                          8,
		"OPERATOR_TYPE_COMPUTE_CRON_OUTPUT_SUMMARY":                    9,
		"OPERATOR_TYPE_CPP_CACHE_LOOKUP":                               10,
		"OPERATOR_TYPE_DATAFRAME_MERGE_OPERATOR":                       11,
		"OPERATOR_TYPE_DATASET_SCAN":                                   12,
		"OPERATOR_TYPE_DEBUG_COMMENT_OPERATOR":                         13,
		"OPERATOR_TYPE_DEFAULT_INJECTOR":                               14,
		"OPERATOR_TYPE_DISTINCT_ON":                                    15,
		"OPERATOR_TYPE_DROP_CHILD_INDEX_COL":                           16,
		"OPERATOR_TYPE_DROP_COLUMNS":                                   17,
		"OPERATOR_TYPE_DYNAMO_DBCACHE_LOOKUP":                          18,
		"OPERATOR_TYPE_EXPLODE_HAS_MANY_OPERATOR":                      19,
		"OPERATOR_TYPE_EXTRA_TABLES_TO_SCALARS":                        20,
		"OPERATOR_TYPE_FILTER_MISSING":                                 21,
		"OPERATOR_TYPE_FINAL_PROJECT":                                  22,
		"OPERATOR_TYPE_GIVENS_SCAN":                                    23,
		"OPERATOR_TYPE_HAS_MANY_INPUT_OPERATOR":                        24,
		"OPERATOR_TYPE_HAS_MANY_OUTPUT_JOIN_OPERATOR":                  25,
		"OPERATOR_TYPE_IGNORE_OUTPUT":                                  26,
		"OPERATOR_TYPE_INTERMEDIATE_FEATURE_METRIC_RECORDING_OPERATOR": 27,
		"OPERATOR_TYPE_JOIN_SINGLETONS_OPERATOR":                       28,
		"OPERATOR_TYPE_LATERAL_JOIN_INPUT_OPERATOR":                    29,
		"OPERATOR_TYPE_LATERAL_JOIN_OUTPUT_OPERATOR":                   30,
		"OPERATOR_TYPE_LATERAL_JOIN_RESOLVER":                          31,
		"OPERATOR_TYPE_LIFT_RESULT_TO_GROUP":                           32,
		"OPERATOR_TYPE_LIGHTNING_REDIS_CACHE_LOOKUP":                   33,
		"OPERATOR_TYPE_MERGE_JOIN_OPERATOR":                            34,
		"OPERATOR_TYPE_METRICS_PUBLISHER":                              35,
		"OPERATOR_TYPE_NEAREST_NEIGHBOR_SUB_PLAN_JOIN":                 36,
		"OPERATOR_TYPE_NEW_DATAFRAME_RESOLVER_OPERATOR":                37,
		"OPERATOR_TYPE_NEW_OFFLINE_CACHE_LOOKUP":                       38,
		"OPERATOR_TYPE_NON_BUS_PERSIST_OPERATOR":                       39,
		"OPERATOR_TYPE_OFFLINE_CACHE_SAMPLER":                          40,
		"OPERATOR_TYPE_ONE_TO_ONE_SCALAR_RESOLVER":                     41,
		"OPERATOR_TYPE_ONLINE_STORE_AGG_WRITER":                        42,
		"OPERATOR_TYPE_ONLINE_VECTOR_SEARCH":                           43,
		"OPERATOR_TYPE_OPTIMISTIC_LOAD":                                44,
		"OPERATOR_TYPE_OUTPUT_UNDERSCORE_OPERATOR":                     45,
		"OPERATOR_TYPE_PACK_GROUPS_INTO_STRUCTS":                       46,
		"OPERATOR_TYPE_PARQUET_WRITER":                                 47,
		"OPERATOR_TYPE_PROJECT":                                        48,
		"OPERATOR_TYPE_PROMOTE_SPINE":                                  49,
		"OPERATOR_TYPE_PUSH_DFTO_RESULT":                               50,
		"OPERATOR_TYPE_PUSH_HAS_MANY_TO_RESULT":                        51,
		"OPERATOR_TYPE_REMOVE_LARGE_LISTS_FROM_SCHEMA":                 52,
		"OPERATOR_TYPE_RENAME_INDEX_COLUMN_OPERATOR":                   53,
		"OPERATOR_TYPE_REPLAY":                                         54,
		"OPERATOR_TYPE_RESULT_BUS_PERSIST_OPERATOR_V2":                 55,
		"OPERATOR_TYPE_RUN_IN_BACKGROUND":                              56,
		"OPERATOR_TYPE_SQLDATAFRAME_RESOLVER_OPERATOR":                 57,
		"OPERATOR_TYPE_SQLLATERAL_JOIN_RESOLVER_OPERATOR":              58,
		"OPERATOR_TYPE_SQLSCALAR_RESOLVER_OPERATOR":                    59,
		"OPERATOR_TYPE_STATS_COLLECTOR":                                60,
		"OPERATOR_TYPE_STREAMING_AGG_WRITE_OPERATOR":                   61,
		"OPERATOR_TYPE_SUB_PLAN_FILTER":                                62,
		"OPERATOR_TYPE_SUB_PLAN_JOIN":                                  63,
		"OPERATOR_TYPE_SYMBOLIC_EXPRESSION_FALLBACK":                   64,
		"OPERATOR_TYPE_UNDERSCORE_SCALAR_RESOLVER_OPERATOR":            65,
		"OPERATOR_TYPE_UNION_OPERATOR":                                 66,
		"OPERATOR_TYPE_VALUES_PERSISTER":                               67,
	}
)

func (x OperatorType) Enum() *OperatorType {
	p := new(OperatorType)
	*p = x
	return p
}

func (x OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_planner_v1_batch_operator_proto_enumTypes[0].Descriptor()
}

func (OperatorType) Type() protoreflect.EnumType {
	return &file_chalk_planner_v1_batch_operator_proto_enumTypes[0]
}

func (x OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorType.Descriptor instead.
func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{0}
}

type BatchPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators []*BatchOperator `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
}

func (x *BatchPlan) Reset() {
	*x = BatchPlan{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPlan) ProtoMessage() {}

func (x *BatchPlan) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPlan.ProtoReflect.Descriptor instead.
func (*BatchPlan) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{0}
}

func (x *BatchPlan) GetOperators() []*BatchOperator {
	if x != nil {
		return x.Operators
	}
	return nil
}

type BatchOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorType OperatorType         `protobuf:"varint,1,opt,name=operator_type,json=operatorType,proto3,enum=chalk.planner.v1.OperatorType" json:"operator_type,omitempty"`
	GraphInfo    *GraphInfo           `protobuf:"bytes,2,opt,name=graph_info,json=graphInfo,proto3" json:"graph_info,omitempty"`
	Arguments    map[string]*Argument `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchOperator) Reset() {
	*x = BatchOperator{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperator) ProtoMessage() {}

func (x *BatchOperator) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperator.ProtoReflect.Descriptor instead.
func (*BatchOperator) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{1}
}

func (x *BatchOperator) GetOperatorType() OperatorType {
	if x != nil {
		return x.OperatorType
	}
	return OperatorType_OPERATOR_TYPE_UNSPECIFIED
}

func (x *BatchOperator) GetGraphInfo() *GraphInfo {
	if x != nil {
		return x.GraphInfo
	}
	return nil
}

func (x *BatchOperator) GetArguments() map[string]*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type GraphInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *GraphInfo) Reset() {
	*x = GraphInfo{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphInfo) ProtoMessage() {}

func (x *GraphInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphInfo.ProtoReflect.Descriptor instead.
func (*GraphInfo) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{2}
}

func (x *GraphInfo) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Arg:
	//
	//	*Argument_None
	//	*Argument_BoolValue
	//	*Argument_DoubleValue
	//	*Argument_IntValue
	//	*Argument_StringValue
	//	*Argument_Timestamp
	//	*Argument_Duration
	//	*Argument_OperatorId
	//	*Argument_FeatureRef
	//	*Argument_Tuple
	//	*Argument_Submap
	//	*Argument_ArrowType
	//	*Argument_UnderscoreExpr
	//	*Argument_FilterExpr
	//	*Argument_DetachedColumnFeatureType
	//	*Argument_OutputUnderscoreFeatureType
	//	*Argument_DataFrameType
	//	*Argument_FeatureReference
	Arg isArgument_Arg `protobuf_oneof:"arg"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{3}
}

func (m *Argument) GetArg() isArgument_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (x *Argument) GetNone() *Void {
	if x, ok := x.GetArg().(*Argument_None); ok {
		return x.None
	}
	return nil
}

func (x *Argument) GetBoolValue() bool {
	if x, ok := x.GetArg().(*Argument_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Argument) GetDoubleValue() float64 {
	if x, ok := x.GetArg().(*Argument_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Argument) GetIntValue() int64 {
	if x, ok := x.GetArg().(*Argument_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Argument) GetStringValue() string {
	if x, ok := x.GetArg().(*Argument_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Argument) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetArg().(*Argument_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Argument) GetDuration() *durationpb.Duration {
	if x, ok := x.GetArg().(*Argument_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Argument) GetOperatorId() uint64 {
	if x, ok := x.GetArg().(*Argument_OperatorId); ok {
		return x.OperatorId
	}
	return 0
}

// Deprecated: Marked as deprecated in chalk/planner/v1/batch_operator.proto.
func (x *Argument) GetFeatureRef() *v1.FeatureReference {
	if x, ok := x.GetArg().(*Argument_FeatureRef); ok {
		return x.FeatureRef
	}
	return nil
}

func (x *Argument) GetTuple() *ArgumentList {
	if x, ok := x.GetArg().(*Argument_Tuple); ok {
		return x.Tuple
	}
	return nil
}

func (x *Argument) GetSubmap() *ArgumentMap {
	if x, ok := x.GetArg().(*Argument_Submap); ok {
		return x.Submap
	}
	return nil
}

func (x *Argument) GetArrowType() *v11.ArrowType {
	if x, ok := x.GetArg().(*Argument_ArrowType); ok {
		return x.ArrowType
	}
	return nil
}

func (x *Argument) GetUnderscoreExpr() *v12.LogicalExprNode {
	if x, ok := x.GetArg().(*Argument_UnderscoreExpr); ok {
		return x.UnderscoreExpr
	}
	return nil
}

func (x *Argument) GetFilterExpr() *v12.LogicalExprNode {
	if x, ok := x.GetArg().(*Argument_FilterExpr); ok {
		return x.FilterExpr
	}
	return nil
}

func (x *Argument) GetDetachedColumnFeatureType() *DetachedColumnFeatureType {
	if x, ok := x.GetArg().(*Argument_DetachedColumnFeatureType); ok {
		return x.DetachedColumnFeatureType
	}
	return nil
}

func (x *Argument) GetOutputUnderscoreFeatureType() *OutputUnderscoreFeatureType {
	if x, ok := x.GetArg().(*Argument_OutputUnderscoreFeatureType); ok {
		return x.OutputUnderscoreFeatureType
	}
	return nil
}

func (x *Argument) GetDataFrameType() *DataFrameType {
	if x, ok := x.GetArg().(*Argument_DataFrameType); ok {
		return x.DataFrameType
	}
	return nil
}

func (x *Argument) GetFeatureReference() *FeatureReference {
	if x, ok := x.GetArg().(*Argument_FeatureReference); ok {
		return x.FeatureReference
	}
	return nil
}

type isArgument_Arg interface {
	isArgument_Arg()
}

type Argument_None struct {
	// Primitive-esque types.
	None *Void `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Argument_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Argument_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3,oneof"` // Always promote smaller floats to larger floats.
}

type Argument_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof"` // Always promote smaller ints to larger ints. Wrap uints as signed ints.
}

type Argument_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Argument_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof"` // E.g. a datetime object.
}

type Argument_Duration struct {
	Duration *durationpb.Duration `protobuf:"bytes,7,opt,name=duration,proto3,oneof"` // E.g. a timedelta object.
}

type Argument_OperatorId struct {
	// Referential types.
	OperatorId uint64 `protobuf:"varint,8,opt,name=operator_id,json=operatorId,proto3,oneof"` // Reference other operators based on their IDs during serialization. They will be assigned new IDs after deserialization.
}

type Argument_FeatureRef struct {
	// Deprecated: Marked as deprecated in chalk/planner/v1/batch_operator.proto.
	FeatureRef *v1.FeatureReference `protobuf:"bytes,9,opt,name=feature_ref,json=featureRef,proto3,oneof"` // Reference features in the batch plan based on their serialization IDs. Meaning to deprecate this
}

type Argument_Tuple struct {
	// Recursive arguments.
	Tuple *ArgumentList `protobuf:"bytes,14,opt,name=tuple,proto3,oneof"`
}

type Argument_Submap struct {
	Submap *ArgumentMap `protobuf:"bytes,15,opt,name=submap,proto3,oneof"`
}

type Argument_ArrowType struct {
	// Less common argument types go in indices 16+.
	ArrowType *v11.ArrowType `protobuf:"bytes,16,opt,name=arrow_type,json=arrowType,proto3,oneof"`
}

type Argument_UnderscoreExpr struct {
	UnderscoreExpr *v12.LogicalExprNode `protobuf:"bytes,17,opt,name=underscore_expr,json=underscoreExpr,proto3,oneof"`
}

type Argument_FilterExpr struct {
	FilterExpr *v12.LogicalExprNode `protobuf:"bytes,18,opt,name=filter_expr,json=filterExpr,proto3,oneof"`
}

type Argument_DetachedColumnFeatureType struct {
	DetachedColumnFeatureType *DetachedColumnFeatureType `protobuf:"bytes,19,opt,name=detached_column_feature_type,json=detachedColumnFeatureType,proto3,oneof"`
}

type Argument_OutputUnderscoreFeatureType struct {
	OutputUnderscoreFeatureType *OutputUnderscoreFeatureType `protobuf:"bytes,20,opt,name=output_underscore_feature_type,json=outputUnderscoreFeatureType,proto3,oneof"`
}

type Argument_DataFrameType struct {
	DataFrameType *DataFrameType `protobuf:"bytes,21,opt,name=data_frame_type,json=dataFrameType,proto3,oneof"`
}

type Argument_FeatureReference struct {
	FeatureReference *FeatureReference `protobuf:"bytes,22,opt,name=feature_reference,json=featureReference,proto3,oneof"`
}

func (*Argument_None) isArgument_Arg() {}

func (*Argument_BoolValue) isArgument_Arg() {}

func (*Argument_DoubleValue) isArgument_Arg() {}

func (*Argument_IntValue) isArgument_Arg() {}

func (*Argument_StringValue) isArgument_Arg() {}

func (*Argument_Timestamp) isArgument_Arg() {}

func (*Argument_Duration) isArgument_Arg() {}

func (*Argument_OperatorId) isArgument_Arg() {}

func (*Argument_FeatureRef) isArgument_Arg() {}

func (*Argument_Tuple) isArgument_Arg() {}

func (*Argument_Submap) isArgument_Arg() {}

func (*Argument_ArrowType) isArgument_Arg() {}

func (*Argument_UnderscoreExpr) isArgument_Arg() {}

func (*Argument_FilterExpr) isArgument_Arg() {}

func (*Argument_DetachedColumnFeatureType) isArgument_Arg() {}

func (*Argument_OutputUnderscoreFeatureType) isArgument_Arg() {}

func (*Argument_DataFrameType) isArgument_Arg() {}

func (*Argument_FeatureReference) isArgument_Arg() {}

type ArgumentMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arguments map[string]*Argument `protobuf:"bytes,1,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Keys      []*Argument          `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"` // Dissected maps for maps with non-string keys.
	Values    []*Argument          `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ArgumentMap) Reset() {
	*x = ArgumentMap{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentMap) ProtoMessage() {}

func (x *ArgumentMap) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentMap.ProtoReflect.Descriptor instead.
func (*ArgumentMap) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{4}
}

func (x *ArgumentMap) GetArguments() map[string]*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ArgumentMap) GetKeys() []*Argument {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ArgumentMap) GetValues() []*Argument {
	if x != nil {
		return x.Values
	}
	return nil
}

type ArgumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Argument `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ArgumentList) Reset() {
	*x = ArgumentList{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentList) ProtoMessage() {}

func (x *ArgumentList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentList.ProtoReflect.Descriptor instead.
func (*ArgumentList) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{5}
}

func (x *ArgumentList) GetValues() []*Argument {
	if x != nil {
		return x.Values
	}
	return nil
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{6}
}

type DetachedColumnFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arguments map[string]*Argument `protobuf:"bytes,1,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DetachedColumnFeatureType) Reset() {
	*x = DetachedColumnFeatureType{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetachedColumnFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachedColumnFeatureType) ProtoMessage() {}

func (x *DetachedColumnFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachedColumnFeatureType.ProtoReflect.Descriptor instead.
func (*DetachedColumnFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{7}
}

func (x *DetachedColumnFeatureType) GetArguments() map[string]*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type OutputUnderscoreFeatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arguments map[string]*Argument `protobuf:"bytes,1,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OutputUnderscoreFeatureType) Reset() {
	*x = OutputUnderscoreFeatureType{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputUnderscoreFeatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputUnderscoreFeatureType) ProtoMessage() {}

func (x *OutputUnderscoreFeatureType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputUnderscoreFeatureType.ProtoReflect.Descriptor instead.
func (*OutputUnderscoreFeatureType) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{8}
}

func (x *OutputUnderscoreFeatureType) GetArguments() map[string]*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// wrapper around protograph DataFrameType with custom overrides
type DataFrameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Df *v1.DataFrameType `protobuf:"bytes,1,opt,name=df,proto3" json:"df,omitempty"`
	// overrides to df
	FilterExpression *v12.LogicalExprNode `protobuf:"bytes,2,opt,name=filter_expression,json=filterExpression,proto3,oneof" json:"filter_expression,omitempty"`
	OptionalColumns  []*FeatureReference  `protobuf:"bytes,3,rep,name=optional_columns,json=optionalColumns,proto3" json:"optional_columns,omitempty"`
}

func (x *DataFrameType) Reset() {
	*x = DataFrameType{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataFrameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameType) ProtoMessage() {}

func (x *DataFrameType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameType.ProtoReflect.Descriptor instead.
func (*DataFrameType) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{9}
}

func (x *DataFrameType) GetDf() *v1.DataFrameType {
	if x != nil {
		return x.Df
	}
	return nil
}

func (x *DataFrameType) GetFilterExpression() *v12.LogicalExprNode {
	if x != nil {
		return x.FilterExpression
	}
	return nil
}

func (x *DataFrameType) GetOptionalColumns() []*FeatureReference {
	if x != nil {
		return x.OptionalColumns
	}
	return nil
}

// wrapper around protograph FeatureReference with custom overrides
type FeatureReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureRef *v1.FeatureReference `protobuf:"bytes,1,opt,name=feature_ref,json=featureRef,proto3" json:"feature_ref,omitempty"`
	// overrides to feature_ref
	Path []*FeatureReference `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	Df   *DataFrameType      `protobuf:"bytes,3,opt,name=df,proto3,oneof" json:"df,omitempty"`
}

func (x *FeatureReference) Reset() {
	*x = FeatureReference{}
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureReference) ProtoMessage() {}

func (x *FeatureReference) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_planner_v1_batch_operator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureReference.ProtoReflect.Descriptor instead.
func (*FeatureReference) Descriptor() ([]byte, []int) {
	return file_chalk_planner_v1_batch_operator_proto_rawDescGZIP(), []int{10}
}

func (x *FeatureReference) GetFeatureRef() *v1.FeatureReference {
	if x != nil {
		return x.FeatureRef
	}
	return nil
}

func (x *FeatureReference) GetPath() []*FeatureReference {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FeatureReference) GetDf() *DataFrameType {
	if x != nil {
		return x.Df
	}
	return nil
}

var File_chalk_planner_v1_batch_operator_proto protoreflect.FileDescriptor

var file_chalk_planner_v1_batch_operator_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2c, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xf5, 0x08,
	0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4f, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x47, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x6e, 0x0a, 0x1c, 0x64, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x19, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x74, 0x0a, 0x1e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x1b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x05,
	0x0a, 0x03, 0x61, 0x72, 0x67, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x42, 0x0a, 0x0c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x19,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x01,
	0x0a, 0x1b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x64, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x02, 0x64, 0x66, 0x12, 0x56, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x10,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x34, 0x0a, 0x02, 0x64, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x02, 0x64, 0x66, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x64, 0x66, 0x2a, 0xe2,
	0x15, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x43, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x43, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x47,
	0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x44, 0x57, 0x48, 0x41, 0x47, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x06, 0x12, 0x1e,
	0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x07, 0x12, 0x27,
	0x0a, 0x23, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45,
	0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x55, 0x4d,
	0x4d, 0x41, 0x52, 0x59, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x50, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x41, 0x4e, 0x10, 0x0c, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0d,
	0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x4f,
	0x4e, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x4c, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e,
	0x41, 0x4d, 0x4f, 0x5f, 0x44, 0x42, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b,
	0x55, 0x50, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41,
	0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x13, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f,
	0x54, 0x4f, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x53, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12, 0x1f,
	0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x16, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x17, 0x12, 0x29,
	0x0a, 0x25, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x41, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x18, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4d,
	0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x1a, 0x12, 0x40, 0x0a, 0x3c, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x2a, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x54, 0x4f, 0x4e, 0x53, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1c, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1d, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41,
	0x4c, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1e, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41,
	0x4c, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x10,
	0x1f, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x46, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x20, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x21, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x22,
	0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x52, 0x10, 0x23, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x4e,
	0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x24, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x25, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4c, 0x4f,
	0x4f, 0x4b, 0x55, 0x50, 0x10, 0x26, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x27, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x10, 0x28, 0x12, 0x2c, 0x0a, 0x28, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x29, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x52, 0x10, 0x2a, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x56, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x2b, 0x12, 0x21, 0x0a, 0x1d,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4d, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x2c, 0x12,
	0x2c, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x2d, 0x12, 0x2a, 0x0a,
	0x26, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x5f,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x53, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x51, 0x55,
	0x45, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x2f, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x30, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x53, 0x50, 0x49, 0x4e, 0x45, 0x10, 0x31, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x44, 0x46,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x32, 0x12, 0x29, 0x0a, 0x25, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x10, 0x33, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x34, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x35, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59,
	0x10, 0x36, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x50,
	0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x56, 0x32, 0x10, 0x37, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x38, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x44, 0x41,
	0x54, 0x41, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x39, 0x12, 0x33, 0x0a, 0x2f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x51, 0x4c,
	0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x3a,
	0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x51, 0x4c, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x3b, 0x12,
	0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x3c, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47,
	0x47, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x3d, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x10, 0x3e, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x3f, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x49, 0x43,
	0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x40, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x41, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x42, 0x12,
	0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x43, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x43, 0x50, 0x58, 0xaa, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_planner_v1_batch_operator_proto_rawDescOnce sync.Once
	file_chalk_planner_v1_batch_operator_proto_rawDescData = file_chalk_planner_v1_batch_operator_proto_rawDesc
)

func file_chalk_planner_v1_batch_operator_proto_rawDescGZIP() []byte {
	file_chalk_planner_v1_batch_operator_proto_rawDescOnce.Do(func() {
		file_chalk_planner_v1_batch_operator_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_planner_v1_batch_operator_proto_rawDescData)
	})
	return file_chalk_planner_v1_batch_operator_proto_rawDescData
}

var file_chalk_planner_v1_batch_operator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_planner_v1_batch_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_chalk_planner_v1_batch_operator_proto_goTypes = []any{
	(OperatorType)(0),                   // 0: chalk.planner.v1.OperatorType
	(*BatchPlan)(nil),                   // 1: chalk.planner.v1.BatchPlan
	(*BatchOperator)(nil),               // 2: chalk.planner.v1.BatchOperator
	(*GraphInfo)(nil),                   // 3: chalk.planner.v1.GraphInfo
	(*Argument)(nil),                    // 4: chalk.planner.v1.Argument
	(*ArgumentMap)(nil),                 // 5: chalk.planner.v1.ArgumentMap
	(*ArgumentList)(nil),                // 6: chalk.planner.v1.ArgumentList
	(*Void)(nil),                        // 7: chalk.planner.v1.Void
	(*DetachedColumnFeatureType)(nil),   // 8: chalk.planner.v1.DetachedColumnFeatureType
	(*OutputUnderscoreFeatureType)(nil), // 9: chalk.planner.v1.OutputUnderscoreFeatureType
	(*DataFrameType)(nil),               // 10: chalk.planner.v1.DataFrameType
	(*FeatureReference)(nil),            // 11: chalk.planner.v1.FeatureReference
	nil,                                 // 12: chalk.planner.v1.BatchOperator.ArgumentsEntry
	nil,                                 // 13: chalk.planner.v1.ArgumentMap.ArgumentsEntry
	nil,                                 // 14: chalk.planner.v1.DetachedColumnFeatureType.ArgumentsEntry
	nil,                                 // 15: chalk.planner.v1.OutputUnderscoreFeatureType.ArgumentsEntry
	(*timestamppb.Timestamp)(nil),       // 16: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),         // 17: google.protobuf.Duration
	(*v1.FeatureReference)(nil),         // 18: chalk.graph.v1.FeatureReference
	(*v11.ArrowType)(nil),               // 19: chalk.arrow.v1.ArrowType
	(*v12.LogicalExprNode)(nil),         // 20: chalk.expression.v1.LogicalExprNode
	(*v1.DataFrameType)(nil),            // 21: chalk.graph.v1.DataFrameType
}
var file_chalk_planner_v1_batch_operator_proto_depIdxs = []int32{
	2,  // 0: chalk.planner.v1.BatchPlan.operators:type_name -> chalk.planner.v1.BatchOperator
	0,  // 1: chalk.planner.v1.BatchOperator.operator_type:type_name -> chalk.planner.v1.OperatorType
	3,  // 2: chalk.planner.v1.BatchOperator.graph_info:type_name -> chalk.planner.v1.GraphInfo
	12, // 3: chalk.planner.v1.BatchOperator.arguments:type_name -> chalk.planner.v1.BatchOperator.ArgumentsEntry
	7,  // 4: chalk.planner.v1.Argument.none:type_name -> chalk.planner.v1.Void
	16, // 5: chalk.planner.v1.Argument.timestamp:type_name -> google.protobuf.Timestamp
	17, // 6: chalk.planner.v1.Argument.duration:type_name -> google.protobuf.Duration
	18, // 7: chalk.planner.v1.Argument.feature_ref:type_name -> chalk.graph.v1.FeatureReference
	6,  // 8: chalk.planner.v1.Argument.tuple:type_name -> chalk.planner.v1.ArgumentList
	5,  // 9: chalk.planner.v1.Argument.submap:type_name -> chalk.planner.v1.ArgumentMap
	19, // 10: chalk.planner.v1.Argument.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	20, // 11: chalk.planner.v1.Argument.underscore_expr:type_name -> chalk.expression.v1.LogicalExprNode
	20, // 12: chalk.planner.v1.Argument.filter_expr:type_name -> chalk.expression.v1.LogicalExprNode
	8,  // 13: chalk.planner.v1.Argument.detached_column_feature_type:type_name -> chalk.planner.v1.DetachedColumnFeatureType
	9,  // 14: chalk.planner.v1.Argument.output_underscore_feature_type:type_name -> chalk.planner.v1.OutputUnderscoreFeatureType
	10, // 15: chalk.planner.v1.Argument.data_frame_type:type_name -> chalk.planner.v1.DataFrameType
	11, // 16: chalk.planner.v1.Argument.feature_reference:type_name -> chalk.planner.v1.FeatureReference
	13, // 17: chalk.planner.v1.ArgumentMap.arguments:type_name -> chalk.planner.v1.ArgumentMap.ArgumentsEntry
	4,  // 18: chalk.planner.v1.ArgumentMap.keys:type_name -> chalk.planner.v1.Argument
	4,  // 19: chalk.planner.v1.ArgumentMap.values:type_name -> chalk.planner.v1.Argument
	4,  // 20: chalk.planner.v1.ArgumentList.values:type_name -> chalk.planner.v1.Argument
	14, // 21: chalk.planner.v1.DetachedColumnFeatureType.arguments:type_name -> chalk.planner.v1.DetachedColumnFeatureType.ArgumentsEntry
	15, // 22: chalk.planner.v1.OutputUnderscoreFeatureType.arguments:type_name -> chalk.planner.v1.OutputUnderscoreFeatureType.ArgumentsEntry
	21, // 23: chalk.planner.v1.DataFrameType.df:type_name -> chalk.graph.v1.DataFrameType
	20, // 24: chalk.planner.v1.DataFrameType.filter_expression:type_name -> chalk.expression.v1.LogicalExprNode
	11, // 25: chalk.planner.v1.DataFrameType.optional_columns:type_name -> chalk.planner.v1.FeatureReference
	18, // 26: chalk.planner.v1.FeatureReference.feature_ref:type_name -> chalk.graph.v1.FeatureReference
	11, // 27: chalk.planner.v1.FeatureReference.path:type_name -> chalk.planner.v1.FeatureReference
	10, // 28: chalk.planner.v1.FeatureReference.df:type_name -> chalk.planner.v1.DataFrameType
	4,  // 29: chalk.planner.v1.BatchOperator.ArgumentsEntry.value:type_name -> chalk.planner.v1.Argument
	4,  // 30: chalk.planner.v1.ArgumentMap.ArgumentsEntry.value:type_name -> chalk.planner.v1.Argument
	4,  // 31: chalk.planner.v1.DetachedColumnFeatureType.ArgumentsEntry.value:type_name -> chalk.planner.v1.Argument
	4,  // 32: chalk.planner.v1.OutputUnderscoreFeatureType.ArgumentsEntry.value:type_name -> chalk.planner.v1.Argument
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_chalk_planner_v1_batch_operator_proto_init() }
func file_chalk_planner_v1_batch_operator_proto_init() {
	if File_chalk_planner_v1_batch_operator_proto != nil {
		return
	}
	file_chalk_planner_v1_batch_operator_proto_msgTypes[3].OneofWrappers = []any{
		(*Argument_None)(nil),
		(*Argument_BoolValue)(nil),
		(*Argument_DoubleValue)(nil),
		(*Argument_IntValue)(nil),
		(*Argument_StringValue)(nil),
		(*Argument_Timestamp)(nil),
		(*Argument_Duration)(nil),
		(*Argument_OperatorId)(nil),
		(*Argument_FeatureRef)(nil),
		(*Argument_Tuple)(nil),
		(*Argument_Submap)(nil),
		(*Argument_ArrowType)(nil),
		(*Argument_UnderscoreExpr)(nil),
		(*Argument_FilterExpr)(nil),
		(*Argument_DetachedColumnFeatureType)(nil),
		(*Argument_OutputUnderscoreFeatureType)(nil),
		(*Argument_DataFrameType)(nil),
		(*Argument_FeatureReference)(nil),
	}
	file_chalk_planner_v1_batch_operator_proto_msgTypes[9].OneofWrappers = []any{}
	file_chalk_planner_v1_batch_operator_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_planner_v1_batch_operator_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_planner_v1_batch_operator_proto_goTypes,
		DependencyIndexes: file_chalk_planner_v1_batch_operator_proto_depIdxs,
		EnumInfos:         file_chalk_planner_v1_batch_operator_proto_enumTypes,
		MessageInfos:      file_chalk_planner_v1_batch_operator_proto_msgTypes,
	}.Build()
	File_chalk_planner_v1_batch_operator_proto = out.File
	file_chalk_planner_v1_batch_operator_proto_rawDesc = nil
	file_chalk_planner_v1_batch_operator_proto_goTypes = nil
	file_chalk_planner_v1_batch_operator_proto_depIdxs = nil
}
