// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: chalk/plan/v1/plan.proto

package planv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogicalTableNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LogicalTableType:
	//
	//	*LogicalTableNode_Values
	LogicalTableType isLogicalTableNode_LogicalTableType `protobuf_oneof:"logical_table_type"`
}

func (x *LogicalTableNode) Reset() {
	*x = LogicalTableNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_plan_v1_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalTableNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalTableNode) ProtoMessage() {}

func (x *LogicalTableNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_plan_v1_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalTableNode.ProtoReflect.Descriptor instead.
func (*LogicalTableNode) Descriptor() ([]byte, []int) {
	return file_chalk_plan_v1_plan_proto_rawDescGZIP(), []int{0}
}

func (m *LogicalTableNode) GetLogicalTableType() isLogicalTableNode_LogicalTableType {
	if m != nil {
		return m.LogicalTableType
	}
	return nil
}

func (x *LogicalTableNode) GetValues() *ValuesNode {
	if x, ok := x.GetLogicalTableType().(*LogicalTableNode_Values); ok {
		return x.Values
	}
	return nil
}

type isLogicalTableNode_LogicalTableType interface {
	isLogicalTableNode_LogicalTableType()
}

type LogicalTableNode_Values struct {
	Values *ValuesNode `protobuf:"bytes,1,opt,name=values,proto3,oneof"`
}

func (*LogicalTableNode_Values) isLogicalTableNode_LogicalTableType() {}

type ValuesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Represents a literal table (I will add the corresponding libplanner node in PR william/select-1-libplanner)
	// Tables are in row-major order, since the sql syntax is generally row-major: (e.g. VALUES (1, "foo"), (2, "bar"))
	// (Datafusion is also row-major)
	//
	// Diffs from datafusion's proto:
	// Datafusion uses a flattened list of values (as in repeated LogicalExprNode) to serialize the table, but during parsing they just convert into nested array anyway.
	// We enable clients who already have arrow data to avoid unnecessary serde by sending feather directly.
	//
	// Datafusion has a special EmptyNode to represent `VALUES` and `VALUES ()`.
	// We avoid special cases by using ValuesNode for these instead.
	//
	// Types that are assignable to Values:
	//
	//	*ValuesNode_Feather
	Values isValuesNode_Values `protobuf_oneof:"values"`
}

func (x *ValuesNode) Reset() {
	*x = ValuesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_plan_v1_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValuesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValuesNode) ProtoMessage() {}

func (x *ValuesNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_plan_v1_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValuesNode.ProtoReflect.Descriptor instead.
func (*ValuesNode) Descriptor() ([]byte, []int) {
	return file_chalk_plan_v1_plan_proto_rawDescGZIP(), []int{1}
}

func (m *ValuesNode) GetValues() isValuesNode_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (x *ValuesNode) GetFeather() []byte {
	if x, ok := x.GetValues().(*ValuesNode_Feather); ok {
		return x.Feather
	}
	return nil
}

type isValuesNode_Values interface {
	isValuesNode_Values()
}

type ValuesNode_Feather struct {
	// it's OK to use bytes directly since valid feather is never empty, so we can check whether this field is set by checking emptiness
	Feather []byte `protobuf:"bytes,1,opt,name=feather,proto3,oneof"`
}

func (*ValuesNode_Feather) isValuesNode_Values() {}

var File_chalk_plan_v1_plan_proto protoreflect.FileDescriptor

var file_chalk_plan_v1_plan_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0x5d, 0x0a, 0x10, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0xab, 0x01, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x42, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x3b,
	0x70, 0x6c, 0x61, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x50, 0x58, 0xaa, 0x02, 0x0d, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chalk_plan_v1_plan_proto_rawDescOnce sync.Once
	file_chalk_plan_v1_plan_proto_rawDescData = file_chalk_plan_v1_plan_proto_rawDesc
)

func file_chalk_plan_v1_plan_proto_rawDescGZIP() []byte {
	file_chalk_plan_v1_plan_proto_rawDescOnce.Do(func() {
		file_chalk_plan_v1_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_plan_v1_plan_proto_rawDescData)
	})
	return file_chalk_plan_v1_plan_proto_rawDescData
}

var file_chalk_plan_v1_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chalk_plan_v1_plan_proto_goTypes = []interface{}{
	(*LogicalTableNode)(nil), // 0: chalk.plan.v1.LogicalTableNode
	(*ValuesNode)(nil),       // 1: chalk.plan.v1.ValuesNode
}
var file_chalk_plan_v1_plan_proto_depIdxs = []int32{
	1, // 0: chalk.plan.v1.LogicalTableNode.values:type_name -> chalk.plan.v1.ValuesNode
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_chalk_plan_v1_plan_proto_init() }
func file_chalk_plan_v1_plan_proto_init() {
	if File_chalk_plan_v1_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_plan_v1_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalTableNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_plan_v1_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValuesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_plan_v1_plan_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LogicalTableNode_Values)(nil),
	}
	file_chalk_plan_v1_plan_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ValuesNode_Feather)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_plan_v1_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_plan_v1_plan_proto_goTypes,
		DependencyIndexes: file_chalk_plan_v1_plan_proto_depIdxs,
		MessageInfos:      file_chalk_plan_v1_plan_proto_msgTypes,
	}.Build()
	File_chalk_plan_v1_plan_proto = out.File
	file_chalk_plan_v1_plan_proto_rawDesc = nil
	file_chalk_plan_v1_plan_proto_goTypes = nil
	file_chalk_plan_v1_plan_proto_depIdxs = nil
}
