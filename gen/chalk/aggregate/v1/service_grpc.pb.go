// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/aggregate/v1/service.proto

package aggregatev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggregateService_PlanAggregateBackfill_FullMethodName    = "/chalk.aggregate.v1.AggregateService/PlanAggregateBackfill"
	AggregateService_GetAggregates_FullMethodName            = "/chalk.aggregate.v1.AggregateService/GetAggregates"
	AggregateService_GetAggregateBackfillJobs_FullMethodName = "/chalk.aggregate.v1.AggregateService/GetAggregateBackfillJobs"
	AggregateService_GetAggregateBackfillJob_FullMethodName  = "/chalk.aggregate.v1.AggregateService/GetAggregateBackfillJob"
)

// AggregateServiceClient is the client API for AggregateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregateServiceClient interface {
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	//
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(ctx context.Context, in *PlanAggregateBackfillRequest, opts ...grpc.CallOption) (*PlanAggregateBackfillResponse, error)
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(ctx context.Context, in *GetAggregatesRequest, opts ...grpc.CallOption) (*GetAggregatesResponse, error)
	GetAggregateBackfillJobs(ctx context.Context, in *GetAggregateBackfillJobsRequest, opts ...grpc.CallOption) (*GetAggregateBackfillJobsResponse, error)
	GetAggregateBackfillJob(ctx context.Context, in *GetAggregateBackfillJobRequest, opts ...grpc.CallOption) (*GetAggregateBackfillJobResponse, error)
}

type aggregateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregateServiceClient(cc grpc.ClientConnInterface) AggregateServiceClient {
	return &aggregateServiceClient{cc}
}

func (c *aggregateServiceClient) PlanAggregateBackfill(ctx context.Context, in *PlanAggregateBackfillRequest, opts ...grpc.CallOption) (*PlanAggregateBackfillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlanAggregateBackfillResponse)
	err := c.cc.Invoke(ctx, AggregateService_PlanAggregateBackfill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregateServiceClient) GetAggregates(ctx context.Context, in *GetAggregatesRequest, opts ...grpc.CallOption) (*GetAggregatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregatesResponse)
	err := c.cc.Invoke(ctx, AggregateService_GetAggregates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregateServiceClient) GetAggregateBackfillJobs(ctx context.Context, in *GetAggregateBackfillJobsRequest, opts ...grpc.CallOption) (*GetAggregateBackfillJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregateBackfillJobsResponse)
	err := c.cc.Invoke(ctx, AggregateService_GetAggregateBackfillJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregateServiceClient) GetAggregateBackfillJob(ctx context.Context, in *GetAggregateBackfillJobRequest, opts ...grpc.CallOption) (*GetAggregateBackfillJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregateBackfillJobResponse)
	err := c.cc.Invoke(ctx, AggregateService_GetAggregateBackfillJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregateServiceServer is the server API for AggregateService service.
// All implementations must embed UnimplementedAggregateServiceServer
// for forward compatibility.
type AggregateServiceServer interface {
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	//
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(context.Context, *PlanAggregateBackfillRequest) (*PlanAggregateBackfillResponse, error)
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(context.Context, *GetAggregatesRequest) (*GetAggregatesResponse, error)
	GetAggregateBackfillJobs(context.Context, *GetAggregateBackfillJobsRequest) (*GetAggregateBackfillJobsResponse, error)
	GetAggregateBackfillJob(context.Context, *GetAggregateBackfillJobRequest) (*GetAggregateBackfillJobResponse, error)
	mustEmbedUnimplementedAggregateServiceServer()
}

// UnimplementedAggregateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregateServiceServer struct{}

func (UnimplementedAggregateServiceServer) PlanAggregateBackfill(context.Context, *PlanAggregateBackfillRequest) (*PlanAggregateBackfillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanAggregateBackfill not implemented")
}
func (UnimplementedAggregateServiceServer) GetAggregates(context.Context, *GetAggregatesRequest) (*GetAggregatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregates not implemented")
}
func (UnimplementedAggregateServiceServer) GetAggregateBackfillJobs(context.Context, *GetAggregateBackfillJobsRequest) (*GetAggregateBackfillJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateBackfillJobs not implemented")
}
func (UnimplementedAggregateServiceServer) GetAggregateBackfillJob(context.Context, *GetAggregateBackfillJobRequest) (*GetAggregateBackfillJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateBackfillJob not implemented")
}
func (UnimplementedAggregateServiceServer) mustEmbedUnimplementedAggregateServiceServer() {}
func (UnimplementedAggregateServiceServer) testEmbeddedByValue()                          {}

// UnsafeAggregateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregateServiceServer will
// result in compilation errors.
type UnsafeAggregateServiceServer interface {
	mustEmbedUnimplementedAggregateServiceServer()
}

func RegisterAggregateServiceServer(s grpc.ServiceRegistrar, srv AggregateServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregateService_ServiceDesc, srv)
}

func _AggregateService_PlanAggregateBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanAggregateBackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).PlanAggregateBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregateService_PlanAggregateBackfill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).PlanAggregateBackfill(ctx, req.(*PlanAggregateBackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregateService_GetAggregates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).GetAggregates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregateService_GetAggregates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).GetAggregates(ctx, req.(*GetAggregatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregateService_GetAggregateBackfillJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregateBackfillJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).GetAggregateBackfillJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregateService_GetAggregateBackfillJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).GetAggregateBackfillJobs(ctx, req.(*GetAggregateBackfillJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregateService_GetAggregateBackfillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregateBackfillJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateServiceServer).GetAggregateBackfillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregateService_GetAggregateBackfillJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateServiceServer).GetAggregateBackfillJob(ctx, req.(*GetAggregateBackfillJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregateService_ServiceDesc is the grpc.ServiceDesc for AggregateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.aggregate.v1.AggregateService",
	HandlerType: (*AggregateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlanAggregateBackfill",
			Handler:    _AggregateService_PlanAggregateBackfill_Handler,
		},
		{
			MethodName: "GetAggregates",
			Handler:    _AggregateService_GetAggregates_Handler,
		},
		{
			MethodName: "GetAggregateBackfillJobs",
			Handler:    _AggregateService_GetAggregateBackfillJobs_Handler,
		},
		{
			MethodName: "GetAggregateBackfillJob",
			Handler:    _AggregateService_GetAggregateBackfillJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/aggregate/v1/service.proto",
}
