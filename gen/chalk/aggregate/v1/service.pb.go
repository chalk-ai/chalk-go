// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/aggregate/v1/service.proto

package aggregatev1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanAggregateBackfillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *AggregateBackfillUserParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *PlanAggregateBackfillRequest) Reset() {
	*x = PlanAggregateBackfillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanAggregateBackfillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanAggregateBackfillRequest) ProtoMessage() {}

func (x *PlanAggregateBackfillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanAggregateBackfillRequest.ProtoReflect.Descriptor instead.
func (*PlanAggregateBackfillRequest) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *PlanAggregateBackfillRequest) GetParams() *AggregateBackfillUserParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type PlanAggregateBackfillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estimate            *AggregateBackfillCostEstimate       `protobuf:"bytes,2,opt,name=estimate,proto3" json:"estimate,omitempty"`
	Errors              []string                             `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	Backfills           []*AggregateBackfillWithCostEstimate `protobuf:"bytes,6,rep,name=backfills,proto3" json:"backfills,omitempty"`
	AggregateBackfillId string                               `protobuf:"bytes,7,opt,name=aggregate_backfill_id,json=aggregateBackfillId,proto3" json:"aggregate_backfill_id,omitempty"`
}

func (x *PlanAggregateBackfillResponse) Reset() {
	*x = PlanAggregateBackfillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanAggregateBackfillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanAggregateBackfillResponse) ProtoMessage() {}

func (x *PlanAggregateBackfillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanAggregateBackfillResponse.ProtoReflect.Descriptor instead.
func (*PlanAggregateBackfillResponse) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *PlanAggregateBackfillResponse) GetEstimate() *AggregateBackfillCostEstimate {
	if x != nil {
		return x.Estimate
	}
	return nil
}

func (x *PlanAggregateBackfillResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PlanAggregateBackfillResponse) GetBackfills() []*AggregateBackfillWithCostEstimate {
	if x != nil {
		return x.Backfills
	}
	return nil
}

func (x *PlanAggregateBackfillResponse) GetAggregateBackfillId() string {
	if x != nil {
		return x.AggregateBackfillId
	}
	return ""
}

type GetAggregatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForFeatures []string `protobuf:"bytes,1,rep,name=for_features,json=forFeatures,proto3" json:"for_features,omitempty"`
}

func (x *GetAggregatesRequest) Reset() {
	*x = GetAggregatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatesRequest) ProtoMessage() {}

func (x *GetAggregatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatesRequest.ProtoReflect.Descriptor instead.
func (*GetAggregatesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetAggregatesRequest) GetForFeatures() []string {
	if x != nil {
		return x.ForFeatures
	}
	return nil
}

type GetAggregatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*AggregateTimeSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	Errors []string               `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetAggregatesResponse) Reset() {
	*x = GetAggregatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatesResponse) ProtoMessage() {}

func (x *GetAggregatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatesResponse.ProtoReflect.Descriptor instead.
func (*GetAggregatesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetAggregatesResponse) GetSeries() []*AggregateTimeSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *GetAggregatesResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetAggregateBackfillJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *GetAggregateBackfillJobsRequest) Reset() {
	*x = GetAggregateBackfillJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregateBackfillJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregateBackfillJobsRequest) ProtoMessage() {}

func (x *GetAggregateBackfillJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregateBackfillJobsRequest.ProtoReflect.Descriptor instead.
func (*GetAggregateBackfillJobsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetAggregateBackfillJobsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAggregateBackfillJobsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type GetAggregateBackfillJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs   []*AggregateBackfillJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Cursor string                  `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *GetAggregateBackfillJobsResponse) Reset() {
	*x = GetAggregateBackfillJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregateBackfillJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregateBackfillJobsResponse) ProtoMessage() {}

func (x *GetAggregateBackfillJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregateBackfillJobsResponse.ProtoReflect.Descriptor instead.
func (*GetAggregateBackfillJobsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetAggregateBackfillJobsResponse) GetJobs() []*AggregateBackfillJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *GetAggregateBackfillJobsResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type GetAggregateBackfillJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateBackfillId string `protobuf:"bytes,1,opt,name=aggregate_backfill_id,json=aggregateBackfillId,proto3" json:"aggregate_backfill_id,omitempty"`
}

func (x *GetAggregateBackfillJobRequest) Reset() {
	*x = GetAggregateBackfillJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregateBackfillJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregateBackfillJobRequest) ProtoMessage() {}

func (x *GetAggregateBackfillJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregateBackfillJobRequest.ProtoReflect.Descriptor instead.
func (*GetAggregateBackfillJobRequest) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetAggregateBackfillJobRequest) GetAggregateBackfillId() string {
	if x != nil {
		return x.AggregateBackfillId
	}
	return ""
}

type GetAggregateBackfillJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *AggregateBackfillJob `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetAggregateBackfillJobResponse) Reset() {
	*x = GetAggregateBackfillJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_aggregate_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregateBackfillJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregateBackfillJobResponse) ProtoMessage() {}

func (x *GetAggregateBackfillJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregateBackfillJobResponse.ProtoReflect.Descriptor instead.
func (*GetAggregateBackfillJobResponse) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetAggregateBackfillJobResponse) GetJob() *AggregateBackfillJob {
	if x != nil {
		return x.Job
	}
	return nil
}

var File_chalk_aggregate_v1_service_proto protoreflect.FileDescriptor

var file_chalk_aggregate_v1_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x1c, 0x50, 0x6c,
	0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x1d, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x08, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x09,
	0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x4f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x78, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x54, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x32, 0xb0, 0x04, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0c, 0x80, 0x7d, 0x0c, 0x8a, 0xd3, 0x0e, 0x02, 0x08,
	0x02, 0x90, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0c, 0x80, 0x7d, 0x0b, 0x8a,
	0xd3, 0x0e, 0x02, 0x08, 0x02, 0x90, 0x02, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x06, 0x80, 0x7d, 0x0b, 0x90, 0x02, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x06, 0x80,
	0x7d, 0x0b, 0x90, 0x02, 0x01, 0x42, 0xd1, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x41, 0x58, 0xaa, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x14, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chalk_aggregate_v1_service_proto_rawDescOnce sync.Once
	file_chalk_aggregate_v1_service_proto_rawDescData = file_chalk_aggregate_v1_service_proto_rawDesc
)

func file_chalk_aggregate_v1_service_proto_rawDescGZIP() []byte {
	file_chalk_aggregate_v1_service_proto_rawDescOnce.Do(func() {
		file_chalk_aggregate_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_aggregate_v1_service_proto_rawDescData)
	})
	return file_chalk_aggregate_v1_service_proto_rawDescData
}

var file_chalk_aggregate_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chalk_aggregate_v1_service_proto_goTypes = []any{
	(*PlanAggregateBackfillRequest)(nil),      // 0: chalk.aggregate.v1.PlanAggregateBackfillRequest
	(*PlanAggregateBackfillResponse)(nil),     // 1: chalk.aggregate.v1.PlanAggregateBackfillResponse
	(*GetAggregatesRequest)(nil),              // 2: chalk.aggregate.v1.GetAggregatesRequest
	(*GetAggregatesResponse)(nil),             // 3: chalk.aggregate.v1.GetAggregatesResponse
	(*GetAggregateBackfillJobsRequest)(nil),   // 4: chalk.aggregate.v1.GetAggregateBackfillJobsRequest
	(*GetAggregateBackfillJobsResponse)(nil),  // 5: chalk.aggregate.v1.GetAggregateBackfillJobsResponse
	(*GetAggregateBackfillJobRequest)(nil),    // 6: chalk.aggregate.v1.GetAggregateBackfillJobRequest
	(*GetAggregateBackfillJobResponse)(nil),   // 7: chalk.aggregate.v1.GetAggregateBackfillJobResponse
	(*AggregateBackfillUserParams)(nil),       // 8: chalk.aggregate.v1.AggregateBackfillUserParams
	(*AggregateBackfillCostEstimate)(nil),     // 9: chalk.aggregate.v1.AggregateBackfillCostEstimate
	(*AggregateBackfillWithCostEstimate)(nil), // 10: chalk.aggregate.v1.AggregateBackfillWithCostEstimate
	(*AggregateTimeSeries)(nil),               // 11: chalk.aggregate.v1.AggregateTimeSeries
	(*AggregateBackfillJob)(nil),              // 12: chalk.aggregate.v1.AggregateBackfillJob
}
var file_chalk_aggregate_v1_service_proto_depIdxs = []int32{
	8,  // 0: chalk.aggregate.v1.PlanAggregateBackfillRequest.params:type_name -> chalk.aggregate.v1.AggregateBackfillUserParams
	9,  // 1: chalk.aggregate.v1.PlanAggregateBackfillResponse.estimate:type_name -> chalk.aggregate.v1.AggregateBackfillCostEstimate
	10, // 2: chalk.aggregate.v1.PlanAggregateBackfillResponse.backfills:type_name -> chalk.aggregate.v1.AggregateBackfillWithCostEstimate
	11, // 3: chalk.aggregate.v1.GetAggregatesResponse.series:type_name -> chalk.aggregate.v1.AggregateTimeSeries
	12, // 4: chalk.aggregate.v1.GetAggregateBackfillJobsResponse.jobs:type_name -> chalk.aggregate.v1.AggregateBackfillJob
	12, // 5: chalk.aggregate.v1.GetAggregateBackfillJobResponse.job:type_name -> chalk.aggregate.v1.AggregateBackfillJob
	0,  // 6: chalk.aggregate.v1.AggregateService.PlanAggregateBackfill:input_type -> chalk.aggregate.v1.PlanAggregateBackfillRequest
	2,  // 7: chalk.aggregate.v1.AggregateService.GetAggregates:input_type -> chalk.aggregate.v1.GetAggregatesRequest
	4,  // 8: chalk.aggregate.v1.AggregateService.GetAggregateBackfillJobs:input_type -> chalk.aggregate.v1.GetAggregateBackfillJobsRequest
	6,  // 9: chalk.aggregate.v1.AggregateService.GetAggregateBackfillJob:input_type -> chalk.aggregate.v1.GetAggregateBackfillJobRequest
	1,  // 10: chalk.aggregate.v1.AggregateService.PlanAggregateBackfill:output_type -> chalk.aggregate.v1.PlanAggregateBackfillResponse
	3,  // 11: chalk.aggregate.v1.AggregateService.GetAggregates:output_type -> chalk.aggregate.v1.GetAggregatesResponse
	5,  // 12: chalk.aggregate.v1.AggregateService.GetAggregateBackfillJobs:output_type -> chalk.aggregate.v1.GetAggregateBackfillJobsResponse
	7,  // 13: chalk.aggregate.v1.AggregateService.GetAggregateBackfillJob:output_type -> chalk.aggregate.v1.GetAggregateBackfillJobResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_chalk_aggregate_v1_service_proto_init() }
func file_chalk_aggregate_v1_service_proto_init() {
	if File_chalk_aggregate_v1_service_proto != nil {
		return
	}
	file_chalk_aggregate_v1_backfill_proto_init()
	file_chalk_aggregate_v1_timeseries_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_aggregate_v1_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PlanAggregateBackfillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_aggregate_v1_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlanAggregateBackfillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_aggregate_v1_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_aggregate_v1_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_aggregate_v1_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregateBackfillJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_aggregate_v1_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregateBackfillJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_aggregate_v1_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregateBackfillJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_aggregate_v1_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetAggregateBackfillJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_aggregate_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_aggregate_v1_service_proto_goTypes,
		DependencyIndexes: file_chalk_aggregate_v1_service_proto_depIdxs,
		MessageInfos:      file_chalk_aggregate_v1_service_proto_msgTypes,
	}.Build()
	File_chalk_aggregate_v1_service_proto = out.File
	file_chalk_aggregate_v1_service_proto_rawDesc = nil
	file_chalk_aggregate_v1_service_proto_goTypes = nil
	file_chalk_aggregate_v1_service_proto_depIdxs = nil
}
