// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/aggregate/v1/service.proto

package aggregatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/v2/gen/chalk/aggregate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AggregateServiceName is the fully-qualified name of the AggregateService service.
	AggregateServiceName = "chalk.aggregate.v1.AggregateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AggregateServicePlanAggregateBackfillProcedure is the fully-qualified name of the
	// AggregateService's PlanAggregateBackfill RPC.
	AggregateServicePlanAggregateBackfillProcedure = "/chalk.aggregate.v1.AggregateService/PlanAggregateBackfill"
	// AggregateServiceGetAggregatesProcedure is the fully-qualified name of the AggregateService's
	// GetAggregates RPC.
	AggregateServiceGetAggregatesProcedure = "/chalk.aggregate.v1.AggregateService/GetAggregates"
	// AggregateServiceGetAggregateBackfillJobsProcedure is the fully-qualified name of the
	// AggregateService's GetAggregateBackfillJobs RPC.
	AggregateServiceGetAggregateBackfillJobsProcedure = "/chalk.aggregate.v1.AggregateService/GetAggregateBackfillJobs"
	// AggregateServiceGetAggregateBackfillJobProcedure is the fully-qualified name of the
	// AggregateService's GetAggregateBackfillJob RPC.
	AggregateServiceGetAggregateBackfillJobProcedure = "/chalk.aggregate.v1.AggregateService/GetAggregateBackfillJob"
	// AggregateServiceGetCronAggregateBackfillProcedure is the fully-qualified name of the
	// AggregateService's GetCronAggregateBackfill RPC.
	AggregateServiceGetCronAggregateBackfillProcedure = "/chalk.aggregate.v1.AggregateService/GetCronAggregateBackfill"
	// AggregateServiceGetActiveCronAggregateBackfillsProcedure is the fully-qualified name of the
	// AggregateService's GetActiveCronAggregateBackfills RPC.
	AggregateServiceGetActiveCronAggregateBackfillsProcedure = "/chalk.aggregate.v1.AggregateService/GetActiveCronAggregateBackfills"
)

// AggregateServiceClient is a client for the chalk.aggregate.v1.AggregateService service.
type AggregateServiceClient interface {
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	//
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(context.Context, *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error)
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(context.Context, *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error)
	GetAggregateBackfillJobs(context.Context, *connect.Request[v1.GetAggregateBackfillJobsRequest]) (*connect.Response[v1.GetAggregateBackfillJobsResponse], error)
	GetAggregateBackfillJob(context.Context, *connect.Request[v1.GetAggregateBackfillJobRequest]) (*connect.Response[v1.GetAggregateBackfillJobResponse], error)
	GetCronAggregateBackfill(context.Context, *connect.Request[v1.GetCronAggregateBackfillRequest]) (*connect.Response[v1.GetCronAggregateBackfillResponse], error)
	GetActiveCronAggregateBackfills(context.Context, *connect.Request[v1.GetActiveCronAggregateBackfillsRequest]) (*connect.Response[v1.GetActiveCronAggregateBackfillsResponse], error)
}

// NewAggregateServiceClient constructs a client for the chalk.aggregate.v1.AggregateService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAggregateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AggregateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aggregateServiceMethods := v1.File_chalk_aggregate_v1_service_proto.Services().ByName("AggregateService").Methods()
	return &aggregateServiceClient{
		planAggregateBackfill: connect.NewClient[v1.PlanAggregateBackfillRequest, v1.PlanAggregateBackfillResponse](
			httpClient,
			baseURL+AggregateServicePlanAggregateBackfillProcedure,
			connect.WithSchema(aggregateServiceMethods.ByName("PlanAggregateBackfill")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAggregates: connect.NewClient[v1.GetAggregatesRequest, v1.GetAggregatesResponse](
			httpClient,
			baseURL+AggregateServiceGetAggregatesProcedure,
			connect.WithSchema(aggregateServiceMethods.ByName("GetAggregates")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAggregateBackfillJobs: connect.NewClient[v1.GetAggregateBackfillJobsRequest, v1.GetAggregateBackfillJobsResponse](
			httpClient,
			baseURL+AggregateServiceGetAggregateBackfillJobsProcedure,
			connect.WithSchema(aggregateServiceMethods.ByName("GetAggregateBackfillJobs")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAggregateBackfillJob: connect.NewClient[v1.GetAggregateBackfillJobRequest, v1.GetAggregateBackfillJobResponse](
			httpClient,
			baseURL+AggregateServiceGetAggregateBackfillJobProcedure,
			connect.WithSchema(aggregateServiceMethods.ByName("GetAggregateBackfillJob")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getCronAggregateBackfill: connect.NewClient[v1.GetCronAggregateBackfillRequest, v1.GetCronAggregateBackfillResponse](
			httpClient,
			baseURL+AggregateServiceGetCronAggregateBackfillProcedure,
			connect.WithSchema(aggregateServiceMethods.ByName("GetCronAggregateBackfill")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getActiveCronAggregateBackfills: connect.NewClient[v1.GetActiveCronAggregateBackfillsRequest, v1.GetActiveCronAggregateBackfillsResponse](
			httpClient,
			baseURL+AggregateServiceGetActiveCronAggregateBackfillsProcedure,
			connect.WithSchema(aggregateServiceMethods.ByName("GetActiveCronAggregateBackfills")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// aggregateServiceClient implements AggregateServiceClient.
type aggregateServiceClient struct {
	planAggregateBackfill           *connect.Client[v1.PlanAggregateBackfillRequest, v1.PlanAggregateBackfillResponse]
	getAggregates                   *connect.Client[v1.GetAggregatesRequest, v1.GetAggregatesResponse]
	getAggregateBackfillJobs        *connect.Client[v1.GetAggregateBackfillJobsRequest, v1.GetAggregateBackfillJobsResponse]
	getAggregateBackfillJob         *connect.Client[v1.GetAggregateBackfillJobRequest, v1.GetAggregateBackfillJobResponse]
	getCronAggregateBackfill        *connect.Client[v1.GetCronAggregateBackfillRequest, v1.GetCronAggregateBackfillResponse]
	getActiveCronAggregateBackfills *connect.Client[v1.GetActiveCronAggregateBackfillsRequest, v1.GetActiveCronAggregateBackfillsResponse]
}

// PlanAggregateBackfill calls chalk.aggregate.v1.AggregateService.PlanAggregateBackfill.
func (c *aggregateServiceClient) PlanAggregateBackfill(ctx context.Context, req *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error) {
	return c.planAggregateBackfill.CallUnary(ctx, req)
}

// GetAggregates calls chalk.aggregate.v1.AggregateService.GetAggregates.
func (c *aggregateServiceClient) GetAggregates(ctx context.Context, req *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error) {
	return c.getAggregates.CallUnary(ctx, req)
}

// GetAggregateBackfillJobs calls chalk.aggregate.v1.AggregateService.GetAggregateBackfillJobs.
func (c *aggregateServiceClient) GetAggregateBackfillJobs(ctx context.Context, req *connect.Request[v1.GetAggregateBackfillJobsRequest]) (*connect.Response[v1.GetAggregateBackfillJobsResponse], error) {
	return c.getAggregateBackfillJobs.CallUnary(ctx, req)
}

// GetAggregateBackfillJob calls chalk.aggregate.v1.AggregateService.GetAggregateBackfillJob.
func (c *aggregateServiceClient) GetAggregateBackfillJob(ctx context.Context, req *connect.Request[v1.GetAggregateBackfillJobRequest]) (*connect.Response[v1.GetAggregateBackfillJobResponse], error) {
	return c.getAggregateBackfillJob.CallUnary(ctx, req)
}

// GetCronAggregateBackfill calls chalk.aggregate.v1.AggregateService.GetCronAggregateBackfill.
func (c *aggregateServiceClient) GetCronAggregateBackfill(ctx context.Context, req *connect.Request[v1.GetCronAggregateBackfillRequest]) (*connect.Response[v1.GetCronAggregateBackfillResponse], error) {
	return c.getCronAggregateBackfill.CallUnary(ctx, req)
}

// GetActiveCronAggregateBackfills calls
// chalk.aggregate.v1.AggregateService.GetActiveCronAggregateBackfills.
func (c *aggregateServiceClient) GetActiveCronAggregateBackfills(ctx context.Context, req *connect.Request[v1.GetActiveCronAggregateBackfillsRequest]) (*connect.Response[v1.GetActiveCronAggregateBackfillsResponse], error) {
	return c.getActiveCronAggregateBackfills.CallUnary(ctx, req)
}

// AggregateServiceHandler is an implementation of the chalk.aggregate.v1.AggregateService service.
type AggregateServiceHandler interface {
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	//
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(context.Context, *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error)
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(context.Context, *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error)
	GetAggregateBackfillJobs(context.Context, *connect.Request[v1.GetAggregateBackfillJobsRequest]) (*connect.Response[v1.GetAggregateBackfillJobsResponse], error)
	GetAggregateBackfillJob(context.Context, *connect.Request[v1.GetAggregateBackfillJobRequest]) (*connect.Response[v1.GetAggregateBackfillJobResponse], error)
	GetCronAggregateBackfill(context.Context, *connect.Request[v1.GetCronAggregateBackfillRequest]) (*connect.Response[v1.GetCronAggregateBackfillResponse], error)
	GetActiveCronAggregateBackfills(context.Context, *connect.Request[v1.GetActiveCronAggregateBackfillsRequest]) (*connect.Response[v1.GetActiveCronAggregateBackfillsResponse], error)
}

// NewAggregateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAggregateServiceHandler(svc AggregateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aggregateServiceMethods := v1.File_chalk_aggregate_v1_service_proto.Services().ByName("AggregateService").Methods()
	aggregateServicePlanAggregateBackfillHandler := connect.NewUnaryHandler(
		AggregateServicePlanAggregateBackfillProcedure,
		svc.PlanAggregateBackfill,
		connect.WithSchema(aggregateServiceMethods.ByName("PlanAggregateBackfill")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	aggregateServiceGetAggregatesHandler := connect.NewUnaryHandler(
		AggregateServiceGetAggregatesProcedure,
		svc.GetAggregates,
		connect.WithSchema(aggregateServiceMethods.ByName("GetAggregates")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	aggregateServiceGetAggregateBackfillJobsHandler := connect.NewUnaryHandler(
		AggregateServiceGetAggregateBackfillJobsProcedure,
		svc.GetAggregateBackfillJobs,
		connect.WithSchema(aggregateServiceMethods.ByName("GetAggregateBackfillJobs")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	aggregateServiceGetAggregateBackfillJobHandler := connect.NewUnaryHandler(
		AggregateServiceGetAggregateBackfillJobProcedure,
		svc.GetAggregateBackfillJob,
		connect.WithSchema(aggregateServiceMethods.ByName("GetAggregateBackfillJob")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	aggregateServiceGetCronAggregateBackfillHandler := connect.NewUnaryHandler(
		AggregateServiceGetCronAggregateBackfillProcedure,
		svc.GetCronAggregateBackfill,
		connect.WithSchema(aggregateServiceMethods.ByName("GetCronAggregateBackfill")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	aggregateServiceGetActiveCronAggregateBackfillsHandler := connect.NewUnaryHandler(
		AggregateServiceGetActiveCronAggregateBackfillsProcedure,
		svc.GetActiveCronAggregateBackfills,
		connect.WithSchema(aggregateServiceMethods.ByName("GetActiveCronAggregateBackfills")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.aggregate.v1.AggregateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AggregateServicePlanAggregateBackfillProcedure:
			aggregateServicePlanAggregateBackfillHandler.ServeHTTP(w, r)
		case AggregateServiceGetAggregatesProcedure:
			aggregateServiceGetAggregatesHandler.ServeHTTP(w, r)
		case AggregateServiceGetAggregateBackfillJobsProcedure:
			aggregateServiceGetAggregateBackfillJobsHandler.ServeHTTP(w, r)
		case AggregateServiceGetAggregateBackfillJobProcedure:
			aggregateServiceGetAggregateBackfillJobHandler.ServeHTTP(w, r)
		case AggregateServiceGetCronAggregateBackfillProcedure:
			aggregateServiceGetCronAggregateBackfillHandler.ServeHTTP(w, r)
		case AggregateServiceGetActiveCronAggregateBackfillsProcedure:
			aggregateServiceGetActiveCronAggregateBackfillsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAggregateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAggregateServiceHandler struct{}

func (UnimplementedAggregateServiceHandler) PlanAggregateBackfill(context.Context, *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.PlanAggregateBackfill is not implemented"))
}

func (UnimplementedAggregateServiceHandler) GetAggregates(context.Context, *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.GetAggregates is not implemented"))
}

func (UnimplementedAggregateServiceHandler) GetAggregateBackfillJobs(context.Context, *connect.Request[v1.GetAggregateBackfillJobsRequest]) (*connect.Response[v1.GetAggregateBackfillJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.GetAggregateBackfillJobs is not implemented"))
}

func (UnimplementedAggregateServiceHandler) GetAggregateBackfillJob(context.Context, *connect.Request[v1.GetAggregateBackfillJobRequest]) (*connect.Response[v1.GetAggregateBackfillJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.GetAggregateBackfillJob is not implemented"))
}

func (UnimplementedAggregateServiceHandler) GetCronAggregateBackfill(context.Context, *connect.Request[v1.GetCronAggregateBackfillRequest]) (*connect.Response[v1.GetCronAggregateBackfillResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.GetCronAggregateBackfill is not implemented"))
}

func (UnimplementedAggregateServiceHandler) GetActiveCronAggregateBackfills(context.Context, *connect.Request[v1.GetActiveCronAggregateBackfillsRequest]) (*connect.Response[v1.GetActiveCronAggregateBackfillsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.GetActiveCronAggregateBackfills is not implemented"))
}
