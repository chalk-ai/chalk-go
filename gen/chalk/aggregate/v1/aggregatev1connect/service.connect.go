// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/aggregate/v1/service.proto

package aggregatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/aggregate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AggregateServiceName is the fully-qualified name of the AggregateService service.
	AggregateServiceName = "chalk.aggregate.v1.AggregateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AggregateServicePlanAggregateBackfillProcedure is the fully-qualified name of the
	// AggregateService's PlanAggregateBackfill RPC.
	AggregateServicePlanAggregateBackfillProcedure = "/chalk.aggregate.v1.AggregateService/PlanAggregateBackfill"
	// AggregateServiceGetAggregatesProcedure is the fully-qualified name of the AggregateService's
	// GetAggregates RPC.
	AggregateServiceGetAggregatesProcedure = "/chalk.aggregate.v1.AggregateService/GetAggregates"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aggregateServiceServiceDescriptor                     = v1.File_chalk_aggregate_v1_service_proto.Services().ByName("AggregateService")
	aggregateServicePlanAggregateBackfillMethodDescriptor = aggregateServiceServiceDescriptor.Methods().ByName("PlanAggregateBackfill")
	aggregateServiceGetAggregatesMethodDescriptor         = aggregateServiceServiceDescriptor.Methods().ByName("GetAggregates")
)

// AggregateServiceClient is a client for the chalk.aggregate.v1.AggregateService service.
type AggregateServiceClient interface {
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(context.Context, *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(context.Context, *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error)
}

// NewAggregateServiceClient constructs a client for the chalk.aggregate.v1.AggregateService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAggregateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AggregateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aggregateServiceClient{
		planAggregateBackfill: connect.NewClient[v1.PlanAggregateBackfillRequest, v1.PlanAggregateBackfillResponse](
			httpClient,
			baseURL+AggregateServicePlanAggregateBackfillProcedure,
			connect.WithSchema(aggregateServicePlanAggregateBackfillMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAggregates: connect.NewClient[v1.GetAggregatesRequest, v1.GetAggregatesResponse](
			httpClient,
			baseURL+AggregateServiceGetAggregatesProcedure,
			connect.WithSchema(aggregateServiceGetAggregatesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// aggregateServiceClient implements AggregateServiceClient.
type aggregateServiceClient struct {
	planAggregateBackfill *connect.Client[v1.PlanAggregateBackfillRequest, v1.PlanAggregateBackfillResponse]
	getAggregates         *connect.Client[v1.GetAggregatesRequest, v1.GetAggregatesResponse]
}

// PlanAggregateBackfill calls chalk.aggregate.v1.AggregateService.PlanAggregateBackfill.
func (c *aggregateServiceClient) PlanAggregateBackfill(ctx context.Context, req *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error) {
	return c.planAggregateBackfill.CallUnary(ctx, req)
}

// GetAggregates calls chalk.aggregate.v1.AggregateService.GetAggregates.
func (c *aggregateServiceClient) GetAggregates(ctx context.Context, req *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error) {
	return c.getAggregates.CallUnary(ctx, req)
}

// AggregateServiceHandler is an implementation of the chalk.aggregate.v1.AggregateService service.
type AggregateServiceHandler interface {
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(context.Context, *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error)
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(context.Context, *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error)
}

// NewAggregateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAggregateServiceHandler(svc AggregateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aggregateServicePlanAggregateBackfillHandler := connect.NewUnaryHandler(
		AggregateServicePlanAggregateBackfillProcedure,
		svc.PlanAggregateBackfill,
		connect.WithSchema(aggregateServicePlanAggregateBackfillMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	aggregateServiceGetAggregatesHandler := connect.NewUnaryHandler(
		AggregateServiceGetAggregatesProcedure,
		svc.GetAggregates,
		connect.WithSchema(aggregateServiceGetAggregatesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.aggregate.v1.AggregateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AggregateServicePlanAggregateBackfillProcedure:
			aggregateServicePlanAggregateBackfillHandler.ServeHTTP(w, r)
		case AggregateServiceGetAggregatesProcedure:
			aggregateServiceGetAggregatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAggregateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAggregateServiceHandler struct{}

func (UnimplementedAggregateServiceHandler) PlanAggregateBackfill(context.Context, *connect.Request[v1.PlanAggregateBackfillRequest]) (*connect.Response[v1.PlanAggregateBackfillResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.PlanAggregateBackfill is not implemented"))
}

func (UnimplementedAggregateServiceHandler) GetAggregates(context.Context, *connect.Request[v1.GetAggregatesRequest]) (*connect.Response[v1.GetAggregatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.aggregate.v1.AggregateService.GetAggregates is not implemented"))
}
