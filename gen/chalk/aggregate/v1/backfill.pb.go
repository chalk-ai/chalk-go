// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/aggregate/v1/backfill.proto

package aggregatev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggregateBackfillCostEstimate struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MaxBuckets          int64                  `protobuf:"varint,1,opt,name=max_buckets,json=maxBuckets,proto3" json:"max_buckets,omitempty"`
	ExpectedBuckets     int64                  `protobuf:"varint,2,opt,name=expected_buckets,json=expectedBuckets,proto3" json:"expected_buckets,omitempty"`
	ExpectedBytes       int64                  `protobuf:"varint,3,opt,name=expected_bytes,json=expectedBytes,proto3" json:"expected_bytes,omitempty"`
	ExpectedStorageCost float64                `protobuf:"fixed64,4,opt,name=expected_storage_cost,json=expectedStorageCost,proto3" json:"expected_storage_cost,omitempty"`
	ExpectedRuntime     *durationpb.Duration   `protobuf:"bytes,5,opt,name=expected_runtime,json=expectedRuntime,proto3" json:"expected_runtime,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AggregateBackfillCostEstimate) Reset() {
	*x = AggregateBackfillCostEstimate{}
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateBackfillCostEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateBackfillCostEstimate) ProtoMessage() {}

func (x *AggregateBackfillCostEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateBackfillCostEstimate.ProtoReflect.Descriptor instead.
func (*AggregateBackfillCostEstimate) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_backfill_proto_rawDescGZIP(), []int{0}
}

func (x *AggregateBackfillCostEstimate) GetMaxBuckets() int64 {
	if x != nil {
		return x.MaxBuckets
	}
	return 0
}

func (x *AggregateBackfillCostEstimate) GetExpectedBuckets() int64 {
	if x != nil {
		return x.ExpectedBuckets
	}
	return 0
}

func (x *AggregateBackfillCostEstimate) GetExpectedBytes() int64 {
	if x != nil {
		return x.ExpectedBytes
	}
	return 0
}

func (x *AggregateBackfillCostEstimate) GetExpectedStorageCost() float64 {
	if x != nil {
		return x.ExpectedStorageCost
	}
	return 0
}

func (x *AggregateBackfillCostEstimate) GetExpectedRuntime() *durationpb.Duration {
	if x != nil {
		return x.ExpectedRuntime
	}
	return nil
}

type AggregateBackfillUserParams struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Features []string               `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	Resolver *string                `protobuf:"bytes,2,opt,name=resolver,proto3,oneof" json:"resolver,omitempty"`
	// Deprecated: Marked as deprecated in chalk/aggregate/v1/backfill.proto.
	TimestampColumnName *string                `protobuf:"bytes,3,opt,name=timestamp_column_name,json=timestampColumnName,proto3,oneof" json:"timestamp_column_name,omitempty"`
	LowerBound          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	UpperBound          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	Exact               bool                   `protobuf:"varint,6,opt,name=exact,proto3" json:"exact,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AggregateBackfillUserParams) Reset() {
	*x = AggregateBackfillUserParams{}
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateBackfillUserParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateBackfillUserParams) ProtoMessage() {}

func (x *AggregateBackfillUserParams) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateBackfillUserParams.ProtoReflect.Descriptor instead.
func (*AggregateBackfillUserParams) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_backfill_proto_rawDescGZIP(), []int{1}
}

func (x *AggregateBackfillUserParams) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *AggregateBackfillUserParams) GetResolver() string {
	if x != nil && x.Resolver != nil {
		return *x.Resolver
	}
	return ""
}

// Deprecated: Marked as deprecated in chalk/aggregate/v1/backfill.proto.
func (x *AggregateBackfillUserParams) GetTimestampColumnName() string {
	if x != nil && x.TimestampColumnName != nil {
		return *x.TimestampColumnName
	}
	return ""
}

func (x *AggregateBackfillUserParams) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *AggregateBackfillUserParams) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *AggregateBackfillUserParams) GetExact() bool {
	if x != nil {
		return x.Exact
	}
	return false
}

type AggregateBackfill struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Series             []*AggregateTimeSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	Resolver           string                 `protobuf:"bytes,2,opt,name=resolver,proto3" json:"resolver,omitempty"`
	DatetimeFeature    string                 `protobuf:"bytes,3,opt,name=datetime_feature,json=datetimeFeature,proto3" json:"datetime_feature,omitempty"`
	BucketDuration     *durationpb.Duration   `protobuf:"bytes,4,opt,name=bucket_duration,json=bucketDuration,proto3" json:"bucket_duration,omitempty"`
	FiltersDescription string                 `protobuf:"bytes,5,opt,name=filters_description,json=filtersDescription,proto3" json:"filters_description,omitempty"`
	GroupBy            []string               `protobuf:"bytes,6,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	MaxRetention       *durationpb.Duration   `protobuf:"bytes,7,opt,name=max_retention,json=maxRetention,proto3" json:"max_retention,omitempty"`
	LowerBound         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AggregateBackfill) Reset() {
	*x = AggregateBackfill{}
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateBackfill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateBackfill) ProtoMessage() {}

func (x *AggregateBackfill) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateBackfill.ProtoReflect.Descriptor instead.
func (*AggregateBackfill) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_backfill_proto_rawDescGZIP(), []int{2}
}

func (x *AggregateBackfill) GetSeries() []*AggregateTimeSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *AggregateBackfill) GetResolver() string {
	if x != nil {
		return x.Resolver
	}
	return ""
}

func (x *AggregateBackfill) GetDatetimeFeature() string {
	if x != nil {
		return x.DatetimeFeature
	}
	return ""
}

func (x *AggregateBackfill) GetBucketDuration() *durationpb.Duration {
	if x != nil {
		return x.BucketDuration
	}
	return nil
}

func (x *AggregateBackfill) GetFiltersDescription() string {
	if x != nil {
		return x.FiltersDescription
	}
	return ""
}

func (x *AggregateBackfill) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *AggregateBackfill) GetMaxRetention() *durationpb.Duration {
	if x != nil {
		return x.MaxRetention
	}
	return nil
}

func (x *AggregateBackfill) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *AggregateBackfill) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type AggregateBackfillWithCostEstimate struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Backfill      *AggregateBackfill             `protobuf:"bytes,1,opt,name=backfill,proto3" json:"backfill,omitempty"`
	Estimate      *AggregateBackfillCostEstimate `protobuf:"bytes,2,opt,name=estimate,proto3" json:"estimate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateBackfillWithCostEstimate) Reset() {
	*x = AggregateBackfillWithCostEstimate{}
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateBackfillWithCostEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateBackfillWithCostEstimate) ProtoMessage() {}

func (x *AggregateBackfillWithCostEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateBackfillWithCostEstimate.ProtoReflect.Descriptor instead.
func (*AggregateBackfillWithCostEstimate) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_backfill_proto_rawDescGZIP(), []int{3}
}

func (x *AggregateBackfillWithCostEstimate) GetBackfill() *AggregateBackfill {
	if x != nil {
		return x.Backfill
	}
	return nil
}

func (x *AggregateBackfillWithCostEstimate) GetEstimate() *AggregateBackfillCostEstimate {
	if x != nil {
		return x.Estimate
	}
	return nil
}

type AggregateBackfillJob struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Id                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId           string                 `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Resolver                *string                `protobuf:"bytes,3,opt,name=resolver,proto3,oneof" json:"resolver,omitempty"`
	Features                []string               `protobuf:"bytes,4,rep,name=features,proto3" json:"features,omitempty"`
	AgentId                 *string                `protobuf:"bytes,5,opt,name=agent_id,json=agentId,proto3,oneof" json:"agent_id,omitempty"`
	DeploymentId            *string                `protobuf:"bytes,6,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	CreatedAt               *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Resolvers               []string               `protobuf:"bytes,9,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	CronAggregateBackfillId *string                `protobuf:"bytes,10,opt,name=cron_aggregate_backfill_id,json=cronAggregateBackfillId,proto3,oneof" json:"cron_aggregate_backfill_id,omitempty"`
	PlanHash                *string                `protobuf:"bytes,11,opt,name=plan_hash,json=planHash,proto3,oneof" json:"plan_hash,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AggregateBackfillJob) Reset() {
	*x = AggregateBackfillJob{}
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateBackfillJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateBackfillJob) ProtoMessage() {}

func (x *AggregateBackfillJob) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateBackfillJob.ProtoReflect.Descriptor instead.
func (*AggregateBackfillJob) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_backfill_proto_rawDescGZIP(), []int{4}
}

func (x *AggregateBackfillJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AggregateBackfillJob) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *AggregateBackfillJob) GetResolver() string {
	if x != nil && x.Resolver != nil {
		return *x.Resolver
	}
	return ""
}

func (x *AggregateBackfillJob) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *AggregateBackfillJob) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *AggregateBackfillJob) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *AggregateBackfillJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AggregateBackfillJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AggregateBackfillJob) GetResolvers() []string {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *AggregateBackfillJob) GetCronAggregateBackfillId() string {
	if x != nil && x.CronAggregateBackfillId != nil {
		return *x.CronAggregateBackfillId
	}
	return ""
}

func (x *AggregateBackfillJob) GetPlanHash() string {
	if x != nil && x.PlanHash != nil {
		return *x.PlanHash
	}
	return ""
}

type CronAggregateBackfill struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentId string                 `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Schedule      string                 `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	PlanHash      string                 `protobuf:"bytes,5,opt,name=plan_hash,json=planHash,proto3" json:"plan_hash,omitempty"`
	Features      []string               `protobuf:"bytes,8,rep,name=features,proto3" json:"features,omitempty"`
	Resolvers     []string               `protobuf:"bytes,9,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronAggregateBackfill) Reset() {
	*x = CronAggregateBackfill{}
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronAggregateBackfill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronAggregateBackfill) ProtoMessage() {}

func (x *CronAggregateBackfill) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_aggregate_v1_backfill_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronAggregateBackfill.ProtoReflect.Descriptor instead.
func (*CronAggregateBackfill) Descriptor() ([]byte, []int) {
	return file_chalk_aggregate_v1_backfill_proto_rawDescGZIP(), []int{5}
}

func (x *CronAggregateBackfill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CronAggregateBackfill) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *CronAggregateBackfill) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *CronAggregateBackfill) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CronAggregateBackfill) GetPlanHash() string {
	if x != nil {
		return x.PlanHash
	}
	return ""
}

func (x *CronAggregateBackfill) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *CronAggregateBackfill) GetResolvers() []string {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *CronAggregateBackfill) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CronAggregateBackfill) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_chalk_aggregate_v1_backfill_proto protoreflect.FileDescriptor

const file_chalk_aggregate_v1_backfill_proto_rawDesc = "" +
	"\n" +
	"!chalk/aggregate/v1/backfill.proto\x12\x12chalk.aggregate.v1\x1a#chalk/aggregate/v1/timeseries.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8c\x02\n" +
	"\x1dAggregateBackfillCostEstimate\x12\x1f\n" +
	"\vmax_buckets\x18\x01 \x01(\x03R\n" +
	"maxBuckets\x12)\n" +
	"\x10expected_buckets\x18\x02 \x01(\x03R\x0fexpectedBuckets\x12%\n" +
	"\x0eexpected_bytes\x18\x03 \x01(\x03R\rexpectedBytes\x122\n" +
	"\x15expected_storage_cost\x18\x04 \x01(\x01R\x13expectedStorageCost\x12D\n" +
	"\x10expected_runtime\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x0fexpectedRuntime\"\xf8\x02\n" +
	"\x1bAggregateBackfillUserParams\x12\x1a\n" +
	"\bfeatures\x18\x01 \x03(\tR\bfeatures\x12\x1f\n" +
	"\bresolver\x18\x02 \x01(\tH\x00R\bresolver\x88\x01\x01\x12;\n" +
	"\x15timestamp_column_name\x18\x03 \x01(\tB\x02\x18\x01H\x01R\x13timestampColumnName\x88\x01\x01\x12@\n" +
	"\vlower_bound\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x02R\n" +
	"lowerBound\x88\x01\x01\x12@\n" +
	"\vupper_bound\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x03R\n" +
	"upperBound\x88\x01\x01\x12\x14\n" +
	"\x05exact\x18\x06 \x01(\bR\x05exactB\v\n" +
	"\t_resolverB\x18\n" +
	"\x16_timestamp_column_nameB\x0e\n" +
	"\f_lower_boundB\x0e\n" +
	"\f_upper_bound\"\xe5\x03\n" +
	"\x11AggregateBackfill\x12?\n" +
	"\x06series\x18\x01 \x03(\v2'.chalk.aggregate.v1.AggregateTimeSeriesR\x06series\x12\x1a\n" +
	"\bresolver\x18\x02 \x01(\tR\bresolver\x12)\n" +
	"\x10datetime_feature\x18\x03 \x01(\tR\x0fdatetimeFeature\x12B\n" +
	"\x0fbucket_duration\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x0ebucketDuration\x12/\n" +
	"\x13filters_description\x18\x05 \x01(\tR\x12filtersDescription\x12\x19\n" +
	"\bgroup_by\x18\x06 \x03(\tR\agroupBy\x12>\n" +
	"\rmax_retention\x18\a \x01(\v2\x19.google.protobuf.DurationR\fmaxRetention\x12;\n" +
	"\vlower_bound\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lowerBound\x12;\n" +
	"\vupper_bound\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"upperBound\"\xb5\x01\n" +
	"!AggregateBackfillWithCostEstimate\x12A\n" +
	"\bbackfill\x18\x01 \x01(\v2%.chalk.aggregate.v1.AggregateBackfillR\bbackfill\x12M\n" +
	"\bestimate\x18\x02 \x01(\v21.chalk.aggregate.v1.AggregateBackfillCostEstimateR\bestimate\"\xa5\x04\n" +
	"\x14AggregateBackfillJob\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12%\n" +
	"\x0eenvironment_id\x18\x02 \x01(\tR\renvironmentId\x12\x1f\n" +
	"\bresolver\x18\x03 \x01(\tH\x00R\bresolver\x88\x01\x01\x12\x1a\n" +
	"\bfeatures\x18\x04 \x03(\tR\bfeatures\x12\x1e\n" +
	"\bagent_id\x18\x05 \x01(\tH\x01R\aagentId\x88\x01\x01\x12(\n" +
	"\rdeployment_id\x18\x06 \x01(\tH\x02R\fdeploymentId\x88\x01\x01\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1c\n" +
	"\tresolvers\x18\t \x03(\tR\tresolvers\x12@\n" +
	"\x1acron_aggregate_backfill_id\x18\n" +
	" \x01(\tH\x03R\x17cronAggregateBackfillId\x88\x01\x01\x12 \n" +
	"\tplan_hash\x18\v \x01(\tH\x04R\bplanHash\x88\x01\x01B\v\n" +
	"\t_resolverB\v\n" +
	"\t_agent_idB\x10\n" +
	"\x0e_deployment_idB\x1d\n" +
	"\x1b_cron_aggregate_backfill_idB\f\n" +
	"\n" +
	"_plan_hash\"\xdc\x02\n" +
	"\x15CronAggregateBackfill\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12%\n" +
	"\x0eenvironment_id\x18\x02 \x01(\tR\renvironmentId\x12#\n" +
	"\rdeployment_id\x18\x03 \x01(\tR\fdeploymentId\x12\x1a\n" +
	"\bschedule\x18\x04 \x01(\tR\bschedule\x12\x1b\n" +
	"\tplan_hash\x18\x05 \x01(\tR\bplanHash\x12\x1a\n" +
	"\bfeatures\x18\b \x03(\tR\bfeatures\x12\x1c\n" +
	"\tresolvers\x18\t \x03(\tR\tresolvers\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAtB\xd2\x01\n" +
	"\x16com.chalk.aggregate.v1B\rBackfillProtoP\x01Z?github.com/chalk-ai/chalk-go/gen/chalk/aggregate/v1;aggregatev1\xa2\x02\x03CAX\xaa\x02\x12Chalk.Aggregate.V1\xca\x02\x12Chalk\\Aggregate\\V1\xe2\x02\x1eChalk\\Aggregate\\V1\\GPBMetadata\xea\x02\x14Chalk::Aggregate::V1b\x06proto3"

var (
	file_chalk_aggregate_v1_backfill_proto_rawDescOnce sync.Once
	file_chalk_aggregate_v1_backfill_proto_rawDescData []byte
)

func file_chalk_aggregate_v1_backfill_proto_rawDescGZIP() []byte {
	file_chalk_aggregate_v1_backfill_proto_rawDescOnce.Do(func() {
		file_chalk_aggregate_v1_backfill_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_aggregate_v1_backfill_proto_rawDesc), len(file_chalk_aggregate_v1_backfill_proto_rawDesc)))
	})
	return file_chalk_aggregate_v1_backfill_proto_rawDescData
}

var file_chalk_aggregate_v1_backfill_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chalk_aggregate_v1_backfill_proto_goTypes = []any{
	(*AggregateBackfillCostEstimate)(nil),     // 0: chalk.aggregate.v1.AggregateBackfillCostEstimate
	(*AggregateBackfillUserParams)(nil),       // 1: chalk.aggregate.v1.AggregateBackfillUserParams
	(*AggregateBackfill)(nil),                 // 2: chalk.aggregate.v1.AggregateBackfill
	(*AggregateBackfillWithCostEstimate)(nil), // 3: chalk.aggregate.v1.AggregateBackfillWithCostEstimate
	(*AggregateBackfillJob)(nil),              // 4: chalk.aggregate.v1.AggregateBackfillJob
	(*CronAggregateBackfill)(nil),             // 5: chalk.aggregate.v1.CronAggregateBackfill
	(*durationpb.Duration)(nil),               // 6: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),             // 7: google.protobuf.Timestamp
	(*AggregateTimeSeries)(nil),               // 8: chalk.aggregate.v1.AggregateTimeSeries
}
var file_chalk_aggregate_v1_backfill_proto_depIdxs = []int32{
	6,  // 0: chalk.aggregate.v1.AggregateBackfillCostEstimate.expected_runtime:type_name -> google.protobuf.Duration
	7,  // 1: chalk.aggregate.v1.AggregateBackfillUserParams.lower_bound:type_name -> google.protobuf.Timestamp
	7,  // 2: chalk.aggregate.v1.AggregateBackfillUserParams.upper_bound:type_name -> google.protobuf.Timestamp
	8,  // 3: chalk.aggregate.v1.AggregateBackfill.series:type_name -> chalk.aggregate.v1.AggregateTimeSeries
	6,  // 4: chalk.aggregate.v1.AggregateBackfill.bucket_duration:type_name -> google.protobuf.Duration
	6,  // 5: chalk.aggregate.v1.AggregateBackfill.max_retention:type_name -> google.protobuf.Duration
	7,  // 6: chalk.aggregate.v1.AggregateBackfill.lower_bound:type_name -> google.protobuf.Timestamp
	7,  // 7: chalk.aggregate.v1.AggregateBackfill.upper_bound:type_name -> google.protobuf.Timestamp
	2,  // 8: chalk.aggregate.v1.AggregateBackfillWithCostEstimate.backfill:type_name -> chalk.aggregate.v1.AggregateBackfill
	0,  // 9: chalk.aggregate.v1.AggregateBackfillWithCostEstimate.estimate:type_name -> chalk.aggregate.v1.AggregateBackfillCostEstimate
	7,  // 10: chalk.aggregate.v1.AggregateBackfillJob.created_at:type_name -> google.protobuf.Timestamp
	7,  // 11: chalk.aggregate.v1.AggregateBackfillJob.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 12: chalk.aggregate.v1.CronAggregateBackfill.created_at:type_name -> google.protobuf.Timestamp
	7,  // 13: chalk.aggregate.v1.CronAggregateBackfill.updated_at:type_name -> google.protobuf.Timestamp
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_chalk_aggregate_v1_backfill_proto_init() }
func file_chalk_aggregate_v1_backfill_proto_init() {
	if File_chalk_aggregate_v1_backfill_proto != nil {
		return
	}
	file_chalk_aggregate_v1_timeseries_proto_init()
	file_chalk_aggregate_v1_backfill_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_aggregate_v1_backfill_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_aggregate_v1_backfill_proto_rawDesc), len(file_chalk_aggregate_v1_backfill_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_aggregate_v1_backfill_proto_goTypes,
		DependencyIndexes: file_chalk_aggregate_v1_backfill_proto_depIdxs,
		MessageInfos:      file_chalk_aggregate_v1_backfill_proto_msgTypes,
	}.Build()
	File_chalk_aggregate_v1_backfill_proto = out.File
	file_chalk_aggregate_v1_backfill_proto_goTypes = nil
	file_chalk_aggregate_v1_backfill_proto_depIdxs = nil
}
