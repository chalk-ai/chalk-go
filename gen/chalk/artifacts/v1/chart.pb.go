// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/artifacts/v1/chart.proto

package artifactsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricKind int32

const (
	MetricKind_METRIC_KIND_UNSPECIFIED               MetricKind = 0
	MetricKind_METRIC_KIND_FEATURE_REQUEST_COUNT     MetricKind = 1
	MetricKind_METRIC_KIND_FEATURE_LATENCY           MetricKind = 2
	MetricKind_METRIC_KIND_FEATURE_STALENESS         MetricKind = 3
	MetricKind_METRIC_KIND_FEATURE_VALUE             MetricKind = 4
	MetricKind_METRIC_KIND_FEATURE_WRITE             MetricKind = 5
	MetricKind_METRIC_KIND_FEATURE_NULL_RATIO        MetricKind = 6
	MetricKind_METRIC_KIND_RESOLVER_REQUEST_COUNT    MetricKind = 7
	MetricKind_METRIC_KIND_RESOLVER_LATENCY          MetricKind = 8
	MetricKind_METRIC_KIND_RESOLVER_SUCCESS_RATIO    MetricKind = 9
	MetricKind_METRIC_KIND_QUERY_COUNT               MetricKind = 10
	MetricKind_METRIC_KIND_QUERY_LATENCY             MetricKind = 11
	MetricKind_METRIC_KIND_QUERY_SUCCESS_RATIO       MetricKind = 12
	MetricKind_METRIC_KIND_BILLING_INFERENCE         MetricKind = 13
	MetricKind_METRIC_KIND_BILLING_CRON              MetricKind = 14
	MetricKind_METRIC_KIND_BILLING_MIGRATION         MetricKind = 15
	MetricKind_METRIC_KIND_CRON_COUNT                MetricKind = 16
	MetricKind_METRIC_KIND_CRON_LATENCY              MetricKind = 17
	MetricKind_METRIC_KIND_STREAM_MESSAGES_PROCESSED MetricKind = 18
	MetricKind_METRIC_KIND_STREAM_MESSAGE_LATENCY    MetricKind = 19
	MetricKind_METRIC_KIND_STREAM_WINDOWS_PROCESSED  MetricKind = 20
	MetricKind_METRIC_KIND_STREAM_WINDOW_LATENCY     MetricKind = 21
)

// Enum value maps for MetricKind.
var (
	MetricKind_name = map[int32]string{
		0:  "METRIC_KIND_UNSPECIFIED",
		1:  "METRIC_KIND_FEATURE_REQUEST_COUNT",
		2:  "METRIC_KIND_FEATURE_LATENCY",
		3:  "METRIC_KIND_FEATURE_STALENESS",
		4:  "METRIC_KIND_FEATURE_VALUE",
		5:  "METRIC_KIND_FEATURE_WRITE",
		6:  "METRIC_KIND_FEATURE_NULL_RATIO",
		7:  "METRIC_KIND_RESOLVER_REQUEST_COUNT",
		8:  "METRIC_KIND_RESOLVER_LATENCY",
		9:  "METRIC_KIND_RESOLVER_SUCCESS_RATIO",
		10: "METRIC_KIND_QUERY_COUNT",
		11: "METRIC_KIND_QUERY_LATENCY",
		12: "METRIC_KIND_QUERY_SUCCESS_RATIO",
		13: "METRIC_KIND_BILLING_INFERENCE",
		14: "METRIC_KIND_BILLING_CRON",
		15: "METRIC_KIND_BILLING_MIGRATION",
		16: "METRIC_KIND_CRON_COUNT",
		17: "METRIC_KIND_CRON_LATENCY",
		18: "METRIC_KIND_STREAM_MESSAGES_PROCESSED",
		19: "METRIC_KIND_STREAM_MESSAGE_LATENCY",
		20: "METRIC_KIND_STREAM_WINDOWS_PROCESSED",
		21: "METRIC_KIND_STREAM_WINDOW_LATENCY",
	}
	MetricKind_value = map[string]int32{
		"METRIC_KIND_UNSPECIFIED":               0,
		"METRIC_KIND_FEATURE_REQUEST_COUNT":     1,
		"METRIC_KIND_FEATURE_LATENCY":           2,
		"METRIC_KIND_FEATURE_STALENESS":         3,
		"METRIC_KIND_FEATURE_VALUE":             4,
		"METRIC_KIND_FEATURE_WRITE":             5,
		"METRIC_KIND_FEATURE_NULL_RATIO":        6,
		"METRIC_KIND_RESOLVER_REQUEST_COUNT":    7,
		"METRIC_KIND_RESOLVER_LATENCY":          8,
		"METRIC_KIND_RESOLVER_SUCCESS_RATIO":    9,
		"METRIC_KIND_QUERY_COUNT":               10,
		"METRIC_KIND_QUERY_LATENCY":             11,
		"METRIC_KIND_QUERY_SUCCESS_RATIO":       12,
		"METRIC_KIND_BILLING_INFERENCE":         13,
		"METRIC_KIND_BILLING_CRON":              14,
		"METRIC_KIND_BILLING_MIGRATION":         15,
		"METRIC_KIND_CRON_COUNT":                16,
		"METRIC_KIND_CRON_LATENCY":              17,
		"METRIC_KIND_STREAM_MESSAGES_PROCESSED": 18,
		"METRIC_KIND_STREAM_MESSAGE_LATENCY":    19,
		"METRIC_KIND_STREAM_WINDOWS_PROCESSED":  20,
		"METRIC_KIND_STREAM_WINDOW_LATENCY":     21,
	}
)

func (x MetricKind) Enum() *MetricKind {
	p := new(MetricKind)
	*p = x
	return p
}

func (x MetricKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[0].Descriptor()
}

func (MetricKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[0]
}

func (x MetricKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricKind.Descriptor instead.
func (MetricKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{0}
}

type FilterKind int32

const (
	FilterKind_FILTER_KIND_UNSPECIFIED      FilterKind = 0
	FilterKind_FILTER_KIND_FEATURE_STATUS   FilterKind = 1
	FilterKind_FILTER_KIND_FEATURE_NAME     FilterKind = 2
	FilterKind_FILTER_KIND_FEATURE_TAG      FilterKind = 3
	FilterKind_FILTER_KIND_RESOLVER_STATUS  FilterKind = 4
	FilterKind_FILTER_KIND_RESOLVER_NAME    FilterKind = 5
	FilterKind_FILTER_KIND_RESOLVER_TAG     FilterKind = 6
	FilterKind_FILTER_KIND_CRON_STATUS      FilterKind = 7
	FilterKind_FILTER_KIND_MIGRATION_STATUS FilterKind = 8
	FilterKind_FILTER_KIND_ONLINE_OFFLINE   FilterKind = 9
	FilterKind_FILTER_KIND_CACHE_HIT        FilterKind = 10
	FilterKind_FILTER_KIND_OPERATION_ID     FilterKind = 11
	FilterKind_FILTER_KIND_QUERY_NAME       FilterKind = 12
	FilterKind_FILTER_KIND_QUERY_STATUS     FilterKind = 13
	FilterKind_FILTER_KIND_IS_NULL          FilterKind = 14
	FilterKind_FILTER_KIND_USAGE_KIND       FilterKind = 15
)

// Enum value maps for FilterKind.
var (
	FilterKind_name = map[int32]string{
		0:  "FILTER_KIND_UNSPECIFIED",
		1:  "FILTER_KIND_FEATURE_STATUS",
		2:  "FILTER_KIND_FEATURE_NAME",
		3:  "FILTER_KIND_FEATURE_TAG",
		4:  "FILTER_KIND_RESOLVER_STATUS",
		5:  "FILTER_KIND_RESOLVER_NAME",
		6:  "FILTER_KIND_RESOLVER_TAG",
		7:  "FILTER_KIND_CRON_STATUS",
		8:  "FILTER_KIND_MIGRATION_STATUS",
		9:  "FILTER_KIND_ONLINE_OFFLINE",
		10: "FILTER_KIND_CACHE_HIT",
		11: "FILTER_KIND_OPERATION_ID",
		12: "FILTER_KIND_QUERY_NAME",
		13: "FILTER_KIND_QUERY_STATUS",
		14: "FILTER_KIND_IS_NULL",
		15: "FILTER_KIND_USAGE_KIND",
	}
	FilterKind_value = map[string]int32{
		"FILTER_KIND_UNSPECIFIED":      0,
		"FILTER_KIND_FEATURE_STATUS":   1,
		"FILTER_KIND_FEATURE_NAME":     2,
		"FILTER_KIND_FEATURE_TAG":      3,
		"FILTER_KIND_RESOLVER_STATUS":  4,
		"FILTER_KIND_RESOLVER_NAME":    5,
		"FILTER_KIND_RESOLVER_TAG":     6,
		"FILTER_KIND_CRON_STATUS":      7,
		"FILTER_KIND_MIGRATION_STATUS": 8,
		"FILTER_KIND_ONLINE_OFFLINE":   9,
		"FILTER_KIND_CACHE_HIT":        10,
		"FILTER_KIND_OPERATION_ID":     11,
		"FILTER_KIND_QUERY_NAME":       12,
		"FILTER_KIND_QUERY_STATUS":     13,
		"FILTER_KIND_IS_NULL":          14,
		"FILTER_KIND_USAGE_KIND":       15,
	}
)

func (x FilterKind) Enum() *FilterKind {
	p := new(FilterKind)
	*p = x
	return p
}

func (x FilterKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[1].Descriptor()
}

func (FilterKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[1]
}

func (x FilterKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterKind.Descriptor instead.
func (FilterKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{1}
}

type ComparatorKind int32

const (
	ComparatorKind_COMPARATOR_KIND_UNSPECIFIED ComparatorKind = 0
	ComparatorKind_COMPARATOR_KIND_EQ          ComparatorKind = 1
	ComparatorKind_COMPARATOR_KIND_NEQ         ComparatorKind = 2
	ComparatorKind_COMPARATOR_KIND_ONE_OF      ComparatorKind = 3
)

// Enum value maps for ComparatorKind.
var (
	ComparatorKind_name = map[int32]string{
		0: "COMPARATOR_KIND_UNSPECIFIED",
		1: "COMPARATOR_KIND_EQ",
		2: "COMPARATOR_KIND_NEQ",
		3: "COMPARATOR_KIND_ONE_OF",
	}
	ComparatorKind_value = map[string]int32{
		"COMPARATOR_KIND_UNSPECIFIED": 0,
		"COMPARATOR_KIND_EQ":          1,
		"COMPARATOR_KIND_NEQ":         2,
		"COMPARATOR_KIND_ONE_OF":      3,
	}
)

func (x ComparatorKind) Enum() *ComparatorKind {
	p := new(ComparatorKind)
	*p = x
	return p
}

func (x ComparatorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparatorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[2].Descriptor()
}

func (ComparatorKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[2]
}

func (x ComparatorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparatorKind.Descriptor instead.
func (ComparatorKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{2}
}

type WindowFunctionKind int32

const (
	WindowFunctionKind_WINDOW_FUNCTION_KIND_UNSPECIFIED     WindowFunctionKind = 0
	WindowFunctionKind_WINDOW_FUNCTION_KIND_COUNT           WindowFunctionKind = 1
	WindowFunctionKind_WINDOW_FUNCTION_KIND_MEAN            WindowFunctionKind = 2
	WindowFunctionKind_WINDOW_FUNCTION_KIND_SUM             WindowFunctionKind = 3
	WindowFunctionKind_WINDOW_FUNCTION_KIND_MIN             WindowFunctionKind = 4
	WindowFunctionKind_WINDOW_FUNCTION_KIND_MAX             WindowFunctionKind = 5
	WindowFunctionKind_WINDOW_FUNCTION_KIND_PERCENTILE_99   WindowFunctionKind = 6
	WindowFunctionKind_WINDOW_FUNCTION_KIND_PERCENTILE_95   WindowFunctionKind = 7
	WindowFunctionKind_WINDOW_FUNCTION_KIND_PERCENTILE_75   WindowFunctionKind = 8
	WindowFunctionKind_WINDOW_FUNCTION_KIND_PERCENTILE_50   WindowFunctionKind = 9
	WindowFunctionKind_WINDOW_FUNCTION_KIND_PERCENTILE_25   WindowFunctionKind = 10
	WindowFunctionKind_WINDOW_FUNCTION_KIND_PERCENTILE_5    WindowFunctionKind = 11
	WindowFunctionKind_WINDOW_FUNCTION_KIND_ALL_PERCENTILES WindowFunctionKind = 12
)

// Enum value maps for WindowFunctionKind.
var (
	WindowFunctionKind_name = map[int32]string{
		0:  "WINDOW_FUNCTION_KIND_UNSPECIFIED",
		1:  "WINDOW_FUNCTION_KIND_COUNT",
		2:  "WINDOW_FUNCTION_KIND_MEAN",
		3:  "WINDOW_FUNCTION_KIND_SUM",
		4:  "WINDOW_FUNCTION_KIND_MIN",
		5:  "WINDOW_FUNCTION_KIND_MAX",
		6:  "WINDOW_FUNCTION_KIND_PERCENTILE_99",
		7:  "WINDOW_FUNCTION_KIND_PERCENTILE_95",
		8:  "WINDOW_FUNCTION_KIND_PERCENTILE_75",
		9:  "WINDOW_FUNCTION_KIND_PERCENTILE_50",
		10: "WINDOW_FUNCTION_KIND_PERCENTILE_25",
		11: "WINDOW_FUNCTION_KIND_PERCENTILE_5",
		12: "WINDOW_FUNCTION_KIND_ALL_PERCENTILES",
	}
	WindowFunctionKind_value = map[string]int32{
		"WINDOW_FUNCTION_KIND_UNSPECIFIED":     0,
		"WINDOW_FUNCTION_KIND_COUNT":           1,
		"WINDOW_FUNCTION_KIND_MEAN":            2,
		"WINDOW_FUNCTION_KIND_SUM":             3,
		"WINDOW_FUNCTION_KIND_MIN":             4,
		"WINDOW_FUNCTION_KIND_MAX":             5,
		"WINDOW_FUNCTION_KIND_PERCENTILE_99":   6,
		"WINDOW_FUNCTION_KIND_PERCENTILE_95":   7,
		"WINDOW_FUNCTION_KIND_PERCENTILE_75":   8,
		"WINDOW_FUNCTION_KIND_PERCENTILE_50":   9,
		"WINDOW_FUNCTION_KIND_PERCENTILE_25":   10,
		"WINDOW_FUNCTION_KIND_PERCENTILE_5":    11,
		"WINDOW_FUNCTION_KIND_ALL_PERCENTILES": 12,
	}
)

func (x WindowFunctionKind) Enum() *WindowFunctionKind {
	p := new(WindowFunctionKind)
	*p = x
	return p
}

func (x WindowFunctionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowFunctionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[3].Descriptor()
}

func (WindowFunctionKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[3]
}

func (x WindowFunctionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowFunctionKind.Descriptor instead.
func (WindowFunctionKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{3}
}

type GroupByKind int32

const (
	GroupByKind_GROUP_BY_KIND_UNSPECIFIED     GroupByKind = 0
	GroupByKind_GROUP_BY_KIND_FEATURE_STATUS  GroupByKind = 1
	GroupByKind_GROUP_BY_KIND_FEATURE_NAME    GroupByKind = 2
	GroupByKind_GROUP_BY_KIND_IS_NULL         GroupByKind = 3
	GroupByKind_GROUP_BY_KIND_RESOLVER_STATUS GroupByKind = 4
	GroupByKind_GROUP_BY_KIND_RESOLVER_NAME   GroupByKind = 5
	GroupByKind_GROUP_BY_KIND_QUERY_STATUS    GroupByKind = 6
	GroupByKind_GROUP_BY_KIND_QUERY_NAME      GroupByKind = 7
	GroupByKind_GROUP_BY_KIND_ONLINE_OFFLINE  GroupByKind = 8
	GroupByKind_GROUP_BY_KIND_CACHE_HIT       GroupByKind = 9
	GroupByKind_GROUP_BY_KIND_USAGE_KIND      GroupByKind = 10
)

// Enum value maps for GroupByKind.
var (
	GroupByKind_name = map[int32]string{
		0:  "GROUP_BY_KIND_UNSPECIFIED",
		1:  "GROUP_BY_KIND_FEATURE_STATUS",
		2:  "GROUP_BY_KIND_FEATURE_NAME",
		3:  "GROUP_BY_KIND_IS_NULL",
		4:  "GROUP_BY_KIND_RESOLVER_STATUS",
		5:  "GROUP_BY_KIND_RESOLVER_NAME",
		6:  "GROUP_BY_KIND_QUERY_STATUS",
		7:  "GROUP_BY_KIND_QUERY_NAME",
		8:  "GROUP_BY_KIND_ONLINE_OFFLINE",
		9:  "GROUP_BY_KIND_CACHE_HIT",
		10: "GROUP_BY_KIND_USAGE_KIND",
	}
	GroupByKind_value = map[string]int32{
		"GROUP_BY_KIND_UNSPECIFIED":     0,
		"GROUP_BY_KIND_FEATURE_STATUS":  1,
		"GROUP_BY_KIND_FEATURE_NAME":    2,
		"GROUP_BY_KIND_IS_NULL":         3,
		"GROUP_BY_KIND_RESOLVER_STATUS": 4,
		"GROUP_BY_KIND_RESOLVER_NAME":   5,
		"GROUP_BY_KIND_QUERY_STATUS":    6,
		"GROUP_BY_KIND_QUERY_NAME":      7,
		"GROUP_BY_KIND_ONLINE_OFFLINE":  8,
		"GROUP_BY_KIND_CACHE_HIT":       9,
		"GROUP_BY_KIND_USAGE_KIND":      10,
	}
)

func (x GroupByKind) Enum() *GroupByKind {
	p := new(GroupByKind)
	*p = x
	return p
}

func (x GroupByKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupByKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[4].Descriptor()
}

func (GroupByKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[4]
}

func (x GroupByKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupByKind.Descriptor instead.
func (GroupByKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{4}
}

type MetricFormulaKind int32

const (
	MetricFormulaKind_METRIC_FORMULA_KIND_UNSPECIFIED  MetricFormulaKind = 0
	MetricFormulaKind_METRIC_FORMULA_KIND_SUM          MetricFormulaKind = 1
	MetricFormulaKind_METRIC_FORMULA_KIND_TOTAL_RATIO  MetricFormulaKind = 2
	MetricFormulaKind_METRIC_FORMULA_KIND_RATIO        MetricFormulaKind = 3
	MetricFormulaKind_METRIC_FORMULA_KIND_PRODUCT      MetricFormulaKind = 4
	MetricFormulaKind_METRIC_FORMULA_KIND_ABS          MetricFormulaKind = 5
	MetricFormulaKind_METRIC_FORMULA_KIND_KS_STAT      MetricFormulaKind = 6
	MetricFormulaKind_METRIC_FORMULA_KIND_KS_TEST      MetricFormulaKind = 7
	MetricFormulaKind_METRIC_FORMULA_KIND_KS_THRESHOLD MetricFormulaKind = 8
	MetricFormulaKind_METRIC_FORMULA_KIND_TIME_OFFSET  MetricFormulaKind = 9
)

// Enum value maps for MetricFormulaKind.
var (
	MetricFormulaKind_name = map[int32]string{
		0: "METRIC_FORMULA_KIND_UNSPECIFIED",
		1: "METRIC_FORMULA_KIND_SUM",
		2: "METRIC_FORMULA_KIND_TOTAL_RATIO",
		3: "METRIC_FORMULA_KIND_RATIO",
		4: "METRIC_FORMULA_KIND_PRODUCT",
		5: "METRIC_FORMULA_KIND_ABS",
		6: "METRIC_FORMULA_KIND_KS_STAT",
		7: "METRIC_FORMULA_KIND_KS_TEST",
		8: "METRIC_FORMULA_KIND_KS_THRESHOLD",
		9: "METRIC_FORMULA_KIND_TIME_OFFSET",
	}
	MetricFormulaKind_value = map[string]int32{
		"METRIC_FORMULA_KIND_UNSPECIFIED":  0,
		"METRIC_FORMULA_KIND_SUM":          1,
		"METRIC_FORMULA_KIND_TOTAL_RATIO":  2,
		"METRIC_FORMULA_KIND_RATIO":        3,
		"METRIC_FORMULA_KIND_PRODUCT":      4,
		"METRIC_FORMULA_KIND_ABS":          5,
		"METRIC_FORMULA_KIND_KS_STAT":      6,
		"METRIC_FORMULA_KIND_KS_TEST":      7,
		"METRIC_FORMULA_KIND_KS_THRESHOLD": 8,
		"METRIC_FORMULA_KIND_TIME_OFFSET":  9,
	}
)

func (x MetricFormulaKind) Enum() *MetricFormulaKind {
	p := new(MetricFormulaKind)
	*p = x
	return p
}

func (x MetricFormulaKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricFormulaKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[5].Descriptor()
}

func (MetricFormulaKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[5]
}

func (x MetricFormulaKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricFormulaKind.Descriptor instead.
func (MetricFormulaKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{5}
}

type AlertSeverityKind int32

const (
	AlertSeverityKind_ALERT_SEVERITY_KIND_UNSPECIFIED AlertSeverityKind = 0
	AlertSeverityKind_ALERT_SEVERITY_KIND_CRITICAL    AlertSeverityKind = 1
	AlertSeverityKind_ALERT_SEVERITY_KIND_ERROR       AlertSeverityKind = 2
	AlertSeverityKind_ALERT_SEVERITY_KIND_WARNING     AlertSeverityKind = 3
	AlertSeverityKind_ALERT_SEVERITY_KIND_INFO        AlertSeverityKind = 4
)

// Enum value maps for AlertSeverityKind.
var (
	AlertSeverityKind_name = map[int32]string{
		0: "ALERT_SEVERITY_KIND_UNSPECIFIED",
		1: "ALERT_SEVERITY_KIND_CRITICAL",
		2: "ALERT_SEVERITY_KIND_ERROR",
		3: "ALERT_SEVERITY_KIND_WARNING",
		4: "ALERT_SEVERITY_KIND_INFO",
	}
	AlertSeverityKind_value = map[string]int32{
		"ALERT_SEVERITY_KIND_UNSPECIFIED": 0,
		"ALERT_SEVERITY_KIND_CRITICAL":    1,
		"ALERT_SEVERITY_KIND_ERROR":       2,
		"ALERT_SEVERITY_KIND_WARNING":     3,
		"ALERT_SEVERITY_KIND_INFO":        4,
	}
)

func (x AlertSeverityKind) Enum() *AlertSeverityKind {
	p := new(AlertSeverityKind)
	*p = x
	return p
}

func (x AlertSeverityKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertSeverityKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[6].Descriptor()
}

func (AlertSeverityKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[6]
}

func (x AlertSeverityKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertSeverityKind.Descriptor instead.
func (AlertSeverityKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{6}
}

type ThresholdKind int32

const (
	ThresholdKind_THRESHOLD_KIND_UNSPECIFIED   ThresholdKind = 0
	ThresholdKind_THRESHOLD_KIND_ABOVE         ThresholdKind = 1
	ThresholdKind_THRESHOLD_KIND_BELOW         ThresholdKind = 2
	ThresholdKind_THRESHOLD_KIND_GREATER_EQUAL ThresholdKind = 3
	ThresholdKind_THRESHOLD_KIND_LESS_EQUAL    ThresholdKind = 4
	ThresholdKind_THRESHOLD_KIND_EQUAL         ThresholdKind = 5
	ThresholdKind_THRESHOLD_KIND_NOT_EQUAL     ThresholdKind = 6
)

// Enum value maps for ThresholdKind.
var (
	ThresholdKind_name = map[int32]string{
		0: "THRESHOLD_KIND_UNSPECIFIED",
		1: "THRESHOLD_KIND_ABOVE",
		2: "THRESHOLD_KIND_BELOW",
		3: "THRESHOLD_KIND_GREATER_EQUAL",
		4: "THRESHOLD_KIND_LESS_EQUAL",
		5: "THRESHOLD_KIND_EQUAL",
		6: "THRESHOLD_KIND_NOT_EQUAL",
	}
	ThresholdKind_value = map[string]int32{
		"THRESHOLD_KIND_UNSPECIFIED":   0,
		"THRESHOLD_KIND_ABOVE":         1,
		"THRESHOLD_KIND_BELOW":         2,
		"THRESHOLD_KIND_GREATER_EQUAL": 3,
		"THRESHOLD_KIND_LESS_EQUAL":    4,
		"THRESHOLD_KIND_EQUAL":         5,
		"THRESHOLD_KIND_NOT_EQUAL":     6,
	}
)

func (x ThresholdKind) Enum() *ThresholdKind {
	p := new(ThresholdKind)
	*p = x
	return p
}

func (x ThresholdKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[7].Descriptor()
}

func (ThresholdKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[7]
}

func (x ThresholdKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdKind.Descriptor instead.
func (ThresholdKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{7}
}

type ChartLinkKind int32

const (
	ChartLinkKind_CHART_LINK_KIND_UNSPECIFIED ChartLinkKind = 0
	ChartLinkKind_CHART_LINK_KIND_RESOLVER    ChartLinkKind = 1
	ChartLinkKind_CHART_LINK_KIND_FEATURE     ChartLinkKind = 2
	ChartLinkKind_CHART_LINK_KIND_QUERY       ChartLinkKind = 3
	ChartLinkKind_CHART_LINK_KIND_MANUAL      ChartLinkKind = 4
)

// Enum value maps for ChartLinkKind.
var (
	ChartLinkKind_name = map[int32]string{
		0: "CHART_LINK_KIND_UNSPECIFIED",
		1: "CHART_LINK_KIND_RESOLVER",
		2: "CHART_LINK_KIND_FEATURE",
		3: "CHART_LINK_KIND_QUERY",
		4: "CHART_LINK_KIND_MANUAL",
	}
	ChartLinkKind_value = map[string]int32{
		"CHART_LINK_KIND_UNSPECIFIED": 0,
		"CHART_LINK_KIND_RESOLVER":    1,
		"CHART_LINK_KIND_FEATURE":     2,
		"CHART_LINK_KIND_QUERY":       3,
		"CHART_LINK_KIND_MANUAL":      4,
	}
)

func (x ChartLinkKind) Enum() *ChartLinkKind {
	p := new(ChartLinkKind)
	*p = x
	return p
}

func (x ChartLinkKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChartLinkKind) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_chart_proto_enumTypes[8].Descriptor()
}

func (ChartLinkKind) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_chart_proto_enumTypes[8]
}

func (x ChartLinkKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChartLinkKind.Descriptor instead.
func (ChartLinkKind) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{8}
}

type AlertTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Severity          AlertSeverityKind `protobuf:"varint,2,opt,name=severity,proto3,enum=chalk.artifacts.v1.AlertSeverityKind" json:"severity,omitempty"`
	ThresholdPosition ThresholdKind     `protobuf:"varint,3,opt,name=threshold_position,json=thresholdPosition,proto3,enum=chalk.artifacts.v1.ThresholdKind" json:"threshold_position,omitempty"`
	ThresholdValue    float32           `protobuf:"fixed32,4,opt,name=threshold_value,json=thresholdValue,proto3" json:"threshold_value,omitempty"`
	SeriesName        *string           `protobuf:"bytes,5,opt,name=series_name,json=seriesName,proto3,oneof" json:"series_name,omitempty"`
	ChannelName       *string           `protobuf:"bytes,6,opt,name=channel_name,json=channelName,proto3,oneof" json:"channel_name,omitempty"`
	Description       *string           `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *AlertTrigger) Reset() {
	*x = AlertTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertTrigger) ProtoMessage() {}

func (x *AlertTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertTrigger.ProtoReflect.Descriptor instead.
func (*AlertTrigger) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{0}
}

func (x *AlertTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlertTrigger) GetSeverity() AlertSeverityKind {
	if x != nil {
		return x.Severity
	}
	return AlertSeverityKind_ALERT_SEVERITY_KIND_UNSPECIFIED
}

func (x *AlertTrigger) GetThresholdPosition() ThresholdKind {
	if x != nil {
		return x.ThresholdPosition
	}
	return ThresholdKind_THRESHOLD_KIND_UNSPECIFIED
}

func (x *AlertTrigger) GetThresholdValue() float32 {
	if x != nil {
		return x.ThresholdValue
	}
	return 0
}

func (x *AlertTrigger) GetSeriesName() string {
	if x != nil && x.SeriesName != nil {
		return *x.SeriesName
	}
	return ""
}

func (x *AlertTrigger) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *AlertTrigger) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type DatasetFeatureOperand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Feature string `protobuf:"bytes,2,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *DatasetFeatureOperand) Reset() {
	*x = DatasetFeatureOperand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetFeatureOperand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetFeatureOperand) ProtoMessage() {}

func (x *DatasetFeatureOperand) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetFeatureOperand.ProtoReflect.Descriptor instead.
func (*DatasetFeatureOperand) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{1}
}

func (x *DatasetFeatureOperand) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DatasetFeatureOperand) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

type MetricFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind MetricFormulaKind `protobuf:"varint,1,opt,name=kind,proto3,enum=chalk.artifacts.v1.MetricFormulaKind" json:"kind,omitempty"`
	// The following fields are mutually exclusive
	// but we're not using `oneof` because one of
	// the fields is a repeated field, which would
	// make using `oneof` really ugly.
	// ---- UNION START ----
	SingleSeriesOperands   *int64                 `protobuf:"varint,2,opt,name=single_series_operands,json=singleSeriesOperands,proto3,oneof" json:"single_series_operands,omitempty"`
	MultiSeriesOperands    []int64                `protobuf:"varint,3,rep,packed,name=multi_series_operands,json=multiSeriesOperands,proto3" json:"multi_series_operands,omitempty"`
	DatasetFeatureOperands *DatasetFeatureOperand `protobuf:"bytes,4,opt,name=dataset_feature_operands,json=datasetFeatureOperands,proto3" json:"dataset_feature_operands,omitempty"`
	// ---- UNION END ----
	Name *string `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *MetricFormula) Reset() {
	*x = MetricFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricFormula) ProtoMessage() {}

func (x *MetricFormula) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricFormula.ProtoReflect.Descriptor instead.
func (*MetricFormula) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{2}
}

func (x *MetricFormula) GetKind() MetricFormulaKind {
	if x != nil {
		return x.Kind
	}
	return MetricFormulaKind_METRIC_FORMULA_KIND_UNSPECIFIED
}

func (x *MetricFormula) GetSingleSeriesOperands() int64 {
	if x != nil && x.SingleSeriesOperands != nil {
		return *x.SingleSeriesOperands
	}
	return 0
}

func (x *MetricFormula) GetMultiSeriesOperands() []int64 {
	if x != nil {
		return x.MultiSeriesOperands
	}
	return nil
}

func (x *MetricFormula) GetDatasetFeatureOperands() *DatasetFeatureOperand {
	if x != nil {
		return x.DatasetFeatureOperands
	}
	return nil
}

func (x *MetricFormula) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type MetricFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind       FilterKind     `protobuf:"varint,1,opt,name=kind,proto3,enum=chalk.artifacts.v1.FilterKind" json:"kind,omitempty"`
	Comparator ComparatorKind `protobuf:"varint,2,opt,name=comparator,proto3,enum=chalk.artifacts.v1.ComparatorKind" json:"comparator,omitempty"`
	Value      []string       `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *MetricFilter) Reset() {
	*x = MetricFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricFilter) ProtoMessage() {}

func (x *MetricFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricFilter.ProtoReflect.Descriptor instead.
func (*MetricFilter) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{3}
}

func (x *MetricFilter) GetKind() FilterKind {
	if x != nil {
		return x.Kind
	}
	return FilterKind_FILTER_KIND_UNSPECIFIED
}

func (x *MetricFilter) GetComparator() ComparatorKind {
	if x != nil {
		return x.Comparator
	}
	return ComparatorKind_COMPARATOR_KIND_UNSPECIFIED
}

func (x *MetricFilter) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type MetricConfigSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric         MetricKind         `protobuf:"varint,1,opt,name=metric,proto3,enum=chalk.artifacts.v1.MetricKind" json:"metric,omitempty"`
	Filters        []*MetricFilter    `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	Name           *string            `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	WindowFunction WindowFunctionKind `protobuf:"varint,4,opt,name=window_function,json=windowFunction,proto3,enum=chalk.artifacts.v1.WindowFunctionKind" json:"window_function,omitempty"`
	GroupBy        []GroupByKind      `protobuf:"varint,5,rep,packed,name=group_by,json=groupBy,proto3,enum=chalk.artifacts.v1.GroupByKind" json:"group_by,omitempty"`
}

func (x *MetricConfigSeries) Reset() {
	*x = MetricConfigSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricConfigSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricConfigSeries) ProtoMessage() {}

func (x *MetricConfigSeries) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricConfigSeries.ProtoReflect.Descriptor instead.
func (*MetricConfigSeries) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{4}
}

func (x *MetricConfigSeries) GetMetric() MetricKind {
	if x != nil {
		return x.Metric
	}
	return MetricKind_METRIC_KIND_UNSPECIFIED
}

func (x *MetricConfigSeries) GetFilters() []*MetricFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *MetricConfigSeries) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MetricConfigSeries) GetWindowFunction() WindowFunctionKind {
	if x != nil {
		return x.WindowFunction
	}
	return WindowFunctionKind_WINDOW_FUNCTION_KIND_UNSPECIFIED
}

func (x *MetricConfigSeries) GetGroupBy() []GroupByKind {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

type MetricConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WindowPeriod string                `protobuf:"bytes,2,opt,name=window_period,json=windowPeriod,proto3" json:"window_period,omitempty"`
	Series       []*MetricConfigSeries `protobuf:"bytes,3,rep,name=series,proto3" json:"series,omitempty"`
	Formulas     []*MetricFormula      `protobuf:"bytes,4,rep,name=formulas,proto3" json:"formulas,omitempty"`
	Trigger      *AlertTrigger         `protobuf:"bytes,5,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *MetricConfig) Reset() {
	*x = MetricConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricConfig) ProtoMessage() {}

func (x *MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricConfig.ProtoReflect.Descriptor instead.
func (*MetricConfig) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{5}
}

func (x *MetricConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricConfig) GetWindowPeriod() string {
	if x != nil {
		return x.WindowPeriod
	}
	return ""
}

func (x *MetricConfig) GetSeries() []*MetricConfigSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *MetricConfig) GetFormulas() []*MetricFormula {
	if x != nil {
		return x.Formulas
	}
	return nil
}

func (x *MetricConfig) GetTrigger() *AlertTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type Chart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Config     *MetricConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	EntityKind ChartLinkKind `protobuf:"varint,3,opt,name=entity_kind,json=entityKind,proto3,enum=chalk.artifacts.v1.ChartLinkKind" json:"entity_kind,omitempty"`
	EntityId   *string       `protobuf:"bytes,4,opt,name=entity_id,json=entityId,proto3,oneof" json:"entity_id,omitempty"`
}

func (x *Chart) Reset() {
	*x = Chart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart) ProtoMessage() {}

func (x *Chart) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_chart_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart.ProtoReflect.Descriptor instead.
func (*Chart) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_chart_proto_rawDescGZIP(), []int{6}
}

func (x *Chart) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chart) GetConfig() *MetricConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Chart) GetEntityKind() ChartLinkKind {
	if x != nil {
		return x.EntityKind
	}
	return ChartLinkKind_CHART_LINK_KIND_UNSPECIFIED
}

func (x *Chart) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

var File_chalk_artifacts_v1_chart_proto protoreflect.FileDescriptor

var file_chalk_artifacts_v1_chart_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x22, 0x86, 0x03, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x12,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x11, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a,
	0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x39, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x63, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x42, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0e, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x2a, 0x8b,
	0x06, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x4e,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x07, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x08, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x41, 0x54, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x49, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x52,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4c,
	0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x15, 0x2a, 0xe9, 0x03, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x41,
	0x47, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x07, 0x12, 0x20,
	0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x49,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x08,
	0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x09,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x0f, 0x2a, 0x7e, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45,
	0x51, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x51, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x10, 0x03, 0x2a, 0xec, 0x03, 0x0a, 0x12, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x24, 0x0a, 0x20, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45,
	0x41, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x12, 0x26,
	0x0a, 0x22, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c,
	0x45, 0x5f, 0x39, 0x39, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x39, 0x35, 0x10, 0x07, 0x12, 0x26,
	0x0a, 0x22, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c,
	0x45, 0x5f, 0x37, 0x35, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x35, 0x30, 0x10, 0x09, 0x12, 0x26,
	0x0a, 0x22, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c,
	0x45, 0x5f, 0x32, 0x35, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x35, 0x10, 0x0b, 0x12, 0x28, 0x0a,
	0x24, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x0c, 0x2a, 0xe8, 0x02, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42,
	0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x42, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x48,
	0x49, 0x54, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x10, 0x0a, 0x2a, 0xe4, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c,
	0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c,
	0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x42, 0x53, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x06, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x09, 0x2a, 0xb8, 0x01, 0x0a, 0x11, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x04, 0x2a, 0xdc, 0x01, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x06, 0x2a, 0xa2, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x48, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x42, 0xcf, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x42, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x41, 0x58, 0xaa, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chalk_artifacts_v1_chart_proto_rawDescOnce sync.Once
	file_chalk_artifacts_v1_chart_proto_rawDescData = file_chalk_artifacts_v1_chart_proto_rawDesc
)

func file_chalk_artifacts_v1_chart_proto_rawDescGZIP() []byte {
	file_chalk_artifacts_v1_chart_proto_rawDescOnce.Do(func() {
		file_chalk_artifacts_v1_chart_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_artifacts_v1_chart_proto_rawDescData)
	})
	return file_chalk_artifacts_v1_chart_proto_rawDescData
}

var file_chalk_artifacts_v1_chart_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_chalk_artifacts_v1_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_chalk_artifacts_v1_chart_proto_goTypes = []any{
	(MetricKind)(0),               // 0: chalk.artifacts.v1.MetricKind
	(FilterKind)(0),               // 1: chalk.artifacts.v1.FilterKind
	(ComparatorKind)(0),           // 2: chalk.artifacts.v1.ComparatorKind
	(WindowFunctionKind)(0),       // 3: chalk.artifacts.v1.WindowFunctionKind
	(GroupByKind)(0),              // 4: chalk.artifacts.v1.GroupByKind
	(MetricFormulaKind)(0),        // 5: chalk.artifacts.v1.MetricFormulaKind
	(AlertSeverityKind)(0),        // 6: chalk.artifacts.v1.AlertSeverityKind
	(ThresholdKind)(0),            // 7: chalk.artifacts.v1.ThresholdKind
	(ChartLinkKind)(0),            // 8: chalk.artifacts.v1.ChartLinkKind
	(*AlertTrigger)(nil),          // 9: chalk.artifacts.v1.AlertTrigger
	(*DatasetFeatureOperand)(nil), // 10: chalk.artifacts.v1.DatasetFeatureOperand
	(*MetricFormula)(nil),         // 11: chalk.artifacts.v1.MetricFormula
	(*MetricFilter)(nil),          // 12: chalk.artifacts.v1.MetricFilter
	(*MetricConfigSeries)(nil),    // 13: chalk.artifacts.v1.MetricConfigSeries
	(*MetricConfig)(nil),          // 14: chalk.artifacts.v1.MetricConfig
	(*Chart)(nil),                 // 15: chalk.artifacts.v1.Chart
}
var file_chalk_artifacts_v1_chart_proto_depIdxs = []int32{
	6,  // 0: chalk.artifacts.v1.AlertTrigger.severity:type_name -> chalk.artifacts.v1.AlertSeverityKind
	7,  // 1: chalk.artifacts.v1.AlertTrigger.threshold_position:type_name -> chalk.artifacts.v1.ThresholdKind
	5,  // 2: chalk.artifacts.v1.MetricFormula.kind:type_name -> chalk.artifacts.v1.MetricFormulaKind
	10, // 3: chalk.artifacts.v1.MetricFormula.dataset_feature_operands:type_name -> chalk.artifacts.v1.DatasetFeatureOperand
	1,  // 4: chalk.artifacts.v1.MetricFilter.kind:type_name -> chalk.artifacts.v1.FilterKind
	2,  // 5: chalk.artifacts.v1.MetricFilter.comparator:type_name -> chalk.artifacts.v1.ComparatorKind
	0,  // 6: chalk.artifacts.v1.MetricConfigSeries.metric:type_name -> chalk.artifacts.v1.MetricKind
	12, // 7: chalk.artifacts.v1.MetricConfigSeries.filters:type_name -> chalk.artifacts.v1.MetricFilter
	3,  // 8: chalk.artifacts.v1.MetricConfigSeries.window_function:type_name -> chalk.artifacts.v1.WindowFunctionKind
	4,  // 9: chalk.artifacts.v1.MetricConfigSeries.group_by:type_name -> chalk.artifacts.v1.GroupByKind
	13, // 10: chalk.artifacts.v1.MetricConfig.series:type_name -> chalk.artifacts.v1.MetricConfigSeries
	11, // 11: chalk.artifacts.v1.MetricConfig.formulas:type_name -> chalk.artifacts.v1.MetricFormula
	9,  // 12: chalk.artifacts.v1.MetricConfig.trigger:type_name -> chalk.artifacts.v1.AlertTrigger
	14, // 13: chalk.artifacts.v1.Chart.config:type_name -> chalk.artifacts.v1.MetricConfig
	8,  // 14: chalk.artifacts.v1.Chart.entity_kind:type_name -> chalk.artifacts.v1.ChartLinkKind
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_chalk_artifacts_v1_chart_proto_init() }
func file_chalk_artifacts_v1_chart_proto_init() {
	if File_chalk_artifacts_v1_chart_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_artifacts_v1_chart_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AlertTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_chart_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DatasetFeatureOperand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_chart_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MetricFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_chart_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MetricFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_chart_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MetricConfigSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_chart_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MetricConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_chart_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Chart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_artifacts_v1_chart_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_artifacts_v1_chart_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_artifacts_v1_chart_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_artifacts_v1_chart_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_artifacts_v1_chart_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_artifacts_v1_chart_proto_goTypes,
		DependencyIndexes: file_chalk_artifacts_v1_chart_proto_depIdxs,
		EnumInfos:         file_chalk_artifacts_v1_chart_proto_enumTypes,
		MessageInfos:      file_chalk_artifacts_v1_chart_proto_msgTypes,
	}.Build()
	File_chalk_artifacts_v1_chart_proto = out.File
	file_chalk_artifacts_v1_chart_proto_rawDesc = nil
	file_chalk_artifacts_v1_chart_proto_goTypes = nil
	file_chalk_artifacts_v1_chart_proto_depIdxs = nil
}
