// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/artifacts/v1/cron_query.proto

package artifactsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecomputeSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FeatureFqns   []string               `protobuf:"bytes,1,rep,name=feature_fqns,json=featureFqns,proto3" json:"feature_fqns,omitempty"`
	AllFeatures   bool                   `protobuf:"varint,2,opt,name=all_features,json=allFeatures,proto3" json:"all_features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecomputeSettings) Reset() {
	*x = RecomputeSettings{}
	mi := &file_chalk_artifacts_v1_cron_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecomputeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomputeSettings) ProtoMessage() {}

func (x *RecomputeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_cron_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomputeSettings.ProtoReflect.Descriptor instead.
func (*RecomputeSettings) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_cron_query_proto_rawDescGZIP(), []int{0}
}

func (x *RecomputeSettings) GetFeatureFqns() []string {
	if x != nil {
		return x.FeatureFqns
	}
	return nil
}

func (x *RecomputeSettings) GetAllFeatures() bool {
	if x != nil {
		return x.AllFeatures
	}
	return false
}

type CronQuery struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cron                 string                 `protobuf:"bytes,2,opt,name=cron,proto3" json:"cron,omitempty"`
	FileName             string                 `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Output               []string               `protobuf:"bytes,4,rep,name=output,proto3" json:"output,omitempty"`
	MaxSamples           *int64                 `protobuf:"varint,5,opt,name=max_samples,json=maxSamples,proto3,oneof" json:"max_samples,omitempty"`
	Recompute            *RecomputeSettings     `protobuf:"bytes,6,opt,name=recompute,proto3" json:"recompute,omitempty"`
	LowerBound           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound           *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	Tags                 []string               `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	RequiredResolverTags []string               `protobuf:"bytes,10,rep,name=required_resolver_tags,json=requiredResolverTags,proto3" json:"required_resolver_tags,omitempty"`
	StoreOnline          bool                   `protobuf:"varint,11,opt,name=store_online,json=storeOnline,proto3" json:"store_online,omitempty"`
	StoreOffline         bool                   `protobuf:"varint,12,opt,name=store_offline,json=storeOffline,proto3" json:"store_offline,omitempty"`
	IncrementalSources   []string               `protobuf:"bytes,13,rep,name=incremental_sources,json=incrementalSources,proto3" json:"incremental_sources,omitempty"`
	ResourceGroup        *string                `protobuf:"bytes,14,opt,name=resource_group,json=resourceGroup,proto3,oneof" json:"resource_group,omitempty"`
	PlannerOptions       map[string]string      `protobuf:"bytes,15,rep,name=planner_options,json=plannerOptions,proto3" json:"planner_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CronQuery) Reset() {
	*x = CronQuery{}
	mi := &file_chalk_artifacts_v1_cron_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronQuery) ProtoMessage() {}

func (x *CronQuery) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_cron_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronQuery.ProtoReflect.Descriptor instead.
func (*CronQuery) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_cron_query_proto_rawDescGZIP(), []int{1}
}

func (x *CronQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronQuery) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *CronQuery) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CronQuery) GetOutput() []string {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *CronQuery) GetMaxSamples() int64 {
	if x != nil && x.MaxSamples != nil {
		return *x.MaxSamples
	}
	return 0
}

func (x *CronQuery) GetRecompute() *RecomputeSettings {
	if x != nil {
		return x.Recompute
	}
	return nil
}

func (x *CronQuery) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *CronQuery) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *CronQuery) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CronQuery) GetRequiredResolverTags() []string {
	if x != nil {
		return x.RequiredResolverTags
	}
	return nil
}

func (x *CronQuery) GetStoreOnline() bool {
	if x != nil {
		return x.StoreOnline
	}
	return false
}

func (x *CronQuery) GetStoreOffline() bool {
	if x != nil {
		return x.StoreOffline
	}
	return false
}

func (x *CronQuery) GetIncrementalSources() []string {
	if x != nil {
		return x.IncrementalSources
	}
	return nil
}

func (x *CronQuery) GetResourceGroup() string {
	if x != nil && x.ResourceGroup != nil {
		return *x.ResourceGroup
	}
	return ""
}

func (x *CronQuery) GetPlannerOptions() map[string]string {
	if x != nil {
		return x.PlannerOptions
	}
	return nil
}

var File_chalk_artifacts_v1_cron_query_proto protoreflect.FileDescriptor

const file_chalk_artifacts_v1_cron_query_proto_rawDesc = "" +
	"\n" +
	"#chalk/artifacts/v1/cron_query.proto\x12\x12chalk.artifacts.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"Y\n" +
	"\x11RecomputeSettings\x12!\n" +
	"\ffeature_fqns\x18\x01 \x03(\tR\vfeatureFqns\x12!\n" +
	"\fall_features\x18\x02 \x01(\bR\vallFeatures\"\xfe\x05\n" +
	"\tCronQuery\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04cron\x18\x02 \x01(\tR\x04cron\x12\x1b\n" +
	"\tfile_name\x18\x03 \x01(\tR\bfileName\x12\x16\n" +
	"\x06output\x18\x04 \x03(\tR\x06output\x12$\n" +
	"\vmax_samples\x18\x05 \x01(\x03H\x00R\n" +
	"maxSamples\x88\x01\x01\x12C\n" +
	"\trecompute\x18\x06 \x01(\v2%.chalk.artifacts.v1.RecomputeSettingsR\trecompute\x12;\n" +
	"\vlower_bound\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lowerBound\x12;\n" +
	"\vupper_bound\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"upperBound\x12\x12\n" +
	"\x04tags\x18\t \x03(\tR\x04tags\x124\n" +
	"\x16required_resolver_tags\x18\n" +
	" \x03(\tR\x14requiredResolverTags\x12!\n" +
	"\fstore_online\x18\v \x01(\bR\vstoreOnline\x12#\n" +
	"\rstore_offline\x18\f \x01(\bR\fstoreOffline\x12/\n" +
	"\x13incremental_sources\x18\r \x03(\tR\x12incrementalSources\x12*\n" +
	"\x0eresource_group\x18\x0e \x01(\tH\x01R\rresourceGroup\x88\x01\x01\x12Z\n" +
	"\x0fplanner_options\x18\x0f \x03(\v21.chalk.artifacts.v1.CronQuery.PlannerOptionsEntryR\x0eplannerOptions\x1aA\n" +
	"\x13PlannerOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x0e\n" +
	"\f_max_samplesB\x11\n" +
	"\x0f_resource_groupB\xd3\x01\n" +
	"\x16com.chalk.artifacts.v1B\x0eCronQueryProtoP\x01Z?github.com/chalk-ai/chalk-go/gen/chalk/artifacts/v1;artifactsv1\xa2\x02\x03CAX\xaa\x02\x12Chalk.Artifacts.V1\xca\x02\x12Chalk\\Artifacts\\V1\xe2\x02\x1eChalk\\Artifacts\\V1\\GPBMetadata\xea\x02\x14Chalk::Artifacts::V1b\x06proto3"

var (
	file_chalk_artifacts_v1_cron_query_proto_rawDescOnce sync.Once
	file_chalk_artifacts_v1_cron_query_proto_rawDescData []byte
)

func file_chalk_artifacts_v1_cron_query_proto_rawDescGZIP() []byte {
	file_chalk_artifacts_v1_cron_query_proto_rawDescOnce.Do(func() {
		file_chalk_artifacts_v1_cron_query_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_artifacts_v1_cron_query_proto_rawDesc), len(file_chalk_artifacts_v1_cron_query_proto_rawDesc)))
	})
	return file_chalk_artifacts_v1_cron_query_proto_rawDescData
}

var file_chalk_artifacts_v1_cron_query_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_artifacts_v1_cron_query_proto_goTypes = []any{
	(*RecomputeSettings)(nil),     // 0: chalk.artifacts.v1.RecomputeSettings
	(*CronQuery)(nil),             // 1: chalk.artifacts.v1.CronQuery
	nil,                           // 2: chalk.artifacts.v1.CronQuery.PlannerOptionsEntry
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_chalk_artifacts_v1_cron_query_proto_depIdxs = []int32{
	0, // 0: chalk.artifacts.v1.CronQuery.recompute:type_name -> chalk.artifacts.v1.RecomputeSettings
	3, // 1: chalk.artifacts.v1.CronQuery.lower_bound:type_name -> google.protobuf.Timestamp
	3, // 2: chalk.artifacts.v1.CronQuery.upper_bound:type_name -> google.protobuf.Timestamp
	2, // 3: chalk.artifacts.v1.CronQuery.planner_options:type_name -> chalk.artifacts.v1.CronQuery.PlannerOptionsEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_chalk_artifacts_v1_cron_query_proto_init() }
func file_chalk_artifacts_v1_cron_query_proto_init() {
	if File_chalk_artifacts_v1_cron_query_proto != nil {
		return
	}
	file_chalk_artifacts_v1_cron_query_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_artifacts_v1_cron_query_proto_rawDesc), len(file_chalk_artifacts_v1_cron_query_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_artifacts_v1_cron_query_proto_goTypes,
		DependencyIndexes: file_chalk_artifacts_v1_cron_query_proto_depIdxs,
		MessageInfos:      file_chalk_artifacts_v1_cron_query_proto_msgTypes,
	}.Build()
	File_chalk_artifacts_v1_cron_query_proto = out.File
	file_chalk_artifacts_v1_cron_query_proto_goTypes = nil
	file_chalk_artifacts_v1_cron_query_proto_depIdxs = nil
}
