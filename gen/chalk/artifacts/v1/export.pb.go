// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/artifacts/v1/export.proto

package artifactsv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v1"
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/lsp/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidationLogSeverity int32

const (
	ValidationLogSeverity_VALIDATION_LOG_SEVERITY_UNSPECIFIED ValidationLogSeverity = 0
	// Space field numbers out in case we need to add more
	// levels and have it be numerically congruent.
	ValidationLogSeverity_VALIDATION_LOG_SEVERITY_INFO    ValidationLogSeverity = 4
	ValidationLogSeverity_VALIDATION_LOG_SEVERITY_WARNING ValidationLogSeverity = 8
	ValidationLogSeverity_VALIDATION_LOG_SEVERITY_ERROR   ValidationLogSeverity = 12
)

// Enum value maps for ValidationLogSeverity.
var (
	ValidationLogSeverity_name = map[int32]string{
		0:  "VALIDATION_LOG_SEVERITY_UNSPECIFIED",
		4:  "VALIDATION_LOG_SEVERITY_INFO",
		8:  "VALIDATION_LOG_SEVERITY_WARNING",
		12: "VALIDATION_LOG_SEVERITY_ERROR",
	}
	ValidationLogSeverity_value = map[string]int32{
		"VALIDATION_LOG_SEVERITY_UNSPECIFIED": 0,
		"VALIDATION_LOG_SEVERITY_INFO":        4,
		"VALIDATION_LOG_SEVERITY_WARNING":     8,
		"VALIDATION_LOG_SEVERITY_ERROR":       12,
	}
)

func (x ValidationLogSeverity) Enum() *ValidationLogSeverity {
	p := new(ValidationLogSeverity)
	*p = x
	return p
}

func (x ValidationLogSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationLogSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_artifacts_v1_export_proto_enumTypes[0].Descriptor()
}

func (ValidationLogSeverity) Type() protoreflect.EnumType {
	return &file_chalk_artifacts_v1_export_proto_enumTypes[0]
}

func (x ValidationLogSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationLogSeverity.Descriptor instead.
func (ValidationLogSeverity) EnumDescriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{0}
}

type EnvironmentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Runtime          *string  `protobuf:"bytes,2,opt,name=runtime,proto3,oneof" json:"runtime,omitempty"`
	Requirements     *string  `protobuf:"bytes,3,opt,name=requirements,proto3,oneof" json:"requirements,omitempty"`
	Dockerfile       *string  `protobuf:"bytes,4,opt,name=dockerfile,proto3,oneof" json:"dockerfile,omitempty"`
	RequiresPackages []string `protobuf:"bytes,5,rep,name=requires_packages,json=requiresPackages,proto3" json:"requires_packages,omitempty"`
}

func (x *EnvironmentSettings) Reset() {
	*x = EnvironmentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSettings) ProtoMessage() {}

func (x *EnvironmentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSettings.ProtoReflect.Descriptor instead.
func (*EnvironmentSettings) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{0}
}

func (x *EnvironmentSettings) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvironmentSettings) GetRuntime() string {
	if x != nil && x.Runtime != nil {
		return *x.Runtime
	}
	return ""
}

func (x *EnvironmentSettings) GetRequirements() string {
	if x != nil && x.Requirements != nil {
		return *x.Requirements
	}
	return ""
}

func (x *EnvironmentSettings) GetDockerfile() string {
	if x != nil && x.Dockerfile != nil {
		return *x.Dockerfile
	}
	return ""
}

func (x *EnvironmentSettings) GetRequiresPackages() []string {
	if x != nil {
		return x.RequiresPackages
	}
	return nil
}

type ProjectSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project      string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Environments []*EnvironmentSettings `protobuf:"bytes,2,rep,name=environments,proto3" json:"environments,omitempty"`
	Validation   *ValidationSettings    `protobuf:"bytes,3,opt,name=validation,proto3" json:"validation,omitempty"`
}

func (x *ProjectSettings) Reset() {
	*x = ProjectSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectSettings) ProtoMessage() {}

func (x *ProjectSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectSettings.ProtoReflect.Descriptor instead.
func (*ProjectSettings) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectSettings) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ProjectSettings) GetEnvironments() []*EnvironmentSettings {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *ProjectSettings) GetValidation() *ValidationSettings {
	if x != nil {
		return x.Validation
	}
	return nil
}

type MetadataSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Missing string `protobuf:"bytes,2,opt,name=missing,proto3" json:"missing,omitempty"`
}

func (x *MetadataSettings) Reset() {
	*x = MetadataSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSettings) ProtoMessage() {}

func (x *MetadataSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSettings.ProtoReflect.Descriptor instead.
func (*MetadataSettings) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{2}
}

func (x *MetadataSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetadataSettings) GetMissing() string {
	if x != nil {
		return x.Missing
	}
	return ""
}

type FeatureSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*MetadataSettings `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *FeatureSettings) Reset() {
	*x = FeatureSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSettings) ProtoMessage() {}

func (x *FeatureSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSettings.ProtoReflect.Descriptor instead.
func (*FeatureSettings) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureSettings) GetMetadata() []*MetadataSettings {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ResolverSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*MetadataSettings `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResolverSettings) Reset() {
	*x = ResolverSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolverSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolverSettings) ProtoMessage() {}

func (x *ResolverSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolverSettings.ProtoReflect.Descriptor instead.
func (*ResolverSettings) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{4}
}

func (x *ResolverSettings) GetMetadata() []*MetadataSettings {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ValidationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature  *FeatureSettings  `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	Resolver *ResolverSettings `protobuf:"bytes,2,opt,name=resolver,proto3" json:"resolver,omitempty"`
}

func (x *ValidationSettings) Reset() {
	*x = ValidationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationSettings) ProtoMessage() {}

func (x *ValidationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationSettings.ProtoReflect.Descriptor instead.
func (*ValidationSettings) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{5}
}

func (x *ValidationSettings) GetFeature() *FeatureSettings {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *ValidationSettings) GetResolver() *ResolverSettings {
	if x != nil {
		return x.Resolver
	}
	return nil
}

type FailedImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Module    string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Traceback string `protobuf:"bytes,3,opt,name=traceback,proto3" json:"traceback,omitempty"`
}

func (x *FailedImport) Reset() {
	*x = FailedImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedImport) ProtoMessage() {}

func (x *FailedImport) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedImport.ProtoReflect.Descriptor instead.
func (*FailedImport) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{6}
}

func (x *FailedImport) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FailedImport) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FailedImport) GetTraceback() string {
	if x != nil {
		return x.Traceback
	}
	return ""
}

type ChalkpyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Python  *string `protobuf:"bytes,2,opt,name=python,proto3,oneof" json:"python,omitempty"`
}

func (x *ChalkpyInfo) Reset() {
	*x = ChalkpyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChalkpyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkpyInfo) ProtoMessage() {}

func (x *ChalkpyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkpyInfo.ProtoReflect.Descriptor instead.
func (*ChalkpyInfo) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{7}
}

func (x *ChalkpyInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChalkpyInfo) GetPython() string {
	if x != nil && x.Python != nil {
		return *x.Python
	}
	return ""
}

type ValidationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    string                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Subheader string                `protobuf:"bytes,2,opt,name=subheader,proto3" json:"subheader,omitempty"`
	Severity  ValidationLogSeverity `protobuf:"varint,3,opt,name=severity,proto3,enum=chalk.artifacts.v1.ValidationLogSeverity" json:"severity,omitempty"`
}

func (x *ValidationLog) Reset() {
	*x = ValidationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationLog) ProtoMessage() {}

func (x *ValidationLog) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationLog.ProtoReflect.Descriptor instead.
func (*ValidationLog) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{8}
}

func (x *ValidationLog) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *ValidationLog) GetSubheader() string {
	if x != nil {
		return x.Subheader
	}
	return ""
}

func (x *ValidationLog) GetSeverity() ValidationLogSeverity {
	if x != nil {
		return x.Severity
	}
	return ValidationLogSeverity_VALIDATION_LOG_SEVERITY_UNSPECIFIED
}

type Export struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph      *v1.Graph        `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Crons      []*CronQuery     `protobuf:"bytes,2,rep,name=crons,proto3" json:"crons,omitempty"`
	Charts     []*Chart         `protobuf:"bytes,3,rep,name=charts,proto3" json:"charts,omitempty"`
	CdcSources []*CDCSource     `protobuf:"bytes,4,rep,name=cdc_sources,json=cdcSources,proto3" json:"cdc_sources,omitempty"`
	Config     *ProjectSettings `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Chalkpy    *ChalkpyInfo     `protobuf:"bytes,6,opt,name=chalkpy,proto3" json:"chalkpy,omitempty"`
	Failed     []*FailedImport  `protobuf:"bytes,7,rep,name=failed,proto3" json:"failed,omitempty"`
	Logs       []*ValidationLog `protobuf:"bytes,8,rep,name=logs,proto3" json:"logs,omitempty"`
	Lsp        *v11.LSP         `protobuf:"bytes,9,opt,name=lsp,proto3" json:"lsp,omitempty"`
}

func (x *Export) Reset() {
	*x = Export{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_artifacts_v1_export_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Export) ProtoMessage() {}

func (x *Export) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_artifacts_v1_export_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Export.ProtoReflect.Descriptor instead.
func (*Export) Descriptor() ([]byte, []int) {
	return file_chalk_artifacts_v1_export_proto_rawDescGZIP(), []int{9}
}

func (x *Export) GetGraph() *v1.Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *Export) GetCrons() []*CronQuery {
	if x != nil {
		return x.Crons
	}
	return nil
}

func (x *Export) GetCharts() []*Chart {
	if x != nil {
		return x.Charts
	}
	return nil
}

func (x *Export) GetCdcSources() []*CDCSource {
	if x != nil {
		return x.CdcSources
	}
	return nil
}

func (x *Export) GetConfig() *ProjectSettings {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Export) GetChalkpy() *ChalkpyInfo {
	if x != nil {
		return x.Chalkpy
	}
	return nil
}

func (x *Export) GetFailed() []*FailedImport {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *Export) GetLogs() []*ValidationLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Export) GetLsp() *v11.LSP {
	if x != nil {
		return x.Lsp
	}
	return nil
}

var File_chalk_artifacts_v1_export_proto protoreflect.FileDescriptor

var file_chalk_artifacts_v1_export_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6c, 0x73, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a,
	0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a,
	0x10, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0x53, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x22, 0x61, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x70, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xeb, 0x03, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2b, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x33, 0x0a,
	0x05, 0x63, 0x72, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x63, 0x72, 0x6f,
	0x6e, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x44, 0x43, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x64, 0x63, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x70, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x70, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x70, 0x79, 0x12, 0x38, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x23,
	0x0a, 0x03, 0x6c, 0x73, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x6c, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x53, 0x50, 0x52, 0x03,
	0x6c, 0x73, 0x70, 0x2a, 0xaa, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a,
	0x23, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x21, 0x0a,
	0x1d, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c,
	0x42, 0xd0, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x41,
	0x58, 0xaa, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x5c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_artifacts_v1_export_proto_rawDescOnce sync.Once
	file_chalk_artifacts_v1_export_proto_rawDescData = file_chalk_artifacts_v1_export_proto_rawDesc
)

func file_chalk_artifacts_v1_export_proto_rawDescGZIP() []byte {
	file_chalk_artifacts_v1_export_proto_rawDescOnce.Do(func() {
		file_chalk_artifacts_v1_export_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_artifacts_v1_export_proto_rawDescData)
	})
	return file_chalk_artifacts_v1_export_proto_rawDescData
}

var file_chalk_artifacts_v1_export_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chalk_artifacts_v1_export_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chalk_artifacts_v1_export_proto_goTypes = []any{
	(ValidationLogSeverity)(0),  // 0: chalk.artifacts.v1.ValidationLogSeverity
	(*EnvironmentSettings)(nil), // 1: chalk.artifacts.v1.EnvironmentSettings
	(*ProjectSettings)(nil),     // 2: chalk.artifacts.v1.ProjectSettings
	(*MetadataSettings)(nil),    // 3: chalk.artifacts.v1.MetadataSettings
	(*FeatureSettings)(nil),     // 4: chalk.artifacts.v1.FeatureSettings
	(*ResolverSettings)(nil),    // 5: chalk.artifacts.v1.ResolverSettings
	(*ValidationSettings)(nil),  // 6: chalk.artifacts.v1.ValidationSettings
	(*FailedImport)(nil),        // 7: chalk.artifacts.v1.FailedImport
	(*ChalkpyInfo)(nil),         // 8: chalk.artifacts.v1.ChalkpyInfo
	(*ValidationLog)(nil),       // 9: chalk.artifacts.v1.ValidationLog
	(*Export)(nil),              // 10: chalk.artifacts.v1.Export
	(*v1.Graph)(nil),            // 11: chalk.graph.v1.Graph
	(*CronQuery)(nil),           // 12: chalk.artifacts.v1.CronQuery
	(*Chart)(nil),               // 13: chalk.artifacts.v1.Chart
	(*CDCSource)(nil),           // 14: chalk.artifacts.v1.CDCSource
	(*v11.LSP)(nil),             // 15: chalk.lsp.v1.LSP
}
var file_chalk_artifacts_v1_export_proto_depIdxs = []int32{
	1,  // 0: chalk.artifacts.v1.ProjectSettings.environments:type_name -> chalk.artifacts.v1.EnvironmentSettings
	6,  // 1: chalk.artifacts.v1.ProjectSettings.validation:type_name -> chalk.artifacts.v1.ValidationSettings
	3,  // 2: chalk.artifacts.v1.FeatureSettings.metadata:type_name -> chalk.artifacts.v1.MetadataSettings
	3,  // 3: chalk.artifacts.v1.ResolverSettings.metadata:type_name -> chalk.artifacts.v1.MetadataSettings
	4,  // 4: chalk.artifacts.v1.ValidationSettings.feature:type_name -> chalk.artifacts.v1.FeatureSettings
	5,  // 5: chalk.artifacts.v1.ValidationSettings.resolver:type_name -> chalk.artifacts.v1.ResolverSettings
	0,  // 6: chalk.artifacts.v1.ValidationLog.severity:type_name -> chalk.artifacts.v1.ValidationLogSeverity
	11, // 7: chalk.artifacts.v1.Export.graph:type_name -> chalk.graph.v1.Graph
	12, // 8: chalk.artifacts.v1.Export.crons:type_name -> chalk.artifacts.v1.CronQuery
	13, // 9: chalk.artifacts.v1.Export.charts:type_name -> chalk.artifacts.v1.Chart
	14, // 10: chalk.artifacts.v1.Export.cdc_sources:type_name -> chalk.artifacts.v1.CDCSource
	2,  // 11: chalk.artifacts.v1.Export.config:type_name -> chalk.artifacts.v1.ProjectSettings
	8,  // 12: chalk.artifacts.v1.Export.chalkpy:type_name -> chalk.artifacts.v1.ChalkpyInfo
	7,  // 13: chalk.artifacts.v1.Export.failed:type_name -> chalk.artifacts.v1.FailedImport
	9,  // 14: chalk.artifacts.v1.Export.logs:type_name -> chalk.artifacts.v1.ValidationLog
	15, // 15: chalk.artifacts.v1.Export.lsp:type_name -> chalk.lsp.v1.LSP
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_chalk_artifacts_v1_export_proto_init() }
func file_chalk_artifacts_v1_export_proto_init() {
	if File_chalk_artifacts_v1_export_proto != nil {
		return
	}
	file_chalk_artifacts_v1_cdc_proto_init()
	file_chalk_artifacts_v1_chart_proto_init()
	file_chalk_artifacts_v1_cron_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chalk_artifacts_v1_export_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EnvironmentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MetadataSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ResolverSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ValidationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FailedImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ChalkpyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ValidationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_artifacts_v1_export_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Export); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_artifacts_v1_export_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_artifacts_v1_export_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_artifacts_v1_export_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_artifacts_v1_export_proto_goTypes,
		DependencyIndexes: file_chalk_artifacts_v1_export_proto_depIdxs,
		EnumInfos:         file_chalk_artifacts_v1_export_proto_enumTypes,
		MessageInfos:      file_chalk_artifacts_v1_export_proto_msgTypes,
	}.Build()
	File_chalk_artifacts_v1_export_proto = out.File
	file_chalk_artifacts_v1_export_proto_rawDesc = nil
	file_chalk_artifacts_v1_export_proto_goTypes = nil
	file_chalk_artifacts_v1_export_proto_depIdxs = nil
}
