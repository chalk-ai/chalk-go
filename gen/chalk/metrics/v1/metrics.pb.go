// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/metrics/v1/metrics.proto

package metricsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All of the following enums are representations of the metrics1
// enums. Because protos require that 0 be UNSPECIFIED, all of these enums
// values are 1 greater than the value they will have in the database
//
// Canonical definition of these tags exists in
// chalk-private/shared/chalkshared/rpc_models/metrics.py
type Metrics1ProtoRepresentationNamespace int32

const (
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_UNSPECIFIED            Metrics1ProtoRepresentationNamespace = 0
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_RESOLVER               Metrics1ProtoRepresentationNamespace = 1
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_FEATURE                Metrics1ProtoRepresentationNamespace = 2
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_QUERY                  Metrics1ProtoRepresentationNamespace = 3
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_BATCH                  Metrics1ProtoRepresentationNamespace = 4
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_STREAM                 Metrics1ProtoRepresentationNamespace = 5
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_STORAGE_INFRASTRUCTURE Metrics1ProtoRepresentationNamespace = 6
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_POD                    Metrics1ProtoRepresentationNamespace = 7
	Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_DATASOURCE             Metrics1ProtoRepresentationNamespace = 8
)

// Enum value maps for Metrics1ProtoRepresentationNamespace.
var (
	Metrics1ProtoRepresentationNamespace_name = map[int32]string{
		0: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_UNSPECIFIED",
		1: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_RESOLVER",
		2: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_FEATURE",
		3: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_QUERY",
		4: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_BATCH",
		5: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_STREAM",
		6: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_STORAGE_INFRASTRUCTURE",
		7: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_POD",
		8: "METRICS1_PROTO_REPRESENTATION_NAMESPACE_DATASOURCE",
	}
	Metrics1ProtoRepresentationNamespace_value = map[string]int32{
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_UNSPECIFIED":            0,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_RESOLVER":               1,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_FEATURE":                2,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_QUERY":                  3,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_BATCH":                  4,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_STREAM":                 5,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_STORAGE_INFRASTRUCTURE": 6,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_POD":                    7,
		"METRICS1_PROTO_REPRESENTATION_NAMESPACE_DATASOURCE":             8,
	}
)

func (x Metrics1ProtoRepresentationNamespace) Enum() *Metrics1ProtoRepresentationNamespace {
	p := new(Metrics1ProtoRepresentationNamespace)
	*p = x
	return p
}

func (x Metrics1ProtoRepresentationNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoRepresentationNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[0].Descriptor()
}

func (Metrics1ProtoRepresentationNamespace) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[0]
}

func (x Metrics1ProtoRepresentationNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoRepresentationNamespace.Descriptor instead.
func (Metrics1ProtoRepresentationNamespace) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

type Metrics1ProtoRepresentationName int32

const (
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_UNSPECIFIED                  Metrics1ProtoRepresentationName = 0
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_LATENCY                      Metrics1ProtoRepresentationName = 1
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_REQUEST                      Metrics1ProtoRepresentationName = 2
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_FEATURE_VALUE                Metrics1ProtoRepresentationName = 3
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_STALENESS                    Metrics1ProtoRepresentationName = 4
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_WRITE                        Metrics1ProtoRepresentationName = 5
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_MESSAGE_PROCESSED            Metrics1ProtoRepresentationName = 6
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_WINDOW_PROCESSED             Metrics1ProtoRepresentationName = 7
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_LAG                          Metrics1ProtoRepresentationName = 8
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_QUEUE_SIZE                   Metrics1ProtoRepresentationName = 9
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_MEMORY_BYTES                 Metrics1ProtoRepresentationName = 10
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_TOTAL_AVAILABLE_MEMORY_BYTES Metrics1ProtoRepresentationName = 11
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_CACHE_KEY_COUNT              Metrics1ProtoRepresentationName = 12
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_CACHE_EXPIRED_KEY_COUNT      Metrics1ProtoRepresentationName = 13
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_CPU_UTILIZATION              Metrics1ProtoRepresentationName = 14
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_DISK_READ_BYTES              Metrics1ProtoRepresentationName = 15
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_DISK_WRITE_BYTES             Metrics1ProtoRepresentationName = 16
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_NET_RX                       Metrics1ProtoRepresentationName = 17
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_NET_TX                       Metrics1ProtoRepresentationName = 18
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_MATT_AGG_LAG                 Metrics1ProtoRepresentationName = 19
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_USED                         Metrics1ProtoRepresentationName = 20
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_REFERENCED                   Metrics1ProtoRepresentationName = 21
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_COMPUTED                     Metrics1ProtoRepresentationName = 22
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_PLAN_CACHE_USE               Metrics1ProtoRepresentationName = 23
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_ROWS_WRITTEN                 Metrics1ProtoRepresentationName = 24
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_START                        Metrics1ProtoRepresentationName = 25
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_END                          Metrics1ProtoRepresentationName = 26
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_DELAY                        Metrics1ProtoRepresentationName = 27
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_NUM_UNACKED_MESSAGES         Metrics1ProtoRepresentationName = 28
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_OLDEST_UNACKED_MESSAGE_AGE   Metrics1ProtoRepresentationName = 29
	Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_LOOKED_UP                    Metrics1ProtoRepresentationName = 30
)

// Enum value maps for Metrics1ProtoRepresentationName.
var (
	Metrics1ProtoRepresentationName_name = map[int32]string{
		0:  "METRICS1_PROTO_REPRESENTATION_NAME_UNSPECIFIED",
		1:  "METRICS1_PROTO_REPRESENTATION_NAME_LATENCY",
		2:  "METRICS1_PROTO_REPRESENTATION_NAME_REQUEST",
		3:  "METRICS1_PROTO_REPRESENTATION_NAME_FEATURE_VALUE",
		4:  "METRICS1_PROTO_REPRESENTATION_NAME_STALENESS",
		5:  "METRICS1_PROTO_REPRESENTATION_NAME_WRITE",
		6:  "METRICS1_PROTO_REPRESENTATION_NAME_MESSAGE_PROCESSED",
		7:  "METRICS1_PROTO_REPRESENTATION_NAME_WINDOW_PROCESSED",
		8:  "METRICS1_PROTO_REPRESENTATION_NAME_LAG",
		9:  "METRICS1_PROTO_REPRESENTATION_NAME_QUEUE_SIZE",
		10: "METRICS1_PROTO_REPRESENTATION_NAME_MEMORY_BYTES",
		11: "METRICS1_PROTO_REPRESENTATION_NAME_TOTAL_AVAILABLE_MEMORY_BYTES",
		12: "METRICS1_PROTO_REPRESENTATION_NAME_CACHE_KEY_COUNT",
		13: "METRICS1_PROTO_REPRESENTATION_NAME_CACHE_EXPIRED_KEY_COUNT",
		14: "METRICS1_PROTO_REPRESENTATION_NAME_CPU_UTILIZATION",
		15: "METRICS1_PROTO_REPRESENTATION_NAME_DISK_READ_BYTES",
		16: "METRICS1_PROTO_REPRESENTATION_NAME_DISK_WRITE_BYTES",
		17: "METRICS1_PROTO_REPRESENTATION_NAME_NET_RX",
		18: "METRICS1_PROTO_REPRESENTATION_NAME_NET_TX",
		19: "METRICS1_PROTO_REPRESENTATION_NAME_MATT_AGG_LAG",
		20: "METRICS1_PROTO_REPRESENTATION_NAME_USED",
		21: "METRICS1_PROTO_REPRESENTATION_NAME_REFERENCED",
		22: "METRICS1_PROTO_REPRESENTATION_NAME_COMPUTED",
		23: "METRICS1_PROTO_REPRESENTATION_NAME_PLAN_CACHE_USE",
		24: "METRICS1_PROTO_REPRESENTATION_NAME_ROWS_WRITTEN",
		25: "METRICS1_PROTO_REPRESENTATION_NAME_START",
		26: "METRICS1_PROTO_REPRESENTATION_NAME_END",
		27: "METRICS1_PROTO_REPRESENTATION_NAME_DELAY",
		28: "METRICS1_PROTO_REPRESENTATION_NAME_NUM_UNACKED_MESSAGES",
		29: "METRICS1_PROTO_REPRESENTATION_NAME_OLDEST_UNACKED_MESSAGE_AGE",
		30: "METRICS1_PROTO_REPRESENTATION_NAME_LOOKED_UP",
	}
	Metrics1ProtoRepresentationName_value = map[string]int32{
		"METRICS1_PROTO_REPRESENTATION_NAME_UNSPECIFIED":                  0,
		"METRICS1_PROTO_REPRESENTATION_NAME_LATENCY":                      1,
		"METRICS1_PROTO_REPRESENTATION_NAME_REQUEST":                      2,
		"METRICS1_PROTO_REPRESENTATION_NAME_FEATURE_VALUE":                3,
		"METRICS1_PROTO_REPRESENTATION_NAME_STALENESS":                    4,
		"METRICS1_PROTO_REPRESENTATION_NAME_WRITE":                        5,
		"METRICS1_PROTO_REPRESENTATION_NAME_MESSAGE_PROCESSED":            6,
		"METRICS1_PROTO_REPRESENTATION_NAME_WINDOW_PROCESSED":             7,
		"METRICS1_PROTO_REPRESENTATION_NAME_LAG":                          8,
		"METRICS1_PROTO_REPRESENTATION_NAME_QUEUE_SIZE":                   9,
		"METRICS1_PROTO_REPRESENTATION_NAME_MEMORY_BYTES":                 10,
		"METRICS1_PROTO_REPRESENTATION_NAME_TOTAL_AVAILABLE_MEMORY_BYTES": 11,
		"METRICS1_PROTO_REPRESENTATION_NAME_CACHE_KEY_COUNT":              12,
		"METRICS1_PROTO_REPRESENTATION_NAME_CACHE_EXPIRED_KEY_COUNT":      13,
		"METRICS1_PROTO_REPRESENTATION_NAME_CPU_UTILIZATION":              14,
		"METRICS1_PROTO_REPRESENTATION_NAME_DISK_READ_BYTES":              15,
		"METRICS1_PROTO_REPRESENTATION_NAME_DISK_WRITE_BYTES":             16,
		"METRICS1_PROTO_REPRESENTATION_NAME_NET_RX":                       17,
		"METRICS1_PROTO_REPRESENTATION_NAME_NET_TX":                       18,
		"METRICS1_PROTO_REPRESENTATION_NAME_MATT_AGG_LAG":                 19,
		"METRICS1_PROTO_REPRESENTATION_NAME_USED":                         20,
		"METRICS1_PROTO_REPRESENTATION_NAME_REFERENCED":                   21,
		"METRICS1_PROTO_REPRESENTATION_NAME_COMPUTED":                     22,
		"METRICS1_PROTO_REPRESENTATION_NAME_PLAN_CACHE_USE":               23,
		"METRICS1_PROTO_REPRESENTATION_NAME_ROWS_WRITTEN":                 24,
		"METRICS1_PROTO_REPRESENTATION_NAME_START":                        25,
		"METRICS1_PROTO_REPRESENTATION_NAME_END":                          26,
		"METRICS1_PROTO_REPRESENTATION_NAME_DELAY":                        27,
		"METRICS1_PROTO_REPRESENTATION_NAME_NUM_UNACKED_MESSAGES":         28,
		"METRICS1_PROTO_REPRESENTATION_NAME_OLDEST_UNACKED_MESSAGE_AGE":   29,
		"METRICS1_PROTO_REPRESENTATION_NAME_LOOKED_UP":                    30,
	}
)

func (x Metrics1ProtoRepresentationName) Enum() *Metrics1ProtoRepresentationName {
	p := new(Metrics1ProtoRepresentationName)
	*p = x
	return p
}

func (x Metrics1ProtoRepresentationName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoRepresentationName) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[1].Descriptor()
}

func (Metrics1ProtoRepresentationName) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[1]
}

func (x Metrics1ProtoRepresentationName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoRepresentationName.Descriptor instead.
func (Metrics1ProtoRepresentationName) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

type Metrics1ProtoRepresentationTag1 int32

const (
	Metrics1ProtoRepresentationTag1_METRICS1_PROTO_REPRESENTATION_TAG1_UNSPECIFIED Metrics1ProtoRepresentationTag1 = 0
	Metrics1ProtoRepresentationTag1_METRICS1_PROTO_REPRESENTATION_TAG1_FAILURE     Metrics1ProtoRepresentationTag1 = 1
	Metrics1ProtoRepresentationTag1_METRICS1_PROTO_REPRESENTATION_TAG1_SUCCESS     Metrics1ProtoRepresentationTag1 = 2
	Metrics1ProtoRepresentationTag1_METRICS1_PROTO_REPRESENTATION_TAG1_WORKING     Metrics1ProtoRepresentationTag1 = 3
)

// Enum value maps for Metrics1ProtoRepresentationTag1.
var (
	Metrics1ProtoRepresentationTag1_name = map[int32]string{
		0: "METRICS1_PROTO_REPRESENTATION_TAG1_UNSPECIFIED",
		1: "METRICS1_PROTO_REPRESENTATION_TAG1_FAILURE",
		2: "METRICS1_PROTO_REPRESENTATION_TAG1_SUCCESS",
		3: "METRICS1_PROTO_REPRESENTATION_TAG1_WORKING",
	}
	Metrics1ProtoRepresentationTag1_value = map[string]int32{
		"METRICS1_PROTO_REPRESENTATION_TAG1_UNSPECIFIED": 0,
		"METRICS1_PROTO_REPRESENTATION_TAG1_FAILURE":     1,
		"METRICS1_PROTO_REPRESENTATION_TAG1_SUCCESS":     2,
		"METRICS1_PROTO_REPRESENTATION_TAG1_WORKING":     3,
	}
)

func (x Metrics1ProtoRepresentationTag1) Enum() *Metrics1ProtoRepresentationTag1 {
	p := new(Metrics1ProtoRepresentationTag1)
	*p = x
	return p
}

func (x Metrics1ProtoRepresentationTag1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoRepresentationTag1) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[2].Descriptor()
}

func (Metrics1ProtoRepresentationTag1) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[2]
}

func (x Metrics1ProtoRepresentationTag1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoRepresentationTag1.Descriptor instead.
func (Metrics1ProtoRepresentationTag1) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

type Metrics1ProtoRepresentationTag2 int32

const (
	Metrics1ProtoRepresentationTag2_METRICS1_PROTO_REPRESENTATION_TAG2_UNSPECIFIED Metrics1ProtoRepresentationTag2 = 0
	Metrics1ProtoRepresentationTag2_METRICS1_PROTO_REPRESENTATION_TAG2_CACHE_MISS  Metrics1ProtoRepresentationTag2 = 1
	Metrics1ProtoRepresentationTag2_METRICS1_PROTO_REPRESENTATION_TAG2_CACHE_HIT   Metrics1ProtoRepresentationTag2 = 2
)

// Enum value maps for Metrics1ProtoRepresentationTag2.
var (
	Metrics1ProtoRepresentationTag2_name = map[int32]string{
		0: "METRICS1_PROTO_REPRESENTATION_TAG2_UNSPECIFIED",
		1: "METRICS1_PROTO_REPRESENTATION_TAG2_CACHE_MISS",
		2: "METRICS1_PROTO_REPRESENTATION_TAG2_CACHE_HIT",
	}
	Metrics1ProtoRepresentationTag2_value = map[string]int32{
		"METRICS1_PROTO_REPRESENTATION_TAG2_UNSPECIFIED": 0,
		"METRICS1_PROTO_REPRESENTATION_TAG2_CACHE_MISS":  1,
		"METRICS1_PROTO_REPRESENTATION_TAG2_CACHE_HIT":   2,
	}
)

func (x Metrics1ProtoRepresentationTag2) Enum() *Metrics1ProtoRepresentationTag2 {
	p := new(Metrics1ProtoRepresentationTag2)
	*p = x
	return p
}

func (x Metrics1ProtoRepresentationTag2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoRepresentationTag2) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[3].Descriptor()
}

func (Metrics1ProtoRepresentationTag2) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[3]
}

func (x Metrics1ProtoRepresentationTag2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoRepresentationTag2.Descriptor instead.
func (Metrics1ProtoRepresentationTag2) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{3}
}

type Metrics1ProtoRepresentationTag3 int32

const (
	Metrics1ProtoRepresentationTag3_METRICS1_PROTO_REPRESENTATION_TAG3_UNSPECIFIED Metrics1ProtoRepresentationTag3 = 0
	Metrics1ProtoRepresentationTag3_METRICS1_PROTO_REPRESENTATION_TAG3_OFFLINE     Metrics1ProtoRepresentationTag3 = 1
	Metrics1ProtoRepresentationTag3_METRICS1_PROTO_REPRESENTATION_TAG3_ONLINE      Metrics1ProtoRepresentationTag3 = 2
	Metrics1ProtoRepresentationTag3_METRICS1_PROTO_REPRESENTATION_TAG3_STREAM      Metrics1ProtoRepresentationTag3 = 3
)

// Enum value maps for Metrics1ProtoRepresentationTag3.
var (
	Metrics1ProtoRepresentationTag3_name = map[int32]string{
		0: "METRICS1_PROTO_REPRESENTATION_TAG3_UNSPECIFIED",
		1: "METRICS1_PROTO_REPRESENTATION_TAG3_OFFLINE",
		2: "METRICS1_PROTO_REPRESENTATION_TAG3_ONLINE",
		3: "METRICS1_PROTO_REPRESENTATION_TAG3_STREAM",
	}
	Metrics1ProtoRepresentationTag3_value = map[string]int32{
		"METRICS1_PROTO_REPRESENTATION_TAG3_UNSPECIFIED": 0,
		"METRICS1_PROTO_REPRESENTATION_TAG3_OFFLINE":     1,
		"METRICS1_PROTO_REPRESENTATION_TAG3_ONLINE":      2,
		"METRICS1_PROTO_REPRESENTATION_TAG3_STREAM":      3,
	}
)

func (x Metrics1ProtoRepresentationTag3) Enum() *Metrics1ProtoRepresentationTag3 {
	p := new(Metrics1ProtoRepresentationTag3)
	*p = x
	return p
}

func (x Metrics1ProtoRepresentationTag3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoRepresentationTag3) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[4].Descriptor()
}

func (Metrics1ProtoRepresentationTag3) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[4]
}

func (x Metrics1ProtoRepresentationTag3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoRepresentationTag3.Descriptor instead.
func (Metrics1ProtoRepresentationTag3) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{4}
}

type Metrics1ProtoRepresentationTag4 int32

const (
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_UNSPECIFIED                  Metrics1ProtoRepresentationTag4 = 0
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_INFERENCE                    Metrics1ProtoRepresentationTag4 = 1
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_CRON                         Metrics1ProtoRepresentationTag4 = 2
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_MIGRATION                    Metrics1ProtoRepresentationTag4 = 3
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_MIGRATION_SAMPLER            Metrics1ProtoRepresentationTag4 = 4
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_STREAMING                    Metrics1ProtoRepresentationTag4 = 5
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_WINDOWED_STREAMING           Metrics1ProtoRepresentationTag4 = 6
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_DATASET                      Metrics1ProtoRepresentationTag4 = 7
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_OFFLINE_QUERY                Metrics1ProtoRepresentationTag4 = 8
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_SCHEDULED_QUERY              Metrics1ProtoRepresentationTag4 = 9
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_AGGREGATE_BACKFILL           Metrics1ProtoRepresentationTag4 = 10
	Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_SCHEDULED_AGGREGATE_BACKFILL Metrics1ProtoRepresentationTag4 = 11
)

// Enum value maps for Metrics1ProtoRepresentationTag4.
var (
	Metrics1ProtoRepresentationTag4_name = map[int32]string{
		0:  "METRICS1_PROTO_REPRESENTATION_TAG4_UNSPECIFIED",
		1:  "METRICS1_PROTO_REPRESENTATION_TAG4_INFERENCE",
		2:  "METRICS1_PROTO_REPRESENTATION_TAG4_CRON",
		3:  "METRICS1_PROTO_REPRESENTATION_TAG4_MIGRATION",
		4:  "METRICS1_PROTO_REPRESENTATION_TAG4_MIGRATION_SAMPLER",
		5:  "METRICS1_PROTO_REPRESENTATION_TAG4_STREAMING",
		6:  "METRICS1_PROTO_REPRESENTATION_TAG4_WINDOWED_STREAMING",
		7:  "METRICS1_PROTO_REPRESENTATION_TAG4_DATASET",
		8:  "METRICS1_PROTO_REPRESENTATION_TAG4_OFFLINE_QUERY",
		9:  "METRICS1_PROTO_REPRESENTATION_TAG4_SCHEDULED_QUERY",
		10: "METRICS1_PROTO_REPRESENTATION_TAG4_AGGREGATE_BACKFILL",
		11: "METRICS1_PROTO_REPRESENTATION_TAG4_SCHEDULED_AGGREGATE_BACKFILL",
	}
	Metrics1ProtoRepresentationTag4_value = map[string]int32{
		"METRICS1_PROTO_REPRESENTATION_TAG4_UNSPECIFIED":                  0,
		"METRICS1_PROTO_REPRESENTATION_TAG4_INFERENCE":                    1,
		"METRICS1_PROTO_REPRESENTATION_TAG4_CRON":                         2,
		"METRICS1_PROTO_REPRESENTATION_TAG4_MIGRATION":                    3,
		"METRICS1_PROTO_REPRESENTATION_TAG4_MIGRATION_SAMPLER":            4,
		"METRICS1_PROTO_REPRESENTATION_TAG4_STREAMING":                    5,
		"METRICS1_PROTO_REPRESENTATION_TAG4_WINDOWED_STREAMING":           6,
		"METRICS1_PROTO_REPRESENTATION_TAG4_DATASET":                      7,
		"METRICS1_PROTO_REPRESENTATION_TAG4_OFFLINE_QUERY":                8,
		"METRICS1_PROTO_REPRESENTATION_TAG4_SCHEDULED_QUERY":              9,
		"METRICS1_PROTO_REPRESENTATION_TAG4_AGGREGATE_BACKFILL":           10,
		"METRICS1_PROTO_REPRESENTATION_TAG4_SCHEDULED_AGGREGATE_BACKFILL": 11,
	}
)

func (x Metrics1ProtoRepresentationTag4) Enum() *Metrics1ProtoRepresentationTag4 {
	p := new(Metrics1ProtoRepresentationTag4)
	*p = x
	return p
}

func (x Metrics1ProtoRepresentationTag4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoRepresentationTag4) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[5].Descriptor()
}

func (Metrics1ProtoRepresentationTag4) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[5]
}

func (x Metrics1ProtoRepresentationTag4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoRepresentationTag4.Descriptor instead.
func (Metrics1ProtoRepresentationTag4) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{5}
}

type Metrics1ProtoRepresentationTag5 int32

const (
	Metrics1ProtoRepresentationTag5_METRICS1_PROTO_REPRESENTATION_TAG5_UNSPECIFIED Metrics1ProtoRepresentationTag5 = 0
	Metrics1ProtoRepresentationTag5_METRICS1_PROTO_REPRESENTATION_TAG5_IS_NULL     Metrics1ProtoRepresentationTag5 = 1
	Metrics1ProtoRepresentationTag5_METRICS1_PROTO_REPRESENTATION_TAG5_NON_NULL    Metrics1ProtoRepresentationTag5 = 2
)

// Enum value maps for Metrics1ProtoRepresentationTag5.
var (
	Metrics1ProtoRepresentationTag5_name = map[int32]string{
		0: "METRICS1_PROTO_REPRESENTATION_TAG5_UNSPECIFIED",
		1: "METRICS1_PROTO_REPRESENTATION_TAG5_IS_NULL",
		2: "METRICS1_PROTO_REPRESENTATION_TAG5_NON_NULL",
	}
	Metrics1ProtoRepresentationTag5_value = map[string]int32{
		"METRICS1_PROTO_REPRESENTATION_TAG5_UNSPECIFIED": 0,
		"METRICS1_PROTO_REPRESENTATION_TAG5_IS_NULL":     1,
		"METRICS1_PROTO_REPRESENTATION_TAG5_NON_NULL":    2,
	}
)

func (x Metrics1ProtoRepresentationTag5) Enum() *Metrics1ProtoRepresentationTag5 {
	p := new(Metrics1ProtoRepresentationTag5)
	*p = x
	return p
}

func (x Metrics1ProtoRepresentationTag5) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoRepresentationTag5) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[6].Descriptor()
}

func (Metrics1ProtoRepresentationTag5) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[6]
}

func (x Metrics1ProtoRepresentationTag5) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoRepresentationTag5.Descriptor instead.
func (Metrics1ProtoRepresentationTag5) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{6}
}

type Metrics1ProtoAggregationType int32

const (
	Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_UNSPECIFIED Metrics1ProtoAggregationType = 0
	Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_SUM         Metrics1ProtoAggregationType = 1
	Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_SKETCH      Metrics1ProtoAggregationType = 2
	Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_GAUGE_FIRST Metrics1ProtoAggregationType = 3
	Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_GAUGE_LAST  Metrics1ProtoAggregationType = 4
	Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_MAX         Metrics1ProtoAggregationType = 5
	Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_MIN         Metrics1ProtoAggregationType = 6
)

// Enum value maps for Metrics1ProtoAggregationType.
var (
	Metrics1ProtoAggregationType_name = map[int32]string{
		0: "METRICS1_PROTO_AGGREGATION_TYPE_UNSPECIFIED",
		1: "METRICS1_PROTO_AGGREGATION_TYPE_SUM",
		2: "METRICS1_PROTO_AGGREGATION_TYPE_SKETCH",
		3: "METRICS1_PROTO_AGGREGATION_TYPE_GAUGE_FIRST",
		4: "METRICS1_PROTO_AGGREGATION_TYPE_GAUGE_LAST",
		5: "METRICS1_PROTO_AGGREGATION_TYPE_MAX",
		6: "METRICS1_PROTO_AGGREGATION_TYPE_MIN",
	}
	Metrics1ProtoAggregationType_value = map[string]int32{
		"METRICS1_PROTO_AGGREGATION_TYPE_UNSPECIFIED": 0,
		"METRICS1_PROTO_AGGREGATION_TYPE_SUM":         1,
		"METRICS1_PROTO_AGGREGATION_TYPE_SKETCH":      2,
		"METRICS1_PROTO_AGGREGATION_TYPE_GAUGE_FIRST": 3,
		"METRICS1_PROTO_AGGREGATION_TYPE_GAUGE_LAST":  4,
		"METRICS1_PROTO_AGGREGATION_TYPE_MAX":         5,
		"METRICS1_PROTO_AGGREGATION_TYPE_MIN":         6,
	}
)

func (x Metrics1ProtoAggregationType) Enum() *Metrics1ProtoAggregationType {
	p := new(Metrics1ProtoAggregationType)
	*p = x
	return p
}

func (x Metrics1ProtoAggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metrics1ProtoAggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[7].Descriptor()
}

func (Metrics1ProtoAggregationType) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[7]
}

func (x Metrics1ProtoAggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metrics1ProtoAggregationType.Descriptor instead.
func (Metrics1ProtoAggregationType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{7}
}

type MetricBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MetricBatch) Reset() {
	*x = MetricBatch{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricBatch) ProtoMessage() {}

func (x *MetricBatch) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricBatch.ProtoReflect.Descriptor instead.
func (*MetricBatch) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MetricBatch) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type SketchMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Statistics *MetricStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *SketchMetric) Reset() {
	*x = SketchMetric{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SketchMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SketchMetric) ProtoMessage() {}

func (x *SketchMetric) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SketchMetric.ProtoReflect.Descriptor instead.
func (*SketchMetric) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *SketchMetric) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SketchMetric) GetStatistics() *MetricStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type NumericMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NumericMetric) Reset() {
	*x = NumericMetric{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericMetric) ProtoMessage() {}

func (x *NumericMetric) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericMetric.ProtoReflect.Descriptor instead.
func (*NumericMetric) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *NumericMetric) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional because we may not have an id when we're doing the initial publish
	Id            *int64                               `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	EnvironmentId string                               `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId  string                               `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	ObservedAt    *timestamppb.Timestamp               `protobuf:"bytes,4,opt,name=observed_at,json=observedAt,proto3" json:"observed_at,omitempty"`
	Namespace     Metrics1ProtoRepresentationNamespace `protobuf:"varint,5,opt,name=namespace,proto3,enum=chalk.metrics.v1.Metrics1ProtoRepresentationNamespace" json:"namespace,omitempty"`
	MetricName    Metrics1ProtoRepresentationName      `protobuf:"varint,6,opt,name=metric_name,json=metricName,proto3,enum=chalk.metrics.v1.Metrics1ProtoRepresentationName" json:"metric_name,omitempty"`
	Source        string                               `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	OperationId   *string                              `protobuf:"bytes,8,opt,name=operation_id,json=operationId,proto3,oneof" json:"operation_id,omitempty"`
	ResourceGroup *string                              `protobuf:"bytes,9,opt,name=resource_group,json=resourceGroup,proto3,oneof" json:"resource_group,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Metric_Sketch
	//	*Metric_Numeric
	Value           isMetric_Value                   `protobuf_oneof:"value"`
	Tag1            *Metrics1ProtoRepresentationTag1 `protobuf:"varint,12,opt,name=tag1,proto3,enum=chalk.metrics.v1.Metrics1ProtoRepresentationTag1,oneof" json:"tag1,omitempty"`
	Tag2            *Metrics1ProtoRepresentationTag2 `protobuf:"varint,13,opt,name=tag2,proto3,enum=chalk.metrics.v1.Metrics1ProtoRepresentationTag2,oneof" json:"tag2,omitempty"`
	Tag3            *Metrics1ProtoRepresentationTag3 `protobuf:"varint,14,opt,name=tag3,proto3,enum=chalk.metrics.v1.Metrics1ProtoRepresentationTag3,oneof" json:"tag3,omitempty"`
	Tag4            *Metrics1ProtoRepresentationTag4 `protobuf:"varint,15,opt,name=tag4,proto3,enum=chalk.metrics.v1.Metrics1ProtoRepresentationTag4,oneof" json:"tag4,omitempty"`
	Tag5            *Metrics1ProtoRepresentationTag5 `protobuf:"varint,16,opt,name=tag5,proto3,enum=chalk.metrics.v1.Metrics1ProtoRepresentationTag5,oneof" json:"tag5,omitempty"`
	AggregationType *Metrics1ProtoAggregationType    `protobuf:"varint,17,opt,name=aggregation_type,json=aggregationType,proto3,enum=chalk.metrics.v1.Metrics1ProtoAggregationType,oneof" json:"aggregation_type,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *Metric) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Metric) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Metric) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *Metric) GetObservedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObservedAt
	}
	return nil
}

func (x *Metric) GetNamespace() Metrics1ProtoRepresentationNamespace {
	if x != nil {
		return x.Namespace
	}
	return Metrics1ProtoRepresentationNamespace_METRICS1_PROTO_REPRESENTATION_NAMESPACE_UNSPECIFIED
}

func (x *Metric) GetMetricName() Metrics1ProtoRepresentationName {
	if x != nil {
		return x.MetricName
	}
	return Metrics1ProtoRepresentationName_METRICS1_PROTO_REPRESENTATION_NAME_UNSPECIFIED
}

func (x *Metric) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Metric) GetOperationId() string {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return ""
}

func (x *Metric) GetResourceGroup() string {
	if x != nil && x.ResourceGroup != nil {
		return *x.ResourceGroup
	}
	return ""
}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Metric) GetSketch() *SketchMetric {
	if x, ok := x.GetValue().(*Metric_Sketch); ok {
		return x.Sketch
	}
	return nil
}

func (x *Metric) GetNumeric() *NumericMetric {
	if x, ok := x.GetValue().(*Metric_Numeric); ok {
		return x.Numeric
	}
	return nil
}

func (x *Metric) GetTag1() Metrics1ProtoRepresentationTag1 {
	if x != nil && x.Tag1 != nil {
		return *x.Tag1
	}
	return Metrics1ProtoRepresentationTag1_METRICS1_PROTO_REPRESENTATION_TAG1_UNSPECIFIED
}

func (x *Metric) GetTag2() Metrics1ProtoRepresentationTag2 {
	if x != nil && x.Tag2 != nil {
		return *x.Tag2
	}
	return Metrics1ProtoRepresentationTag2_METRICS1_PROTO_REPRESENTATION_TAG2_UNSPECIFIED
}

func (x *Metric) GetTag3() Metrics1ProtoRepresentationTag3 {
	if x != nil && x.Tag3 != nil {
		return *x.Tag3
	}
	return Metrics1ProtoRepresentationTag3_METRICS1_PROTO_REPRESENTATION_TAG3_UNSPECIFIED
}

func (x *Metric) GetTag4() Metrics1ProtoRepresentationTag4 {
	if x != nil && x.Tag4 != nil {
		return *x.Tag4
	}
	return Metrics1ProtoRepresentationTag4_METRICS1_PROTO_REPRESENTATION_TAG4_UNSPECIFIED
}

func (x *Metric) GetTag5() Metrics1ProtoRepresentationTag5 {
	if x != nil && x.Tag5 != nil {
		return *x.Tag5
	}
	return Metrics1ProtoRepresentationTag5_METRICS1_PROTO_REPRESENTATION_TAG5_UNSPECIFIED
}

func (x *Metric) GetAggregationType() Metrics1ProtoAggregationType {
	if x != nil && x.AggregationType != nil {
		return *x.AggregationType
	}
	return Metrics1ProtoAggregationType_METRICS1_PROTO_AGGREGATION_TYPE_UNSPECIFIED
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_Sketch struct {
	Sketch *SketchMetric `protobuf:"bytes,10,opt,name=sketch,proto3,oneof"`
}

type Metric_Numeric struct {
	Numeric *NumericMetric `protobuf:"bytes,11,opt,name=numeric,proto3,oneof"`
}

func (*Metric_Sketch) isMetric_Value() {}

func (*Metric_Numeric) isMetric_Value() {}

type MetricStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min       float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max       float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
	Count     uint64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	NullCount uint64  `protobuf:"varint,4,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
	Mean      float64 `protobuf:"fixed64,5,opt,name=mean,proto3" json:"mean,omitempty"`
	Variance  float64 `protobuf:"fixed64,6,opt,name=variance,proto3" json:"variance,omitempty"`
}

func (x *MetricStatistics) Reset() {
	*x = MetricStatistics{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricStatistics) ProtoMessage() {}

func (x *MetricStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricStatistics.ProtoReflect.Descriptor instead.
func (*MetricStatistics) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *MetricStatistics) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MetricStatistics) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MetricStatistics) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MetricStatistics) GetNullCount() uint64 {
	if x != nil {
		return x.NullCount
	}
	return 0
}

func (x *MetricStatistics) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *MetricStatistics) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

var File_chalk_metrics_v1_metrics_proto protoreflect.FileDescriptor

var file_chalk_metrics_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x68, 0x0a, 0x0c, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0x25, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x09, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x54, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
	0x12, 0x3b, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x4a, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x31, 0x48, 0x04,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x32, 0x48, 0x05, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x32, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x33, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x33, 0x48, 0x06, 0x52, 0x04, 0x74, 0x61, 0x67, 0x33, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x34, 0x48, 0x07, 0x52, 0x04, 0x74, 0x61, 0x67, 0x34, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x35, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x35, 0x48, 0x08,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x35, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x10, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x61, 0x67, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x32, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x33, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67,
	0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x35, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2a, 0x91, 0x04,
	0x0a, 0x24, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x33, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x34, 0x0a, 0x30, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c,
	0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53,
	0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x31, 0x0a,
	0x2d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04,
	0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x10, 0x05, 0x12, 0x42, 0x0a, 0x3e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x10, 0x07, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x08, 0x2a, 0x82, 0x0d, 0x0a, 0x1f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53,
	0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x12,
	0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x10,
	0x04, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x38, 0x0a, 0x34, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12, 0x37, 0x0a, 0x33, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x08, 0x12, 0x31,
	0x0a, 0x2d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x09, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x43, 0x0a, 0x3f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x36, 0x0a, 0x32, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x0c, 0x12, 0x3e, 0x0a, 0x3a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x0d, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x54,
	0x49, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x36, 0x0a, 0x32, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x0f, 0x12, 0x37, 0x0a, 0x33, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x58, 0x10, 0x11, 0x12, 0x2d, 0x0a, 0x29, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x58, 0x10, 0x12, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x54, 0x5f, 0x41, 0x47, 0x47, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x13, 0x12,
	0x2b, 0x0a, 0x27, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x14, 0x12, 0x31, 0x0a, 0x2d,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x15, 0x12,
	0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10, 0x16,
	0x12, 0x35, 0x0a, 0x31, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x17, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x4f,
	0x57, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x18, 0x12, 0x2c, 0x0a, 0x28,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52,
	0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x19, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x1a, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x10, 0x1b, 0x12, 0x3b, 0x0a, 0x37, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x55,
	0x4e, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x1c, 0x12, 0x41, 0x0a, 0x3d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4c, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x55,
	0x4e, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x41,
	0x47, 0x45, 0x10, 0x1d, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x45,
	0x44, 0x5f, 0x55, 0x50, 0x10, 0x1e, 0x2a, 0xe5, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x31, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x31,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x47, 0x31, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x2e,
	0x0a, 0x2a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x47, 0x31, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x2e,
	0x0a, 0x2a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x47, 0x31, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xba,
	0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x67, 0x32, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x32, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x32, 0x5f, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x32, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x02, 0x2a, 0xe3, 0x01, 0x0a, 0x1f,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x33, 0x12,
	0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x47, 0x33, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x33, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x33, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x33, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10,
	0x03, 0x2a, 0xab, 0x05, 0x0a, 0x1f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x34, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53,
	0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f,
	0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47,
	0x34, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x4d,
	0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x38, 0x0a, 0x34, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34,
	0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x39, 0x0a, 0x35, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x10,
	0x07, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x08, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x09, 0x12,
	0x39, 0x0a, 0x35, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x0a, 0x12, 0x43, 0x0a, 0x3f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x34,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x0b, 0x2a,
	0xb6, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x35, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x35, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x35, 0x5f, 0x49, 0x53,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x35, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0xd7, 0x02, 0x0a, 0x1c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55,
	0x4d, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x45, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12,
	0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x55, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x31, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x06, 0x42, 0xc3, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69,
	0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x4d, 0x58, 0xaa, 0x02,
	0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_metrics_v1_metrics_proto_rawDescOnce sync.Once
	file_chalk_metrics_v1_metrics_proto_rawDescData = file_chalk_metrics_v1_metrics_proto_rawDesc
)

func file_chalk_metrics_v1_metrics_proto_rawDescGZIP() []byte {
	file_chalk_metrics_v1_metrics_proto_rawDescOnce.Do(func() {
		file_chalk_metrics_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_metrics_v1_metrics_proto_rawDescData)
	})
	return file_chalk_metrics_v1_metrics_proto_rawDescData
}

var file_chalk_metrics_v1_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_chalk_metrics_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chalk_metrics_v1_metrics_proto_goTypes = []any{
	(Metrics1ProtoRepresentationNamespace)(0), // 0: chalk.metrics.v1.Metrics1ProtoRepresentationNamespace
	(Metrics1ProtoRepresentationName)(0),      // 1: chalk.metrics.v1.Metrics1ProtoRepresentationName
	(Metrics1ProtoRepresentationTag1)(0),      // 2: chalk.metrics.v1.Metrics1ProtoRepresentationTag1
	(Metrics1ProtoRepresentationTag2)(0),      // 3: chalk.metrics.v1.Metrics1ProtoRepresentationTag2
	(Metrics1ProtoRepresentationTag3)(0),      // 4: chalk.metrics.v1.Metrics1ProtoRepresentationTag3
	(Metrics1ProtoRepresentationTag4)(0),      // 5: chalk.metrics.v1.Metrics1ProtoRepresentationTag4
	(Metrics1ProtoRepresentationTag5)(0),      // 6: chalk.metrics.v1.Metrics1ProtoRepresentationTag5
	(Metrics1ProtoAggregationType)(0),         // 7: chalk.metrics.v1.Metrics1ProtoAggregationType
	(*MetricBatch)(nil),                       // 8: chalk.metrics.v1.MetricBatch
	(*SketchMetric)(nil),                      // 9: chalk.metrics.v1.SketchMetric
	(*NumericMetric)(nil),                     // 10: chalk.metrics.v1.NumericMetric
	(*Metric)(nil),                            // 11: chalk.metrics.v1.Metric
	(*MetricStatistics)(nil),                  // 12: chalk.metrics.v1.MetricStatistics
	(*timestamppb.Timestamp)(nil),             // 13: google.protobuf.Timestamp
}
var file_chalk_metrics_v1_metrics_proto_depIdxs = []int32{
	11, // 0: chalk.metrics.v1.MetricBatch.metrics:type_name -> chalk.metrics.v1.Metric
	12, // 1: chalk.metrics.v1.SketchMetric.statistics:type_name -> chalk.metrics.v1.MetricStatistics
	13, // 2: chalk.metrics.v1.Metric.observed_at:type_name -> google.protobuf.Timestamp
	0,  // 3: chalk.metrics.v1.Metric.namespace:type_name -> chalk.metrics.v1.Metrics1ProtoRepresentationNamespace
	1,  // 4: chalk.metrics.v1.Metric.metric_name:type_name -> chalk.metrics.v1.Metrics1ProtoRepresentationName
	9,  // 5: chalk.metrics.v1.Metric.sketch:type_name -> chalk.metrics.v1.SketchMetric
	10, // 6: chalk.metrics.v1.Metric.numeric:type_name -> chalk.metrics.v1.NumericMetric
	2,  // 7: chalk.metrics.v1.Metric.tag1:type_name -> chalk.metrics.v1.Metrics1ProtoRepresentationTag1
	3,  // 8: chalk.metrics.v1.Metric.tag2:type_name -> chalk.metrics.v1.Metrics1ProtoRepresentationTag2
	4,  // 9: chalk.metrics.v1.Metric.tag3:type_name -> chalk.metrics.v1.Metrics1ProtoRepresentationTag3
	5,  // 10: chalk.metrics.v1.Metric.tag4:type_name -> chalk.metrics.v1.Metrics1ProtoRepresentationTag4
	6,  // 11: chalk.metrics.v1.Metric.tag5:type_name -> chalk.metrics.v1.Metrics1ProtoRepresentationTag5
	7,  // 12: chalk.metrics.v1.Metric.aggregation_type:type_name -> chalk.metrics.v1.Metrics1ProtoAggregationType
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_chalk_metrics_v1_metrics_proto_init() }
func file_chalk_metrics_v1_metrics_proto_init() {
	if File_chalk_metrics_v1_metrics_proto != nil {
		return
	}
	file_chalk_metrics_v1_metrics_proto_msgTypes[3].OneofWrappers = []any{
		(*Metric_Sketch)(nil),
		(*Metric_Numeric)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_metrics_v1_metrics_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_metrics_v1_metrics_proto_goTypes,
		DependencyIndexes: file_chalk_metrics_v1_metrics_proto_depIdxs,
		EnumInfos:         file_chalk_metrics_v1_metrics_proto_enumTypes,
		MessageInfos:      file_chalk_metrics_v1_metrics_proto_msgTypes,
	}.Build()
	File_chalk_metrics_v1_metrics_proto = out.File
	file_chalk_metrics_v1_metrics_proto_rawDesc = nil
	file_chalk_metrics_v1_metrics_proto_goTypes = nil
	file_chalk_metrics_v1_metrics_proto_depIdxs = nil
}
