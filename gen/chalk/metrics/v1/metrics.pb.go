// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/metrics/v1/metrics.proto

package metricsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricNamespace int32

const (
	MetricNamespace_METRIC_NAMESPACE_UNSPECIFIED            MetricNamespace = 0
	MetricNamespace_METRIC_NAMESPACE_RESOLVER               MetricNamespace = 1
	MetricNamespace_METRIC_NAMESPACE_FEATURE                MetricNamespace = 2
	MetricNamespace_METRIC_NAMESPACE_QUERY                  MetricNamespace = 3
	MetricNamespace_METRIC_NAMESPACE_BATCH                  MetricNamespace = 4
	MetricNamespace_METRIC_NAMESPACE_STREAM                 MetricNamespace = 5
	MetricNamespace_METRIC_NAMESPACE_STORAGE_INFRASTRUCTURE MetricNamespace = 6
	MetricNamespace_METRIC_NAMESPACE_POD                    MetricNamespace = 7
)

// Enum value maps for MetricNamespace.
var (
	MetricNamespace_name = map[int32]string{
		0: "METRIC_NAMESPACE_UNSPECIFIED",
		1: "METRIC_NAMESPACE_RESOLVER",
		2: "METRIC_NAMESPACE_FEATURE",
		3: "METRIC_NAMESPACE_QUERY",
		4: "METRIC_NAMESPACE_BATCH",
		5: "METRIC_NAMESPACE_STREAM",
		6: "METRIC_NAMESPACE_STORAGE_INFRASTRUCTURE",
		7: "METRIC_NAMESPACE_POD",
	}
	MetricNamespace_value = map[string]int32{
		"METRIC_NAMESPACE_UNSPECIFIED":            0,
		"METRIC_NAMESPACE_RESOLVER":               1,
		"METRIC_NAMESPACE_FEATURE":                2,
		"METRIC_NAMESPACE_QUERY":                  3,
		"METRIC_NAMESPACE_BATCH":                  4,
		"METRIC_NAMESPACE_STREAM":                 5,
		"METRIC_NAMESPACE_STORAGE_INFRASTRUCTURE": 6,
		"METRIC_NAMESPACE_POD":                    7,
	}
)

func (x MetricNamespace) Enum() *MetricNamespace {
	p := new(MetricNamespace)
	*p = x
	return p
}

func (x MetricNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[0].Descriptor()
}

func (MetricNamespace) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[0]
}

func (x MetricNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricNamespace.Descriptor instead.
func (MetricNamespace) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

type MetricName int32

const (
	MetricName_METRIC_NAME_UNSPECIFIED                  MetricName = 0
	MetricName_METRIC_NAME_LATENCY                      MetricName = 1
	MetricName_METRIC_NAME_REQUEST                      MetricName = 2
	MetricName_METRIC_NAME_FEATURE_VALUE                MetricName = 3
	MetricName_METRIC_NAME_STALENESS                    MetricName = 4
	MetricName_METRIC_NAME_WRITE                        MetricName = 5
	MetricName_METRIC_NAME_MESSAGE_PROCESSED            MetricName = 6
	MetricName_METRIC_NAME_WINDOW_PROCESSED             MetricName = 7
	MetricName_METRIC_NAME_LAG                          MetricName = 8
	MetricName_METRIC_NAME_QUEUE_SIZE                   MetricName = 9
	MetricName_METRIC_NAME_MEMORY_BYTES                 MetricName = 10
	MetricName_METRIC_NAME_TOTAL_AVAILABLE_MEMORY_BYTES MetricName = 11
	MetricName_METRIC_NAME_CACHE_KEY_COUNT              MetricName = 12
	MetricName_METRIC_NAME_CACHE_EXPIRED_KEY_COUNT      MetricName = 13
	MetricName_METRIC_NAME_CPU_UTILIZATION              MetricName = 14
	MetricName_METRIC_NAME_DISK_READ_BYTES              MetricName = 15
	MetricName_METRIC_NAME_DISK_WRITE_BYTES             MetricName = 16
	MetricName_METRIC_NAME_NET_RX                       MetricName = 17
	MetricName_METRIC_NAME_NET_TX                       MetricName = 18
)

// Enum value maps for MetricName.
var (
	MetricName_name = map[int32]string{
		0:  "METRIC_NAME_UNSPECIFIED",
		1:  "METRIC_NAME_LATENCY",
		2:  "METRIC_NAME_REQUEST",
		3:  "METRIC_NAME_FEATURE_VALUE",
		4:  "METRIC_NAME_STALENESS",
		5:  "METRIC_NAME_WRITE",
		6:  "METRIC_NAME_MESSAGE_PROCESSED",
		7:  "METRIC_NAME_WINDOW_PROCESSED",
		8:  "METRIC_NAME_LAG",
		9:  "METRIC_NAME_QUEUE_SIZE",
		10: "METRIC_NAME_MEMORY_BYTES",
		11: "METRIC_NAME_TOTAL_AVAILABLE_MEMORY_BYTES",
		12: "METRIC_NAME_CACHE_KEY_COUNT",
		13: "METRIC_NAME_CACHE_EXPIRED_KEY_COUNT",
		14: "METRIC_NAME_CPU_UTILIZATION",
		15: "METRIC_NAME_DISK_READ_BYTES",
		16: "METRIC_NAME_DISK_WRITE_BYTES",
		17: "METRIC_NAME_NET_RX",
		18: "METRIC_NAME_NET_TX",
	}
	MetricName_value = map[string]int32{
		"METRIC_NAME_UNSPECIFIED":                  0,
		"METRIC_NAME_LATENCY":                      1,
		"METRIC_NAME_REQUEST":                      2,
		"METRIC_NAME_FEATURE_VALUE":                3,
		"METRIC_NAME_STALENESS":                    4,
		"METRIC_NAME_WRITE":                        5,
		"METRIC_NAME_MESSAGE_PROCESSED":            6,
		"METRIC_NAME_WINDOW_PROCESSED":             7,
		"METRIC_NAME_LAG":                          8,
		"METRIC_NAME_QUEUE_SIZE":                   9,
		"METRIC_NAME_MEMORY_BYTES":                 10,
		"METRIC_NAME_TOTAL_AVAILABLE_MEMORY_BYTES": 11,
		"METRIC_NAME_CACHE_KEY_COUNT":              12,
		"METRIC_NAME_CACHE_EXPIRED_KEY_COUNT":      13,
		"METRIC_NAME_CPU_UTILIZATION":              14,
		"METRIC_NAME_DISK_READ_BYTES":              15,
		"METRIC_NAME_DISK_WRITE_BYTES":             16,
		"METRIC_NAME_NET_RX":                       17,
		"METRIC_NAME_NET_TX":                       18,
	}
)

func (x MetricName) Enum() *MetricName {
	p := new(MetricName)
	*p = x
	return p
}

func (x MetricName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricName) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[1].Descriptor()
}

func (MetricName) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[1]
}

func (x MetricName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricName.Descriptor instead.
func (MetricName) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

type Tag1 int32

const (
	Tag1_TAG1_UNSPECIFIED Tag1 = 0
	Tag1_TAG1_FAILURE     Tag1 = 1
	Tag1_TAG1_SUCCESS     Tag1 = 2
	Tag1_TAG1_WORKING     Tag1 = 3
)

// Enum value maps for Tag1.
var (
	Tag1_name = map[int32]string{
		0: "TAG1_UNSPECIFIED",
		1: "TAG1_FAILURE",
		2: "TAG1_SUCCESS",
		3: "TAG1_WORKING",
	}
	Tag1_value = map[string]int32{
		"TAG1_UNSPECIFIED": 0,
		"TAG1_FAILURE":     1,
		"TAG1_SUCCESS":     2,
		"TAG1_WORKING":     3,
	}
)

func (x Tag1) Enum() *Tag1 {
	p := new(Tag1)
	*p = x
	return p
}

func (x Tag1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tag1) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[2].Descriptor()
}

func (Tag1) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[2]
}

func (x Tag1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tag1.Descriptor instead.
func (Tag1) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

type Tag2 int32

const (
	Tag2_TAG2_UNSPECIFIED Tag2 = 0
	Tag2_TAG2_CACHE_MISS  Tag2 = 1
	Tag2_TAG2_CACHE_HIT   Tag2 = 2
)

// Enum value maps for Tag2.
var (
	Tag2_name = map[int32]string{
		0: "TAG2_UNSPECIFIED",
		1: "TAG2_CACHE_MISS",
		2: "TAG2_CACHE_HIT",
	}
	Tag2_value = map[string]int32{
		"TAG2_UNSPECIFIED": 0,
		"TAG2_CACHE_MISS":  1,
		"TAG2_CACHE_HIT":   2,
	}
)

func (x Tag2) Enum() *Tag2 {
	p := new(Tag2)
	*p = x
	return p
}

func (x Tag2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tag2) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[3].Descriptor()
}

func (Tag2) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[3]
}

func (x Tag2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tag2.Descriptor instead.
func (Tag2) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{3}
}

type Tag3 int32

const (
	Tag3_TAG3_UNSPECIFIED Tag3 = 0
	Tag3_TAG3_OFFLINE     Tag3 = 1
	Tag3_TAG3_ONLINE      Tag3 = 2
	Tag3_TAG3_STREAM      Tag3 = 3
)

// Enum value maps for Tag3.
var (
	Tag3_name = map[int32]string{
		0: "TAG3_UNSPECIFIED",
		1: "TAG3_OFFLINE",
		2: "TAG3_ONLINE",
		3: "TAG3_STREAM",
	}
	Tag3_value = map[string]int32{
		"TAG3_UNSPECIFIED": 0,
		"TAG3_OFFLINE":     1,
		"TAG3_ONLINE":      2,
		"TAG3_STREAM":      3,
	}
)

func (x Tag3) Enum() *Tag3 {
	p := new(Tag3)
	*p = x
	return p
}

func (x Tag3) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tag3) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[4].Descriptor()
}

func (Tag3) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[4]
}

func (x Tag3) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tag3.Descriptor instead.
func (Tag3) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{4}
}

type Tag4 int32

const (
	Tag4_TAG4_UNSPECIFIED        Tag4 = 0
	Tag4_TAG4_INFERENCE          Tag4 = 1
	Tag4_TAG4_CRON               Tag4 = 2
	Tag4_TAG4_MIGRATION          Tag4 = 3
	Tag4_TAG4_MIGRATION_SAMPLER  Tag4 = 4
	Tag4_TAG4_STREAMING          Tag4 = 5
	Tag4_TAG4_WINDOWED_STREAMING Tag4 = 6
	Tag4_TAG4_DATASET            Tag4 = 7
	Tag4_TAG4_OFFLINE_QUERY      Tag4 = 8
)

// Enum value maps for Tag4.
var (
	Tag4_name = map[int32]string{
		0: "TAG4_UNSPECIFIED",
		1: "TAG4_INFERENCE",
		2: "TAG4_CRON",
		3: "TAG4_MIGRATION",
		4: "TAG4_MIGRATION_SAMPLER",
		5: "TAG4_STREAMING",
		6: "TAG4_WINDOWED_STREAMING",
		7: "TAG4_DATASET",
		8: "TAG4_OFFLINE_QUERY",
	}
	Tag4_value = map[string]int32{
		"TAG4_UNSPECIFIED":        0,
		"TAG4_INFERENCE":          1,
		"TAG4_CRON":               2,
		"TAG4_MIGRATION":          3,
		"TAG4_MIGRATION_SAMPLER":  4,
		"TAG4_STREAMING":          5,
		"TAG4_WINDOWED_STREAMING": 6,
		"TAG4_DATASET":            7,
		"TAG4_OFFLINE_QUERY":      8,
	}
)

func (x Tag4) Enum() *Tag4 {
	p := new(Tag4)
	*p = x
	return p
}

func (x Tag4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tag4) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[5].Descriptor()
}

func (Tag4) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[5]
}

func (x Tag4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tag4.Descriptor instead.
func (Tag4) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{5}
}

type Tag5 int32

const (
	Tag5_TAG5_UNSPECIFIED Tag5 = 0
	Tag5_TAG5_IS_NULL     Tag5 = 1
	Tag5_TAG5_NON_NULL    Tag5 = 2
)

// Enum value maps for Tag5.
var (
	Tag5_name = map[int32]string{
		0: "TAG5_UNSPECIFIED",
		1: "TAG5_IS_NULL",
		2: "TAG5_NON_NULL",
	}
	Tag5_value = map[string]int32{
		"TAG5_UNSPECIFIED": 0,
		"TAG5_IS_NULL":     1,
		"TAG5_NON_NULL":    2,
	}
)

func (x Tag5) Enum() *Tag5 {
	p := new(Tag5)
	*p = x
	return p
}

func (x Tag5) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tag5) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v1_metrics_proto_enumTypes[6].Descriptor()
}

func (Tag5) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v1_metrics_proto_enumTypes[6]
}

func (x Tag5) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tag5.Descriptor instead.
func (Tag5) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{6}
}

type MetricBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MetricBatch) Reset() {
	*x = MetricBatch{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricBatch) ProtoMessage() {}

func (x *MetricBatch) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricBatch.ProtoReflect.Descriptor instead.
func (*MetricBatch) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MetricBatch) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional because we may not have an id when we're doing the initial publish
	Id            *int64                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	EnvironmentId string                 `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId  string                 `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	ObservedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=observed_at,json=observedAt,proto3" json:"observed_at,omitempty"`
	Namespace     MetricNamespace        `protobuf:"varint,5,opt,name=namespace,proto3,enum=chalk.metrics.v1.MetricNamespace" json:"namespace,omitempty"`
	MetricName    MetricName             `protobuf:"varint,6,opt,name=metric_name,json=metricName,proto3,enum=chalk.metrics.v1.MetricName" json:"metric_name,omitempty"`
	Source        string                 `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	OperationId   *string                `protobuf:"bytes,8,opt,name=operation_id,json=operationId,proto3,oneof" json:"operation_id,omitempty"`
	ResourceGroup *string                `protobuf:"bytes,9,opt,name=resource_group,json=resourceGroup,proto3,oneof" json:"resource_group,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Metric_Sketch
	//	*Metric_Numeric
	Value      isMetric_Value    `protobuf_oneof:"value"`
	Statistics *MetricStatistics `protobuf:"bytes,12,opt,name=statistics,proto3,oneof" json:"statistics,omitempty"`
	Tag1       *Tag1             `protobuf:"varint,13,opt,name=tag1,proto3,enum=chalk.metrics.v1.Tag1,oneof" json:"tag1,omitempty"`
	Tag2       *Tag2             `protobuf:"varint,14,opt,name=tag2,proto3,enum=chalk.metrics.v1.Tag2,oneof" json:"tag2,omitempty"`
	Tag3       *Tag3             `protobuf:"varint,15,opt,name=tag3,proto3,enum=chalk.metrics.v1.Tag3,oneof" json:"tag3,omitempty"`
	Tag4       *Tag4             `protobuf:"varint,16,opt,name=tag4,proto3,enum=chalk.metrics.v1.Tag4,oneof" json:"tag4,omitempty"`
	Tag5       *Tag5             `protobuf:"varint,17,opt,name=tag5,proto3,enum=chalk.metrics.v1.Tag5,oneof" json:"tag5,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *Metric) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Metric) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Metric) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *Metric) GetObservedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObservedAt
	}
	return nil
}

func (x *Metric) GetNamespace() MetricNamespace {
	if x != nil {
		return x.Namespace
	}
	return MetricNamespace_METRIC_NAMESPACE_UNSPECIFIED
}

func (x *Metric) GetMetricName() MetricName {
	if x != nil {
		return x.MetricName
	}
	return MetricName_METRIC_NAME_UNSPECIFIED
}

func (x *Metric) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Metric) GetOperationId() string {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return ""
}

func (x *Metric) GetResourceGroup() string {
	if x != nil && x.ResourceGroup != nil {
		return *x.ResourceGroup
	}
	return ""
}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Metric) GetSketch() string {
	if x, ok := x.GetValue().(*Metric_Sketch); ok {
		return x.Sketch
	}
	return ""
}

func (x *Metric) GetNumeric() float64 {
	if x, ok := x.GetValue().(*Metric_Numeric); ok {
		return x.Numeric
	}
	return 0
}

func (x *Metric) GetStatistics() *MetricStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Metric) GetTag1() Tag1 {
	if x != nil && x.Tag1 != nil {
		return *x.Tag1
	}
	return Tag1_TAG1_UNSPECIFIED
}

func (x *Metric) GetTag2() Tag2 {
	if x != nil && x.Tag2 != nil {
		return *x.Tag2
	}
	return Tag2_TAG2_UNSPECIFIED
}

func (x *Metric) GetTag3() Tag3 {
	if x != nil && x.Tag3 != nil {
		return *x.Tag3
	}
	return Tag3_TAG3_UNSPECIFIED
}

func (x *Metric) GetTag4() Tag4 {
	if x != nil && x.Tag4 != nil {
		return *x.Tag4
	}
	return Tag4_TAG4_UNSPECIFIED
}

func (x *Metric) GetTag5() Tag5 {
	if x != nil && x.Tag5 != nil {
		return *x.Tag5
	}
	return Tag5_TAG5_UNSPECIFIED
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_Sketch struct {
	Sketch string `protobuf:"bytes,10,opt,name=sketch,proto3,oneof"`
}

type Metric_Numeric struct {
	Numeric float64 `protobuf:"fixed64,11,opt,name=numeric,proto3,oneof"`
}

func (*Metric_Sketch) isMetric_Value() {}

func (*Metric_Numeric) isMetric_Value() {}

type MetricStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min       *float64 `protobuf:"fixed64,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max       *float64 `protobuf:"fixed64,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	Count     *uint64  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	NullCount *uint64  `protobuf:"varint,4,opt,name=null_count,json=nullCount,proto3,oneof" json:"null_count,omitempty"`
	Mean      *float64 `protobuf:"fixed64,5,opt,name=mean,proto3,oneof" json:"mean,omitempty"`
	Variance  *float64 `protobuf:"fixed64,6,opt,name=variance,proto3,oneof" json:"variance,omitempty"`
}

func (x *MetricStatistics) Reset() {
	*x = MetricStatistics{}
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricStatistics) ProtoMessage() {}

func (x *MetricStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v1_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricStatistics.ProtoReflect.Descriptor instead.
func (*MetricStatistics) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *MetricStatistics) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *MetricStatistics) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *MetricStatistics) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MetricStatistics) GetNullCount() uint64 {
	if x != nil && x.NullCount != nil {
		return *x.NullCount
	}
	return 0
}

func (x *MetricStatistics) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *MetricStatistics) GetVariance() float64 {
	if x != nil && x.Variance != nil {
		return *x.Variance
	}
	return 0
}

var File_chalk_metrics_v1_metrics_proto protoreflect.FileDescriptor

var file_chalk_metrics_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xf6, 0x06, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x6b, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x31,
	0x48, 0x05, 0x52, 0x04, 0x74, 0x61, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67,
	0x32, 0x48, 0x06, 0x52, 0x04, 0x74, 0x61, 0x67, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x33, 0x48, 0x07, 0x52, 0x04, 0x74, 0x61, 0x67, 0x33, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x34, 0x48, 0x08, 0x52, 0x04, 0x74, 0x61, 0x67, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x67, 0x35, 0x48, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x35, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x61, 0x67, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x33, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x61, 0x67, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x61, 0x67, 0x35, 0x22,
	0xf8, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x04, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2a, 0x8c, 0x02, 0x0a, 0x0f, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x10, 0x07, 0x2a, 0xcc, 0x04, 0x0a, 0x0a, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x47,
	0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x09, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x4d,
	0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x58, 0x10, 0x11,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x5f, 0x54, 0x58, 0x10, 0x12, 0x2a, 0x52, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x31,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x31, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x31, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x31,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41,
	0x47, 0x31, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x32, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41,
	0x47, 0x32, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x32, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x48, 0x49,
	0x54, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x33, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x41, 0x47, 0x33, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x33, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x47, 0x33, 0x5f, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x47, 0x33, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x10, 0x03, 0x2a, 0xca, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x34, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x34, 0x5f, 0x49, 0x4e, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x47, 0x34,
	0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x34, 0x5f,
	0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x41, 0x47, 0x34, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x34, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x41, 0x47, 0x34, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x34,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41,
	0x47, 0x34, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x08, 0x2a, 0x41, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x35, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41,
	0x47, 0x35, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x35, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x47, 0x35, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x02, 0x42, 0xc3, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x3b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x4d,
	0x58, 0xaa, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chalk_metrics_v1_metrics_proto_rawDescOnce sync.Once
	file_chalk_metrics_v1_metrics_proto_rawDescData = file_chalk_metrics_v1_metrics_proto_rawDesc
)

func file_chalk_metrics_v1_metrics_proto_rawDescGZIP() []byte {
	file_chalk_metrics_v1_metrics_proto_rawDescOnce.Do(func() {
		file_chalk_metrics_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_metrics_v1_metrics_proto_rawDescData)
	})
	return file_chalk_metrics_v1_metrics_proto_rawDescData
}

var file_chalk_metrics_v1_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_chalk_metrics_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_metrics_v1_metrics_proto_goTypes = []any{
	(MetricNamespace)(0),          // 0: chalk.metrics.v1.MetricNamespace
	(MetricName)(0),               // 1: chalk.metrics.v1.MetricName
	(Tag1)(0),                     // 2: chalk.metrics.v1.Tag1
	(Tag2)(0),                     // 3: chalk.metrics.v1.Tag2
	(Tag3)(0),                     // 4: chalk.metrics.v1.Tag3
	(Tag4)(0),                     // 5: chalk.metrics.v1.Tag4
	(Tag5)(0),                     // 6: chalk.metrics.v1.Tag5
	(*MetricBatch)(nil),           // 7: chalk.metrics.v1.MetricBatch
	(*Metric)(nil),                // 8: chalk.metrics.v1.Metric
	(*MetricStatistics)(nil),      // 9: chalk.metrics.v1.MetricStatistics
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_chalk_metrics_v1_metrics_proto_depIdxs = []int32{
	8,  // 0: chalk.metrics.v1.MetricBatch.metrics:type_name -> chalk.metrics.v1.Metric
	10, // 1: chalk.metrics.v1.Metric.observed_at:type_name -> google.protobuf.Timestamp
	0,  // 2: chalk.metrics.v1.Metric.namespace:type_name -> chalk.metrics.v1.MetricNamespace
	1,  // 3: chalk.metrics.v1.Metric.metric_name:type_name -> chalk.metrics.v1.MetricName
	9,  // 4: chalk.metrics.v1.Metric.statistics:type_name -> chalk.metrics.v1.MetricStatistics
	2,  // 5: chalk.metrics.v1.Metric.tag1:type_name -> chalk.metrics.v1.Tag1
	3,  // 6: chalk.metrics.v1.Metric.tag2:type_name -> chalk.metrics.v1.Tag2
	4,  // 7: chalk.metrics.v1.Metric.tag3:type_name -> chalk.metrics.v1.Tag3
	5,  // 8: chalk.metrics.v1.Metric.tag4:type_name -> chalk.metrics.v1.Tag4
	6,  // 9: chalk.metrics.v1.Metric.tag5:type_name -> chalk.metrics.v1.Tag5
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chalk_metrics_v1_metrics_proto_init() }
func file_chalk_metrics_v1_metrics_proto_init() {
	if File_chalk_metrics_v1_metrics_proto != nil {
		return
	}
	file_chalk_metrics_v1_metrics_proto_msgTypes[1].OneofWrappers = []any{
		(*Metric_Sketch)(nil),
		(*Metric_Numeric)(nil),
	}
	file_chalk_metrics_v1_metrics_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_metrics_v1_metrics_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_metrics_v1_metrics_proto_goTypes,
		DependencyIndexes: file_chalk_metrics_v1_metrics_proto_depIdxs,
		EnumInfos:         file_chalk_metrics_v1_metrics_proto_enumTypes,
		MessageInfos:      file_chalk_metrics_v1_metrics_proto_msgTypes,
	}.Build()
	File_chalk_metrics_v1_metrics_proto = out.File
	file_chalk_metrics_v1_metrics_proto_rawDesc = nil
	file_chalk_metrics_v1_metrics_proto_goTypes = nil
	file_chalk_metrics_v1_metrics_proto_depIdxs = nil
}
