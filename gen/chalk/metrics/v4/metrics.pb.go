// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/metrics/v4/metrics.proto

package metricsv4

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_METRIC_TYPE_UNSPECIFIED     MetricType = 0
	MetricType_METRIC_TYPE_COUNTER         MetricType = 1
	MetricType_METRIC_TYPE_UP_DOWN_COUNTER MetricType = 2
	MetricType_METRIC_TYPE_HISTOGRAM       MetricType = 3
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "METRIC_TYPE_COUNTER",
		2: "METRIC_TYPE_UP_DOWN_COUNTER",
		3: "METRIC_TYPE_HISTOGRAM",
	}
	MetricType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED":     0,
		"METRIC_TYPE_COUNTER":         1,
		"METRIC_TYPE_UP_DOWN_COUNTER": 2,
		"METRIC_TYPE_HISTOGRAM":       3,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v4_metrics_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v4_metrics_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v4_metrics_proto_rawDescGZIP(), []int{0}
}

type MetricNamespace int32

const (
	MetricNamespace_METRIC_NAMESPACE_UNSPECIFIED MetricNamespace = 0
	MetricNamespace_METRIC_NAMESPACE_FEATURE     MetricNamespace = 1
	MetricNamespace_METRIC_NAMESPACE_SYSTEM      MetricNamespace = 2
)

// Enum value maps for MetricNamespace.
var (
	MetricNamespace_name = map[int32]string{
		0: "METRIC_NAMESPACE_UNSPECIFIED",
		1: "METRIC_NAMESPACE_FEATURE",
		2: "METRIC_NAMESPACE_SYSTEM",
	}
	MetricNamespace_value = map[string]int32{
		"METRIC_NAMESPACE_UNSPECIFIED": 0,
		"METRIC_NAMESPACE_FEATURE":     1,
		"METRIC_NAMESPACE_SYSTEM":      2,
	}
)

func (x MetricNamespace) Enum() *MetricNamespace {
	p := new(MetricNamespace)
	*p = x
	return p
}

func (x MetricNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v4_metrics_proto_enumTypes[1].Descriptor()
}

func (MetricNamespace) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v4_metrics_proto_enumTypes[1]
}

func (x MetricNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricNamespace.Descriptor instead.
func (MetricNamespace) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v4_metrics_proto_rawDescGZIP(), []int{1}
}

type MetricName int32

const (
	MetricName_METRIC_NAME_UNSPECIFIED               MetricName = 0
	MetricName_METRIC_NAME_DEFAULT_VALUES_USED       MetricName = 1
	MetricName_METRIC_NAME_GIVENS_VALUES_USED        MetricName = 2
	MetricName_METRIC_NAME_OFFLINE_STORE_VALUES_USED MetricName = 3
	MetricName_METRIC_NAME_ONLINE_STORE_VALUES_USED  MetricName = 4
	MetricName_METRIC_NAME_RESOLVER_VALUES_USED      MetricName = 5
	MetricName_METRIC_NAME_NULL_COUNT                MetricName = 6
	MetricName_METRIC_NAME_NON_NULL_COUNT            MetricName = 7
	MetricName_METRIC_NAME_MISSING_COUNT             MetricName = 8
	MetricName_METRIC_NAME_ZERO_COUNT                MetricName = 9
	MetricName_METRIC_NAME_VALUES_DISTRIBUTION       MetricName = 10
	MetricName_METRIC_NAME_RESOLVER_LATENCY          MetricName = 11
	MetricName_METRIC_NAME_BYTES_DOWNLOADED          MetricName = 12
	MetricName_METRIC_NAME_NUM_ROWS                  MetricName = 13
	MetricName_METRIC_NAME_NUM_FEATURES              MetricName = 14
)

// Enum value maps for MetricName.
var (
	MetricName_name = map[int32]string{
		0:  "METRIC_NAME_UNSPECIFIED",
		1:  "METRIC_NAME_DEFAULT_VALUES_USED",
		2:  "METRIC_NAME_GIVENS_VALUES_USED",
		3:  "METRIC_NAME_OFFLINE_STORE_VALUES_USED",
		4:  "METRIC_NAME_ONLINE_STORE_VALUES_USED",
		5:  "METRIC_NAME_RESOLVER_VALUES_USED",
		6:  "METRIC_NAME_NULL_COUNT",
		7:  "METRIC_NAME_NON_NULL_COUNT",
		8:  "METRIC_NAME_MISSING_COUNT",
		9:  "METRIC_NAME_ZERO_COUNT",
		10: "METRIC_NAME_VALUES_DISTRIBUTION",
		11: "METRIC_NAME_RESOLVER_LATENCY",
		12: "METRIC_NAME_BYTES_DOWNLOADED",
		13: "METRIC_NAME_NUM_ROWS",
		14: "METRIC_NAME_NUM_FEATURES",
	}
	MetricName_value = map[string]int32{
		"METRIC_NAME_UNSPECIFIED":               0,
		"METRIC_NAME_DEFAULT_VALUES_USED":       1,
		"METRIC_NAME_GIVENS_VALUES_USED":        2,
		"METRIC_NAME_OFFLINE_STORE_VALUES_USED": 3,
		"METRIC_NAME_ONLINE_STORE_VALUES_USED":  4,
		"METRIC_NAME_RESOLVER_VALUES_USED":      5,
		"METRIC_NAME_NULL_COUNT":                6,
		"METRIC_NAME_NON_NULL_COUNT":            7,
		"METRIC_NAME_MISSING_COUNT":             8,
		"METRIC_NAME_ZERO_COUNT":                9,
		"METRIC_NAME_VALUES_DISTRIBUTION":       10,
		"METRIC_NAME_RESOLVER_LATENCY":          11,
		"METRIC_NAME_BYTES_DOWNLOADED":          12,
		"METRIC_NAME_NUM_ROWS":                  13,
		"METRIC_NAME_NUM_FEATURES":              14,
	}
)

func (x MetricName) Enum() *MetricName {
	p := new(MetricName)
	*p = x
	return p
}

func (x MetricName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricName) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_metrics_v4_metrics_proto_enumTypes[2].Descriptor()
}

func (MetricName) Type() protoreflect.EnumType {
	return &file_chalk_metrics_v4_metrics_proto_enumTypes[2]
}

func (x MetricName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricName.Descriptor instead.
func (MetricName) EnumDescriptor() ([]byte, []int) {
	return file_chalk_metrics_v4_metrics_proto_rawDescGZIP(), []int{2}
}

type MetricBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metrics       []*Metric              `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricBatch) Reset() {
	*x = MetricBatch{}
	mi := &file_chalk_metrics_v4_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricBatch) ProtoMessage() {}

func (x *MetricBatch) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v4_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricBatch.ProtoReflect.Descriptor instead.
func (*MetricBatch) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v4_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *MetricBatch) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Metric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// optional because we may not have an id when we're doing the initial publish
	Id            *int64          `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	EnvironmentId string          `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Namespace     MetricNamespace `protobuf:"varint,3,opt,name=namespace,proto3,enum=chalk.metrics.v4.MetricNamespace" json:"namespace,omitempty"`
	Source        string          `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Name          MetricName      `protobuf:"varint,5,opt,name=name,proto3,enum=chalk.metrics.v4.MetricName" json:"name,omitempty"`
	Type          MetricType      `protobuf:"varint,6,opt,name=type,proto3,enum=chalk.metrics.v4.MetricType" json:"type,omitempty"`
	DeploymentId  string          `protobuf:"bytes,7,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// values
	//
	// Types that are valid to be assigned to Value:
	//
	//	*Metric_Sketch
	//	*Metric_Numeric
	Value          isMetric_Value         `protobuf_oneof:"value"`
	Statistics     *MetricStatistics      `protobuf:"bytes,12,opt,name=statistics,proto3,oneof" json:"statistics,omitempty"`
	ObservedAt     *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=observed_at,json=observedAt,proto3,oneof" json:"observed_at,omitempty"`
	AdditionalTags map[string]string      `protobuf:"bytes,30,rep,name=additional_tags,json=additionalTags,proto3" json:"additional_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_chalk_metrics_v4_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v4_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v4_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *Metric) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Metric) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *Metric) GetNamespace() MetricNamespace {
	if x != nil {
		return x.Namespace
	}
	return MetricNamespace_METRIC_NAMESPACE_UNSPECIFIED
}

func (x *Metric) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Metric) GetName() MetricName {
	if x != nil {
		return x.Name
	}
	return MetricName_METRIC_NAME_UNSPECIFIED
}

func (x *Metric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *Metric) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *Metric) GetValue() isMetric_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Metric) GetSketch() string {
	if x != nil {
		if x, ok := x.Value.(*Metric_Sketch); ok {
			return x.Sketch
		}
	}
	return ""
}

func (x *Metric) GetNumeric() float64 {
	if x != nil {
		if x, ok := x.Value.(*Metric_Numeric); ok {
			return x.Numeric
		}
	}
	return 0
}

func (x *Metric) GetStatistics() *MetricStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Metric) GetObservedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObservedAt
	}
	return nil
}

func (x *Metric) GetAdditionalTags() map[string]string {
	if x != nil {
		return x.AdditionalTags
	}
	return nil
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_Sketch struct {
	Sketch string `protobuf:"bytes,10,opt,name=sketch,proto3,oneof"`
}

type Metric_Numeric struct {
	Numeric float64 `protobuf:"fixed64,11,opt,name=numeric,proto3,oneof"`
}

func (*Metric_Sketch) isMetric_Value() {}

func (*Metric_Numeric) isMetric_Value() {}

type MetricStatistics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Min           *float64               `protobuf:"fixed64,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max           *float64               `protobuf:"fixed64,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	Count         *uint64                `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	NullCount     *uint64                `protobuf:"varint,4,opt,name=null_count,json=nullCount,proto3,oneof" json:"null_count,omitempty"`
	Mean          *float64               `protobuf:"fixed64,5,opt,name=mean,proto3,oneof" json:"mean,omitempty"`
	Variance      *float64               `protobuf:"fixed64,6,opt,name=variance,proto3,oneof" json:"variance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricStatistics) Reset() {
	*x = MetricStatistics{}
	mi := &file_chalk_metrics_v4_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricStatistics) ProtoMessage() {}

func (x *MetricStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_metrics_v4_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricStatistics.ProtoReflect.Descriptor instead.
func (*MetricStatistics) Descriptor() ([]byte, []int) {
	return file_chalk_metrics_v4_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *MetricStatistics) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *MetricStatistics) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *MetricStatistics) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MetricStatistics) GetNullCount() uint64 {
	if x != nil && x.NullCount != nil {
		return *x.NullCount
	}
	return 0
}

func (x *MetricStatistics) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *MetricStatistics) GetVariance() float64 {
	if x != nil && x.Variance != nil {
		return *x.Variance
	}
	return 0
}

var File_chalk_metrics_v4_metrics_proto protoreflect.FileDescriptor

const file_chalk_metrics_v4_metrics_proto_rawDesc = "" +
	"\n" +
	"\x1echalk/metrics/v4/metrics.proto\x12\x10chalk.metrics.v4\x1a\x1fgoogle/protobuf/timestamp.proto\"A\n" +
	"\vMetricBatch\x122\n" +
	"\ametrics\x18\x01 \x03(\v2\x18.chalk.metrics.v4.MetricR\ametrics\"\xb0\x05\n" +
	"\x06Metric\x12\x13\n" +
	"\x02id\x18\x01 \x01(\x03H\x01R\x02id\x88\x01\x01\x12%\n" +
	"\x0eenvironment_id\x18\x02 \x01(\tR\renvironmentId\x12?\n" +
	"\tnamespace\x18\x03 \x01(\x0e2!.chalk.metrics.v4.MetricNamespaceR\tnamespace\x12\x16\n" +
	"\x06source\x18\x04 \x01(\tR\x06source\x120\n" +
	"\x04name\x18\x05 \x01(\x0e2\x1c.chalk.metrics.v4.MetricNameR\x04name\x120\n" +
	"\x04type\x18\x06 \x01(\x0e2\x1c.chalk.metrics.v4.MetricTypeR\x04type\x12#\n" +
	"\rdeployment_id\x18\a \x01(\tR\fdeploymentId\x12\x18\n" +
	"\x06sketch\x18\n" +
	" \x01(\tH\x00R\x06sketch\x12\x1a\n" +
	"\anumeric\x18\v \x01(\x01H\x00R\anumeric\x12G\n" +
	"\n" +
	"statistics\x18\f \x01(\v2\".chalk.metrics.v4.MetricStatisticsH\x02R\n" +
	"statistics\x88\x01\x01\x12@\n" +
	"\vobserved_at\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampH\x03R\n" +
	"observedAt\x88\x01\x01\x12U\n" +
	"\x0fadditional_tags\x18\x1e \x03(\v2,.chalk.metrics.v4.Metric.AdditionalTagsEntryR\x0eadditionalTags\x1aA\n" +
	"\x13AdditionalTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\a\n" +
	"\x05valueB\x05\n" +
	"\x03_idB\r\n" +
	"\v_statisticsB\x0e\n" +
	"\f_observed_at\"\xf8\x01\n" +
	"\x10MetricStatistics\x12\x15\n" +
	"\x03min\x18\x01 \x01(\x01H\x00R\x03min\x88\x01\x01\x12\x15\n" +
	"\x03max\x18\x02 \x01(\x01H\x01R\x03max\x88\x01\x01\x12\x19\n" +
	"\x05count\x18\x03 \x01(\x04H\x02R\x05count\x88\x01\x01\x12\"\n" +
	"\n" +
	"null_count\x18\x04 \x01(\x04H\x03R\tnullCount\x88\x01\x01\x12\x17\n" +
	"\x04mean\x18\x05 \x01(\x01H\x04R\x04mean\x88\x01\x01\x12\x1f\n" +
	"\bvariance\x18\x06 \x01(\x01H\x05R\bvariance\x88\x01\x01B\x06\n" +
	"\x04_minB\x06\n" +
	"\x04_maxB\b\n" +
	"\x06_countB\r\n" +
	"\v_null_countB\a\n" +
	"\x05_meanB\v\n" +
	"\t_variance*~\n" +
	"\n" +
	"MetricType\x12\x1b\n" +
	"\x17METRIC_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13METRIC_TYPE_COUNTER\x10\x01\x12\x1f\n" +
	"\x1bMETRIC_TYPE_UP_DOWN_COUNTER\x10\x02\x12\x19\n" +
	"\x15METRIC_TYPE_HISTOGRAM\x10\x03*n\n" +
	"\x0fMetricNamespace\x12 \n" +
	"\x1cMETRIC_NAMESPACE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18METRIC_NAMESPACE_FEATURE\x10\x01\x12\x1b\n" +
	"\x17METRIC_NAMESPACE_SYSTEM\x10\x02*\x85\x04\n" +
	"\n" +
	"MetricName\x12\x1b\n" +
	"\x17METRIC_NAME_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fMETRIC_NAME_DEFAULT_VALUES_USED\x10\x01\x12\"\n" +
	"\x1eMETRIC_NAME_GIVENS_VALUES_USED\x10\x02\x12)\n" +
	"%METRIC_NAME_OFFLINE_STORE_VALUES_USED\x10\x03\x12(\n" +
	"$METRIC_NAME_ONLINE_STORE_VALUES_USED\x10\x04\x12$\n" +
	" METRIC_NAME_RESOLVER_VALUES_USED\x10\x05\x12\x1a\n" +
	"\x16METRIC_NAME_NULL_COUNT\x10\x06\x12\x1e\n" +
	"\x1aMETRIC_NAME_NON_NULL_COUNT\x10\a\x12\x1d\n" +
	"\x19METRIC_NAME_MISSING_COUNT\x10\b\x12\x1a\n" +
	"\x16METRIC_NAME_ZERO_COUNT\x10\t\x12#\n" +
	"\x1fMETRIC_NAME_VALUES_DISTRIBUTION\x10\n" +
	"\x12 \n" +
	"\x1cMETRIC_NAME_RESOLVER_LATENCY\x10\v\x12 \n" +
	"\x1cMETRIC_NAME_BYTES_DOWNLOADED\x10\f\x12\x18\n" +
	"\x14METRIC_NAME_NUM_ROWS\x10\r\x12\x1c\n" +
	"\x18METRIC_NAME_NUM_FEATURES\x10\x0eB\xc3\x01\n" +
	"\x14com.chalk.metrics.v4B\fMetricsProtoP\x01Z;github.com/chalk-ai/chalk-go/gen/chalk/metrics/v4;metricsv4\xa2\x02\x03CMX\xaa\x02\x10Chalk.Metrics.V4\xca\x02\x10Chalk\\Metrics\\V4\xe2\x02\x1cChalk\\Metrics\\V4\\GPBMetadata\xea\x02\x12Chalk::Metrics::V4b\x06proto3"

var (
	file_chalk_metrics_v4_metrics_proto_rawDescOnce sync.Once
	file_chalk_metrics_v4_metrics_proto_rawDescData []byte
)

func file_chalk_metrics_v4_metrics_proto_rawDescGZIP() []byte {
	file_chalk_metrics_v4_metrics_proto_rawDescOnce.Do(func() {
		file_chalk_metrics_v4_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_metrics_v4_metrics_proto_rawDesc), len(file_chalk_metrics_v4_metrics_proto_rawDesc)))
	})
	return file_chalk_metrics_v4_metrics_proto_rawDescData
}

var file_chalk_metrics_v4_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_chalk_metrics_v4_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chalk_metrics_v4_metrics_proto_goTypes = []any{
	(MetricType)(0),               // 0: chalk.metrics.v4.MetricType
	(MetricNamespace)(0),          // 1: chalk.metrics.v4.MetricNamespace
	(MetricName)(0),               // 2: chalk.metrics.v4.MetricName
	(*MetricBatch)(nil),           // 3: chalk.metrics.v4.MetricBatch
	(*Metric)(nil),                // 4: chalk.metrics.v4.Metric
	(*MetricStatistics)(nil),      // 5: chalk.metrics.v4.MetricStatistics
	nil,                           // 6: chalk.metrics.v4.Metric.AdditionalTagsEntry
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_chalk_metrics_v4_metrics_proto_depIdxs = []int32{
	4, // 0: chalk.metrics.v4.MetricBatch.metrics:type_name -> chalk.metrics.v4.Metric
	1, // 1: chalk.metrics.v4.Metric.namespace:type_name -> chalk.metrics.v4.MetricNamespace
	2, // 2: chalk.metrics.v4.Metric.name:type_name -> chalk.metrics.v4.MetricName
	0, // 3: chalk.metrics.v4.Metric.type:type_name -> chalk.metrics.v4.MetricType
	5, // 4: chalk.metrics.v4.Metric.statistics:type_name -> chalk.metrics.v4.MetricStatistics
	7, // 5: chalk.metrics.v4.Metric.observed_at:type_name -> google.protobuf.Timestamp
	6, // 6: chalk.metrics.v4.Metric.additional_tags:type_name -> chalk.metrics.v4.Metric.AdditionalTagsEntry
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_chalk_metrics_v4_metrics_proto_init() }
func file_chalk_metrics_v4_metrics_proto_init() {
	if File_chalk_metrics_v4_metrics_proto != nil {
		return
	}
	file_chalk_metrics_v4_metrics_proto_msgTypes[1].OneofWrappers = []any{
		(*Metric_Sketch)(nil),
		(*Metric_Numeric)(nil),
	}
	file_chalk_metrics_v4_metrics_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_metrics_v4_metrics_proto_rawDesc), len(file_chalk_metrics_v4_metrics_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_metrics_v4_metrics_proto_goTypes,
		DependencyIndexes: file_chalk_metrics_v4_metrics_proto_depIdxs,
		EnumInfos:         file_chalk_metrics_v4_metrics_proto_enumTypes,
		MessageInfos:      file_chalk_metrics_v4_metrics_proto_msgTypes,
	}.Build()
	File_chalk_metrics_v4_metrics_proto = out.File
	file_chalk_metrics_v4_metrics_proto_goTypes = nil
	file_chalk_metrics_v4_metrics_proto_depIdxs = nil
}
