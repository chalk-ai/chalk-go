// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/arrow/v1/arrow.proto

package arrowv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeUnit int32

const (
	TimeUnit_TIME_UNIT_UNSPECIFIED TimeUnit = 0
	TimeUnit_TIME_UNIT_SECOND      TimeUnit = 1
	TimeUnit_TIME_UNIT_MILLISECOND TimeUnit = 2
	TimeUnit_TIME_UNIT_MICROSECOND TimeUnit = 3
	TimeUnit_TIME_UNIT_NANOSECOND  TimeUnit = 4
)

// Enum value maps for TimeUnit.
var (
	TimeUnit_name = map[int32]string{
		0: "TIME_UNIT_UNSPECIFIED",
		1: "TIME_UNIT_SECOND",
		2: "TIME_UNIT_MILLISECOND",
		3: "TIME_UNIT_MICROSECOND",
		4: "TIME_UNIT_NANOSECOND",
	}
	TimeUnit_value = map[string]int32{
		"TIME_UNIT_UNSPECIFIED": 0,
		"TIME_UNIT_SECOND":      1,
		"TIME_UNIT_MILLISECOND": 2,
		"TIME_UNIT_MICROSECOND": 3,
		"TIME_UNIT_NANOSECOND":  4,
	}
)

func (x TimeUnit) Enum() *TimeUnit {
	p := new(TimeUnit)
	*p = x
	return p
}

func (x TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_arrow_v1_arrow_proto_enumTypes[0].Descriptor()
}

func (TimeUnit) Type() protoreflect.EnumType {
	return &file_chalk_arrow_v1_arrow_proto_enumTypes[0]
}

func (x TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnit.Descriptor instead.
func (TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{0}
}

type FeatherCompression int32

const (
	FeatherCompression_FEATHER_COMPRESSION_UNSPECIFIED  FeatherCompression = 0
	FeatherCompression_FEATHER_COMPRESSION_UNCOMPRESSED FeatherCompression = 1
	FeatherCompression_FEATHER_COMPRESSION_LZ4          FeatherCompression = 2
	FeatherCompression_FEATHER_COMPRESSION_ZSTD         FeatherCompression = 3
)

// Enum value maps for FeatherCompression.
var (
	FeatherCompression_name = map[int32]string{
		0: "FEATHER_COMPRESSION_UNSPECIFIED",
		1: "FEATHER_COMPRESSION_UNCOMPRESSED",
		2: "FEATHER_COMPRESSION_LZ4",
		3: "FEATHER_COMPRESSION_ZSTD",
	}
	FeatherCompression_value = map[string]int32{
		"FEATHER_COMPRESSION_UNSPECIFIED":  0,
		"FEATHER_COMPRESSION_UNCOMPRESSED": 1,
		"FEATHER_COMPRESSION_LZ4":          2,
		"FEATHER_COMPRESSION_ZSTD":         3,
	}
)

func (x FeatherCompression) Enum() *FeatherCompression {
	p := new(FeatherCompression)
	*p = x
	return p
}

func (x FeatherCompression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatherCompression) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_arrow_v1_arrow_proto_enumTypes[1].Descriptor()
}

func (FeatherCompression) Type() protoreflect.EnumType {
	return &file_chalk_arrow_v1_arrow_proto_enumTypes[1]
}

func (x FeatherCompression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatherCompression.Descriptor instead.
func (FeatherCompression) EnumDescriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{1}
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns  []*Field          `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetColumns() []*Field {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Schema) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArrowType *ArrowType        `protobuf:"bytes,2,opt,name=arrow_type,json=arrowType,proto3" json:"arrow_type,omitempty"`
	Nullable  bool              `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Children  []*Field          `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{1}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetArrowType() *ArrowType {
	if x != nil {
		return x.ArrowType
	}
	return nil
}

func (x *Field) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *Field) GetChildren() []*Field {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Field) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FixedSizeBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length int32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *FixedSizeBinary) Reset() {
	*x = FixedSizeBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedSizeBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedSizeBinary) ProtoMessage() {}

func (x *FixedSizeBinary) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedSizeBinary.ProtoReflect.Descriptor instead.
func (*FixedSizeBinary) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{2}
}

func (x *FixedSizeBinary) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnit TimeUnit `protobuf:"varint,1,opt,name=time_unit,json=timeUnit,proto3,enum=chalk.arrow.v1.TimeUnit" json:"time_unit,omitempty"`
	Timezone string   `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{3}
}

func (x *Timestamp) GetTimeUnit() TimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return TimeUnit_TIME_UNIT_UNSPECIFIED
}

func (x *Timestamp) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision int32 `protobuf:"varint,1,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale     int32 `protobuf:"varint,2,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{4}
}

func (x *Decimal) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *Decimal) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldType *Field `protobuf:"bytes,1,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{5}
}

func (x *List) GetFieldType() *Field {
	if x != nil {
		return x.FieldType
	}
	return nil
}

type FixedSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldType *Field `protobuf:"bytes,1,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	ListSize  int32  `protobuf:"varint,2,opt,name=list_size,json=listSize,proto3" json:"list_size,omitempty"`
}

func (x *FixedSizeList) Reset() {
	*x = FixedSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedSizeList) ProtoMessage() {}

func (x *FixedSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedSizeList.ProtoReflect.Descriptor instead.
func (*FixedSizeList) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{6}
}

func (x *FixedSizeList) GetFieldType() *Field {
	if x != nil {
		return x.FieldType
	}
	return nil
}

func (x *FixedSizeList) GetListSize() int32 {
	if x != nil {
		return x.ListSize
	}
	return 0
}

type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubFieldTypes []*Field `protobuf:"bytes,1,rep,name=sub_field_types,json=subFieldTypes,proto3" json:"sub_field_types,omitempty"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{7}
}

func (x *Struct) GetSubFieldTypes() []*Field {
	if x != nil {
		return x.SubFieldTypes
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyField   *Field `protobuf:"bytes,1,opt,name=key_field,json=keyField,proto3" json:"key_field,omitempty"`
	ItemField  *Field `protobuf:"bytes,2,opt,name=item_field,json=itemField,proto3" json:"item_field,omitempty"`
	KeysSorted bool   `protobuf:"varint,3,opt,name=keys_sorted,json=keysSorted,proto3" json:"keys_sorted,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{8}
}

func (x *Map) GetKeyField() *Field {
	if x != nil {
		return x.KeyField
	}
	return nil
}

func (x *Map) GetItemField() *Field {
	if x != nil {
		return x.ItemField
	}
	return nil
}

func (x *Map) GetKeysSorted() bool {
	if x != nil {
		return x.KeysSorted
	}
	return false
}

type ScalarListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrowData []byte  `protobuf:"bytes,1,opt,name=arrow_data,json=arrowData,proto3" json:"arrow_data,omitempty"`
	Schema    *Schema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *ScalarListValue) Reset() {
	*x = ScalarListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarListValue) ProtoMessage() {}

func (x *ScalarListValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarListValue.ProtoReflect.Descriptor instead.
func (*ScalarListValue) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{9}
}

func (x *ScalarListValue) GetArrowData() []byte {
	if x != nil {
		return x.ArrowData
	}
	return nil
}

func (x *ScalarListValue) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type ScalarTime32Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ScalarTime32Value_Time32SecondValue
	//	*ScalarTime32Value_Time32MillisecondValue
	Value isScalarTime32Value_Value `protobuf_oneof:"value"`
}

func (x *ScalarTime32Value) Reset() {
	*x = ScalarTime32Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTime32Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTime32Value) ProtoMessage() {}

func (x *ScalarTime32Value) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTime32Value.ProtoReflect.Descriptor instead.
func (*ScalarTime32Value) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{10}
}

func (m *ScalarTime32Value) GetValue() isScalarTime32Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScalarTime32Value) GetTime32SecondValue() int32 {
	if x, ok := x.GetValue().(*ScalarTime32Value_Time32SecondValue); ok {
		return x.Time32SecondValue
	}
	return 0
}

func (x *ScalarTime32Value) GetTime32MillisecondValue() int32 {
	if x, ok := x.GetValue().(*ScalarTime32Value_Time32MillisecondValue); ok {
		return x.Time32MillisecondValue
	}
	return 0
}

type isScalarTime32Value_Value interface {
	isScalarTime32Value_Value()
}

type ScalarTime32Value_Time32SecondValue struct {
	Time32SecondValue int32 `protobuf:"varint,1,opt,name=time32_second_value,json=time32SecondValue,proto3,oneof"`
}

type ScalarTime32Value_Time32MillisecondValue struct {
	Time32MillisecondValue int32 `protobuf:"varint,2,opt,name=time32_millisecond_value,json=time32MillisecondValue,proto3,oneof"`
}

func (*ScalarTime32Value_Time32SecondValue) isScalarTime32Value_Value() {}

func (*ScalarTime32Value_Time32MillisecondValue) isScalarTime32Value_Value() {}

type ScalarTime64Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ScalarTime64Value_Time64MicrosecondValue
	//	*ScalarTime64Value_Time64NanosecondValue
	Value isScalarTime64Value_Value `protobuf_oneof:"value"`
}

func (x *ScalarTime64Value) Reset() {
	*x = ScalarTime64Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTime64Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTime64Value) ProtoMessage() {}

func (x *ScalarTime64Value) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTime64Value.ProtoReflect.Descriptor instead.
func (*ScalarTime64Value) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{11}
}

func (m *ScalarTime64Value) GetValue() isScalarTime64Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScalarTime64Value) GetTime64MicrosecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarTime64Value_Time64MicrosecondValue); ok {
		return x.Time64MicrosecondValue
	}
	return 0
}

func (x *ScalarTime64Value) GetTime64NanosecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarTime64Value_Time64NanosecondValue); ok {
		return x.Time64NanosecondValue
	}
	return 0
}

type isScalarTime64Value_Value interface {
	isScalarTime64Value_Value()
}

type ScalarTime64Value_Time64MicrosecondValue struct {
	Time64MicrosecondValue int64 `protobuf:"varint,1,opt,name=time64_microsecond_value,json=time64MicrosecondValue,proto3,oneof"`
}

type ScalarTime64Value_Time64NanosecondValue struct {
	Time64NanosecondValue int64 `protobuf:"varint,2,opt,name=time64_nanosecond_value,json=time64NanosecondValue,proto3,oneof"`
}

func (*ScalarTime64Value_Time64MicrosecondValue) isScalarTime64Value_Value() {}

func (*ScalarTime64Value_Time64NanosecondValue) isScalarTime64Value_Value() {}

type ScalarTimestampValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ScalarTimestampValue_TimeMicrosecondValue
	//	*ScalarTimestampValue_TimeNanosecondValue
	//	*ScalarTimestampValue_TimeSecondValue
	//	*ScalarTimestampValue_TimeMillisecondValue
	Value    isScalarTimestampValue_Value `protobuf_oneof:"value"`
	Timezone string                       `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *ScalarTimestampValue) Reset() {
	*x = ScalarTimestampValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTimestampValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTimestampValue) ProtoMessage() {}

func (x *ScalarTimestampValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTimestampValue.ProtoReflect.Descriptor instead.
func (*ScalarTimestampValue) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{12}
}

func (m *ScalarTimestampValue) GetValue() isScalarTimestampValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScalarTimestampValue) GetTimeMicrosecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarTimestampValue_TimeMicrosecondValue); ok {
		return x.TimeMicrosecondValue
	}
	return 0
}

func (x *ScalarTimestampValue) GetTimeNanosecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarTimestampValue_TimeNanosecondValue); ok {
		return x.TimeNanosecondValue
	}
	return 0
}

func (x *ScalarTimestampValue) GetTimeSecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarTimestampValue_TimeSecondValue); ok {
		return x.TimeSecondValue
	}
	return 0
}

func (x *ScalarTimestampValue) GetTimeMillisecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarTimestampValue_TimeMillisecondValue); ok {
		return x.TimeMillisecondValue
	}
	return 0
}

func (x *ScalarTimestampValue) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type isScalarTimestampValue_Value interface {
	isScalarTimestampValue_Value()
}

type ScalarTimestampValue_TimeMicrosecondValue struct {
	TimeMicrosecondValue int64 `protobuf:"varint,1,opt,name=time_microsecond_value,json=timeMicrosecondValue,proto3,oneof"`
}

type ScalarTimestampValue_TimeNanosecondValue struct {
	TimeNanosecondValue int64 `protobuf:"varint,2,opt,name=time_nanosecond_value,json=timeNanosecondValue,proto3,oneof"`
}

type ScalarTimestampValue_TimeSecondValue struct {
	TimeSecondValue int64 `protobuf:"varint,3,opt,name=time_second_value,json=timeSecondValue,proto3,oneof"`
}

type ScalarTimestampValue_TimeMillisecondValue struct {
	TimeMillisecondValue int64 `protobuf:"varint,4,opt,name=time_millisecond_value,json=timeMillisecondValue,proto3,oneof"`
}

func (*ScalarTimestampValue_TimeMicrosecondValue) isScalarTimestampValue_Value() {}

func (*ScalarTimestampValue_TimeNanosecondValue) isScalarTimestampValue_Value() {}

func (*ScalarTimestampValue_TimeSecondValue) isScalarTimestampValue_Value() {}

func (*ScalarTimestampValue_TimeMillisecondValue) isScalarTimestampValue_Value() {}

type StructValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldValues []*ScalarValue `protobuf:"bytes,2,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
	Fields      []*Field       `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *StructValue) Reset() {
	*x = StructValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructValue) ProtoMessage() {}

func (x *StructValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructValue.ProtoReflect.Descriptor instead.
func (*StructValue) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{13}
}

func (x *StructValue) GetFieldValues() []*ScalarValue {
	if x != nil {
		return x.FieldValues
	}
	return nil
}

func (x *StructValue) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ScalarFixedSizeBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []byte `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
	Length int32  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ScalarFixedSizeBinary) Reset() {
	*x = ScalarFixedSizeBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFixedSizeBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFixedSizeBinary) ProtoMessage() {}

func (x *ScalarFixedSizeBinary) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFixedSizeBinary.ProtoReflect.Descriptor instead.
func (*ScalarFixedSizeBinary) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{14}
}

func (x *ScalarFixedSizeBinary) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ScalarFixedSizeBinary) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type DecimalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Precision int32  `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale     int32  `protobuf:"varint,3,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *DecimalValue) Reset() {
	*x = DecimalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecimalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalValue) ProtoMessage() {}

func (x *DecimalValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalValue.ProtoReflect.Descriptor instead.
func (*DecimalValue) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{15}
}

func (x *DecimalValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DecimalValue) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *DecimalValue) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type ScalarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ScalarValue_NullValue
	//	*ScalarValue_BoolValue
	//	*ScalarValue_Float64Value
	//	*ScalarValue_Int64Value
	//	*ScalarValue_LargeUtf8Value
	//	*ScalarValue_TimestampValue
	//	*ScalarValue_Date_64Value
	//	*ScalarValue_StructValue
	//	*ScalarValue_LargeListValue
	//	*ScalarValue_Time64Value
	//	*ScalarValue_DurationSecondValue
	//	*ScalarValue_DurationMillisecondValue
	//	*ScalarValue_DurationMicrosecondValue
	//	*ScalarValue_DurationNanosecondValue
	//	*ScalarValue_Utf8Value
	//	*ScalarValue_Int8Value
	//	*ScalarValue_Int16Value
	//	*ScalarValue_Int32Value
	//	*ScalarValue_Uint8Value
	//	*ScalarValue_Uint16Value
	//	*ScalarValue_Uint32Value
	//	*ScalarValue_Uint64Value
	//	*ScalarValue_Float16Value
	//	*ScalarValue_Float32Value
	//	*ScalarValue_Date_32Value
	//	*ScalarValue_Time32Value
	//	*ScalarValue_ListValue
	//	*ScalarValue_FixedSizeListValue
	//	*ScalarValue_MapValue
	//	*ScalarValue_BinaryValue
	//	*ScalarValue_LargeBinaryValue
	//	*ScalarValue_FixedSizeBinaryValue
	//	*ScalarValue_Decimal128Value
	//	*ScalarValue_Decimal256Value
	Value isScalarValue_Value `protobuf_oneof:"value"`
}

func (x *ScalarValue) Reset() {
	*x = ScalarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarValue) ProtoMessage() {}

func (x *ScalarValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarValue.ProtoReflect.Descriptor instead.
func (*ScalarValue) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{16}
}

func (m *ScalarValue) GetValue() isScalarValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScalarValue) GetNullValue() *ArrowType {
	if x, ok := x.GetValue().(*ScalarValue_NullValue); ok {
		return x.NullValue
	}
	return nil
}

func (x *ScalarValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*ScalarValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *ScalarValue) GetFloat64Value() float64 {
	if x, ok := x.GetValue().(*ScalarValue_Float64Value); ok {
		return x.Float64Value
	}
	return 0
}

func (x *ScalarValue) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*ScalarValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *ScalarValue) GetLargeUtf8Value() string {
	if x, ok := x.GetValue().(*ScalarValue_LargeUtf8Value); ok {
		return x.LargeUtf8Value
	}
	return ""
}

func (x *ScalarValue) GetTimestampValue() *ScalarTimestampValue {
	if x, ok := x.GetValue().(*ScalarValue_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (x *ScalarValue) GetDate_64Value() int64 {
	if x, ok := x.GetValue().(*ScalarValue_Date_64Value); ok {
		return x.Date_64Value
	}
	return 0
}

func (x *ScalarValue) GetStructValue() *StructValue {
	if x, ok := x.GetValue().(*ScalarValue_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (x *ScalarValue) GetLargeListValue() *ScalarListValue {
	if x, ok := x.GetValue().(*ScalarValue_LargeListValue); ok {
		return x.LargeListValue
	}
	return nil
}

func (x *ScalarValue) GetTime64Value() *ScalarTime64Value {
	if x, ok := x.GetValue().(*ScalarValue_Time64Value); ok {
		return x.Time64Value
	}
	return nil
}

func (x *ScalarValue) GetDurationSecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarValue_DurationSecondValue); ok {
		return x.DurationSecondValue
	}
	return 0
}

func (x *ScalarValue) GetDurationMillisecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarValue_DurationMillisecondValue); ok {
		return x.DurationMillisecondValue
	}
	return 0
}

func (x *ScalarValue) GetDurationMicrosecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarValue_DurationMicrosecondValue); ok {
		return x.DurationMicrosecondValue
	}
	return 0
}

func (x *ScalarValue) GetDurationNanosecondValue() int64 {
	if x, ok := x.GetValue().(*ScalarValue_DurationNanosecondValue); ok {
		return x.DurationNanosecondValue
	}
	return 0
}

func (x *ScalarValue) GetUtf8Value() string {
	if x, ok := x.GetValue().(*ScalarValue_Utf8Value); ok {
		return x.Utf8Value
	}
	return ""
}

func (x *ScalarValue) GetInt8Value() int32 {
	if x, ok := x.GetValue().(*ScalarValue_Int8Value); ok {
		return x.Int8Value
	}
	return 0
}

func (x *ScalarValue) GetInt16Value() int32 {
	if x, ok := x.GetValue().(*ScalarValue_Int16Value); ok {
		return x.Int16Value
	}
	return 0
}

func (x *ScalarValue) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*ScalarValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *ScalarValue) GetUint8Value() uint32 {
	if x, ok := x.GetValue().(*ScalarValue_Uint8Value); ok {
		return x.Uint8Value
	}
	return 0
}

func (x *ScalarValue) GetUint16Value() uint32 {
	if x, ok := x.GetValue().(*ScalarValue_Uint16Value); ok {
		return x.Uint16Value
	}
	return 0
}

func (x *ScalarValue) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*ScalarValue_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *ScalarValue) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*ScalarValue_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *ScalarValue) GetFloat16Value() float32 {
	if x, ok := x.GetValue().(*ScalarValue_Float16Value); ok {
		return x.Float16Value
	}
	return 0
}

func (x *ScalarValue) GetFloat32Value() float32 {
	if x, ok := x.GetValue().(*ScalarValue_Float32Value); ok {
		return x.Float32Value
	}
	return 0
}

func (x *ScalarValue) GetDate_32Value() int32 {
	if x, ok := x.GetValue().(*ScalarValue_Date_32Value); ok {
		return x.Date_32Value
	}
	return 0
}

func (x *ScalarValue) GetTime32Value() *ScalarTime32Value {
	if x, ok := x.GetValue().(*ScalarValue_Time32Value); ok {
		return x.Time32Value
	}
	return nil
}

func (x *ScalarValue) GetListValue() *ScalarListValue {
	if x, ok := x.GetValue().(*ScalarValue_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *ScalarValue) GetFixedSizeListValue() *ScalarListValue {
	if x, ok := x.GetValue().(*ScalarValue_FixedSizeListValue); ok {
		return x.FixedSizeListValue
	}
	return nil
}

func (x *ScalarValue) GetMapValue() *ScalarListValue {
	if x, ok := x.GetValue().(*ScalarValue_MapValue); ok {
		return x.MapValue
	}
	return nil
}

func (x *ScalarValue) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*ScalarValue_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *ScalarValue) GetLargeBinaryValue() []byte {
	if x, ok := x.GetValue().(*ScalarValue_LargeBinaryValue); ok {
		return x.LargeBinaryValue
	}
	return nil
}

func (x *ScalarValue) GetFixedSizeBinaryValue() *ScalarFixedSizeBinary {
	if x, ok := x.GetValue().(*ScalarValue_FixedSizeBinaryValue); ok {
		return x.FixedSizeBinaryValue
	}
	return nil
}

func (x *ScalarValue) GetDecimal128Value() *DecimalValue {
	if x, ok := x.GetValue().(*ScalarValue_Decimal128Value); ok {
		return x.Decimal128Value
	}
	return nil
}

func (x *ScalarValue) GetDecimal256Value() *DecimalValue {
	if x, ok := x.GetValue().(*ScalarValue_Decimal256Value); ok {
		return x.Decimal256Value
	}
	return nil
}

type isScalarValue_Value interface {
	isScalarValue_Value()
}

type ScalarValue_NullValue struct {
	// Group popular types at the top
	// to save space in the serialized
	// message.
	NullValue *ArrowType `protobuf:"bytes,1,opt,name=null_value,json=nullValue,proto3,oneof"`
}

type ScalarValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type ScalarValue_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,3,opt,name=float64_value,json=float64Value,proto3,oneof"`
}

type ScalarValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type ScalarValue_LargeUtf8Value struct {
	LargeUtf8Value string `protobuf:"bytes,5,opt,name=large_utf8_value,json=largeUtf8Value,proto3,oneof"`
}

type ScalarValue_TimestampValue struct {
	TimestampValue *ScalarTimestampValue `protobuf:"bytes,6,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

type ScalarValue_Date_64Value struct {
	Date_64Value int64 `protobuf:"varint,7,opt,name=date_64_value,json=date64Value,proto3,oneof"`
}

type ScalarValue_StructValue struct {
	StructValue *StructValue `protobuf:"bytes,8,opt,name=struct_value,json=structValue,proto3,oneof"`
}

type ScalarValue_LargeListValue struct {
	LargeListValue *ScalarListValue `protobuf:"bytes,9,opt,name=large_list_value,json=largeListValue,proto3,oneof"`
}

type ScalarValue_Time64Value struct {
	Time64Value *ScalarTime64Value `protobuf:"bytes,10,opt,name=time64_value,json=time64Value,proto3,oneof"`
}

type ScalarValue_DurationSecondValue struct {
	DurationSecondValue int64 `protobuf:"varint,16,opt,name=duration_second_value,json=durationSecondValue,proto3,oneof"`
}

type ScalarValue_DurationMillisecondValue struct {
	DurationMillisecondValue int64 `protobuf:"varint,17,opt,name=duration_millisecond_value,json=durationMillisecondValue,proto3,oneof"`
}

type ScalarValue_DurationMicrosecondValue struct {
	DurationMicrosecondValue int64 `protobuf:"varint,18,opt,name=duration_microsecond_value,json=durationMicrosecondValue,proto3,oneof"`
}

type ScalarValue_DurationNanosecondValue struct {
	DurationNanosecondValue int64 `protobuf:"varint,19,opt,name=duration_nanosecond_value,json=durationNanosecondValue,proto3,oneof"`
}

type ScalarValue_Utf8Value struct {
	Utf8Value string `protobuf:"bytes,20,opt,name=utf8_value,json=utf8Value,proto3,oneof"`
}

type ScalarValue_Int8Value struct {
	Int8Value int32 `protobuf:"varint,21,opt,name=int8_value,json=int8Value,proto3,oneof"`
}

type ScalarValue_Int16Value struct {
	Int16Value int32 `protobuf:"varint,22,opt,name=int16_value,json=int16Value,proto3,oneof"`
}

type ScalarValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,23,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type ScalarValue_Uint8Value struct {
	Uint8Value uint32 `protobuf:"varint,24,opt,name=uint8_value,json=uint8Value,proto3,oneof"`
}

type ScalarValue_Uint16Value struct {
	Uint16Value uint32 `protobuf:"varint,25,opt,name=uint16_value,json=uint16Value,proto3,oneof"`
}

type ScalarValue_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,26,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type ScalarValue_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,27,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type ScalarValue_Float16Value struct {
	Float16Value float32 `protobuf:"fixed32,28,opt,name=float16_value,json=float16Value,proto3,oneof"`
}

type ScalarValue_Float32Value struct {
	Float32Value float32 `protobuf:"fixed32,29,opt,name=float32_value,json=float32Value,proto3,oneof"`
}

type ScalarValue_Date_32Value struct {
	Date_32Value int32 `protobuf:"varint,30,opt,name=date_32_value,json=date32Value,proto3,oneof"`
}

type ScalarValue_Time32Value struct {
	Time32Value *ScalarTime32Value `protobuf:"bytes,31,opt,name=time32_value,json=time32Value,proto3,oneof"`
}

type ScalarValue_ListValue struct {
	ListValue *ScalarListValue `protobuf:"bytes,32,opt,name=list_value,json=listValue,proto3,oneof"`
}

type ScalarValue_FixedSizeListValue struct {
	FixedSizeListValue *ScalarListValue `protobuf:"bytes,33,opt,name=fixed_size_list_value,json=fixedSizeListValue,proto3,oneof"`
}

type ScalarValue_MapValue struct {
	MapValue *ScalarListValue `protobuf:"bytes,34,opt,name=map_value,json=mapValue,proto3,oneof"`
}

type ScalarValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,35,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}

type ScalarValue_LargeBinaryValue struct {
	LargeBinaryValue []byte `protobuf:"bytes,36,opt,name=large_binary_value,json=largeBinaryValue,proto3,oneof"`
}

type ScalarValue_FixedSizeBinaryValue struct {
	FixedSizeBinaryValue *ScalarFixedSizeBinary `protobuf:"bytes,37,opt,name=fixed_size_binary_value,json=fixedSizeBinaryValue,proto3,oneof"`
}

type ScalarValue_Decimal128Value struct {
	Decimal128Value *DecimalValue `protobuf:"bytes,38,opt,name=decimal128_value,json=decimal128Value,proto3,oneof"`
}

type ScalarValue_Decimal256Value struct {
	Decimal256Value *DecimalValue `protobuf:"bytes,39,opt,name=decimal256_value,json=decimal256Value,proto3,oneof"`
}

func (*ScalarValue_NullValue) isScalarValue_Value() {}

func (*ScalarValue_BoolValue) isScalarValue_Value() {}

func (*ScalarValue_Float64Value) isScalarValue_Value() {}

func (*ScalarValue_Int64Value) isScalarValue_Value() {}

func (*ScalarValue_LargeUtf8Value) isScalarValue_Value() {}

func (*ScalarValue_TimestampValue) isScalarValue_Value() {}

func (*ScalarValue_Date_64Value) isScalarValue_Value() {}

func (*ScalarValue_StructValue) isScalarValue_Value() {}

func (*ScalarValue_LargeListValue) isScalarValue_Value() {}

func (*ScalarValue_Time64Value) isScalarValue_Value() {}

func (*ScalarValue_DurationSecondValue) isScalarValue_Value() {}

func (*ScalarValue_DurationMillisecondValue) isScalarValue_Value() {}

func (*ScalarValue_DurationMicrosecondValue) isScalarValue_Value() {}

func (*ScalarValue_DurationNanosecondValue) isScalarValue_Value() {}

func (*ScalarValue_Utf8Value) isScalarValue_Value() {}

func (*ScalarValue_Int8Value) isScalarValue_Value() {}

func (*ScalarValue_Int16Value) isScalarValue_Value() {}

func (*ScalarValue_Int32Value) isScalarValue_Value() {}

func (*ScalarValue_Uint8Value) isScalarValue_Value() {}

func (*ScalarValue_Uint16Value) isScalarValue_Value() {}

func (*ScalarValue_Uint32Value) isScalarValue_Value() {}

func (*ScalarValue_Uint64Value) isScalarValue_Value() {}

func (*ScalarValue_Float16Value) isScalarValue_Value() {}

func (*ScalarValue_Float32Value) isScalarValue_Value() {}

func (*ScalarValue_Date_32Value) isScalarValue_Value() {}

func (*ScalarValue_Time32Value) isScalarValue_Value() {}

func (*ScalarValue_ListValue) isScalarValue_Value() {}

func (*ScalarValue_FixedSizeListValue) isScalarValue_Value() {}

func (*ScalarValue_MapValue) isScalarValue_Value() {}

func (*ScalarValue_BinaryValue) isScalarValue_Value() {}

func (*ScalarValue_LargeBinaryValue) isScalarValue_Value() {}

func (*ScalarValue_FixedSizeBinaryValue) isScalarValue_Value() {}

func (*ScalarValue_Decimal128Value) isScalarValue_Value() {}

func (*ScalarValue_Decimal256Value) isScalarValue_Value() {}

type ArrowType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ArrowTypeEnum:
	//
	//	*ArrowType_None
	//	*ArrowType_Bool
	//	*ArrowType_Float64
	//	*ArrowType_Int64
	//	*ArrowType_LargeUtf8
	//	*ArrowType_Timestamp
	//	*ArrowType_Date64
	//	*ArrowType_Struct
	//	*ArrowType_LargeList
	//	*ArrowType_Time64
	//	*ArrowType_Duration
	//	*ArrowType_Utf8
	//	*ArrowType_Int8
	//	*ArrowType_Int16
	//	*ArrowType_Int32
	//	*ArrowType_Uint8
	//	*ArrowType_Uint16
	//	*ArrowType_Uint32
	//	*ArrowType_Uint64
	//	*ArrowType_Float16
	//	*ArrowType_Float32
	//	*ArrowType_Date32
	//	*ArrowType_Time32
	//	*ArrowType_List
	//	*ArrowType_FixedSizeList
	//	*ArrowType_Binary
	//	*ArrowType_LargeBinary
	//	*ArrowType_FixedSizeBinary
	//	*ArrowType_Decimal_128
	//	*ArrowType_Decimal_256
	//	*ArrowType_Map
	ArrowTypeEnum isArrowType_ArrowTypeEnum `protobuf_oneof:"arrow_type_enum"`
}

func (x *ArrowType) Reset() {
	*x = ArrowType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowType) ProtoMessage() {}

func (x *ArrowType) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrowType.ProtoReflect.Descriptor instead.
func (*ArrowType) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{17}
}

func (m *ArrowType) GetArrowTypeEnum() isArrowType_ArrowTypeEnum {
	if m != nil {
		return m.ArrowTypeEnum
	}
	return nil
}

func (x *ArrowType) GetNone() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_None); ok {
		return x.None
	}
	return nil
}

func (x *ArrowType) GetBool() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *ArrowType) GetFloat64() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Float64); ok {
		return x.Float64
	}
	return nil
}

func (x *ArrowType) GetInt64() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *ArrowType) GetLargeUtf8() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_LargeUtf8); ok {
		return x.LargeUtf8
	}
	return nil
}

func (x *ArrowType) GetTimestamp() *Timestamp {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *ArrowType) GetDate64() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Date64); ok {
		return x.Date64
	}
	return nil
}

func (x *ArrowType) GetStruct() *Struct {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *ArrowType) GetLargeList() *List {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_LargeList); ok {
		return x.LargeList
	}
	return nil
}

func (x *ArrowType) GetTime64() TimeUnit {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Time64); ok {
		return x.Time64
	}
	return TimeUnit_TIME_UNIT_UNSPECIFIED
}

func (x *ArrowType) GetDuration() TimeUnit {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Duration); ok {
		return x.Duration
	}
	return TimeUnit_TIME_UNIT_UNSPECIFIED
}

func (x *ArrowType) GetUtf8() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Utf8); ok {
		return x.Utf8
	}
	return nil
}

func (x *ArrowType) GetInt8() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Int8); ok {
		return x.Int8
	}
	return nil
}

func (x *ArrowType) GetInt16() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Int16); ok {
		return x.Int16
	}
	return nil
}

func (x *ArrowType) GetInt32() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *ArrowType) GetUint8() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Uint8); ok {
		return x.Uint8
	}
	return nil
}

func (x *ArrowType) GetUint16() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Uint16); ok {
		return x.Uint16
	}
	return nil
}

func (x *ArrowType) GetUint32() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *ArrowType) GetUint64() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *ArrowType) GetFloat16() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Float16); ok {
		return x.Float16
	}
	return nil
}

func (x *ArrowType) GetFloat32() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Float32); ok {
		return x.Float32
	}
	return nil
}

func (x *ArrowType) GetDate32() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Date32); ok {
		return x.Date32
	}
	return nil
}

func (x *ArrowType) GetTime32() TimeUnit {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Time32); ok {
		return x.Time32
	}
	return TimeUnit_TIME_UNIT_UNSPECIFIED
}

func (x *ArrowType) GetList() *List {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_List); ok {
		return x.List
	}
	return nil
}

func (x *ArrowType) GetFixedSizeList() *FixedSizeList {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_FixedSizeList); ok {
		return x.FixedSizeList
	}
	return nil
}

func (x *ArrowType) GetBinary() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *ArrowType) GetLargeBinary() *EmptyMessage {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_LargeBinary); ok {
		return x.LargeBinary
	}
	return nil
}

func (x *ArrowType) GetFixedSizeBinary() int32 {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_FixedSizeBinary); ok {
		return x.FixedSizeBinary
	}
	return 0
}

func (x *ArrowType) GetDecimal_128() *Decimal {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Decimal_128); ok {
		return x.Decimal_128
	}
	return nil
}

func (x *ArrowType) GetDecimal_256() *Decimal {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Decimal_256); ok {
		return x.Decimal_256
	}
	return nil
}

func (x *ArrowType) GetMap() *Map {
	if x, ok := x.GetArrowTypeEnum().(*ArrowType_Map); ok {
		return x.Map
	}
	return nil
}

type isArrowType_ArrowTypeEnum interface {
	isArrowType_ArrowTypeEnum()
}

type ArrowType_None struct {
	// Group popular types at the top
	// to save space in the serialized
	// message.
	None *EmptyMessage `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type ArrowType_Bool struct {
	Bool *EmptyMessage `protobuf:"bytes,2,opt,name=bool,proto3,oneof"`
}

type ArrowType_Float64 struct {
	Float64 *EmptyMessage `protobuf:"bytes,3,opt,name=float64,proto3,oneof"`
}

type ArrowType_Int64 struct {
	Int64 *EmptyMessage `protobuf:"bytes,4,opt,name=int64,proto3,oneof"`
}

type ArrowType_LargeUtf8 struct {
	LargeUtf8 *EmptyMessage `protobuf:"bytes,5,opt,name=large_utf8,json=largeUtf8,proto3,oneof"`
}

type ArrowType_Timestamp struct {
	Timestamp *Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof"`
}

type ArrowType_Date64 struct {
	Date64 *EmptyMessage `protobuf:"bytes,7,opt,name=date64,proto3,oneof"`
}

type ArrowType_Struct struct {
	Struct *Struct `protobuf:"bytes,8,opt,name=struct,proto3,oneof"`
}

type ArrowType_LargeList struct {
	LargeList *List `protobuf:"bytes,9,opt,name=large_list,json=largeList,proto3,oneof"`
}

type ArrowType_Time64 struct {
	Time64 TimeUnit `protobuf:"varint,10,opt,name=time64,proto3,enum=chalk.arrow.v1.TimeUnit,oneof"`
}

type ArrowType_Duration struct {
	Duration TimeUnit `protobuf:"varint,16,opt,name=duration,proto3,enum=chalk.arrow.v1.TimeUnit,oneof"`
}

type ArrowType_Utf8 struct {
	Utf8 *EmptyMessage `protobuf:"bytes,17,opt,name=utf8,proto3,oneof"`
}

type ArrowType_Int8 struct {
	Int8 *EmptyMessage `protobuf:"bytes,18,opt,name=int8,proto3,oneof"`
}

type ArrowType_Int16 struct {
	Int16 *EmptyMessage `protobuf:"bytes,19,opt,name=int16,proto3,oneof"`
}

type ArrowType_Int32 struct {
	Int32 *EmptyMessage `protobuf:"bytes,20,opt,name=int32,proto3,oneof"`
}

type ArrowType_Uint8 struct {
	Uint8 *EmptyMessage `protobuf:"bytes,21,opt,name=uint8,proto3,oneof"`
}

type ArrowType_Uint16 struct {
	Uint16 *EmptyMessage `protobuf:"bytes,22,opt,name=uint16,proto3,oneof"`
}

type ArrowType_Uint32 struct {
	Uint32 *EmptyMessage `protobuf:"bytes,23,opt,name=uint32,proto3,oneof"`
}

type ArrowType_Uint64 struct {
	Uint64 *EmptyMessage `protobuf:"bytes,24,opt,name=uint64,proto3,oneof"`
}

type ArrowType_Float16 struct {
	Float16 *EmptyMessage `protobuf:"bytes,25,opt,name=float16,proto3,oneof"`
}

type ArrowType_Float32 struct {
	Float32 *EmptyMessage `protobuf:"bytes,26,opt,name=float32,proto3,oneof"`
}

type ArrowType_Date32 struct {
	Date32 *EmptyMessage `protobuf:"bytes,27,opt,name=date32,proto3,oneof"`
}

type ArrowType_Time32 struct {
	Time32 TimeUnit `protobuf:"varint,28,opt,name=time32,proto3,enum=chalk.arrow.v1.TimeUnit,oneof"`
}

type ArrowType_List struct {
	List *List `protobuf:"bytes,29,opt,name=list,proto3,oneof"`
}

type ArrowType_FixedSizeList struct {
	FixedSizeList *FixedSizeList `protobuf:"bytes,30,opt,name=fixed_size_list,json=fixedSizeList,proto3,oneof"`
}

type ArrowType_Binary struct {
	Binary *EmptyMessage `protobuf:"bytes,31,opt,name=binary,proto3,oneof"`
}

type ArrowType_LargeBinary struct {
	LargeBinary *EmptyMessage `protobuf:"bytes,32,opt,name=large_binary,json=largeBinary,proto3,oneof"`
}

type ArrowType_FixedSizeBinary struct {
	FixedSizeBinary int32 `protobuf:"varint,33,opt,name=fixed_size_binary,json=fixedSizeBinary,proto3,oneof"`
}

type ArrowType_Decimal_128 struct {
	Decimal_128 *Decimal `protobuf:"bytes,34,opt,name=decimal_128,json=decimal128,proto3,oneof"`
}

type ArrowType_Decimal_256 struct {
	Decimal_256 *Decimal `protobuf:"bytes,35,opt,name=decimal_256,json=decimal256,proto3,oneof"`
}

type ArrowType_Map struct {
	Map *Map `protobuf:"bytes,36,opt,name=map,proto3,oneof"`
}

func (*ArrowType_None) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Bool) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Float64) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Int64) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_LargeUtf8) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Timestamp) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Date64) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Struct) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_LargeList) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Time64) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Duration) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Utf8) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Int8) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Int16) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Int32) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Uint8) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Uint16) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Uint32) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Uint64) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Float16) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Float32) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Date32) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Time32) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_List) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_FixedSizeList) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Binary) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_LargeBinary) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_FixedSizeBinary) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Decimal_128) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Decimal_256) isArrowType_ArrowTypeEnum() {}

func (*ArrowType_Map) isArrowType_ArrowTypeEnum() {}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_arrow_v1_arrow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_chalk_arrow_v1_arrow_proto_rawDescGZIP(), []int{18}
}

var File_chalk_arrow_v1_arrow_proto protoreflect.FileDescriptor

var file_chalk_arrow_v1_arrow_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x22, 0xb8, 0x01, 0x0a,
	0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x3f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x0f,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x3d, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x47, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x22, 0x60, 0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x33, 0x32, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a,
	0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x69, 0x6d,
	0x65, 0x36, 0x34, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x16, 0x74,
	0x69, 0x6d, 0x65, 0x36, 0x34, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x36, 0x34, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x36, 0x34,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x14, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x14, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x58, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xa4, 0x0e, 0x0a, 0x0b,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x74, 0x66, 0x38,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x55, 0x74, 0x66, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x13, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x18, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x18, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x17, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x74, 0x66, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x74, 0x66, 0x38, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x38, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74,
	0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0a, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e,
	0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x32,
	0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x32, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49,
	0x0a, 0x10, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x32, 0x35, 0x36, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x32, 0x35, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xce, 0x0d, 0x0a, 0x09, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x36, 0x34, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x75, 0x74, 0x66, 0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x55, 0x74, 0x66, 0x38, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0a,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x36, 0x34, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x04, 0x75, 0x74, 0x66, 0x38, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75,
	0x74, 0x66, 0x38, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x34, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x31, 0x36, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x36, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x36, 0x12, 0x38, 0x0a, 0x07, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x33, 0x32, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x33, 0x32, 0x12, 0x32, 0x0a,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x33,
	0x32, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x41,
	0x0a, 0x0c, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x31, 0x32, 0x38, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x31, 0x32, 0x38, 0x12, 0x3a, 0x0a, 0x0b, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x32, 0x35, 0x36, 0x12, 0x27, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x42, 0x11, 0x0a, 0x0f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0x8b, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d,
	0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x04, 0x2a, 0x9a, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x45, 0x41, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x5a, 0x34, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x03, 0x42, 0xb3,
	0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x41, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x41, 0x72, 0x72,
	0x6f, 0x77, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x41, 0x72, 0x72, 0x6f, 0x77,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_arrow_v1_arrow_proto_rawDescOnce sync.Once
	file_chalk_arrow_v1_arrow_proto_rawDescData = file_chalk_arrow_v1_arrow_proto_rawDesc
)

func file_chalk_arrow_v1_arrow_proto_rawDescGZIP() []byte {
	file_chalk_arrow_v1_arrow_proto_rawDescOnce.Do(func() {
		file_chalk_arrow_v1_arrow_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_arrow_v1_arrow_proto_rawDescData)
	})
	return file_chalk_arrow_v1_arrow_proto_rawDescData
}

var file_chalk_arrow_v1_arrow_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_arrow_v1_arrow_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_chalk_arrow_v1_arrow_proto_goTypes = []any{
	(TimeUnit)(0),                 // 0: chalk.arrow.v1.TimeUnit
	(FeatherCompression)(0),       // 1: chalk.arrow.v1.FeatherCompression
	(*Schema)(nil),                // 2: chalk.arrow.v1.Schema
	(*Field)(nil),                 // 3: chalk.arrow.v1.Field
	(*FixedSizeBinary)(nil),       // 4: chalk.arrow.v1.FixedSizeBinary
	(*Timestamp)(nil),             // 5: chalk.arrow.v1.Timestamp
	(*Decimal)(nil),               // 6: chalk.arrow.v1.Decimal
	(*List)(nil),                  // 7: chalk.arrow.v1.List
	(*FixedSizeList)(nil),         // 8: chalk.arrow.v1.FixedSizeList
	(*Struct)(nil),                // 9: chalk.arrow.v1.Struct
	(*Map)(nil),                   // 10: chalk.arrow.v1.Map
	(*ScalarListValue)(nil),       // 11: chalk.arrow.v1.ScalarListValue
	(*ScalarTime32Value)(nil),     // 12: chalk.arrow.v1.ScalarTime32Value
	(*ScalarTime64Value)(nil),     // 13: chalk.arrow.v1.ScalarTime64Value
	(*ScalarTimestampValue)(nil),  // 14: chalk.arrow.v1.ScalarTimestampValue
	(*StructValue)(nil),           // 15: chalk.arrow.v1.StructValue
	(*ScalarFixedSizeBinary)(nil), // 16: chalk.arrow.v1.ScalarFixedSizeBinary
	(*DecimalValue)(nil),          // 17: chalk.arrow.v1.DecimalValue
	(*ScalarValue)(nil),           // 18: chalk.arrow.v1.ScalarValue
	(*ArrowType)(nil),             // 19: chalk.arrow.v1.ArrowType
	(*EmptyMessage)(nil),          // 20: chalk.arrow.v1.EmptyMessage
	nil,                           // 21: chalk.arrow.v1.Schema.MetadataEntry
	nil,                           // 22: chalk.arrow.v1.Field.MetadataEntry
}
var file_chalk_arrow_v1_arrow_proto_depIdxs = []int32{
	3,  // 0: chalk.arrow.v1.Schema.columns:type_name -> chalk.arrow.v1.Field
	21, // 1: chalk.arrow.v1.Schema.metadata:type_name -> chalk.arrow.v1.Schema.MetadataEntry
	19, // 2: chalk.arrow.v1.Field.arrow_type:type_name -> chalk.arrow.v1.ArrowType
	3,  // 3: chalk.arrow.v1.Field.children:type_name -> chalk.arrow.v1.Field
	22, // 4: chalk.arrow.v1.Field.metadata:type_name -> chalk.arrow.v1.Field.MetadataEntry
	0,  // 5: chalk.arrow.v1.Timestamp.time_unit:type_name -> chalk.arrow.v1.TimeUnit
	3,  // 6: chalk.arrow.v1.List.field_type:type_name -> chalk.arrow.v1.Field
	3,  // 7: chalk.arrow.v1.FixedSizeList.field_type:type_name -> chalk.arrow.v1.Field
	3,  // 8: chalk.arrow.v1.Struct.sub_field_types:type_name -> chalk.arrow.v1.Field
	3,  // 9: chalk.arrow.v1.Map.key_field:type_name -> chalk.arrow.v1.Field
	3,  // 10: chalk.arrow.v1.Map.item_field:type_name -> chalk.arrow.v1.Field
	2,  // 11: chalk.arrow.v1.ScalarListValue.schema:type_name -> chalk.arrow.v1.Schema
	18, // 12: chalk.arrow.v1.StructValue.field_values:type_name -> chalk.arrow.v1.ScalarValue
	3,  // 13: chalk.arrow.v1.StructValue.fields:type_name -> chalk.arrow.v1.Field
	19, // 14: chalk.arrow.v1.ScalarValue.null_value:type_name -> chalk.arrow.v1.ArrowType
	14, // 15: chalk.arrow.v1.ScalarValue.timestamp_value:type_name -> chalk.arrow.v1.ScalarTimestampValue
	15, // 16: chalk.arrow.v1.ScalarValue.struct_value:type_name -> chalk.arrow.v1.StructValue
	11, // 17: chalk.arrow.v1.ScalarValue.large_list_value:type_name -> chalk.arrow.v1.ScalarListValue
	13, // 18: chalk.arrow.v1.ScalarValue.time64_value:type_name -> chalk.arrow.v1.ScalarTime64Value
	12, // 19: chalk.arrow.v1.ScalarValue.time32_value:type_name -> chalk.arrow.v1.ScalarTime32Value
	11, // 20: chalk.arrow.v1.ScalarValue.list_value:type_name -> chalk.arrow.v1.ScalarListValue
	11, // 21: chalk.arrow.v1.ScalarValue.fixed_size_list_value:type_name -> chalk.arrow.v1.ScalarListValue
	11, // 22: chalk.arrow.v1.ScalarValue.map_value:type_name -> chalk.arrow.v1.ScalarListValue
	16, // 23: chalk.arrow.v1.ScalarValue.fixed_size_binary_value:type_name -> chalk.arrow.v1.ScalarFixedSizeBinary
	17, // 24: chalk.arrow.v1.ScalarValue.decimal128_value:type_name -> chalk.arrow.v1.DecimalValue
	17, // 25: chalk.arrow.v1.ScalarValue.decimal256_value:type_name -> chalk.arrow.v1.DecimalValue
	20, // 26: chalk.arrow.v1.ArrowType.none:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 27: chalk.arrow.v1.ArrowType.bool:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 28: chalk.arrow.v1.ArrowType.float64:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 29: chalk.arrow.v1.ArrowType.int64:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 30: chalk.arrow.v1.ArrowType.large_utf8:type_name -> chalk.arrow.v1.EmptyMessage
	5,  // 31: chalk.arrow.v1.ArrowType.timestamp:type_name -> chalk.arrow.v1.Timestamp
	20, // 32: chalk.arrow.v1.ArrowType.date64:type_name -> chalk.arrow.v1.EmptyMessage
	9,  // 33: chalk.arrow.v1.ArrowType.struct:type_name -> chalk.arrow.v1.Struct
	7,  // 34: chalk.arrow.v1.ArrowType.large_list:type_name -> chalk.arrow.v1.List
	0,  // 35: chalk.arrow.v1.ArrowType.time64:type_name -> chalk.arrow.v1.TimeUnit
	0,  // 36: chalk.arrow.v1.ArrowType.duration:type_name -> chalk.arrow.v1.TimeUnit
	20, // 37: chalk.arrow.v1.ArrowType.utf8:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 38: chalk.arrow.v1.ArrowType.int8:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 39: chalk.arrow.v1.ArrowType.int16:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 40: chalk.arrow.v1.ArrowType.int32:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 41: chalk.arrow.v1.ArrowType.uint8:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 42: chalk.arrow.v1.ArrowType.uint16:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 43: chalk.arrow.v1.ArrowType.uint32:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 44: chalk.arrow.v1.ArrowType.uint64:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 45: chalk.arrow.v1.ArrowType.float16:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 46: chalk.arrow.v1.ArrowType.float32:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 47: chalk.arrow.v1.ArrowType.date32:type_name -> chalk.arrow.v1.EmptyMessage
	0,  // 48: chalk.arrow.v1.ArrowType.time32:type_name -> chalk.arrow.v1.TimeUnit
	7,  // 49: chalk.arrow.v1.ArrowType.list:type_name -> chalk.arrow.v1.List
	8,  // 50: chalk.arrow.v1.ArrowType.fixed_size_list:type_name -> chalk.arrow.v1.FixedSizeList
	20, // 51: chalk.arrow.v1.ArrowType.binary:type_name -> chalk.arrow.v1.EmptyMessage
	20, // 52: chalk.arrow.v1.ArrowType.large_binary:type_name -> chalk.arrow.v1.EmptyMessage
	6,  // 53: chalk.arrow.v1.ArrowType.decimal_128:type_name -> chalk.arrow.v1.Decimal
	6,  // 54: chalk.arrow.v1.ArrowType.decimal_256:type_name -> chalk.arrow.v1.Decimal
	10, // 55: chalk.arrow.v1.ArrowType.map:type_name -> chalk.arrow.v1.Map
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_chalk_arrow_v1_arrow_proto_init() }
func file_chalk_arrow_v1_arrow_proto_init() {
	if File_chalk_arrow_v1_arrow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_arrow_v1_arrow_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FixedSizeBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FixedSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarTime32Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarTime64Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarTimestampValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*StructValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarFixedSizeBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DecimalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ScalarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ArrowType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_arrow_v1_arrow_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_arrow_v1_arrow_proto_msgTypes[10].OneofWrappers = []any{
		(*ScalarTime32Value_Time32SecondValue)(nil),
		(*ScalarTime32Value_Time32MillisecondValue)(nil),
	}
	file_chalk_arrow_v1_arrow_proto_msgTypes[11].OneofWrappers = []any{
		(*ScalarTime64Value_Time64MicrosecondValue)(nil),
		(*ScalarTime64Value_Time64NanosecondValue)(nil),
	}
	file_chalk_arrow_v1_arrow_proto_msgTypes[12].OneofWrappers = []any{
		(*ScalarTimestampValue_TimeMicrosecondValue)(nil),
		(*ScalarTimestampValue_TimeNanosecondValue)(nil),
		(*ScalarTimestampValue_TimeSecondValue)(nil),
		(*ScalarTimestampValue_TimeMillisecondValue)(nil),
	}
	file_chalk_arrow_v1_arrow_proto_msgTypes[16].OneofWrappers = []any{
		(*ScalarValue_NullValue)(nil),
		(*ScalarValue_BoolValue)(nil),
		(*ScalarValue_Float64Value)(nil),
		(*ScalarValue_Int64Value)(nil),
		(*ScalarValue_LargeUtf8Value)(nil),
		(*ScalarValue_TimestampValue)(nil),
		(*ScalarValue_Date_64Value)(nil),
		(*ScalarValue_StructValue)(nil),
		(*ScalarValue_LargeListValue)(nil),
		(*ScalarValue_Time64Value)(nil),
		(*ScalarValue_DurationSecondValue)(nil),
		(*ScalarValue_DurationMillisecondValue)(nil),
		(*ScalarValue_DurationMicrosecondValue)(nil),
		(*ScalarValue_DurationNanosecondValue)(nil),
		(*ScalarValue_Utf8Value)(nil),
		(*ScalarValue_Int8Value)(nil),
		(*ScalarValue_Int16Value)(nil),
		(*ScalarValue_Int32Value)(nil),
		(*ScalarValue_Uint8Value)(nil),
		(*ScalarValue_Uint16Value)(nil),
		(*ScalarValue_Uint32Value)(nil),
		(*ScalarValue_Uint64Value)(nil),
		(*ScalarValue_Float16Value)(nil),
		(*ScalarValue_Float32Value)(nil),
		(*ScalarValue_Date_32Value)(nil),
		(*ScalarValue_Time32Value)(nil),
		(*ScalarValue_ListValue)(nil),
		(*ScalarValue_FixedSizeListValue)(nil),
		(*ScalarValue_MapValue)(nil),
		(*ScalarValue_BinaryValue)(nil),
		(*ScalarValue_LargeBinaryValue)(nil),
		(*ScalarValue_FixedSizeBinaryValue)(nil),
		(*ScalarValue_Decimal128Value)(nil),
		(*ScalarValue_Decimal256Value)(nil),
	}
	file_chalk_arrow_v1_arrow_proto_msgTypes[17].OneofWrappers = []any{
		(*ArrowType_None)(nil),
		(*ArrowType_Bool)(nil),
		(*ArrowType_Float64)(nil),
		(*ArrowType_Int64)(nil),
		(*ArrowType_LargeUtf8)(nil),
		(*ArrowType_Timestamp)(nil),
		(*ArrowType_Date64)(nil),
		(*ArrowType_Struct)(nil),
		(*ArrowType_LargeList)(nil),
		(*ArrowType_Time64)(nil),
		(*ArrowType_Duration)(nil),
		(*ArrowType_Utf8)(nil),
		(*ArrowType_Int8)(nil),
		(*ArrowType_Int16)(nil),
		(*ArrowType_Int32)(nil),
		(*ArrowType_Uint8)(nil),
		(*ArrowType_Uint16)(nil),
		(*ArrowType_Uint32)(nil),
		(*ArrowType_Uint64)(nil),
		(*ArrowType_Float16)(nil),
		(*ArrowType_Float32)(nil),
		(*ArrowType_Date32)(nil),
		(*ArrowType_Time32)(nil),
		(*ArrowType_List)(nil),
		(*ArrowType_FixedSizeList)(nil),
		(*ArrowType_Binary)(nil),
		(*ArrowType_LargeBinary)(nil),
		(*ArrowType_FixedSizeBinary)(nil),
		(*ArrowType_Decimal_128)(nil),
		(*ArrowType_Decimal_256)(nil),
		(*ArrowType_Map)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_arrow_v1_arrow_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_arrow_v1_arrow_proto_goTypes,
		DependencyIndexes: file_chalk_arrow_v1_arrow_proto_depIdxs,
		EnumInfos:         file_chalk_arrow_v1_arrow_proto_enumTypes,
		MessageInfos:      file_chalk_arrow_v1_arrow_proto_msgTypes,
	}.Build()
	File_chalk_arrow_v1_arrow_proto = out.File
	file_chalk_arrow_v1_arrow_proto_rawDesc = nil
	file_chalk_arrow_v1_arrow_proto_goTypes = nil
	file_chalk_arrow_v1_arrow_proto_depIdxs = nil
}
