// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: chalk/python/v1/types.proto

package pythonv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TySet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         *Ty                    `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TySet) Reset() {
	*x = TySet{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TySet) ProtoMessage() {}

func (x *TySet) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TySet.ProtoReflect.Descriptor instead.
func (*TySet) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *TySet) GetItems() *Ty {
	if x != nil {
		return x.Items
	}
	return nil
}

type TyList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         *Ty                    `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TyList) Reset() {
	*x = TyList{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyList) ProtoMessage() {}

func (x *TyList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyList.ProtoReflect.Descriptor instead.
func (*TyList) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *TyList) GetItems() *Ty {
	if x != nil {
		return x.Items
	}
	return nil
}

type TyIterable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         *Ty                    `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TyIterable) Reset() {
	*x = TyIterable{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyIterable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyIterable) ProtoMessage() {}

func (x *TyIterable) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyIterable.ProtoReflect.Descriptor instead.
func (*TyIterable) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *TyIterable) GetItems() *Ty {
	if x != nil {
		return x.Items
	}
	return nil
}

type TyDatetime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tz            *string                `protobuf:"bytes,1,opt,name=tz,proto3,oneof" json:"tz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TyDatetime) Reset() {
	*x = TyDatetime{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyDatetime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyDatetime) ProtoMessage() {}

func (x *TyDatetime) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyDatetime.ProtoReflect.Descriptor instead.
func (*TyDatetime) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *TyDatetime) GetTz() string {
	if x != nil && x.Tz != nil {
		return *x.Tz
	}
	return ""
}

type TyDict struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *Ty                    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *Ty                    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TyDict) Reset() {
	*x = TyDict{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyDict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyDict) ProtoMessage() {}

func (x *TyDict) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyDict.ProtoReflect.Descriptor instead.
func (*TyDict) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *TyDict) GetKey() *Ty {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TyDict) GetValue() *Ty {
	if x != nil {
		return x.Value
	}
	return nil
}

type TyTuple struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fixed         []*Ty                  `protobuf:"bytes,1,rep,name=fixed,proto3" json:"fixed,omitempty"`
	IsVariable    bool                   `protobuf:"varint,2,opt,name=is_variable,json=isVariable,proto3" json:"is_variable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TyTuple) Reset() {
	*x = TyTuple{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyTuple) ProtoMessage() {}

func (x *TyTuple) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyTuple.ProtoReflect.Descriptor instead.
func (*TyTuple) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *TyTuple) GetFixed() []*Ty {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *TyTuple) GetIsVariable() bool {
	if x != nil {
		return x.IsVariable
	}
	return false
}

type Ty struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Nullable bool                   `protobuf:"varint,1,opt,name=nullable,proto3" json:"nullable,omitempty"`
	// Types that are valid to be assigned to Ty:
	//
	//	*Ty_Int
	//	*Ty_Str
	//	*Ty_Bool
	//	*Ty_Float
	//	*Ty_List
	//	*Ty_Set
	//	*Ty_None
	//	*Ty_Any
	//	*Ty_Iterable
	//	*Ty_Datetime
	//	*Ty_Timedelta
	//	*Ty_Date
	//	*Ty_Tuple
	//	*Ty_Dict
	//	*Ty_Bytes
	Ty            isTy_Ty `protobuf_oneof:"ty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ty) Reset() {
	*x = Ty{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ty) ProtoMessage() {}

func (x *Ty) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ty.ProtoReflect.Descriptor instead.
func (*Ty) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *Ty) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *Ty) GetTy() isTy_Ty {
	if x != nil {
		return x.Ty
	}
	return nil
}

func (x *Ty) GetInt() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Int); ok {
			return x.Int
		}
	}
	return nil
}

func (x *Ty) GetStr() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Str); ok {
			return x.Str
		}
	}
	return nil
}

func (x *Ty) GetBool() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *Ty) GetFloat() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *Ty) GetList() *TyList {
	if x != nil {
		if x, ok := x.Ty.(*Ty_List); ok {
			return x.List
		}
	}
	return nil
}

func (x *Ty) GetSet() *TySet {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Set); ok {
			return x.Set
		}
	}
	return nil
}

func (x *Ty) GetNone() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_None); ok {
			return x.None
		}
	}
	return nil
}

func (x *Ty) GetAny() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Any); ok {
			return x.Any
		}
	}
	return nil
}

func (x *Ty) GetIterable() *TyIterable {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Iterable); ok {
			return x.Iterable
		}
	}
	return nil
}

func (x *Ty) GetDatetime() *TyDatetime {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Datetime); ok {
			return x.Datetime
		}
	}
	return nil
}

func (x *Ty) GetTimedelta() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Timedelta); ok {
			return x.Timedelta
		}
	}
	return nil
}

func (x *Ty) GetDate() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Date); ok {
			return x.Date
		}
	}
	return nil
}

func (x *Ty) GetTuple() *TyTuple {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Tuple); ok {
			return x.Tuple
		}
	}
	return nil
}

func (x *Ty) GetDict() *TyDict {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Dict); ok {
			return x.Dict
		}
	}
	return nil
}

func (x *Ty) GetBytes() *EmptyMessage {
	if x != nil {
		if x, ok := x.Ty.(*Ty_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

type isTy_Ty interface {
	isTy_Ty()
}

type Ty_Int struct {
	Int *EmptyMessage `protobuf:"bytes,2,opt,name=int,proto3,oneof"`
}

type Ty_Str struct {
	Str *EmptyMessage `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type Ty_Bool struct {
	Bool *EmptyMessage `protobuf:"bytes,4,opt,name=bool,proto3,oneof"`
}

type Ty_Float struct {
	Float *EmptyMessage `protobuf:"bytes,5,opt,name=float,proto3,oneof"`
}

type Ty_List struct {
	List *TyList `protobuf:"bytes,6,opt,name=list,proto3,oneof"`
}

type Ty_Set struct {
	Set *TySet `protobuf:"bytes,7,opt,name=set,proto3,oneof"`
}

type Ty_None struct {
	None *EmptyMessage `protobuf:"bytes,8,opt,name=none,proto3,oneof"`
}

type Ty_Any struct {
	Any *EmptyMessage `protobuf:"bytes,9,opt,name=any,proto3,oneof"`
}

type Ty_Iterable struct {
	Iterable *TyIterable `protobuf:"bytes,10,opt,name=iterable,proto3,oneof"`
}

type Ty_Datetime struct {
	Datetime *TyDatetime `protobuf:"bytes,11,opt,name=datetime,proto3,oneof"`
}

type Ty_Timedelta struct {
	Timedelta *EmptyMessage `protobuf:"bytes,12,opt,name=timedelta,proto3,oneof"`
}

type Ty_Date struct {
	Date *EmptyMessage `protobuf:"bytes,13,opt,name=date,proto3,oneof"`
}

type Ty_Tuple struct {
	Tuple *TyTuple `protobuf:"bytes,14,opt,name=tuple,proto3,oneof"`
}

type Ty_Dict struct {
	Dict *TyDict `protobuf:"bytes,15,opt,name=dict,proto3,oneof"`
}

type Ty_Bytes struct {
	Bytes *EmptyMessage `protobuf:"bytes,16,opt,name=bytes,proto3,oneof"`
}

func (*Ty_Int) isTy_Ty() {}

func (*Ty_Str) isTy_Ty() {}

func (*Ty_Bool) isTy_Ty() {}

func (*Ty_Float) isTy_Ty() {}

func (*Ty_List) isTy_Ty() {}

func (*Ty_Set) isTy_Ty() {}

func (*Ty_None) isTy_Ty() {}

func (*Ty_Any) isTy_Ty() {}

func (*Ty_Iterable) isTy_Ty() {}

func (*Ty_Datetime) isTy_Ty() {}

func (*Ty_Timedelta) isTy_Ty() {}

func (*Ty_Date) isTy_Ty() {}

func (*Ty_Tuple) isTy_Ty() {}

func (*Ty_Dict) isTy_Ty() {}

func (*Ty_Bytes) isTy_Ty() {}

type EmptyMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{7}
}

type SymbolicConst struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ty            *Ty                    `protobuf:"bytes,1,opt,name=ty,proto3" json:"ty,omitempty"`
	Value         *v1.ScalarValue        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SymbolicConst) Reset() {
	*x = SymbolicConst{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicConst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicConst) ProtoMessage() {}

func (x *SymbolicConst) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicConst.ProtoReflect.Descriptor instead.
func (*SymbolicConst) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *SymbolicConst) GetTy() *Ty {
	if x != nil {
		return x.Ty
	}
	return nil
}

func (x *SymbolicConst) GetValue() *v1.ScalarValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type CodeVariable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Module        string                 `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeVariable) Reset() {
	*x = CodeVariable{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeVariable) ProtoMessage() {}

func (x *CodeVariable) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeVariable.ProtoReflect.Descriptor instead.
func (*CodeVariable) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *CodeVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeVariable) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type CodeVariableValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Variable      *CodeVariable          `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
	Value         *SymbolicConst         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeVariableValue) Reset() {
	*x = CodeVariableValue{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeVariableValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeVariableValue) ProtoMessage() {}

func (x *CodeVariableValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeVariableValue.ProtoReflect.Descriptor instead.
func (*CodeVariableValue) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{10}
}

func (x *CodeVariableValue) GetVariable() *CodeVariable {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *CodeVariableValue) GetValue() *SymbolicConst {
	if x != nil {
		return x.Value
	}
	return nil
}

type GlobalVariablesInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CodeVariables        []*CodeVariableValue   `protobuf:"bytes,1,rep,name=code_variables,json=codeVariables,proto3" json:"code_variables,omitempty"`
	EnvironmentVariables map[string]string      `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GlobalVariablesInfo) Reset() {
	*x = GlobalVariablesInfo{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalVariablesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalVariablesInfo) ProtoMessage() {}

func (x *GlobalVariablesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalVariablesInfo.ProtoReflect.Descriptor instead.
func (*GlobalVariablesInfo) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{11}
}

func (x *GlobalVariablesInfo) GetCodeVariables() []*CodeVariableValue {
	if x != nil {
		return x.CodeVariables
	}
	return nil
}

func (x *GlobalVariablesInfo) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

var File_chalk_python_v1_types_proto protoreflect.FileDescriptor

const file_chalk_python_v1_types_proto_rawDesc = "" +
	"\n" +
	"\x1bchalk/python/v1/types.proto\x12\x0fchalk.python.v1\x1a\x1achalk/arrow/v1/arrow.proto\"2\n" +
	"\x05TySet\x12)\n" +
	"\x05items\x18\x01 \x01(\v2\x13.chalk.python.v1.TyR\x05items\"3\n" +
	"\x06TyList\x12)\n" +
	"\x05items\x18\x01 \x01(\v2\x13.chalk.python.v1.TyR\x05items\"7\n" +
	"\n" +
	"TyIterable\x12)\n" +
	"\x05items\x18\x01 \x01(\v2\x13.chalk.python.v1.TyR\x05items\"(\n" +
	"\n" +
	"TyDatetime\x12\x13\n" +
	"\x02tz\x18\x01 \x01(\tH\x00R\x02tz\x88\x01\x01B\x05\n" +
	"\x03_tz\"Z\n" +
	"\x06TyDict\x12%\n" +
	"\x03key\x18\x01 \x01(\v2\x13.chalk.python.v1.TyR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.chalk.python.v1.TyR\x05value\"U\n" +
	"\aTyTuple\x12)\n" +
	"\x05fixed\x18\x01 \x03(\v2\x13.chalk.python.v1.TyR\x05fixed\x12\x1f\n" +
	"\vis_variable\x18\x02 \x01(\bR\n" +
	"isVariable\"\xbd\x06\n" +
	"\x02Ty\x12\x1a\n" +
	"\bnullable\x18\x01 \x01(\bR\bnullable\x121\n" +
	"\x03int\x18\x02 \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x03int\x121\n" +
	"\x03str\x18\x03 \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x03str\x123\n" +
	"\x04bool\x18\x04 \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x04bool\x125\n" +
	"\x05float\x18\x05 \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x05float\x12-\n" +
	"\x04list\x18\x06 \x01(\v2\x17.chalk.python.v1.TyListH\x00R\x04list\x12*\n" +
	"\x03set\x18\a \x01(\v2\x16.chalk.python.v1.TySetH\x00R\x03set\x123\n" +
	"\x04none\x18\b \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x04none\x121\n" +
	"\x03any\x18\t \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x03any\x129\n" +
	"\biterable\x18\n" +
	" \x01(\v2\x1b.chalk.python.v1.TyIterableH\x00R\biterable\x129\n" +
	"\bdatetime\x18\v \x01(\v2\x1b.chalk.python.v1.TyDatetimeH\x00R\bdatetime\x12=\n" +
	"\ttimedelta\x18\f \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\ttimedelta\x123\n" +
	"\x04date\x18\r \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x04date\x120\n" +
	"\x05tuple\x18\x0e \x01(\v2\x18.chalk.python.v1.TyTupleH\x00R\x05tuple\x12-\n" +
	"\x04dict\x18\x0f \x01(\v2\x17.chalk.python.v1.TyDictH\x00R\x04dict\x125\n" +
	"\x05bytes\x18\x10 \x01(\v2\x1d.chalk.python.v1.EmptyMessageH\x00R\x05bytesB\x04\n" +
	"\x02ty\"\x0e\n" +
	"\fEmptyMessage\"g\n" +
	"\rSymbolicConst\x12#\n" +
	"\x02ty\x18\x01 \x01(\v2\x13.chalk.python.v1.TyR\x02ty\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.chalk.arrow.v1.ScalarValueR\x05value\":\n" +
	"\fCodeVariable\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06module\x18\x02 \x01(\tR\x06module\"\x84\x01\n" +
	"\x11CodeVariableValue\x129\n" +
	"\bvariable\x18\x01 \x01(\v2\x1d.chalk.python.v1.CodeVariableR\bvariable\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.chalk.python.v1.SymbolicConstR\x05value\"\x9e\x02\n" +
	"\x13GlobalVariablesInfo\x12I\n" +
	"\x0ecode_variables\x18\x01 \x03(\v2\".chalk.python.v1.CodeVariableValueR\rcodeVariables\x12s\n" +
	"\x15environment_variables\x18\x02 \x03(\v2>.chalk.python.v1.GlobalVariablesInfo.EnvironmentVariablesEntryR\x14environmentVariables\x1aG\n" +
	"\x19EnvironmentVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xba\x01\n" +
	"\x13com.chalk.python.v1B\n" +
	"TypesProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/python/v1;pythonv1\xa2\x02\x03CPX\xaa\x02\x0fChalk.Python.V1\xca\x02\x0fChalk\\Python\\V1\xe2\x02\x1bChalk\\Python\\V1\\GPBMetadata\xea\x02\x11Chalk::Python::V1b\x06proto3"

var (
	file_chalk_python_v1_types_proto_rawDescOnce sync.Once
	file_chalk_python_v1_types_proto_rawDescData []byte
)

func file_chalk_python_v1_types_proto_rawDescGZIP() []byte {
	file_chalk_python_v1_types_proto_rawDescOnce.Do(func() {
		file_chalk_python_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_python_v1_types_proto_rawDesc), len(file_chalk_python_v1_types_proto_rawDesc)))
	})
	return file_chalk_python_v1_types_proto_rawDescData
}

var file_chalk_python_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_chalk_python_v1_types_proto_goTypes = []any{
	(*TySet)(nil),               // 0: chalk.python.v1.TySet
	(*TyList)(nil),              // 1: chalk.python.v1.TyList
	(*TyIterable)(nil),          // 2: chalk.python.v1.TyIterable
	(*TyDatetime)(nil),          // 3: chalk.python.v1.TyDatetime
	(*TyDict)(nil),              // 4: chalk.python.v1.TyDict
	(*TyTuple)(nil),             // 5: chalk.python.v1.TyTuple
	(*Ty)(nil),                  // 6: chalk.python.v1.Ty
	(*EmptyMessage)(nil),        // 7: chalk.python.v1.EmptyMessage
	(*SymbolicConst)(nil),       // 8: chalk.python.v1.SymbolicConst
	(*CodeVariable)(nil),        // 9: chalk.python.v1.CodeVariable
	(*CodeVariableValue)(nil),   // 10: chalk.python.v1.CodeVariableValue
	(*GlobalVariablesInfo)(nil), // 11: chalk.python.v1.GlobalVariablesInfo
	nil,                         // 12: chalk.python.v1.GlobalVariablesInfo.EnvironmentVariablesEntry
	(*v1.ScalarValue)(nil),      // 13: chalk.arrow.v1.ScalarValue
}
var file_chalk_python_v1_types_proto_depIdxs = []int32{
	6,  // 0: chalk.python.v1.TySet.items:type_name -> chalk.python.v1.Ty
	6,  // 1: chalk.python.v1.TyList.items:type_name -> chalk.python.v1.Ty
	6,  // 2: chalk.python.v1.TyIterable.items:type_name -> chalk.python.v1.Ty
	6,  // 3: chalk.python.v1.TyDict.key:type_name -> chalk.python.v1.Ty
	6,  // 4: chalk.python.v1.TyDict.value:type_name -> chalk.python.v1.Ty
	6,  // 5: chalk.python.v1.TyTuple.fixed:type_name -> chalk.python.v1.Ty
	7,  // 6: chalk.python.v1.Ty.int:type_name -> chalk.python.v1.EmptyMessage
	7,  // 7: chalk.python.v1.Ty.str:type_name -> chalk.python.v1.EmptyMessage
	7,  // 8: chalk.python.v1.Ty.bool:type_name -> chalk.python.v1.EmptyMessage
	7,  // 9: chalk.python.v1.Ty.float:type_name -> chalk.python.v1.EmptyMessage
	1,  // 10: chalk.python.v1.Ty.list:type_name -> chalk.python.v1.TyList
	0,  // 11: chalk.python.v1.Ty.set:type_name -> chalk.python.v1.TySet
	7,  // 12: chalk.python.v1.Ty.none:type_name -> chalk.python.v1.EmptyMessage
	7,  // 13: chalk.python.v1.Ty.any:type_name -> chalk.python.v1.EmptyMessage
	2,  // 14: chalk.python.v1.Ty.iterable:type_name -> chalk.python.v1.TyIterable
	3,  // 15: chalk.python.v1.Ty.datetime:type_name -> chalk.python.v1.TyDatetime
	7,  // 16: chalk.python.v1.Ty.timedelta:type_name -> chalk.python.v1.EmptyMessage
	7,  // 17: chalk.python.v1.Ty.date:type_name -> chalk.python.v1.EmptyMessage
	5,  // 18: chalk.python.v1.Ty.tuple:type_name -> chalk.python.v1.TyTuple
	4,  // 19: chalk.python.v1.Ty.dict:type_name -> chalk.python.v1.TyDict
	7,  // 20: chalk.python.v1.Ty.bytes:type_name -> chalk.python.v1.EmptyMessage
	6,  // 21: chalk.python.v1.SymbolicConst.ty:type_name -> chalk.python.v1.Ty
	13, // 22: chalk.python.v1.SymbolicConst.value:type_name -> chalk.arrow.v1.ScalarValue
	9,  // 23: chalk.python.v1.CodeVariableValue.variable:type_name -> chalk.python.v1.CodeVariable
	8,  // 24: chalk.python.v1.CodeVariableValue.value:type_name -> chalk.python.v1.SymbolicConst
	10, // 25: chalk.python.v1.GlobalVariablesInfo.code_variables:type_name -> chalk.python.v1.CodeVariableValue
	12, // 26: chalk.python.v1.GlobalVariablesInfo.environment_variables:type_name -> chalk.python.v1.GlobalVariablesInfo.EnvironmentVariablesEntry
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_chalk_python_v1_types_proto_init() }
func file_chalk_python_v1_types_proto_init() {
	if File_chalk_python_v1_types_proto != nil {
		return
	}
	file_chalk_python_v1_types_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_python_v1_types_proto_msgTypes[6].OneofWrappers = []any{
		(*Ty_Int)(nil),
		(*Ty_Str)(nil),
		(*Ty_Bool)(nil),
		(*Ty_Float)(nil),
		(*Ty_List)(nil),
		(*Ty_Set)(nil),
		(*Ty_None)(nil),
		(*Ty_Any)(nil),
		(*Ty_Iterable)(nil),
		(*Ty_Datetime)(nil),
		(*Ty_Timedelta)(nil),
		(*Ty_Date)(nil),
		(*Ty_Tuple)(nil),
		(*Ty_Dict)(nil),
		(*Ty_Bytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_python_v1_types_proto_rawDesc), len(file_chalk_python_v1_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_python_v1_types_proto_goTypes,
		DependencyIndexes: file_chalk_python_v1_types_proto_depIdxs,
		MessageInfos:      file_chalk_python_v1_types_proto_msgTypes,
	}.Build()
	File_chalk_python_v1_types_proto = out.File
	file_chalk_python_v1_types_proto_goTypes = nil
	file_chalk_python_v1_types_proto_depIdxs = nil
}
