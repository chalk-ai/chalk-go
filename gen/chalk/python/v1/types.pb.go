// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/python/v1/types.proto

package pythonv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *Ty `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *TySet) Reset() {
	*x = TySet{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TySet) ProtoMessage() {}

func (x *TySet) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TySet.ProtoReflect.Descriptor instead.
func (*TySet) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *TySet) GetItems() *Ty {
	if x != nil {
		return x.Items
	}
	return nil
}

type TyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *Ty `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *TyList) Reset() {
	*x = TyList{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyList) ProtoMessage() {}

func (x *TyList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyList.ProtoReflect.Descriptor instead.
func (*TyList) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *TyList) GetItems() *Ty {
	if x != nil {
		return x.Items
	}
	return nil
}

type TyIterable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *Ty `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *TyIterable) Reset() {
	*x = TyIterable{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyIterable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyIterable) ProtoMessage() {}

func (x *TyIterable) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyIterable.ProtoReflect.Descriptor instead.
func (*TyIterable) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *TyIterable) GetItems() *Ty {
	if x != nil {
		return x.Items
	}
	return nil
}

type TyGenerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *Ty `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *TyGenerator) Reset() {
	*x = TyGenerator{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyGenerator) ProtoMessage() {}

func (x *TyGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyGenerator.ProtoReflect.Descriptor instead.
func (*TyGenerator) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *TyGenerator) GetItems() *Ty {
	if x != nil {
		return x.Items
	}
	return nil
}

type TyDatetime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tz *string `protobuf:"bytes,1,opt,name=tz,proto3,oneof" json:"tz,omitempty"`
}

func (x *TyDatetime) Reset() {
	*x = TyDatetime{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyDatetime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyDatetime) ProtoMessage() {}

func (x *TyDatetime) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyDatetime.ProtoReflect.Descriptor instead.
func (*TyDatetime) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *TyDatetime) GetTz() string {
	if x != nil && x.Tz != nil {
		return *x.Tz
	}
	return ""
}

type TyDict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *Ty `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Ty `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TyDict) Reset() {
	*x = TyDict{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyDict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyDict) ProtoMessage() {}

func (x *TyDict) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyDict.ProtoReflect.Descriptor instead.
func (*TyDict) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *TyDict) GetKey() *Ty {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TyDict) GetValue() *Ty {
	if x != nil {
		return x.Value
	}
	return nil
}

type TyTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fixed      []*Ty `protobuf:"bytes,1,rep,name=fixed,proto3" json:"fixed,omitempty"`
	IsVariable bool  `protobuf:"varint,2,opt,name=is_variable,json=isVariable,proto3" json:"is_variable,omitempty"`
}

func (x *TyTuple) Reset() {
	*x = TyTuple{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyTuple) ProtoMessage() {}

func (x *TyTuple) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyTuple.ProtoReflect.Descriptor instead.
func (*TyTuple) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *TyTuple) GetFixed() []*Ty {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *TyTuple) GetIsVariable() bool {
	if x != nil {
		return x.IsVariable
	}
	return false
}

type TyLogicalStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Ty `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TyLogicalStruct) Reset() {
	*x = TyLogicalStruct{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyLogicalStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyLogicalStruct) ProtoMessage() {}

func (x *TyLogicalStruct) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyLogicalStruct.ProtoReflect.Descriptor instead.
func (*TyLogicalStruct) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *TyLogicalStruct) GetFields() map[string]*Ty {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TyFeatureClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstructorNamespace string         `protobuf:"bytes,1,opt,name=constructor_namespace,json=constructorNamespace,proto3" json:"constructor_namespace,omitempty"`
	AssignedFields       map[string]*Ty `protobuf:"bytes,2,rep,name=assigned_fields,json=assignedFields,proto3" json:"assigned_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TyFeatureClass) Reset() {
	*x = TyFeatureClass{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyFeatureClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyFeatureClass) ProtoMessage() {}

func (x *TyFeatureClass) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyFeatureClass.ProtoReflect.Descriptor instead.
func (*TyFeatureClass) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *TyFeatureClass) GetConstructorNamespace() string {
	if x != nil {
		return x.ConstructorNamespace
	}
	return ""
}

func (x *TyFeatureClass) GetAssignedFields() map[string]*Ty {
	if x != nil {
		return x.AssignedFields
	}
	return nil
}

type TyEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bases  []*Ty  `protobuf:"bytes,3,rep,name=bases,proto3" json:"bases,omitempty"`
	Ty     *Ty    `protobuf:"bytes,4,opt,name=ty,proto3" json:"ty,omitempty"`
}

func (x *TyEnum) Reset() {
	*x = TyEnum{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TyEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TyEnum) ProtoMessage() {}

func (x *TyEnum) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TyEnum.ProtoReflect.Descriptor instead.
func (*TyEnum) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *TyEnum) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *TyEnum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TyEnum) GetBases() []*Ty {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *TyEnum) GetTy() *Ty {
	if x != nil {
		return x.Ty
	}
	return nil
}

type Ty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nullable bool `protobuf:"varint,1,opt,name=nullable,proto3" json:"nullable,omitempty"`
	// Types that are assignable to Ty:
	//
	//	*Ty_Int
	//	*Ty_Str
	//	*Ty_Bool
	//	*Ty_Float
	//	*Ty_List
	//	*Ty_Set
	//	*Ty_None
	//	*Ty_Any
	//	*Ty_Iterable
	//	*Ty_Datetime
	//	*Ty_Timedelta
	//	*Ty_Date
	//	*Ty_Tuple
	//	*Ty_Dict
	//	*Ty_Bytes
	//	*Ty_LogicalStruct
	//	*Ty_FeatureClass
	//	*Ty_Enum
	//	*Ty_SequenceMatcher
	//	*Ty_Generator
	Ty isTy_Ty `protobuf_oneof:"ty"`
}

func (x *Ty) Reset() {
	*x = Ty{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ty) ProtoMessage() {}

func (x *Ty) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ty.ProtoReflect.Descriptor instead.
func (*Ty) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{10}
}

func (x *Ty) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (m *Ty) GetTy() isTy_Ty {
	if m != nil {
		return m.Ty
	}
	return nil
}

func (x *Ty) GetInt() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Int); ok {
		return x.Int
	}
	return nil
}

func (x *Ty) GetStr() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Str); ok {
		return x.Str
	}
	return nil
}

func (x *Ty) GetBool() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *Ty) GetFloat() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Float); ok {
		return x.Float
	}
	return nil
}

func (x *Ty) GetList() *TyList {
	if x, ok := x.GetTy().(*Ty_List); ok {
		return x.List
	}
	return nil
}

func (x *Ty) GetSet() *TySet {
	if x, ok := x.GetTy().(*Ty_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Ty) GetNone() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_None); ok {
		return x.None
	}
	return nil
}

func (x *Ty) GetAny() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Ty) GetIterable() *TyIterable {
	if x, ok := x.GetTy().(*Ty_Iterable); ok {
		return x.Iterable
	}
	return nil
}

func (x *Ty) GetDatetime() *TyDatetime {
	if x, ok := x.GetTy().(*Ty_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (x *Ty) GetTimedelta() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Timedelta); ok {
		return x.Timedelta
	}
	return nil
}

func (x *Ty) GetDate() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Ty) GetTuple() *TyTuple {
	if x, ok := x.GetTy().(*Ty_Tuple); ok {
		return x.Tuple
	}
	return nil
}

func (x *Ty) GetDict() *TyDict {
	if x, ok := x.GetTy().(*Ty_Dict); ok {
		return x.Dict
	}
	return nil
}

func (x *Ty) GetBytes() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Ty) GetLogicalStruct() *TyLogicalStruct {
	if x, ok := x.GetTy().(*Ty_LogicalStruct); ok {
		return x.LogicalStruct
	}
	return nil
}

func (x *Ty) GetFeatureClass() *TyFeatureClass {
	if x, ok := x.GetTy().(*Ty_FeatureClass); ok {
		return x.FeatureClass
	}
	return nil
}

func (x *Ty) GetEnum() *TyEnum {
	if x, ok := x.GetTy().(*Ty_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *Ty) GetSequenceMatcher() *EmptyMessage {
	if x, ok := x.GetTy().(*Ty_SequenceMatcher); ok {
		return x.SequenceMatcher
	}
	return nil
}

func (x *Ty) GetGenerator() *TyGenerator {
	if x, ok := x.GetTy().(*Ty_Generator); ok {
		return x.Generator
	}
	return nil
}

type isTy_Ty interface {
	isTy_Ty()
}

type Ty_Int struct {
	Int *EmptyMessage `protobuf:"bytes,2,opt,name=int,proto3,oneof"`
}

type Ty_Str struct {
	Str *EmptyMessage `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type Ty_Bool struct {
	Bool *EmptyMessage `protobuf:"bytes,4,opt,name=bool,proto3,oneof"`
}

type Ty_Float struct {
	Float *EmptyMessage `protobuf:"bytes,5,opt,name=float,proto3,oneof"`
}

type Ty_List struct {
	List *TyList `protobuf:"bytes,6,opt,name=list,proto3,oneof"`
}

type Ty_Set struct {
	Set *TySet `protobuf:"bytes,7,opt,name=set,proto3,oneof"`
}

type Ty_None struct {
	None *EmptyMessage `protobuf:"bytes,8,opt,name=none,proto3,oneof"`
}

type Ty_Any struct {
	Any *EmptyMessage `protobuf:"bytes,9,opt,name=any,proto3,oneof"`
}

type Ty_Iterable struct {
	Iterable *TyIterable `protobuf:"bytes,10,opt,name=iterable,proto3,oneof"`
}

type Ty_Datetime struct {
	Datetime *TyDatetime `protobuf:"bytes,11,opt,name=datetime,proto3,oneof"`
}

type Ty_Timedelta struct {
	Timedelta *EmptyMessage `protobuf:"bytes,12,opt,name=timedelta,proto3,oneof"`
}

type Ty_Date struct {
	Date *EmptyMessage `protobuf:"bytes,13,opt,name=date,proto3,oneof"`
}

type Ty_Tuple struct {
	Tuple *TyTuple `protobuf:"bytes,14,opt,name=tuple,proto3,oneof"`
}

type Ty_Dict struct {
	Dict *TyDict `protobuf:"bytes,15,opt,name=dict,proto3,oneof"`
}

type Ty_Bytes struct {
	Bytes *EmptyMessage `protobuf:"bytes,16,opt,name=bytes,proto3,oneof"`
}

type Ty_LogicalStruct struct {
	LogicalStruct *TyLogicalStruct `protobuf:"bytes,17,opt,name=logical_struct,json=logicalStruct,proto3,oneof"`
}

type Ty_FeatureClass struct {
	FeatureClass *TyFeatureClass `protobuf:"bytes,18,opt,name=feature_class,json=featureClass,proto3,oneof"`
}

type Ty_Enum struct {
	Enum *TyEnum `protobuf:"bytes,19,opt,name=enum,proto3,oneof"`
}

type Ty_SequenceMatcher struct {
	SequenceMatcher *EmptyMessage `protobuf:"bytes,20,opt,name=sequence_matcher,json=sequenceMatcher,proto3,oneof"`
}

type Ty_Generator struct {
	Generator *TyGenerator `protobuf:"bytes,21,opt,name=generator,proto3,oneof"`
}

func (*Ty_Int) isTy_Ty() {}

func (*Ty_Str) isTy_Ty() {}

func (*Ty_Bool) isTy_Ty() {}

func (*Ty_Float) isTy_Ty() {}

func (*Ty_List) isTy_Ty() {}

func (*Ty_Set) isTy_Ty() {}

func (*Ty_None) isTy_Ty() {}

func (*Ty_Any) isTy_Ty() {}

func (*Ty_Iterable) isTy_Ty() {}

func (*Ty_Datetime) isTy_Ty() {}

func (*Ty_Timedelta) isTy_Ty() {}

func (*Ty_Date) isTy_Ty() {}

func (*Ty_Tuple) isTy_Ty() {}

func (*Ty_Dict) isTy_Ty() {}

func (*Ty_Bytes) isTy_Ty() {}

func (*Ty_LogicalStruct) isTy_Ty() {}

func (*Ty_FeatureClass) isTy_Ty() {}

func (*Ty_Enum) isTy_Ty() {}

func (*Ty_SequenceMatcher) isTy_Ty() {}

func (*Ty_Generator) isTy_Ty() {}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{11}
}

type SymbolicConst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty    *Ty             `protobuf:"bytes,1,opt,name=ty,proto3" json:"ty,omitempty"`
	Value *v1.ScalarValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SymbolicConst) Reset() {
	*x = SymbolicConst{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolicConst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolicConst) ProtoMessage() {}

func (x *SymbolicConst) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolicConst.ProtoReflect.Descriptor instead.
func (*SymbolicConst) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{12}
}

func (x *SymbolicConst) GetTy() *Ty {
	if x != nil {
		return x.Ty
	}
	return nil
}

func (x *SymbolicConst) GetValue() *v1.ScalarValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type CodeVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *CodeVariable) Reset() {
	*x = CodeVariable{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeVariable) ProtoMessage() {}

func (x *CodeVariable) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeVariable.ProtoReflect.Descriptor instead.
func (*CodeVariable) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{13}
}

func (x *CodeVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeVariable) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type CodeVariableValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable *CodeVariable  `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
	Value    *SymbolicConst `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CodeVariableValue) Reset() {
	*x = CodeVariableValue{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeVariableValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeVariableValue) ProtoMessage() {}

func (x *CodeVariableValue) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeVariableValue.ProtoReflect.Descriptor instead.
func (*CodeVariableValue) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{14}
}

func (x *CodeVariableValue) GetVariable() *CodeVariable {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *CodeVariableValue) GetValue() *SymbolicConst {
	if x != nil {
		return x.Value
	}
	return nil
}

type GlobalVariablesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeVariables        []*CodeVariableValue `protobuf:"bytes,1,rep,name=code_variables,json=codeVariables,proto3" json:"code_variables,omitempty"`
	EnvironmentVariables map[string]string    `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GlobalVariablesInfo) Reset() {
	*x = GlobalVariablesInfo{}
	mi := &file_chalk_python_v1_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalVariablesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalVariablesInfo) ProtoMessage() {}

func (x *GlobalVariablesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_python_v1_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalVariablesInfo.ProtoReflect.Descriptor instead.
func (*GlobalVariablesInfo) Descriptor() ([]byte, []int) {
	return file_chalk_python_v1_types_proto_rawDescGZIP(), []int{15}
}

func (x *GlobalVariablesInfo) GetCodeVariables() []*CodeVariableValue {
	if x != nil {
		return x.CodeVariables
	}
	return nil
}

func (x *GlobalVariablesInfo) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

var File_chalk_python_v1_types_proto protoreflect.FileDescriptor

var file_chalk_python_v1_types_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1a,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x05, 0x54, 0x79,
	0x53, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x33,
	0x0a, 0x06, 0x54, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x37, 0x0a, 0x0a, 0x54, 0x79, 0x49, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x0b,
	0x54, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x28, 0x0a, 0x0a, 0x54, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x74, 0x7a, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x7a,
	0x22, 0x5a, 0x0a, 0x06, 0x54, 0x79, 0x44, 0x69, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x07,
	0x54, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x54, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4e, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01,
	0x0a, 0x0e, 0x54, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x1a, 0x56, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x06,
	0x54, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x02, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x52, 0x02,
	0x74, 0x79, 0x22, 0x89, 0x09, 0x0a, 0x02, 0x54, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x35, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73,
	0x65, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x79, 0x49, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x44, 0x69, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x69, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x2d, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x4a,
	0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x74, 0x79, 0x22, 0x0e,
	0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x67,
	0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79,
	0x52, 0x02, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x13, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x73, 0x0a,
	0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xba, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43,
	0x50, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x50, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_python_v1_types_proto_rawDescOnce sync.Once
	file_chalk_python_v1_types_proto_rawDescData = file_chalk_python_v1_types_proto_rawDesc
)

func file_chalk_python_v1_types_proto_rawDescGZIP() []byte {
	file_chalk_python_v1_types_proto_rawDescOnce.Do(func() {
		file_chalk_python_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_python_v1_types_proto_rawDescData)
	})
	return file_chalk_python_v1_types_proto_rawDescData
}

var file_chalk_python_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_chalk_python_v1_types_proto_goTypes = []any{
	(*TySet)(nil),               // 0: chalk.python.v1.TySet
	(*TyList)(nil),              // 1: chalk.python.v1.TyList
	(*TyIterable)(nil),          // 2: chalk.python.v1.TyIterable
	(*TyGenerator)(nil),         // 3: chalk.python.v1.TyGenerator
	(*TyDatetime)(nil),          // 4: chalk.python.v1.TyDatetime
	(*TyDict)(nil),              // 5: chalk.python.v1.TyDict
	(*TyTuple)(nil),             // 6: chalk.python.v1.TyTuple
	(*TyLogicalStruct)(nil),     // 7: chalk.python.v1.TyLogicalStruct
	(*TyFeatureClass)(nil),      // 8: chalk.python.v1.TyFeatureClass
	(*TyEnum)(nil),              // 9: chalk.python.v1.TyEnum
	(*Ty)(nil),                  // 10: chalk.python.v1.Ty
	(*EmptyMessage)(nil),        // 11: chalk.python.v1.EmptyMessage
	(*SymbolicConst)(nil),       // 12: chalk.python.v1.SymbolicConst
	(*CodeVariable)(nil),        // 13: chalk.python.v1.CodeVariable
	(*CodeVariableValue)(nil),   // 14: chalk.python.v1.CodeVariableValue
	(*GlobalVariablesInfo)(nil), // 15: chalk.python.v1.GlobalVariablesInfo
	nil,                         // 16: chalk.python.v1.TyLogicalStruct.FieldsEntry
	nil,                         // 17: chalk.python.v1.TyFeatureClass.AssignedFieldsEntry
	nil,                         // 18: chalk.python.v1.GlobalVariablesInfo.EnvironmentVariablesEntry
	(*v1.ScalarValue)(nil),      // 19: chalk.arrow.v1.ScalarValue
}
var file_chalk_python_v1_types_proto_depIdxs = []int32{
	10, // 0: chalk.python.v1.TySet.items:type_name -> chalk.python.v1.Ty
	10, // 1: chalk.python.v1.TyList.items:type_name -> chalk.python.v1.Ty
	10, // 2: chalk.python.v1.TyIterable.items:type_name -> chalk.python.v1.Ty
	10, // 3: chalk.python.v1.TyGenerator.items:type_name -> chalk.python.v1.Ty
	10, // 4: chalk.python.v1.TyDict.key:type_name -> chalk.python.v1.Ty
	10, // 5: chalk.python.v1.TyDict.value:type_name -> chalk.python.v1.Ty
	10, // 6: chalk.python.v1.TyTuple.fixed:type_name -> chalk.python.v1.Ty
	16, // 7: chalk.python.v1.TyLogicalStruct.fields:type_name -> chalk.python.v1.TyLogicalStruct.FieldsEntry
	17, // 8: chalk.python.v1.TyFeatureClass.assigned_fields:type_name -> chalk.python.v1.TyFeatureClass.AssignedFieldsEntry
	10, // 9: chalk.python.v1.TyEnum.bases:type_name -> chalk.python.v1.Ty
	10, // 10: chalk.python.v1.TyEnum.ty:type_name -> chalk.python.v1.Ty
	11, // 11: chalk.python.v1.Ty.int:type_name -> chalk.python.v1.EmptyMessage
	11, // 12: chalk.python.v1.Ty.str:type_name -> chalk.python.v1.EmptyMessage
	11, // 13: chalk.python.v1.Ty.bool:type_name -> chalk.python.v1.EmptyMessage
	11, // 14: chalk.python.v1.Ty.float:type_name -> chalk.python.v1.EmptyMessage
	1,  // 15: chalk.python.v1.Ty.list:type_name -> chalk.python.v1.TyList
	0,  // 16: chalk.python.v1.Ty.set:type_name -> chalk.python.v1.TySet
	11, // 17: chalk.python.v1.Ty.none:type_name -> chalk.python.v1.EmptyMessage
	11, // 18: chalk.python.v1.Ty.any:type_name -> chalk.python.v1.EmptyMessage
	2,  // 19: chalk.python.v1.Ty.iterable:type_name -> chalk.python.v1.TyIterable
	4,  // 20: chalk.python.v1.Ty.datetime:type_name -> chalk.python.v1.TyDatetime
	11, // 21: chalk.python.v1.Ty.timedelta:type_name -> chalk.python.v1.EmptyMessage
	11, // 22: chalk.python.v1.Ty.date:type_name -> chalk.python.v1.EmptyMessage
	6,  // 23: chalk.python.v1.Ty.tuple:type_name -> chalk.python.v1.TyTuple
	5,  // 24: chalk.python.v1.Ty.dict:type_name -> chalk.python.v1.TyDict
	11, // 25: chalk.python.v1.Ty.bytes:type_name -> chalk.python.v1.EmptyMessage
	7,  // 26: chalk.python.v1.Ty.logical_struct:type_name -> chalk.python.v1.TyLogicalStruct
	8,  // 27: chalk.python.v1.Ty.feature_class:type_name -> chalk.python.v1.TyFeatureClass
	9,  // 28: chalk.python.v1.Ty.enum:type_name -> chalk.python.v1.TyEnum
	11, // 29: chalk.python.v1.Ty.sequence_matcher:type_name -> chalk.python.v1.EmptyMessage
	3,  // 30: chalk.python.v1.Ty.generator:type_name -> chalk.python.v1.TyGenerator
	10, // 31: chalk.python.v1.SymbolicConst.ty:type_name -> chalk.python.v1.Ty
	19, // 32: chalk.python.v1.SymbolicConst.value:type_name -> chalk.arrow.v1.ScalarValue
	13, // 33: chalk.python.v1.CodeVariableValue.variable:type_name -> chalk.python.v1.CodeVariable
	12, // 34: chalk.python.v1.CodeVariableValue.value:type_name -> chalk.python.v1.SymbolicConst
	14, // 35: chalk.python.v1.GlobalVariablesInfo.code_variables:type_name -> chalk.python.v1.CodeVariableValue
	18, // 36: chalk.python.v1.GlobalVariablesInfo.environment_variables:type_name -> chalk.python.v1.GlobalVariablesInfo.EnvironmentVariablesEntry
	10, // 37: chalk.python.v1.TyLogicalStruct.FieldsEntry.value:type_name -> chalk.python.v1.Ty
	10, // 38: chalk.python.v1.TyFeatureClass.AssignedFieldsEntry.value:type_name -> chalk.python.v1.Ty
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_chalk_python_v1_types_proto_init() }
func file_chalk_python_v1_types_proto_init() {
	if File_chalk_python_v1_types_proto != nil {
		return
	}
	file_chalk_python_v1_types_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_python_v1_types_proto_msgTypes[10].OneofWrappers = []any{
		(*Ty_Int)(nil),
		(*Ty_Str)(nil),
		(*Ty_Bool)(nil),
		(*Ty_Float)(nil),
		(*Ty_List)(nil),
		(*Ty_Set)(nil),
		(*Ty_None)(nil),
		(*Ty_Any)(nil),
		(*Ty_Iterable)(nil),
		(*Ty_Datetime)(nil),
		(*Ty_Timedelta)(nil),
		(*Ty_Date)(nil),
		(*Ty_Tuple)(nil),
		(*Ty_Dict)(nil),
		(*Ty_Bytes)(nil),
		(*Ty_LogicalStruct)(nil),
		(*Ty_FeatureClass)(nil),
		(*Ty_Enum)(nil),
		(*Ty_SequenceMatcher)(nil),
		(*Ty_Generator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_python_v1_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_python_v1_types_proto_goTypes,
		DependencyIndexes: file_chalk_python_v1_types_proto_depIdxs,
		MessageInfos:      file_chalk_python_v1_types_proto_msgTypes,
	}.Build()
	File_chalk_python_v1_types_proto = out.File
	file_chalk_python_v1_types_proto_rawDesc = nil
	file_chalk_python_v1_types_proto_goTypes = nil
	file_chalk_python_v1_types_proto_depIdxs = nil
}
