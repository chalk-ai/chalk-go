// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/runtime/v1/query_rewriter.proto

package runtimev1

import (
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/expression/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdentityQueryRewriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IdentityQueryRewriter) Reset() {
	*x = IdentityQueryRewriter{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityQueryRewriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityQueryRewriter) ProtoMessage() {}

func (x *IdentityQueryRewriter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityQueryRewriter.ProtoReflect.Descriptor instead.
func (*IdentityQueryRewriter) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{0}
}

type GivensQueryRewriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values      *Data    `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
	JoinColumns []string `protobuf:"bytes,2,rep,name=join_columns,json=joinColumns,proto3" json:"join_columns,omitempty"`
}

func (x *GivensQueryRewriter) Reset() {
	*x = GivensQueryRewriter{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GivensQueryRewriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GivensQueryRewriter) ProtoMessage() {}

func (x *GivensQueryRewriter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GivensQueryRewriter.ProtoReflect.Descriptor instead.
func (*GivensQueryRewriter) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{1}
}

func (x *GivensQueryRewriter) GetValues() *Data {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GivensQueryRewriter) GetJoinColumns() []string {
	if x != nil {
		return x.JoinColumns
	}
	return nil
}

type HighWaterMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxIngestedTimestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=max_ingested_timestamp,json=maxIngestedTimestamp,proto3,oneof" json:"max_ingested_timestamp,omitempty"`
	LastExecutionTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_execution_timestamp,json=lastExecutionTimestamp,proto3,oneof" json:"last_execution_timestamp,omitempty"`
}

func (x *HighWaterMark) Reset() {
	*x = HighWaterMark{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HighWaterMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighWaterMark) ProtoMessage() {}

func (x *HighWaterMark) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighWaterMark.ProtoReflect.Descriptor instead.
func (*HighWaterMark) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{2}
}

func (x *HighWaterMark) GetMaxIngestedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxIngestedTimestamp
	}
	return nil
}

func (x *HighWaterMark) GetLastExecutionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastExecutionTimestamp
	}
	return nil
}

type Incrementalizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpperBound *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	LowerBound *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	Hwm        *HighWaterMark         `protobuf:"bytes,3,opt,name=hwm,proto3,oneof" json:"hwm,omitempty"`
	UseSqlglot bool                   `protobuf:"varint,4,opt,name=use_sqlglot,json=useSqlglot,proto3" json:"use_sqlglot,omitempty"`
}

func (x *Incrementalizer) Reset() {
	*x = Incrementalizer{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Incrementalizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incrementalizer) ProtoMessage() {}

func (x *Incrementalizer) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incrementalizer.ProtoReflect.Descriptor instead.
func (*Incrementalizer) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{3}
}

func (x *Incrementalizer) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *Incrementalizer) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *Incrementalizer) GetHwm() *HighWaterMark {
	if x != nil {
		return x.Hwm
	}
	return nil
}

func (x *Incrementalizer) GetUseSqlglot() bool {
	if x != nil {
		return x.UseSqlglot
	}
	return false
}

type ContextualQueryRewriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Givens                         *Data                  `protobuf:"bytes,1,opt,name=givens,proto3,oneof" json:"givens,omitempty"`
	LowerBound                     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	UpperBound                     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	MaxSamples                     *int64                 `protobuf:"varint,4,opt,name=max_samples,json=maxSamples,proto3,oneof" json:"max_samples,omitempty"`
	OverrideLowerUpperBoundFeature *v1.FeatureReference   `protobuf:"bytes,5,opt,name=override_lower_upper_bound_feature,json=overrideLowerUpperBoundFeature,proto3,oneof" json:"override_lower_upper_bound_feature,omitempty"`
}

func (x *ContextualQueryRewriter) Reset() {
	*x = ContextualQueryRewriter{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextualQueryRewriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextualQueryRewriter) ProtoMessage() {}

func (x *ContextualQueryRewriter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextualQueryRewriter.ProtoReflect.Descriptor instead.
func (*ContextualQueryRewriter) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{4}
}

func (x *ContextualQueryRewriter) GetGivens() *Data {
	if x != nil {
		return x.Givens
	}
	return nil
}

func (x *ContextualQueryRewriter) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *ContextualQueryRewriter) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *ContextualQueryRewriter) GetMaxSamples() int64 {
	if x != nil && x.MaxSamples != nil {
		return *x.MaxSamples
	}
	return 0
}

func (x *ContextualQueryRewriter) GetOverrideLowerUpperBoundFeature() *v1.FeatureReference {
	if x != nil {
		return x.OverrideLowerUpperBoundFeature
	}
	return nil
}

type StaticFilterQueryRewriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter         *v11.LogicalExprNode   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	MinNow         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=min_now,json=minNow,proto3,oneof" json:"min_now,omitempty"`
	MaxNow         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=max_now,json=maxNow,proto3,oneof" json:"max_now,omitempty"`
	HadGivensBatch bool                   `protobuf:"varint,4,opt,name=had_givens_batch,json=hadGivensBatch,proto3" json:"had_givens_batch,omitempty"` // The behavior is different whether or not there were givens...
}

func (x *StaticFilterQueryRewriter) Reset() {
	*x = StaticFilterQueryRewriter{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticFilterQueryRewriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticFilterQueryRewriter) ProtoMessage() {}

func (x *StaticFilterQueryRewriter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticFilterQueryRewriter.ProtoReflect.Descriptor instead.
func (*StaticFilterQueryRewriter) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{5}
}

func (x *StaticFilterQueryRewriter) GetFilter() *v11.LogicalExprNode {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *StaticFilterQueryRewriter) GetMinNow() *timestamppb.Timestamp {
	if x != nil {
		return x.MinNow
	}
	return nil
}

func (x *StaticFilterQueryRewriter) GetMaxNow() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxNow
	}
	return nil
}

func (x *StaticFilterQueryRewriter) GetHadGivensBatch() bool {
	if x != nil {
		return x.HadGivensBatch
	}
	return false
}

type DropFieldsRewriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredFqns []string `protobuf:"bytes,1,rep,name=desired_fqns,json=desiredFqns,proto3" json:"desired_fqns,omitempty"`
}

func (x *DropFieldsRewriter) Reset() {
	*x = DropFieldsRewriter{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropFieldsRewriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropFieldsRewriter) ProtoMessage() {}

func (x *DropFieldsRewriter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropFieldsRewriter.ProtoReflect.Descriptor instead.
func (*DropFieldsRewriter) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{6}
}

func (x *DropFieldsRewriter) GetDesiredFqns() []string {
	if x != nil {
		return x.DesiredFqns
	}
	return nil
}

type ComposedRewriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First *QueryRewriter `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Then  *QueryRewriter `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
}

func (x *ComposedRewriter) Reset() {
	*x = ComposedRewriter{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComposedRewriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposedRewriter) ProtoMessage() {}

func (x *ComposedRewriter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposedRewriter.ProtoReflect.Descriptor instead.
func (*ComposedRewriter) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{7}
}

func (x *ComposedRewriter) GetFirst() *QueryRewriter {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *ComposedRewriter) GetThen() *QueryRewriter {
	if x != nil {
		return x.Then
	}
	return nil
}

type QueryRewriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryRewriter:
	//
	//	*QueryRewriter_Identity
	//	*QueryRewriter_Givens
	//	*QueryRewriter_Incrementalizer
	//	*QueryRewriter_Contextual
	//	*QueryRewriter_Static
	//	*QueryRewriter_DropFields
	//	*QueryRewriter_Composed
	QueryRewriter isQueryRewriter_QueryRewriter `protobuf_oneof:"query_rewriter"`
}

func (x *QueryRewriter) Reset() {
	*x = QueryRewriter{}
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRewriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRewriter) ProtoMessage() {}

func (x *QueryRewriter) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_query_rewriter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRewriter.ProtoReflect.Descriptor instead.
func (*QueryRewriter) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP(), []int{8}
}

func (m *QueryRewriter) GetQueryRewriter() isQueryRewriter_QueryRewriter {
	if m != nil {
		return m.QueryRewriter
	}
	return nil
}

func (x *QueryRewriter) GetIdentity() *IdentityQueryRewriter {
	if x, ok := x.GetQueryRewriter().(*QueryRewriter_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *QueryRewriter) GetGivens() *GivensQueryRewriter {
	if x, ok := x.GetQueryRewriter().(*QueryRewriter_Givens); ok {
		return x.Givens
	}
	return nil
}

func (x *QueryRewriter) GetIncrementalizer() *Incrementalizer {
	if x, ok := x.GetQueryRewriter().(*QueryRewriter_Incrementalizer); ok {
		return x.Incrementalizer
	}
	return nil
}

func (x *QueryRewriter) GetContextual() *ContextualQueryRewriter {
	if x, ok := x.GetQueryRewriter().(*QueryRewriter_Contextual); ok {
		return x.Contextual
	}
	return nil
}

func (x *QueryRewriter) GetStatic() *StaticFilterQueryRewriter {
	if x, ok := x.GetQueryRewriter().(*QueryRewriter_Static); ok {
		return x.Static
	}
	return nil
}

func (x *QueryRewriter) GetDropFields() *DropFieldsRewriter {
	if x, ok := x.GetQueryRewriter().(*QueryRewriter_DropFields); ok {
		return x.DropFields
	}
	return nil
}

func (x *QueryRewriter) GetComposed() *ComposedRewriter {
	if x, ok := x.GetQueryRewriter().(*QueryRewriter_Composed); ok {
		return x.Composed
	}
	return nil
}

type isQueryRewriter_QueryRewriter interface {
	isQueryRewriter_QueryRewriter()
}

type QueryRewriter_Identity struct {
	Identity *IdentityQueryRewriter `protobuf:"bytes,1,opt,name=identity,proto3,oneof"`
}

type QueryRewriter_Givens struct {
	Givens *GivensQueryRewriter `protobuf:"bytes,2,opt,name=givens,proto3,oneof"`
}

type QueryRewriter_Incrementalizer struct {
	Incrementalizer *Incrementalizer `protobuf:"bytes,3,opt,name=incrementalizer,proto3,oneof"`
}

type QueryRewriter_Contextual struct {
	Contextual *ContextualQueryRewriter `protobuf:"bytes,4,opt,name=contextual,proto3,oneof"`
}

type QueryRewriter_Static struct {
	Static *StaticFilterQueryRewriter `protobuf:"bytes,5,opt,name=static,proto3,oneof"`
}

type QueryRewriter_DropFields struct {
	DropFields *DropFieldsRewriter `protobuf:"bytes,6,opt,name=drop_fields,json=dropFields,proto3,oneof"`
}

type QueryRewriter_Composed struct {
	Composed *ComposedRewriter `protobuf:"bytes,7,opt,name=composed,proto3,oneof"`
}

func (*QueryRewriter_Identity) isQueryRewriter_QueryRewriter() {}

func (*QueryRewriter_Givens) isQueryRewriter_QueryRewriter() {}

func (*QueryRewriter_Incrementalizer) isQueryRewriter_QueryRewriter() {}

func (*QueryRewriter_Contextual) isQueryRewriter_QueryRewriter() {}

func (*QueryRewriter_Static) isQueryRewriter_QueryRewriter() {}

func (*QueryRewriter_DropFields) isQueryRewriter_QueryRewriter() {}

func (*QueryRewriter_Composed) isQueryRewriter_QueryRewriter() {}

var File_chalk_runtime_v1_query_rewriter_proto protoreflect.FileDescriptor

var file_chalk_runtime_v1_query_rewriter_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x22, 0x68, 0x0a, 0x13, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xf9, 0x01, 0x0a,
	0x0d, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x55,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x96, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x03, 0x68, 0x77, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x48, 0x02,
	0x52, 0x03, 0x68, 0x77, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f,
	0x73, 0x71, 0x6c, 0x67, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x53, 0x71, 0x6c, 0x67, 0x6c, 0x6f, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x68, 0x77,
	0x6d, 0x22, 0xcd, 0x03, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x06, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x22,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x04, 0x52, 0x1e, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x8f, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x4e, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x64, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x64,
	0x47, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x6f, 0x77, 0x22, 0x37, 0x0a, 0x12, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x71, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x46, 0x71, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x22, 0x97, 0x04, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x47, 0x0a, 0x0b, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x42, 0xc9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x52, 0x58, 0xaa, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1c, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_runtime_v1_query_rewriter_proto_rawDescOnce sync.Once
	file_chalk_runtime_v1_query_rewriter_proto_rawDescData = file_chalk_runtime_v1_query_rewriter_proto_rawDesc
)

func file_chalk_runtime_v1_query_rewriter_proto_rawDescGZIP() []byte {
	file_chalk_runtime_v1_query_rewriter_proto_rawDescOnce.Do(func() {
		file_chalk_runtime_v1_query_rewriter_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_runtime_v1_query_rewriter_proto_rawDescData)
	})
	return file_chalk_runtime_v1_query_rewriter_proto_rawDescData
}

var file_chalk_runtime_v1_query_rewriter_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_chalk_runtime_v1_query_rewriter_proto_goTypes = []any{
	(*IdentityQueryRewriter)(nil),     // 0: chalk.runtime.v1.IdentityQueryRewriter
	(*GivensQueryRewriter)(nil),       // 1: chalk.runtime.v1.GivensQueryRewriter
	(*HighWaterMark)(nil),             // 2: chalk.runtime.v1.HighWaterMark
	(*Incrementalizer)(nil),           // 3: chalk.runtime.v1.Incrementalizer
	(*ContextualQueryRewriter)(nil),   // 4: chalk.runtime.v1.ContextualQueryRewriter
	(*StaticFilterQueryRewriter)(nil), // 5: chalk.runtime.v1.StaticFilterQueryRewriter
	(*DropFieldsRewriter)(nil),        // 6: chalk.runtime.v1.DropFieldsRewriter
	(*ComposedRewriter)(nil),          // 7: chalk.runtime.v1.ComposedRewriter
	(*QueryRewriter)(nil),             // 8: chalk.runtime.v1.QueryRewriter
	(*Data)(nil),                      // 9: chalk.runtime.v1.Data
	(*timestamppb.Timestamp)(nil),     // 10: google.protobuf.Timestamp
	(*v1.FeatureReference)(nil),       // 11: chalk.graph.v1.FeatureReference
	(*v11.LogicalExprNode)(nil),       // 12: chalk.expression.v1.LogicalExprNode
}
var file_chalk_runtime_v1_query_rewriter_proto_depIdxs = []int32{
	9,  // 0: chalk.runtime.v1.GivensQueryRewriter.values:type_name -> chalk.runtime.v1.Data
	10, // 1: chalk.runtime.v1.HighWaterMark.max_ingested_timestamp:type_name -> google.protobuf.Timestamp
	10, // 2: chalk.runtime.v1.HighWaterMark.last_execution_timestamp:type_name -> google.protobuf.Timestamp
	10, // 3: chalk.runtime.v1.Incrementalizer.upper_bound:type_name -> google.protobuf.Timestamp
	10, // 4: chalk.runtime.v1.Incrementalizer.lower_bound:type_name -> google.protobuf.Timestamp
	2,  // 5: chalk.runtime.v1.Incrementalizer.hwm:type_name -> chalk.runtime.v1.HighWaterMark
	9,  // 6: chalk.runtime.v1.ContextualQueryRewriter.givens:type_name -> chalk.runtime.v1.Data
	10, // 7: chalk.runtime.v1.ContextualQueryRewriter.lower_bound:type_name -> google.protobuf.Timestamp
	10, // 8: chalk.runtime.v1.ContextualQueryRewriter.upper_bound:type_name -> google.protobuf.Timestamp
	11, // 9: chalk.runtime.v1.ContextualQueryRewriter.override_lower_upper_bound_feature:type_name -> chalk.graph.v1.FeatureReference
	12, // 10: chalk.runtime.v1.StaticFilterQueryRewriter.filter:type_name -> chalk.expression.v1.LogicalExprNode
	10, // 11: chalk.runtime.v1.StaticFilterQueryRewriter.min_now:type_name -> google.protobuf.Timestamp
	10, // 12: chalk.runtime.v1.StaticFilterQueryRewriter.max_now:type_name -> google.protobuf.Timestamp
	8,  // 13: chalk.runtime.v1.ComposedRewriter.first:type_name -> chalk.runtime.v1.QueryRewriter
	8,  // 14: chalk.runtime.v1.ComposedRewriter.then:type_name -> chalk.runtime.v1.QueryRewriter
	0,  // 15: chalk.runtime.v1.QueryRewriter.identity:type_name -> chalk.runtime.v1.IdentityQueryRewriter
	1,  // 16: chalk.runtime.v1.QueryRewriter.givens:type_name -> chalk.runtime.v1.GivensQueryRewriter
	3,  // 17: chalk.runtime.v1.QueryRewriter.incrementalizer:type_name -> chalk.runtime.v1.Incrementalizer
	4,  // 18: chalk.runtime.v1.QueryRewriter.contextual:type_name -> chalk.runtime.v1.ContextualQueryRewriter
	5,  // 19: chalk.runtime.v1.QueryRewriter.static:type_name -> chalk.runtime.v1.StaticFilterQueryRewriter
	6,  // 20: chalk.runtime.v1.QueryRewriter.drop_fields:type_name -> chalk.runtime.v1.DropFieldsRewriter
	7,  // 21: chalk.runtime.v1.QueryRewriter.composed:type_name -> chalk.runtime.v1.ComposedRewriter
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_chalk_runtime_v1_query_rewriter_proto_init() }
func file_chalk_runtime_v1_query_rewriter_proto_init() {
	if File_chalk_runtime_v1_query_rewriter_proto != nil {
		return
	}
	file_chalk_runtime_v1_data_proto_init()
	file_chalk_runtime_v1_query_rewriter_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_runtime_v1_query_rewriter_proto_msgTypes[3].OneofWrappers = []any{}
	file_chalk_runtime_v1_query_rewriter_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_runtime_v1_query_rewriter_proto_msgTypes[5].OneofWrappers = []any{}
	file_chalk_runtime_v1_query_rewriter_proto_msgTypes[8].OneofWrappers = []any{
		(*QueryRewriter_Identity)(nil),
		(*QueryRewriter_Givens)(nil),
		(*QueryRewriter_Incrementalizer)(nil),
		(*QueryRewriter_Contextual)(nil),
		(*QueryRewriter_Static)(nil),
		(*QueryRewriter_DropFields)(nil),
		(*QueryRewriter_Composed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_runtime_v1_query_rewriter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_runtime_v1_query_rewriter_proto_goTypes,
		DependencyIndexes: file_chalk_runtime_v1_query_rewriter_proto_depIdxs,
		MessageInfos:      file_chalk_runtime_v1_query_rewriter_proto_msgTypes,
	}.Build()
	File_chalk_runtime_v1_query_rewriter_proto = out.File
	file_chalk_runtime_v1_query_rewriter_proto_rawDesc = nil
	file_chalk_runtime_v1_query_rewriter_proto_goTypes = nil
	file_chalk_runtime_v1_query_rewriter_proto_depIdxs = nil
}
