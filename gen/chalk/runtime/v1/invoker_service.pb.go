// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/runtime/v1/invoker_service.proto

package runtimev1

import (
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/artifacts/v1"
	v13 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v1"
	v2 "github.com/chalk-ai/chalk-go/gen/chalk/graph/v2"
	v12 "github.com/chalk-ai/chalk-go/gen/chalk/python/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// (Empty) message to request a graph from the subprocess invoker. The engine
type GetGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGraphRequest) Reset() {
	*x = GetGraphRequest{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphRequest) ProtoMessage() {}

func (x *GetGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphRequest.ProtoReflect.Descriptor instead.
func (*GetGraphRequest) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{0}
}

// Response containing the protograph. This graph is loaded into the main process and is used for planning, etc.
type GetGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in chalk/runtime/v1/invoker_service.proto.
	Graph  *v1.Graph   `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Export *v11.Export `protobuf:"bytes,2,opt,name=export,proto3" json:"export,omitempty"`
	// Explicitly outside of the export so that we DO NOT PERSIST these
	Secrets                 *v2.SourceSecrets        `protobuf:"bytes,3,opt,name=secrets,proto3" json:"secrets,omitempty"`
	CapturedGlobalVariables *v12.GlobalVariablesInfo `protobuf:"bytes,4,opt,name=captured_global_variables,json=capturedGlobalVariables,proto3" json:"captured_global_variables,omitempty"`
}

func (x *GetGraphResponse) Reset() {
	*x = GetGraphResponse{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphResponse) ProtoMessage() {}

func (x *GetGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphResponse.ProtoReflect.Descriptor instead.
func (*GetGraphResponse) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in chalk/runtime/v1/invoker_service.proto.
func (x *GetGraphResponse) GetGraph() *v1.Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *GetGraphResponse) GetExport() *v11.Export {
	if x != nil {
		return x.Export
	}
	return nil
}

func (x *GetGraphResponse) GetSecrets() *v2.SourceSecrets {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *GetGraphResponse) GetCapturedGlobalVariables() *v12.GlobalVariablesInfo {
	if x != nil {
		return x.CapturedGlobalVariables
	}
	return nil
}

// (Empty) message to request a graph GQL from the subprocess invoker. The engine
type GetGraphGQLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGraphGQLRequest) Reset() {
	*x = GetGraphGQLRequest{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphGQLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphGQLRequest) ProtoMessage() {}

func (x *GetGraphGQLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphGQLRequest.ProtoReflect.Descriptor instead.
func (*GetGraphGQLRequest) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{2}
}

// Response containing a serialized form of the GQL Graph
type GetGraphGQLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GraphGqlJson string `protobuf:"bytes,1,opt,name=graph_gql_json,json=graphGqlJson,proto3" json:"graph_gql_json,omitempty"`
}

func (x *GetGraphGQLResponse) Reset() {
	*x = GetGraphGQLResponse{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphGQLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphGQLResponse) ProtoMessage() {}

func (x *GetGraphGQLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphGQLResponse.ProtoReflect.Descriptor instead.
func (*GetGraphGQLResponse) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetGraphGQLResponse) GetGraphGqlJson() string {
	if x != nil {
		return x.GraphGqlJson
	}
	return ""
}

type OverlayGraphInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph *v1.OverlayGraph `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Key   string           `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *OverlayGraphInfo) Reset() {
	*x = OverlayGraphInfo{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OverlayGraphInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlayGraphInfo) ProtoMessage() {}

func (x *OverlayGraphInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlayGraphInfo.ProtoReflect.Descriptor instead.
func (*OverlayGraphInfo) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{4}
}

func (x *OverlayGraphInfo) GetGraph() *v1.OverlayGraph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *OverlayGraphInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type UnaryInvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The inputs for the invocation request
	Inputs *ResolverInputs `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// The invoker config. These values are the same for a given query
	InvokerConfig map[string]*structpb.Value `protobuf:"bytes,2,rep,name=invoker_config,json=invokerConfig,proto3" json:"invoker_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The invoker context. These values differ between invocation calls in a query
	InvokerContext map[string]*structpb.Value `protobuf:"bytes,3,rep,name=invoker_context,json=invokerContext,proto3" json:"invoker_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The query rewriter. Defaults to a noop query rewriter if not set
	Rewriter *QueryRewriter `protobuf:"bytes,4,opt,name=rewriter,proto3" json:"rewriter,omitempty"`
	// Optional additional features/resolvers with which to run the query
	// This value is the same for a given query
	OverlayGraphInfo *OverlayGraphInfo `protobuf:"bytes,5,opt,name=overlay_graph_info,json=overlayGraphInfo,proto3,oneof" json:"overlay_graph_info,omitempty"`
}

func (x *UnaryInvokeRequest) Reset() {
	*x = UnaryInvokeRequest{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnaryInvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryInvokeRequest) ProtoMessage() {}

func (x *UnaryInvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryInvokeRequest.ProtoReflect.Descriptor instead.
func (*UnaryInvokeRequest) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{5}
}

func (x *UnaryInvokeRequest) GetInputs() *ResolverInputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *UnaryInvokeRequest) GetInvokerConfig() map[string]*structpb.Value {
	if x != nil {
		return x.InvokerConfig
	}
	return nil
}

func (x *UnaryInvokeRequest) GetInvokerContext() map[string]*structpb.Value {
	if x != nil {
		return x.InvokerContext
	}
	return nil
}

func (x *UnaryInvokeRequest) GetRewriter() *QueryRewriter {
	if x != nil {
		return x.Rewriter
	}
	return nil
}

func (x *UnaryInvokeRequest) GetOverlayGraphInfo() *OverlayGraphInfo {
	if x != nil {
		return x.OverlayGraphInfo
	}
	return nil
}

type StreamInvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resolver inputs
	Inputs *ResolverInputs `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// The invoker config. These values are the same for a given query
	InvokerConfig map[string]*structpb.Value `protobuf:"bytes,2,rep,name=invoker_config,json=invokerConfig,proto3" json:"invoker_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The invoker context. These values differ between invocation calls in a query
	InvokerContext map[string]*structpb.Value `protobuf:"bytes,3,rep,name=invoker_context,json=invokerContext,proto3" json:"invoker_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The query rewriter. Defaults to a noop query rewriter if not set
	Rewriter *QueryRewriter `protobuf:"bytes,4,opt,name=rewriter,proto3" json:"rewriter,omitempty"`
	// Optional additional features/resolvers with which to run the query
	// This value is the same for a given query
	OverlayGraphInfo *OverlayGraphInfo `protobuf:"bytes,5,opt,name=overlay_graph_info,json=overlayGraphInfo,proto3,oneof" json:"overlay_graph_info,omitempty"`
}

func (x *StreamInvokeRequest) Reset() {
	*x = StreamInvokeRequest{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInvokeRequest) ProtoMessage() {}

func (x *StreamInvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInvokeRequest.ProtoReflect.Descriptor instead.
func (*StreamInvokeRequest) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{6}
}

func (x *StreamInvokeRequest) GetInputs() *ResolverInputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *StreamInvokeRequest) GetInvokerConfig() map[string]*structpb.Value {
	if x != nil {
		return x.InvokerConfig
	}
	return nil
}

func (x *StreamInvokeRequest) GetInvokerContext() map[string]*structpb.Value {
	if x != nil {
		return x.InvokerContext
	}
	return nil
}

func (x *StreamInvokeRequest) GetRewriter() *QueryRewriter {
	if x != nil {
		return x.Rewriter
	}
	return nil
}

func (x *StreamInvokeRequest) GetOverlayGraphInfo() *OverlayGraphInfo {
	if x != nil {
		return x.OverlayGraphInfo
	}
	return nil
}

// Stats for progress reporting and other purposes that are included as part of the invocation response
type InvocationStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of times the resolver was successfully called
	NumSuccessfulInvocations int64 `protobuf:"varint,1,opt,name=num_successful_invocations,json=numSuccessfulInvocations,proto3" json:"num_successful_invocations,omitempty"`
	// Number of times the resolver raised an exception, or we encountered an exception
	// coalescing the results
	NumFailedInvocations int64 `protobuf:"varint,2,opt,name=num_failed_invocations,json=numFailedInvocations,proto3" json:"num_failed_invocations,omitempty"`
	// Number of samples that were marked as SKIPPED, so we did not invoke the resolver
	NumSkippedInvocations int64 `protobuf:"varint,3,opt,name=num_skipped_invocations,json=numSkippedInvocations,proto3" json:"num_skipped_invocations,omitempty"`
	// Number of times that the resolver timed out
	NumResolverTimeouts int64 `protobuf:"varint,4,opt,name=num_resolver_timeouts,json=numResolverTimeouts,proto3" json:"num_resolver_timeouts,omitempty"`
	// Total number of seconds we spent invoking the resolver to compute this batch
	ResolverInvocationSecs float64 `protobuf:"fixed64,5,opt,name=resolver_invocation_secs,json=resolverInvocationSecs,proto3" json:"resolver_invocation_secs,omitempty"`
}

func (x *InvocationStats) Reset() {
	*x = InvocationStats{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvocationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvocationStats) ProtoMessage() {}

func (x *InvocationStats) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvocationStats.ProtoReflect.Descriptor instead.
func (*InvocationStats) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{7}
}

func (x *InvocationStats) GetNumSuccessfulInvocations() int64 {
	if x != nil {
		return x.NumSuccessfulInvocations
	}
	return 0
}

func (x *InvocationStats) GetNumFailedInvocations() int64 {
	if x != nil {
		return x.NumFailedInvocations
	}
	return 0
}

func (x *InvocationStats) GetNumSkippedInvocations() int64 {
	if x != nil {
		return x.NumSkippedInvocations
	}
	return 0
}

func (x *InvocationStats) GetNumResolverTimeouts() int64 {
	if x != nil {
		return x.NumResolverTimeouts
	}
	return 0
}

func (x *InvocationStats) GetResolverInvocationSecs() float64 {
	if x != nil {
		return x.ResolverInvocationSecs
	}
	return 0
}

type UnaryInvokeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The returned data from the resolver. Could be empty if there isn't a single row. Feather format
	Data *Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// If there was no result collector instantiated yet when this BatchResolverResult was
	// created, then the result_collector_num_rows is None.
	ResultCollectorNumRows *int64 `protobuf:"varint,2,opt,name=result_collector_num_rows,json=resultCollectorNumRows,proto3,oneof" json:"result_collector_num_rows,omitempty"`
	// The actual wall-clock time that this batch was produced at. Will be different from the execution timestamp!
	RanAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ran_at,json=ranAt,proto3" json:"ran_at,omitempty"`
	// A list of errors durng invocation
	Errors []*v13.ChalkError `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	// Stats
	Stats *InvocationStats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *UnaryInvokeResponse) Reset() {
	*x = UnaryInvokeResponse{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnaryInvokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryInvokeResponse) ProtoMessage() {}

func (x *UnaryInvokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryInvokeResponse.ProtoReflect.Descriptor instead.
func (*UnaryInvokeResponse) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{8}
}

func (x *UnaryInvokeResponse) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UnaryInvokeResponse) GetResultCollectorNumRows() int64 {
	if x != nil && x.ResultCollectorNumRows != nil {
		return *x.ResultCollectorNumRows
	}
	return 0
}

func (x *UnaryInvokeResponse) GetRanAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RanAt
	}
	return nil
}

func (x *UnaryInvokeResponse) GetErrors() []*v13.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *UnaryInvokeResponse) GetStats() *InvocationStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type StreamInvokeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The returned data from the resolver. Could be empty if there isn't a single row.
	Data *Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// If there was no result collector instantiated yet when this BatchResolverResult was
	// created, then the result_collector_num_rows is None.
	ResultCollectorNumRows *int64 `protobuf:"varint,2,opt,name=result_collector_num_rows,json=resultCollectorNumRows,proto3,oneof" json:"result_collector_num_rows,omitempty"`
	// The actual wall-clock time that this batch was produced at. Will be different from the execution timestamp!
	RanAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ran_at,json=ranAt,proto3" json:"ran_at,omitempty"`
	// A list of errors during invocation
	Errors []*v13.ChalkError `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	// Stats
	Stats *InvocationStats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *StreamInvokeResponse) Reset() {
	*x = StreamInvokeResponse{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInvokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInvokeResponse) ProtoMessage() {}

func (x *StreamInvokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInvokeResponse.ProtoReflect.Descriptor instead.
func (*StreamInvokeResponse) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{9}
}

func (x *StreamInvokeResponse) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamInvokeResponse) GetResultCollectorNumRows() int64 {
	if x != nil && x.ResultCollectorNumRows != nil {
		return *x.ResultCollectorNumRows
	}
	return 0
}

func (x *StreamInvokeResponse) GetRanAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RanAt
	}
	return nil
}

func (x *StreamInvokeResponse) GetErrors() []*v13.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *StreamInvokeResponse) GetStats() *InvocationStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Message to initialize an idle subprocess with deployment-specific configuration
type InitializeWithDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetRoot    string `protobuf:"bytes,1,opt,name=target_root,json=targetRoot,proto3" json:"target_root,omitempty"`
	EnvironmentId string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeploymentId  string `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	BranchId      string `protobuf:"bytes,4,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
}

func (x *InitializeWithDeploymentRequest) Reset() {
	*x = InitializeWithDeploymentRequest{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeWithDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeWithDeploymentRequest) ProtoMessage() {}

func (x *InitializeWithDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeWithDeploymentRequest.ProtoReflect.Descriptor instead.
func (*InitializeWithDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{10}
}

func (x *InitializeWithDeploymentRequest) GetTargetRoot() string {
	if x != nil {
		return x.TargetRoot
	}
	return ""
}

func (x *InitializeWithDeploymentRequest) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *InitializeWithDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *InitializeWithDeploymentRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

// Response from initialization attempt
type InitializeWithDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Export     *v11.Export     `protobuf:"bytes,2,opt,name=export,proto3" json:"export,omitempty"`
	ChalkError *v13.ChalkError `protobuf:"bytes,3,opt,name=chalk_error,json=chalkError,proto3" json:"chalk_error,omitempty"` // Detailed error with stack trace
}

func (x *InitializeWithDeploymentResponse) Reset() {
	*x = InitializeWithDeploymentResponse{}
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeWithDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeWithDeploymentResponse) ProtoMessage() {}

func (x *InitializeWithDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_runtime_v1_invoker_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeWithDeploymentResponse.ProtoReflect.Descriptor instead.
func (*InitializeWithDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP(), []int{11}
}

func (x *InitializeWithDeploymentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InitializeWithDeploymentResponse) GetExport() *v11.Export {
	if x != nil {
		return x.Export
	}
	return nil
}

func (x *InitializeWithDeploymentResponse) GetChalkError() *v13.ChalkError {
	if x != nil {
		return x.ChalkError
	}
	return nil
}

var File_chalk_runtime_v1_invoker_service_proto protoreflect.FileDescriptor

var file_chalk_runtime_v1_invoker_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x25, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x19, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x17, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x47, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x47, 0x51, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x67,
	0x71, 0x6c, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x47, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x10, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xf1, 0x04, 0x0a, 0x12, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x1a, 0x58, 0x0a,
	0x12, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x04, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a,
	0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x1a, 0x58, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59,
	0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xab, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x22, 0xc0,
	0x02, 0x0a, 0x13, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3e, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0xc1, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x52,
	0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x1f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x32, 0x8a, 0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x47, 0x51, 0x4c, 0x12, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x47, 0x51, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x47, 0x51, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x18,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0xca, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x52, 0x58, 0xaa, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x3a, 0x3a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_runtime_v1_invoker_service_proto_rawDescOnce sync.Once
	file_chalk_runtime_v1_invoker_service_proto_rawDescData = file_chalk_runtime_v1_invoker_service_proto_rawDesc
)

func file_chalk_runtime_v1_invoker_service_proto_rawDescGZIP() []byte {
	file_chalk_runtime_v1_invoker_service_proto_rawDescOnce.Do(func() {
		file_chalk_runtime_v1_invoker_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_runtime_v1_invoker_service_proto_rawDescData)
	})
	return file_chalk_runtime_v1_invoker_service_proto_rawDescData
}

var file_chalk_runtime_v1_invoker_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_chalk_runtime_v1_invoker_service_proto_goTypes = []any{
	(*GetGraphRequest)(nil),                  // 0: chalk.runtime.v1.GetGraphRequest
	(*GetGraphResponse)(nil),                 // 1: chalk.runtime.v1.GetGraphResponse
	(*GetGraphGQLRequest)(nil),               // 2: chalk.runtime.v1.GetGraphGQLRequest
	(*GetGraphGQLResponse)(nil),              // 3: chalk.runtime.v1.GetGraphGQLResponse
	(*OverlayGraphInfo)(nil),                 // 4: chalk.runtime.v1.OverlayGraphInfo
	(*UnaryInvokeRequest)(nil),               // 5: chalk.runtime.v1.UnaryInvokeRequest
	(*StreamInvokeRequest)(nil),              // 6: chalk.runtime.v1.StreamInvokeRequest
	(*InvocationStats)(nil),                  // 7: chalk.runtime.v1.InvocationStats
	(*UnaryInvokeResponse)(nil),              // 8: chalk.runtime.v1.UnaryInvokeResponse
	(*StreamInvokeResponse)(nil),             // 9: chalk.runtime.v1.StreamInvokeResponse
	(*InitializeWithDeploymentRequest)(nil),  // 10: chalk.runtime.v1.InitializeWithDeploymentRequest
	(*InitializeWithDeploymentResponse)(nil), // 11: chalk.runtime.v1.InitializeWithDeploymentResponse
	nil,                                      // 12: chalk.runtime.v1.UnaryInvokeRequest.InvokerConfigEntry
	nil,                                      // 13: chalk.runtime.v1.UnaryInvokeRequest.InvokerContextEntry
	nil,                                      // 14: chalk.runtime.v1.StreamInvokeRequest.InvokerConfigEntry
	nil,                                      // 15: chalk.runtime.v1.StreamInvokeRequest.InvokerContextEntry
	(*v1.Graph)(nil),                         // 16: chalk.graph.v1.Graph
	(*v11.Export)(nil),                       // 17: chalk.artifacts.v1.Export
	(*v2.SourceSecrets)(nil),                 // 18: chalk.graph.v2.SourceSecrets
	(*v12.GlobalVariablesInfo)(nil),          // 19: chalk.python.v1.GlobalVariablesInfo
	(*v1.OverlayGraph)(nil),                  // 20: chalk.graph.v1.OverlayGraph
	(*ResolverInputs)(nil),                   // 21: chalk.runtime.v1.ResolverInputs
	(*QueryRewriter)(nil),                    // 22: chalk.runtime.v1.QueryRewriter
	(*Data)(nil),                             // 23: chalk.runtime.v1.Data
	(*timestamppb.Timestamp)(nil),            // 24: google.protobuf.Timestamp
	(*v13.ChalkError)(nil),                   // 25: chalk.common.v1.ChalkError
	(*structpb.Value)(nil),                   // 26: google.protobuf.Value
}
var file_chalk_runtime_v1_invoker_service_proto_depIdxs = []int32{
	16, // 0: chalk.runtime.v1.GetGraphResponse.graph:type_name -> chalk.graph.v1.Graph
	17, // 1: chalk.runtime.v1.GetGraphResponse.export:type_name -> chalk.artifacts.v1.Export
	18, // 2: chalk.runtime.v1.GetGraphResponse.secrets:type_name -> chalk.graph.v2.SourceSecrets
	19, // 3: chalk.runtime.v1.GetGraphResponse.captured_global_variables:type_name -> chalk.python.v1.GlobalVariablesInfo
	20, // 4: chalk.runtime.v1.OverlayGraphInfo.graph:type_name -> chalk.graph.v1.OverlayGraph
	21, // 5: chalk.runtime.v1.UnaryInvokeRequest.inputs:type_name -> chalk.runtime.v1.ResolverInputs
	12, // 6: chalk.runtime.v1.UnaryInvokeRequest.invoker_config:type_name -> chalk.runtime.v1.UnaryInvokeRequest.InvokerConfigEntry
	13, // 7: chalk.runtime.v1.UnaryInvokeRequest.invoker_context:type_name -> chalk.runtime.v1.UnaryInvokeRequest.InvokerContextEntry
	22, // 8: chalk.runtime.v1.UnaryInvokeRequest.rewriter:type_name -> chalk.runtime.v1.QueryRewriter
	4,  // 9: chalk.runtime.v1.UnaryInvokeRequest.overlay_graph_info:type_name -> chalk.runtime.v1.OverlayGraphInfo
	21, // 10: chalk.runtime.v1.StreamInvokeRequest.inputs:type_name -> chalk.runtime.v1.ResolverInputs
	14, // 11: chalk.runtime.v1.StreamInvokeRequest.invoker_config:type_name -> chalk.runtime.v1.StreamInvokeRequest.InvokerConfigEntry
	15, // 12: chalk.runtime.v1.StreamInvokeRequest.invoker_context:type_name -> chalk.runtime.v1.StreamInvokeRequest.InvokerContextEntry
	22, // 13: chalk.runtime.v1.StreamInvokeRequest.rewriter:type_name -> chalk.runtime.v1.QueryRewriter
	4,  // 14: chalk.runtime.v1.StreamInvokeRequest.overlay_graph_info:type_name -> chalk.runtime.v1.OverlayGraphInfo
	23, // 15: chalk.runtime.v1.UnaryInvokeResponse.data:type_name -> chalk.runtime.v1.Data
	24, // 16: chalk.runtime.v1.UnaryInvokeResponse.ran_at:type_name -> google.protobuf.Timestamp
	25, // 17: chalk.runtime.v1.UnaryInvokeResponse.errors:type_name -> chalk.common.v1.ChalkError
	7,  // 18: chalk.runtime.v1.UnaryInvokeResponse.stats:type_name -> chalk.runtime.v1.InvocationStats
	23, // 19: chalk.runtime.v1.StreamInvokeResponse.data:type_name -> chalk.runtime.v1.Data
	24, // 20: chalk.runtime.v1.StreamInvokeResponse.ran_at:type_name -> google.protobuf.Timestamp
	25, // 21: chalk.runtime.v1.StreamInvokeResponse.errors:type_name -> chalk.common.v1.ChalkError
	7,  // 22: chalk.runtime.v1.StreamInvokeResponse.stats:type_name -> chalk.runtime.v1.InvocationStats
	17, // 23: chalk.runtime.v1.InitializeWithDeploymentResponse.export:type_name -> chalk.artifacts.v1.Export
	25, // 24: chalk.runtime.v1.InitializeWithDeploymentResponse.chalk_error:type_name -> chalk.common.v1.ChalkError
	26, // 25: chalk.runtime.v1.UnaryInvokeRequest.InvokerConfigEntry.value:type_name -> google.protobuf.Value
	26, // 26: chalk.runtime.v1.UnaryInvokeRequest.InvokerContextEntry.value:type_name -> google.protobuf.Value
	26, // 27: chalk.runtime.v1.StreamInvokeRequest.InvokerConfigEntry.value:type_name -> google.protobuf.Value
	26, // 28: chalk.runtime.v1.StreamInvokeRequest.InvokerContextEntry.value:type_name -> google.protobuf.Value
	0,  // 29: chalk.runtime.v1.InvokerService.GetGraph:input_type -> chalk.runtime.v1.GetGraphRequest
	2,  // 30: chalk.runtime.v1.InvokerService.GetGraphGQL:input_type -> chalk.runtime.v1.GetGraphGQLRequest
	5,  // 31: chalk.runtime.v1.InvokerService.UnaryInvoke:input_type -> chalk.runtime.v1.UnaryInvokeRequest
	6,  // 32: chalk.runtime.v1.InvokerService.StreamInvoke:input_type -> chalk.runtime.v1.StreamInvokeRequest
	10, // 33: chalk.runtime.v1.InvokerService.InitializeWithDeployment:input_type -> chalk.runtime.v1.InitializeWithDeploymentRequest
	1,  // 34: chalk.runtime.v1.InvokerService.GetGraph:output_type -> chalk.runtime.v1.GetGraphResponse
	3,  // 35: chalk.runtime.v1.InvokerService.GetGraphGQL:output_type -> chalk.runtime.v1.GetGraphGQLResponse
	8,  // 36: chalk.runtime.v1.InvokerService.UnaryInvoke:output_type -> chalk.runtime.v1.UnaryInvokeResponse
	9,  // 37: chalk.runtime.v1.InvokerService.StreamInvoke:output_type -> chalk.runtime.v1.StreamInvokeResponse
	11, // 38: chalk.runtime.v1.InvokerService.InitializeWithDeployment:output_type -> chalk.runtime.v1.InitializeWithDeploymentResponse
	34, // [34:39] is the sub-list for method output_type
	29, // [29:34] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_chalk_runtime_v1_invoker_service_proto_init() }
func file_chalk_runtime_v1_invoker_service_proto_init() {
	if File_chalk_runtime_v1_invoker_service_proto != nil {
		return
	}
	file_chalk_runtime_v1_data_proto_init()
	file_chalk_runtime_v1_query_rewriter_proto_init()
	file_chalk_runtime_v1_resolver_inputs_proto_init()
	file_chalk_runtime_v1_invoker_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_chalk_runtime_v1_invoker_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_chalk_runtime_v1_invoker_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_chalk_runtime_v1_invoker_service_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_runtime_v1_invoker_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_runtime_v1_invoker_service_proto_goTypes,
		DependencyIndexes: file_chalk_runtime_v1_invoker_service_proto_depIdxs,
		MessageInfos:      file_chalk_runtime_v1_invoker_service_proto_msgTypes,
	}.Build()
	File_chalk_runtime_v1_invoker_service_proto = out.File
	file_chalk_runtime_v1_invoker_service_proto_rawDesc = nil
	file_chalk_runtime_v1_invoker_service_proto_goTypes = nil
	file_chalk_runtime_v1_invoker_service_proto_depIdxs = nil
}
