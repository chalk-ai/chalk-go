// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/runtime/v1/remote_python_call.proto

package runtimev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RemoteCallServiceName is the fully-qualified name of the RemoteCallService service.
	RemoteCallServiceName = "chalk.runtime.v1.RemoteCallService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RemoteCallServiceCallFunctionProcedure is the fully-qualified name of the RemoteCallService's
	// CallFunction RPC.
	RemoteCallServiceCallFunctionProcedure = "/chalk.runtime.v1.RemoteCallService/CallFunction"
)

// RemoteCallServiceClient is a client for the chalk.runtime.v1.RemoteCallService service.
type RemoteCallServiceClient interface {
	CallFunction(context.Context) *connect.BidiStreamForClient[v1.CallFunctionRequest, v1.CallFunctionResponse]
}

// NewRemoteCallServiceClient constructs a client for the chalk.runtime.v1.RemoteCallService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRemoteCallServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RemoteCallServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	remoteCallServiceMethods := v1.File_chalk_runtime_v1_remote_python_call_proto.Services().ByName("RemoteCallService").Methods()
	return &remoteCallServiceClient{
		callFunction: connect.NewClient[v1.CallFunctionRequest, v1.CallFunctionResponse](
			httpClient,
			baseURL+RemoteCallServiceCallFunctionProcedure,
			connect.WithSchema(remoteCallServiceMethods.ByName("CallFunction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// remoteCallServiceClient implements RemoteCallServiceClient.
type remoteCallServiceClient struct {
	callFunction *connect.Client[v1.CallFunctionRequest, v1.CallFunctionResponse]
}

// CallFunction calls chalk.runtime.v1.RemoteCallService.CallFunction.
func (c *remoteCallServiceClient) CallFunction(ctx context.Context) *connect.BidiStreamForClient[v1.CallFunctionRequest, v1.CallFunctionResponse] {
	return c.callFunction.CallBidiStream(ctx)
}

// RemoteCallServiceHandler is an implementation of the chalk.runtime.v1.RemoteCallService service.
type RemoteCallServiceHandler interface {
	CallFunction(context.Context, *connect.BidiStream[v1.CallFunctionRequest, v1.CallFunctionResponse]) error
}

// NewRemoteCallServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRemoteCallServiceHandler(svc RemoteCallServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	remoteCallServiceMethods := v1.File_chalk_runtime_v1_remote_python_call_proto.Services().ByName("RemoteCallService").Methods()
	remoteCallServiceCallFunctionHandler := connect.NewBidiStreamHandler(
		RemoteCallServiceCallFunctionProcedure,
		svc.CallFunction,
		connect.WithSchema(remoteCallServiceMethods.ByName("CallFunction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.runtime.v1.RemoteCallService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RemoteCallServiceCallFunctionProcedure:
			remoteCallServiceCallFunctionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRemoteCallServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRemoteCallServiceHandler struct{}

func (UnimplementedRemoteCallServiceHandler) CallFunction(context.Context, *connect.BidiStream[v1.CallFunctionRequest, v1.CallFunctionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chalk.runtime.v1.RemoteCallService.CallFunction is not implemented"))
}
