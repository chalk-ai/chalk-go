// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/runtime/v1/invoker_service.proto

package runtimev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InvokerServiceName is the fully-qualified name of the InvokerService service.
	InvokerServiceName = "chalk.runtime.v1.InvokerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InvokerServiceGetGraphProcedure is the fully-qualified name of the InvokerService's GetGraph RPC.
	InvokerServiceGetGraphProcedure = "/chalk.runtime.v1.InvokerService/GetGraph"
	// InvokerServiceGetGraphGQLProcedure is the fully-qualified name of the InvokerService's
	// GetGraphGQL RPC.
	InvokerServiceGetGraphGQLProcedure = "/chalk.runtime.v1.InvokerService/GetGraphGQL"
	// InvokerServiceUnaryInvokeProcedure is the fully-qualified name of the InvokerService's
	// UnaryInvoke RPC.
	InvokerServiceUnaryInvokeProcedure = "/chalk.runtime.v1.InvokerService/UnaryInvoke"
	// InvokerServiceStreamInvokeProcedure is the fully-qualified name of the InvokerService's
	// StreamInvoke RPC.
	InvokerServiceStreamInvokeProcedure = "/chalk.runtime.v1.InvokerService/StreamInvoke"
	// InvokerServiceInitializeWithDeploymentProcedure is the fully-qualified name of the
	// InvokerService's InitializeWithDeployment RPC.
	InvokerServiceInitializeWithDeploymentProcedure = "/chalk.runtime.v1.InvokerService/InitializeWithDeployment"
)

// InvokerServiceClient is a client for the chalk.runtime.v1.InvokerService service.
type InvokerServiceClient interface {
	// The GetGraph RPC is called by the main process during boot to get the protograph. This allows the main process to avoid
	// importing any customer code
	GetGraph(context.Context, *connect.Request[v1.GetGraphRequest]) (*connect.Response[v1.GetGraphResponse], error)
	// GetGraphGQL is used by the branch server to get the graph in a GQL format that the frontend currently uses.
	// Eventually we'd like to move away from this but for now this is needed to render the features/resolvers dashboard
	// for branches
	GetGraphGQL(context.Context, *connect.Request[v1.GetGraphGQLRequest]) (*connect.Response[v1.GetGraphGQLResponse], error)
	// Unary invoke is used for 1-to-1 scalar resolvers, where there is exactly one output row for each input row
	UnaryInvoke(context.Context, *connect.Request[v1.UnaryInvokeRequest]) (*connect.Response[v1.UnaryInvokeResponse], error)
	// Stream invoke is used for dataframe-returning and generator resolvers, where each input row could return multiple output rows. It is also
	// used for root, no-arg, dataframe-returning resolvers.
	StreamInvoke(context.Context, *connect.Request[v1.StreamInvokeRequest]) (*connect.ServerStreamForClient[v1.StreamInvokeResponse], error)
	// InitializeWithDeployment is used to transition an idle subprocess actor to active state by loading customer code
	// This is called by the branch server when an idle actor is acquired from the pool
	InitializeWithDeployment(context.Context, *connect.Request[v1.InitializeWithDeploymentRequest]) (*connect.Response[v1.InitializeWithDeploymentResponse], error)
}

// NewInvokerServiceClient constructs a client for the chalk.runtime.v1.InvokerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInvokerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InvokerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	invokerServiceMethods := v1.File_chalk_runtime_v1_invoker_service_proto.Services().ByName("InvokerService").Methods()
	return &invokerServiceClient{
		getGraph: connect.NewClient[v1.GetGraphRequest, v1.GetGraphResponse](
			httpClient,
			baseURL+InvokerServiceGetGraphProcedure,
			connect.WithSchema(invokerServiceMethods.ByName("GetGraph")),
			connect.WithClientOptions(opts...),
		),
		getGraphGQL: connect.NewClient[v1.GetGraphGQLRequest, v1.GetGraphGQLResponse](
			httpClient,
			baseURL+InvokerServiceGetGraphGQLProcedure,
			connect.WithSchema(invokerServiceMethods.ByName("GetGraphGQL")),
			connect.WithClientOptions(opts...),
		),
		unaryInvoke: connect.NewClient[v1.UnaryInvokeRequest, v1.UnaryInvokeResponse](
			httpClient,
			baseURL+InvokerServiceUnaryInvokeProcedure,
			connect.WithSchema(invokerServiceMethods.ByName("UnaryInvoke")),
			connect.WithClientOptions(opts...),
		),
		streamInvoke: connect.NewClient[v1.StreamInvokeRequest, v1.StreamInvokeResponse](
			httpClient,
			baseURL+InvokerServiceStreamInvokeProcedure,
			connect.WithSchema(invokerServiceMethods.ByName("StreamInvoke")),
			connect.WithClientOptions(opts...),
		),
		initializeWithDeployment: connect.NewClient[v1.InitializeWithDeploymentRequest, v1.InitializeWithDeploymentResponse](
			httpClient,
			baseURL+InvokerServiceInitializeWithDeploymentProcedure,
			connect.WithSchema(invokerServiceMethods.ByName("InitializeWithDeployment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// invokerServiceClient implements InvokerServiceClient.
type invokerServiceClient struct {
	getGraph                 *connect.Client[v1.GetGraphRequest, v1.GetGraphResponse]
	getGraphGQL              *connect.Client[v1.GetGraphGQLRequest, v1.GetGraphGQLResponse]
	unaryInvoke              *connect.Client[v1.UnaryInvokeRequest, v1.UnaryInvokeResponse]
	streamInvoke             *connect.Client[v1.StreamInvokeRequest, v1.StreamInvokeResponse]
	initializeWithDeployment *connect.Client[v1.InitializeWithDeploymentRequest, v1.InitializeWithDeploymentResponse]
}

// GetGraph calls chalk.runtime.v1.InvokerService.GetGraph.
func (c *invokerServiceClient) GetGraph(ctx context.Context, req *connect.Request[v1.GetGraphRequest]) (*connect.Response[v1.GetGraphResponse], error) {
	return c.getGraph.CallUnary(ctx, req)
}

// GetGraphGQL calls chalk.runtime.v1.InvokerService.GetGraphGQL.
func (c *invokerServiceClient) GetGraphGQL(ctx context.Context, req *connect.Request[v1.GetGraphGQLRequest]) (*connect.Response[v1.GetGraphGQLResponse], error) {
	return c.getGraphGQL.CallUnary(ctx, req)
}

// UnaryInvoke calls chalk.runtime.v1.InvokerService.UnaryInvoke.
func (c *invokerServiceClient) UnaryInvoke(ctx context.Context, req *connect.Request[v1.UnaryInvokeRequest]) (*connect.Response[v1.UnaryInvokeResponse], error) {
	return c.unaryInvoke.CallUnary(ctx, req)
}

// StreamInvoke calls chalk.runtime.v1.InvokerService.StreamInvoke.
func (c *invokerServiceClient) StreamInvoke(ctx context.Context, req *connect.Request[v1.StreamInvokeRequest]) (*connect.ServerStreamForClient[v1.StreamInvokeResponse], error) {
	return c.streamInvoke.CallServerStream(ctx, req)
}

// InitializeWithDeployment calls chalk.runtime.v1.InvokerService.InitializeWithDeployment.
func (c *invokerServiceClient) InitializeWithDeployment(ctx context.Context, req *connect.Request[v1.InitializeWithDeploymentRequest]) (*connect.Response[v1.InitializeWithDeploymentResponse], error) {
	return c.initializeWithDeployment.CallUnary(ctx, req)
}

// InvokerServiceHandler is an implementation of the chalk.runtime.v1.InvokerService service.
type InvokerServiceHandler interface {
	// The GetGraph RPC is called by the main process during boot to get the protograph. This allows the main process to avoid
	// importing any customer code
	GetGraph(context.Context, *connect.Request[v1.GetGraphRequest]) (*connect.Response[v1.GetGraphResponse], error)
	// GetGraphGQL is used by the branch server to get the graph in a GQL format that the frontend currently uses.
	// Eventually we'd like to move away from this but for now this is needed to render the features/resolvers dashboard
	// for branches
	GetGraphGQL(context.Context, *connect.Request[v1.GetGraphGQLRequest]) (*connect.Response[v1.GetGraphGQLResponse], error)
	// Unary invoke is used for 1-to-1 scalar resolvers, where there is exactly one output row for each input row
	UnaryInvoke(context.Context, *connect.Request[v1.UnaryInvokeRequest]) (*connect.Response[v1.UnaryInvokeResponse], error)
	// Stream invoke is used for dataframe-returning and generator resolvers, where each input row could return multiple output rows. It is also
	// used for root, no-arg, dataframe-returning resolvers.
	StreamInvoke(context.Context, *connect.Request[v1.StreamInvokeRequest], *connect.ServerStream[v1.StreamInvokeResponse]) error
	// InitializeWithDeployment is used to transition an idle subprocess actor to active state by loading customer code
	// This is called by the branch server when an idle actor is acquired from the pool
	InitializeWithDeployment(context.Context, *connect.Request[v1.InitializeWithDeploymentRequest]) (*connect.Response[v1.InitializeWithDeploymentResponse], error)
}

// NewInvokerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInvokerServiceHandler(svc InvokerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	invokerServiceMethods := v1.File_chalk_runtime_v1_invoker_service_proto.Services().ByName("InvokerService").Methods()
	invokerServiceGetGraphHandler := connect.NewUnaryHandler(
		InvokerServiceGetGraphProcedure,
		svc.GetGraph,
		connect.WithSchema(invokerServiceMethods.ByName("GetGraph")),
		connect.WithHandlerOptions(opts...),
	)
	invokerServiceGetGraphGQLHandler := connect.NewUnaryHandler(
		InvokerServiceGetGraphGQLProcedure,
		svc.GetGraphGQL,
		connect.WithSchema(invokerServiceMethods.ByName("GetGraphGQL")),
		connect.WithHandlerOptions(opts...),
	)
	invokerServiceUnaryInvokeHandler := connect.NewUnaryHandler(
		InvokerServiceUnaryInvokeProcedure,
		svc.UnaryInvoke,
		connect.WithSchema(invokerServiceMethods.ByName("UnaryInvoke")),
		connect.WithHandlerOptions(opts...),
	)
	invokerServiceStreamInvokeHandler := connect.NewServerStreamHandler(
		InvokerServiceStreamInvokeProcedure,
		svc.StreamInvoke,
		connect.WithSchema(invokerServiceMethods.ByName("StreamInvoke")),
		connect.WithHandlerOptions(opts...),
	)
	invokerServiceInitializeWithDeploymentHandler := connect.NewUnaryHandler(
		InvokerServiceInitializeWithDeploymentProcedure,
		svc.InitializeWithDeployment,
		connect.WithSchema(invokerServiceMethods.ByName("InitializeWithDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.runtime.v1.InvokerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InvokerServiceGetGraphProcedure:
			invokerServiceGetGraphHandler.ServeHTTP(w, r)
		case InvokerServiceGetGraphGQLProcedure:
			invokerServiceGetGraphGQLHandler.ServeHTTP(w, r)
		case InvokerServiceUnaryInvokeProcedure:
			invokerServiceUnaryInvokeHandler.ServeHTTP(w, r)
		case InvokerServiceStreamInvokeProcedure:
			invokerServiceStreamInvokeHandler.ServeHTTP(w, r)
		case InvokerServiceInitializeWithDeploymentProcedure:
			invokerServiceInitializeWithDeploymentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInvokerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInvokerServiceHandler struct{}

func (UnimplementedInvokerServiceHandler) GetGraph(context.Context, *connect.Request[v1.GetGraphRequest]) (*connect.Response[v1.GetGraphResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.runtime.v1.InvokerService.GetGraph is not implemented"))
}

func (UnimplementedInvokerServiceHandler) GetGraphGQL(context.Context, *connect.Request[v1.GetGraphGQLRequest]) (*connect.Response[v1.GetGraphGQLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.runtime.v1.InvokerService.GetGraphGQL is not implemented"))
}

func (UnimplementedInvokerServiceHandler) UnaryInvoke(context.Context, *connect.Request[v1.UnaryInvokeRequest]) (*connect.Response[v1.UnaryInvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.runtime.v1.InvokerService.UnaryInvoke is not implemented"))
}

func (UnimplementedInvokerServiceHandler) StreamInvoke(context.Context, *connect.Request[v1.StreamInvokeRequest], *connect.ServerStream[v1.StreamInvokeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chalk.runtime.v1.InvokerService.StreamInvoke is not implemented"))
}

func (UnimplementedInvokerServiceHandler) InitializeWithDeployment(context.Context, *connect.Request[v1.InitializeWithDeploymentRequest]) (*connect.Response[v1.InitializeWithDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.runtime.v1.InvokerService.InitializeWithDeployment is not implemented"))
}
