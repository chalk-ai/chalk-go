// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/enginestorage/v1/adhoc_query_service.proto

package enginestoragev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/enginestorage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdhocQueryServiceName is the fully-qualified name of the AdhocQueryService service.
	AdhocQueryServiceName = "chalk.enginestorage.v1.AdhocQueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdhocQueryServiceListAdhocQueriesProcedure is the fully-qualified name of the AdhocQueryService's
	// ListAdhocQueries RPC.
	AdhocQueryServiceListAdhocQueriesProcedure = "/chalk.enginestorage.v1.AdhocQueryService/ListAdhocQueries"
)

// AdhocQueryServiceClient is a client for the chalk.enginestorage.v1.AdhocQueryService service.
type AdhocQueryServiceClient interface {
	// List adhoc queries with pagination and filtering
	ListAdhocQueries(context.Context, *connect.Request[v1.ListAdhocQueriesRequest]) (*connect.Response[v1.ListAdhocQueriesResponse], error)
}

// NewAdhocQueryServiceClient constructs a client for the chalk.enginestorage.v1.AdhocQueryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdhocQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdhocQueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adhocQueryServiceMethods := v1.File_chalk_enginestorage_v1_adhoc_query_service_proto.Services().ByName("AdhocQueryService").Methods()
	return &adhocQueryServiceClient{
		listAdhocQueries: connect.NewClient[v1.ListAdhocQueriesRequest, v1.ListAdhocQueriesResponse](
			httpClient,
			baseURL+AdhocQueryServiceListAdhocQueriesProcedure,
			connect.WithSchema(adhocQueryServiceMethods.ByName("ListAdhocQueries")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adhocQueryServiceClient implements AdhocQueryServiceClient.
type adhocQueryServiceClient struct {
	listAdhocQueries *connect.Client[v1.ListAdhocQueriesRequest, v1.ListAdhocQueriesResponse]
}

// ListAdhocQueries calls chalk.enginestorage.v1.AdhocQueryService.ListAdhocQueries.
func (c *adhocQueryServiceClient) ListAdhocQueries(ctx context.Context, req *connect.Request[v1.ListAdhocQueriesRequest]) (*connect.Response[v1.ListAdhocQueriesResponse], error) {
	return c.listAdhocQueries.CallUnary(ctx, req)
}

// AdhocQueryServiceHandler is an implementation of the chalk.enginestorage.v1.AdhocQueryService
// service.
type AdhocQueryServiceHandler interface {
	// List adhoc queries with pagination and filtering
	ListAdhocQueries(context.Context, *connect.Request[v1.ListAdhocQueriesRequest]) (*connect.Response[v1.ListAdhocQueriesResponse], error)
}

// NewAdhocQueryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdhocQueryServiceHandler(svc AdhocQueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adhocQueryServiceMethods := v1.File_chalk_enginestorage_v1_adhoc_query_service_proto.Services().ByName("AdhocQueryService").Methods()
	adhocQueryServiceListAdhocQueriesHandler := connect.NewUnaryHandler(
		AdhocQueryServiceListAdhocQueriesProcedure,
		svc.ListAdhocQueries,
		connect.WithSchema(adhocQueryServiceMethods.ByName("ListAdhocQueries")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.enginestorage.v1.AdhocQueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdhocQueryServiceListAdhocQueriesProcedure:
			adhocQueryServiceListAdhocQueriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdhocQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdhocQueryServiceHandler struct{}

func (UnimplementedAdhocQueryServiceHandler) ListAdhocQueries(context.Context, *connect.Request[v1.ListAdhocQueriesRequest]) (*connect.Response[v1.ListAdhocQueriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.enginestorage.v1.AdhocQueryService.ListAdhocQueries is not implemented"))
}
