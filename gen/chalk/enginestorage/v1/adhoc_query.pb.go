// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/enginestorage/v1/adhoc_query.proto

package enginestoragev1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GivensSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EncodedGivensSchema:
	//
	//	*GivensSchema_ScalarGivensBytes
	EncodedGivensSchema isGivensSchema_EncodedGivensSchema `protobuf_oneof:"encoded_givens_schema"`
}

func (x *GivensSchema) Reset() {
	*x = GivensSchema{}
	mi := &file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GivensSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GivensSchema) ProtoMessage() {}

func (x *GivensSchema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GivensSchema.ProtoReflect.Descriptor instead.
func (*GivensSchema) Descriptor() ([]byte, []int) {
	return file_chalk_enginestorage_v1_adhoc_query_proto_rawDescGZIP(), []int{0}
}

func (m *GivensSchema) GetEncodedGivensSchema() isGivensSchema_EncodedGivensSchema {
	if m != nil {
		return m.EncodedGivensSchema
	}
	return nil
}

func (x *GivensSchema) GetScalarGivensBytes() []byte {
	if x, ok := x.GetEncodedGivensSchema().(*GivensSchema_ScalarGivensBytes); ok {
		return x.ScalarGivensBytes
	}
	return nil
}

type isGivensSchema_EncodedGivensSchema interface {
	isGivensSchema_EncodedGivensSchema()
}

type GivensSchema_ScalarGivensBytes struct {
	// The schema is *just* a pyarrow.Schema object suitable for decoding into OperatorPyArrowSchema.scalars_schema
	ScalarGivensBytes []byte `protobuf:"bytes,1,opt,name=scalar_givens_bytes,json=scalarGivensBytes,proto3,oneof"`
}

func (*GivensSchema_ScalarGivensBytes) isGivensSchema_EncodedGivensSchema() {}

type AllPlanningInputsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context             *v1.OnlineQueryContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	StorePlanStages     bool                   `protobuf:"varint,4,opt,name=store_plan_stages,json=storePlanStages,proto3" json:"store_plan_stages,omitempty"`
	Explain             bool                   `protobuf:"varint,5,opt,name=explain,proto3" json:"explain,omitempty"`
	QueryName           *string                `protobuf:"bytes,6,opt,name=query_name,json=queryName,proto3,oneof" json:"query_name,omitempty"`
	QueryNameVersion    *string                `protobuf:"bytes,7,opt,name=query_name_version,json=queryNameVersion,proto3,oneof" json:"query_name_version,omitempty"`
	ConvertedOutputFqns []string               `protobuf:"bytes,8,rep,name=converted_output_fqns,json=convertedOutputFqns,proto3" json:"converted_output_fqns,omitempty"`
	// repeated OutputUnderscoreFeatureTypeProto output_expressions = 9;
	PkeyFeature                       string                          `protobuf:"bytes,10,opt,name=pkey_feature,json=pkeyFeature,proto3" json:"pkey_feature,omitempty"`
	Staleness                         map[string]*durationpb.Duration `protobuf:"bytes,11,rep,name=staleness,proto3" json:"staleness,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ValueMetricsTagByFeatures         []string                        `protobuf:"bytes,12,rep,name=value_metrics_tag_by_features,json=valueMetricsTagByFeatures,proto3" json:"value_metrics_tag_by_features,omitempty"`
	ScalarGivensFqns                  []string                        `protobuf:"bytes,13,rep,name=scalar_givens_fqns,json=scalarGivensFqns,proto3" json:"scalar_givens_fqns,omitempty"`
	GivensSchema                      *GivensSchema                   `protobuf:"bytes,14,opt,name=givens_schema,json=givensSchema,proto3,oneof" json:"givens_schema,omitempty"`
	PlannerOptions                    map[string]*structpb.Value      `protobuf:"bytes,15,rep,name=planner_options,json=plannerOptions,proto3" json:"planner_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MappedOutputs                     map[string]string               `protobuf:"bytes,16,rep,name=mapped_outputs,json=mappedOutputs,proto3" json:"mapped_outputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GivensAreSingleRow                bool                            `protobuf:"varint,17,opt,name=givens_are_single_row,json=givensAreSingleRow,proto3" json:"givens_are_single_row,omitempty"`
	UseAlternateDefaultPlannerOptions bool                            `protobuf:"varint,18,opt,name=use_alternate_default_planner_options,json=useAlternateDefaultPlannerOptions,proto3" json:"use_alternate_default_planner_options,omitempty"`
	CustomerMetaTags                  map[string]string               `protobuf:"bytes,19,rep,name=customer_meta_tags,json=customerMetaTags,proto3" json:"customer_meta_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AllPlanningInputsProto) Reset() {
	*x = AllPlanningInputsProto{}
	mi := &file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllPlanningInputsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPlanningInputsProto) ProtoMessage() {}

func (x *AllPlanningInputsProto) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPlanningInputsProto.ProtoReflect.Descriptor instead.
func (*AllPlanningInputsProto) Descriptor() ([]byte, []int) {
	return file_chalk_enginestorage_v1_adhoc_query_proto_rawDescGZIP(), []int{1}
}

func (x *AllPlanningInputsProto) GetContext() *v1.OnlineQueryContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AllPlanningInputsProto) GetStorePlanStages() bool {
	if x != nil {
		return x.StorePlanStages
	}
	return false
}

func (x *AllPlanningInputsProto) GetExplain() bool {
	if x != nil {
		return x.Explain
	}
	return false
}

func (x *AllPlanningInputsProto) GetQueryName() string {
	if x != nil && x.QueryName != nil {
		return *x.QueryName
	}
	return ""
}

func (x *AllPlanningInputsProto) GetQueryNameVersion() string {
	if x != nil && x.QueryNameVersion != nil {
		return *x.QueryNameVersion
	}
	return ""
}

func (x *AllPlanningInputsProto) GetConvertedOutputFqns() []string {
	if x != nil {
		return x.ConvertedOutputFqns
	}
	return nil
}

func (x *AllPlanningInputsProto) GetPkeyFeature() string {
	if x != nil {
		return x.PkeyFeature
	}
	return ""
}

func (x *AllPlanningInputsProto) GetStaleness() map[string]*durationpb.Duration {
	if x != nil {
		return x.Staleness
	}
	return nil
}

func (x *AllPlanningInputsProto) GetValueMetricsTagByFeatures() []string {
	if x != nil {
		return x.ValueMetricsTagByFeatures
	}
	return nil
}

func (x *AllPlanningInputsProto) GetScalarGivensFqns() []string {
	if x != nil {
		return x.ScalarGivensFqns
	}
	return nil
}

func (x *AllPlanningInputsProto) GetGivensSchema() *GivensSchema {
	if x != nil {
		return x.GivensSchema
	}
	return nil
}

func (x *AllPlanningInputsProto) GetPlannerOptions() map[string]*structpb.Value {
	if x != nil {
		return x.PlannerOptions
	}
	return nil
}

func (x *AllPlanningInputsProto) GetMappedOutputs() map[string]string {
	if x != nil {
		return x.MappedOutputs
	}
	return nil
}

func (x *AllPlanningInputsProto) GetGivensAreSingleRow() bool {
	if x != nil {
		return x.GivensAreSingleRow
	}
	return false
}

func (x *AllPlanningInputsProto) GetUseAlternateDefaultPlannerOptions() bool {
	if x != nil {
		return x.UseAlternateDefaultPlannerOptions
	}
	return false
}

func (x *AllPlanningInputsProto) GetCustomerMetaTags() map[string]string {
	if x != nil {
		return x.CustomerMetaTags
	}
	return nil
}

var File_chalk_enginestorage_v1_adhoc_query_proto protoreflect.FileDescriptor

var file_chalk_enginestorage_v1_adhoc_query_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0c, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x47, 0x69, 0x76, 0x65, 0x6e,
	0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22,
	0xab, 0x0b, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x71, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x71, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6b, 0x65, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x19, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54,
	0x61, 0x67, 0x42, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x66, 0x71,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x47, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x46, 0x71, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x6e,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x02, 0x52, 0x0c, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x41, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x25, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x21, 0x75, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x57, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0xf0, 0x01,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x41, 0x64,
	0x68, 0x6f, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x45, 0x58, 0xaa, 0x02,
	0x16, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x22, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_enginestorage_v1_adhoc_query_proto_rawDescOnce sync.Once
	file_chalk_enginestorage_v1_adhoc_query_proto_rawDescData = file_chalk_enginestorage_v1_adhoc_query_proto_rawDesc
)

func file_chalk_enginestorage_v1_adhoc_query_proto_rawDescGZIP() []byte {
	file_chalk_enginestorage_v1_adhoc_query_proto_rawDescOnce.Do(func() {
		file_chalk_enginestorage_v1_adhoc_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_enginestorage_v1_adhoc_query_proto_rawDescData)
	})
	return file_chalk_enginestorage_v1_adhoc_query_proto_rawDescData
}

var file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chalk_enginestorage_v1_adhoc_query_proto_goTypes = []any{
	(*GivensSchema)(nil),           // 0: chalk.enginestorage.v1.GivensSchema
	(*AllPlanningInputsProto)(nil), // 1: chalk.enginestorage.v1.AllPlanningInputsProto
	nil,                            // 2: chalk.enginestorage.v1.AllPlanningInputsProto.StalenessEntry
	nil,                            // 3: chalk.enginestorage.v1.AllPlanningInputsProto.PlannerOptionsEntry
	nil,                            // 4: chalk.enginestorage.v1.AllPlanningInputsProto.MappedOutputsEntry
	nil,                            // 5: chalk.enginestorage.v1.AllPlanningInputsProto.CustomerMetaTagsEntry
	(*v1.OnlineQueryContext)(nil),  // 6: chalk.common.v1.OnlineQueryContext
	(*durationpb.Duration)(nil),    // 7: google.protobuf.Duration
	(*structpb.Value)(nil),         // 8: google.protobuf.Value
}
var file_chalk_enginestorage_v1_adhoc_query_proto_depIdxs = []int32{
	6, // 0: chalk.enginestorage.v1.AllPlanningInputsProto.context:type_name -> chalk.common.v1.OnlineQueryContext
	2, // 1: chalk.enginestorage.v1.AllPlanningInputsProto.staleness:type_name -> chalk.enginestorage.v1.AllPlanningInputsProto.StalenessEntry
	0, // 2: chalk.enginestorage.v1.AllPlanningInputsProto.givens_schema:type_name -> chalk.enginestorage.v1.GivensSchema
	3, // 3: chalk.enginestorage.v1.AllPlanningInputsProto.planner_options:type_name -> chalk.enginestorage.v1.AllPlanningInputsProto.PlannerOptionsEntry
	4, // 4: chalk.enginestorage.v1.AllPlanningInputsProto.mapped_outputs:type_name -> chalk.enginestorage.v1.AllPlanningInputsProto.MappedOutputsEntry
	5, // 5: chalk.enginestorage.v1.AllPlanningInputsProto.customer_meta_tags:type_name -> chalk.enginestorage.v1.AllPlanningInputsProto.CustomerMetaTagsEntry
	7, // 6: chalk.enginestorage.v1.AllPlanningInputsProto.StalenessEntry.value:type_name -> google.protobuf.Duration
	8, // 7: chalk.enginestorage.v1.AllPlanningInputsProto.PlannerOptionsEntry.value:type_name -> google.protobuf.Value
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_chalk_enginestorage_v1_adhoc_query_proto_init() }
func file_chalk_enginestorage_v1_adhoc_query_proto_init() {
	if File_chalk_enginestorage_v1_adhoc_query_proto != nil {
		return
	}
	file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes[0].OneofWrappers = []any{
		(*GivensSchema_ScalarGivensBytes)(nil),
	}
	file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_enginestorage_v1_adhoc_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_enginestorage_v1_adhoc_query_proto_goTypes,
		DependencyIndexes: file_chalk_enginestorage_v1_adhoc_query_proto_depIdxs,
		MessageInfos:      file_chalk_enginestorage_v1_adhoc_query_proto_msgTypes,
	}.Build()
	File_chalk_enginestorage_v1_adhoc_query_proto = out.File
	file_chalk_enginestorage_v1_adhoc_query_proto_rawDesc = nil
	file_chalk_enginestorage_v1_adhoc_query_proto_goTypes = nil
	file_chalk_enginestorage_v1_adhoc_query_proto_depIdxs = nil
}
