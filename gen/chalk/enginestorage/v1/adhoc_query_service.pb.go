// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/enginestorage/v1/adhoc_query_service.proto

package enginestoragev1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAdhocQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of queries to return
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Pagination token for fetching the next page
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Optional filter by query name
	QueryName *string `protobuf:"bytes,3,opt,name=query_name,json=queryName,proto3,oneof" json:"query_name,omitempty"`
	// Optional filter by environment ID (if not provided, uses context)
	EnvironmentId *string `protobuf:"bytes,4,opt,name=environment_id,json=environmentId,proto3,oneof" json:"environment_id,omitempty"`
}

func (x *ListAdhocQueriesRequest) Reset() {
	*x = ListAdhocQueriesRequest{}
	mi := &file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdhocQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdhocQueriesRequest) ProtoMessage() {}

func (x *ListAdhocQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdhocQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListAdhocQueriesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListAdhocQueriesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListAdhocQueriesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListAdhocQueriesRequest) GetQueryName() string {
	if x != nil && x.QueryName != nil {
		return *x.QueryName
	}
	return ""
}

func (x *ListAdhocQueriesRequest) GetEnvironmentId() string {
	if x != nil && x.EnvironmentId != nil {
		return *x.EnvironmentId
	}
	return ""
}

type ListAdhocQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of adhoc queries
	Queries []*AdhocQueryItem `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// Pagination token for the next page
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	// Total number of queries (optional, for UI pagination)
	TotalCount *int32 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
}

func (x *ListAdhocQueriesResponse) Reset() {
	*x = ListAdhocQueriesResponse{}
	mi := &file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAdhocQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdhocQueriesResponse) ProtoMessage() {}

func (x *ListAdhocQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdhocQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListAdhocQueriesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListAdhocQueriesResponse) GetQueries() []*AdhocQueryItem {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ListAdhocQueriesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListAdhocQueriesResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type AdhocQueryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the query
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The full query planning inputs
	PlanningInputs *AllPlanningInputsProto `protobuf:"bytes,2,opt,name=planning_inputs,json=planningInputs,proto3" json:"planning_inputs,omitempty"`
	// Timestamp when the query was created
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Optional: Timestamp when the query was last executed
	LastExecutedAt *string `protobuf:"bytes,4,opt,name=last_executed_at,json=lastExecutedAt,proto3,oneof" json:"last_executed_at,omitempty"`
	// Optional: Query status (e.g., "pending", "running", "completed", "failed")
	Status *string `protobuf:"bytes,5,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Optional: Environment ID where this query belongs
	EnvironmentId *string `protobuf:"bytes,6,opt,name=environment_id,json=environmentId,proto3,oneof" json:"environment_id,omitempty"`
}

func (x *AdhocQueryItem) Reset() {
	*x = AdhocQueryItem{}
	mi := &file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdhocQueryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdhocQueryItem) ProtoMessage() {}

func (x *AdhocQueryItem) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdhocQueryItem.ProtoReflect.Descriptor instead.
func (*AdhocQueryItem) Descriptor() ([]byte, []int) {
	return file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescGZIP(), []int{2}
}

func (x *AdhocQueryItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdhocQueryItem) GetPlanningInputs() *AllPlanningInputsProto {
	if x != nil {
		return x.PlanningInputs
	}
	return nil
}

func (x *AdhocQueryItem) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *AdhocQueryItem) GetLastExecutedAt() string {
	if x != nil && x.LastExecutedAt != nil {
		return *x.LastExecutedAt
	}
	return ""
}

func (x *AdhocQueryItem) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *AdhocQueryItem) GetEnvironmentId() string {
	if x != nil && x.EnvironmentId != nil {
		return *x.EnvironmentId
	}
	return ""
}

var File_chalk_enginestorage_v1_adhoc_query_service_proto protoreflect.FileDescriptor

var file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x68, 0x6f, 0x63, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x22, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0xb3, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x6f, 0x63, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x68, 0x6f, 0x63, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x68, 0x6f,
	0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x8f, 0x01,
	0x0a, 0x11, 0x41, 0x64, 0x68, 0x6f, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x6f, 0x63,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x6f, 0x63, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x68, 0x6f, 0x63, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x03, 0x42,
	0xf7, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x16,
	0x41, 0x64, 0x68, 0x6f, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x45, 0x58, 0xaa, 0x02, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x18, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescOnce sync.Once
	file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescData = file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDesc
)

func file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescGZIP() []byte {
	file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescOnce.Do(func() {
		file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescData)
	})
	return file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDescData
}

var file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chalk_enginestorage_v1_adhoc_query_service_proto_goTypes = []any{
	(*ListAdhocQueriesRequest)(nil),  // 0: chalk.enginestorage.v1.ListAdhocQueriesRequest
	(*ListAdhocQueriesResponse)(nil), // 1: chalk.enginestorage.v1.ListAdhocQueriesResponse
	(*AdhocQueryItem)(nil),           // 2: chalk.enginestorage.v1.AdhocQueryItem
	(*AllPlanningInputsProto)(nil),   // 3: chalk.enginestorage.v1.AllPlanningInputsProto
}
var file_chalk_enginestorage_v1_adhoc_query_service_proto_depIdxs = []int32{
	2, // 0: chalk.enginestorage.v1.ListAdhocQueriesResponse.queries:type_name -> chalk.enginestorage.v1.AdhocQueryItem
	3, // 1: chalk.enginestorage.v1.AdhocQueryItem.planning_inputs:type_name -> chalk.enginestorage.v1.AllPlanningInputsProto
	0, // 2: chalk.enginestorage.v1.AdhocQueryService.ListAdhocQueries:input_type -> chalk.enginestorage.v1.ListAdhocQueriesRequest
	1, // 3: chalk.enginestorage.v1.AdhocQueryService.ListAdhocQueries:output_type -> chalk.enginestorage.v1.ListAdhocQueriesResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_chalk_enginestorage_v1_adhoc_query_service_proto_init() }
func file_chalk_enginestorage_v1_adhoc_query_service_proto_init() {
	if File_chalk_enginestorage_v1_adhoc_query_service_proto != nil {
		return
	}
	file_chalk_enginestorage_v1_adhoc_query_proto_init()
	file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_enginestorage_v1_adhoc_query_service_proto_goTypes,
		DependencyIndexes: file_chalk_enginestorage_v1_adhoc_query_service_proto_depIdxs,
		MessageInfos:      file_chalk_enginestorage_v1_adhoc_query_service_proto_msgTypes,
	}.Build()
	File_chalk_enginestorage_v1_adhoc_query_service_proto = out.File
	file_chalk_enginestorage_v1_adhoc_query_service_proto_rawDesc = nil
	file_chalk_enginestorage_v1_adhoc_query_service_proto_goTypes = nil
	file_chalk_enginestorage_v1_adhoc_query_service_proto_depIdxs = nil
}
