// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/engine/v1/query_server.proto

package enginev1

import (
	context "context"
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/aggregate/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryService_Ping_FullMethodName                  = "/chalk.engine.v1.QueryService/Ping"
	QueryService_OnlineQuery_FullMethodName           = "/chalk.engine.v1.QueryService/OnlineQuery"
	QueryService_OnlineQueryBulk_FullMethodName       = "/chalk.engine.v1.QueryService/OnlineQueryBulk"
	QueryService_OnlineQueryMulti_FullMethodName      = "/chalk.engine.v1.QueryService/OnlineQueryMulti"
	QueryService_UploadFeaturesBulk_FullMethodName    = "/chalk.engine.v1.QueryService/UploadFeaturesBulk"
	QueryService_PlanAggregateBackfill_FullMethodName = "/chalk.engine.v1.QueryService/PlanAggregateBackfill"
	QueryService_GetAggregates_FullMethodName         = "/chalk.engine.v1.QueryService/GetAggregates"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	OnlineQuery(ctx context.Context, in *v1.OnlineQueryRequest, opts ...grpc.CallOption) (*v1.OnlineQueryResponse, error)
	OnlineQueryBulk(ctx context.Context, in *v1.OnlineQueryBulkRequest, opts ...grpc.CallOption) (*v1.OnlineQueryBulkResponse, error)
	OnlineQueryMulti(ctx context.Context, in *v1.OnlineQueryMultiRequest, opts ...grpc.CallOption) (*v1.OnlineQueryMultiResponse, error)
	UploadFeaturesBulk(ctx context.Context, in *v1.UploadFeaturesBulkRequest, opts ...grpc.CallOption) (*v1.UploadFeaturesBulkResponse, error)
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	//
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(ctx context.Context, in *v11.PlanAggregateBackfillRequest, opts ...grpc.CallOption) (*v11.PlanAggregateBackfillResponse, error)
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(ctx context.Context, in *v11.GetAggregatesRequest, opts ...grpc.CallOption) (*v11.GetAggregatesResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, QueryService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) OnlineQuery(ctx context.Context, in *v1.OnlineQueryRequest, opts ...grpc.CallOption) (*v1.OnlineQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.OnlineQueryResponse)
	err := c.cc.Invoke(ctx, QueryService_OnlineQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) OnlineQueryBulk(ctx context.Context, in *v1.OnlineQueryBulkRequest, opts ...grpc.CallOption) (*v1.OnlineQueryBulkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.OnlineQueryBulkResponse)
	err := c.cc.Invoke(ctx, QueryService_OnlineQueryBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) OnlineQueryMulti(ctx context.Context, in *v1.OnlineQueryMultiRequest, opts ...grpc.CallOption) (*v1.OnlineQueryMultiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.OnlineQueryMultiResponse)
	err := c.cc.Invoke(ctx, QueryService_OnlineQueryMulti_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UploadFeaturesBulk(ctx context.Context, in *v1.UploadFeaturesBulkRequest, opts ...grpc.CallOption) (*v1.UploadFeaturesBulkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UploadFeaturesBulkResponse)
	err := c.cc.Invoke(ctx, QueryService_UploadFeaturesBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PlanAggregateBackfill(ctx context.Context, in *v11.PlanAggregateBackfillRequest, opts ...grpc.CallOption) (*v11.PlanAggregateBackfillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.PlanAggregateBackfillResponse)
	err := c.cc.Invoke(ctx, QueryService_PlanAggregateBackfill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetAggregates(ctx context.Context, in *v11.GetAggregatesRequest, opts ...grpc.CallOption) (*v11.GetAggregatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v11.GetAggregatesResponse)
	err := c.cc.Invoke(ctx, QueryService_GetAggregates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility.
type QueryServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	OnlineQuery(context.Context, *v1.OnlineQueryRequest) (*v1.OnlineQueryResponse, error)
	OnlineQueryBulk(context.Context, *v1.OnlineQueryBulkRequest) (*v1.OnlineQueryBulkResponse, error)
	OnlineQueryMulti(context.Context, *v1.OnlineQueryMultiRequest) (*v1.OnlineQueryMultiResponse, error)
	UploadFeaturesBulk(context.Context, *v1.UploadFeaturesBulkRequest) (*v1.UploadFeaturesBulkResponse, error)
	// PlanAggregateBackfill determines the estimated resources needed to backfill
	// an aggregate.
	//
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	PlanAggregateBackfill(context.Context, *v11.PlanAggregateBackfillRequest) (*v11.PlanAggregateBackfillResponse, error)
	// This method is a duplicate of the PlanAggregateBackfill method
	// in the query_server.proto file. We should remove the query_server.proto method
	// and move that request to this service instead.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	GetAggregates(context.Context, *v11.GetAggregatesRequest) (*v11.GetAggregatesResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServiceServer struct{}

func (UnimplementedQueryServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedQueryServiceServer) OnlineQuery(context.Context, *v1.OnlineQueryRequest) (*v1.OnlineQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineQuery not implemented")
}
func (UnimplementedQueryServiceServer) OnlineQueryBulk(context.Context, *v1.OnlineQueryBulkRequest) (*v1.OnlineQueryBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineQueryBulk not implemented")
}
func (UnimplementedQueryServiceServer) OnlineQueryMulti(context.Context, *v1.OnlineQueryMultiRequest) (*v1.OnlineQueryMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineQueryMulti not implemented")
}
func (UnimplementedQueryServiceServer) UploadFeaturesBulk(context.Context, *v1.UploadFeaturesBulkRequest) (*v1.UploadFeaturesBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFeaturesBulk not implemented")
}
func (UnimplementedQueryServiceServer) PlanAggregateBackfill(context.Context, *v11.PlanAggregateBackfillRequest) (*v11.PlanAggregateBackfillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanAggregateBackfill not implemented")
}
func (UnimplementedQueryServiceServer) GetAggregates(context.Context, *v11.GetAggregatesRequest) (*v11.GetAggregatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregates not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}
func (UnimplementedQueryServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_OnlineQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.OnlineQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).OnlineQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_OnlineQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).OnlineQuery(ctx, req.(*v1.OnlineQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_OnlineQueryBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.OnlineQueryBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).OnlineQueryBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_OnlineQueryBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).OnlineQueryBulk(ctx, req.(*v1.OnlineQueryBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_OnlineQueryMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.OnlineQueryMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).OnlineQueryMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_OnlineQueryMulti_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).OnlineQueryMulti(ctx, req.(*v1.OnlineQueryMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UploadFeaturesBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UploadFeaturesBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UploadFeaturesBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_UploadFeaturesBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UploadFeaturesBulk(ctx, req.(*v1.UploadFeaturesBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PlanAggregateBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.PlanAggregateBackfillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PlanAggregateBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_PlanAggregateBackfill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PlanAggregateBackfill(ctx, req.(*v11.PlanAggregateBackfillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetAggregates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.GetAggregatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetAggregates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetAggregates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetAggregates(ctx, req.(*v11.GetAggregatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.engine.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _QueryService_Ping_Handler,
		},
		{
			MethodName: "OnlineQuery",
			Handler:    _QueryService_OnlineQuery_Handler,
		},
		{
			MethodName: "OnlineQueryBulk",
			Handler:    _QueryService_OnlineQueryBulk_Handler,
		},
		{
			MethodName: "OnlineQueryMulti",
			Handler:    _QueryService_OnlineQueryMulti_Handler,
		},
		{
			MethodName: "UploadFeaturesBulk",
			Handler:    _QueryService_UploadFeaturesBulk_Handler,
		},
		{
			MethodName: "PlanAggregateBackfill",
			Handler:    _QueryService_PlanAggregateBackfill_Handler,
		},
		{
			MethodName: "GetAggregates",
			Handler:    _QueryService_GetAggregates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/engine/v1/query_server.proto",
}
