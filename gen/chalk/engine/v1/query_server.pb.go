// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: chalk/engine/v1/query_server.proto

package enginev1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v11 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/plan/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_query_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_query_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_query_server_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_query_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_query_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_query_server_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type QueryFromPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan               *v1.LogicalTableNode    `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	CompilationOptions *v11.CompilationOptions `protobuf:"bytes,2,opt,name=compilation_options,json=compilationOptions,proto3" json:"compilation_options,omitempty"`
	// There is no `QueryFromPlanMetadata` to avoid ambiguity
	QueryId string `protobuf:"bytes,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *QueryFromPlanRequest) Reset() {
	*x = QueryFromPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_query_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFromPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFromPlanRequest) ProtoMessage() {}

func (x *QueryFromPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_query_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFromPlanRequest.ProtoReflect.Descriptor instead.
func (*QueryFromPlanRequest) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_query_server_proto_rawDescGZIP(), []int{2}
}

func (x *QueryFromPlanRequest) GetPlan() *v1.LogicalTableNode {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *QueryFromPlanRequest) GetCompilationOptions() *v11.CompilationOptions {
	if x != nil {
		return x.CompilationOptions
	}
	return nil
}

func (x *QueryFromPlanRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type QueryFromPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*QueryFromPlanTable `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Errors []*v11.ChalkError     `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *QueryFromPlanResponse) Reset() {
	*x = QueryFromPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_query_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFromPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFromPlanResponse) ProtoMessage() {}

func (x *QueryFromPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_query_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFromPlanResponse.ProtoReflect.Descriptor instead.
func (*QueryFromPlanResponse) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_query_server_proto_rawDescGZIP(), []int{3}
}

func (x *QueryFromPlanResponse) GetData() []*QueryFromPlanTable {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryFromPlanResponse) GetErrors() []*v11.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type QueryFromPlanTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Table:
	//
	//	*QueryFromPlanTable_Feather
	Table isQueryFromPlanTable_Table `protobuf_oneof:"table"`
}

func (x *QueryFromPlanTable) Reset() {
	*x = QueryFromPlanTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_query_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFromPlanTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFromPlanTable) ProtoMessage() {}

func (x *QueryFromPlanTable) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_query_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFromPlanTable.ProtoReflect.Descriptor instead.
func (*QueryFromPlanTable) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_query_server_proto_rawDescGZIP(), []int{4}
}

func (m *QueryFromPlanTable) GetTable() isQueryFromPlanTable_Table {
	if m != nil {
		return m.Table
	}
	return nil
}

func (x *QueryFromPlanTable) GetFeather() []byte {
	if x, ok := x.GetTable().(*QueryFromPlanTable_Feather); ok {
		return x.Feather
	}
	return nil
}

type isQueryFromPlanTable_Table interface {
	isQueryFromPlanTable_Table()
}

type QueryFromPlanTable_Feather struct {
	// it's OK to use bytes directly because valid feather is never empty
	Feather []byte `protobuf:"bytes,1,opt,name=feather,proto3,oneof"` // Feather format
}

func (*QueryFromPlanTable_Feather) isQueryFromPlanTable_Table() {}

var File_chalk_engine_v1_query_server_proto protoreflect.FileDescriptor

var file_chalk_engine_v1_query_server_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x22, 0x20, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x39, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x32, 0xf2, 0x03, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x0b, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x03, 0x12, 0x69,
	0x0a, 0x0f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x75, 0x6c,
	0x6b, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x03, 0x12, 0x6c, 0x0a, 0x10, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x28, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x03, 0x12, 0x63, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x1c, 0x42, 0xc0, 0x01, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x45, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b,
	0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_engine_v1_query_server_proto_rawDescOnce sync.Once
	file_chalk_engine_v1_query_server_proto_rawDescData = file_chalk_engine_v1_query_server_proto_rawDesc
)

func file_chalk_engine_v1_query_server_proto_rawDescGZIP() []byte {
	file_chalk_engine_v1_query_server_proto_rawDescOnce.Do(func() {
		file_chalk_engine_v1_query_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_engine_v1_query_server_proto_rawDescData)
	})
	return file_chalk_engine_v1_query_server_proto_rawDescData
}

var file_chalk_engine_v1_query_server_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chalk_engine_v1_query_server_proto_goTypes = []interface{}{
	(*PingRequest)(nil),                  // 0: chalk.engine.v1.PingRequest
	(*PingResponse)(nil),                 // 1: chalk.engine.v1.PingResponse
	(*QueryFromPlanRequest)(nil),         // 2: chalk.engine.v1.QueryFromPlanRequest
	(*QueryFromPlanResponse)(nil),        // 3: chalk.engine.v1.QueryFromPlanResponse
	(*QueryFromPlanTable)(nil),           // 4: chalk.engine.v1.QueryFromPlanTable
	(*v1.LogicalTableNode)(nil),          // 5: chalk.plan.v1.LogicalTableNode
	(*v11.CompilationOptions)(nil),       // 6: chalk.common.v1.CompilationOptions
	(*v11.ChalkError)(nil),               // 7: chalk.common.v1.ChalkError
	(*v11.OnlineQueryRequest)(nil),       // 8: chalk.common.v1.OnlineQueryRequest
	(*v11.OnlineQueryBulkRequest)(nil),   // 9: chalk.common.v1.OnlineQueryBulkRequest
	(*v11.OnlineQueryMultiRequest)(nil),  // 10: chalk.common.v1.OnlineQueryMultiRequest
	(*v11.OnlineQueryResponse)(nil),      // 11: chalk.common.v1.OnlineQueryResponse
	(*v11.OnlineQueryBulkResponse)(nil),  // 12: chalk.common.v1.OnlineQueryBulkResponse
	(*v11.OnlineQueryMultiResponse)(nil), // 13: chalk.common.v1.OnlineQueryMultiResponse
}
var file_chalk_engine_v1_query_server_proto_depIdxs = []int32{
	5,  // 0: chalk.engine.v1.QueryFromPlanRequest.plan:type_name -> chalk.plan.v1.LogicalTableNode
	6,  // 1: chalk.engine.v1.QueryFromPlanRequest.compilation_options:type_name -> chalk.common.v1.CompilationOptions
	4,  // 2: chalk.engine.v1.QueryFromPlanResponse.data:type_name -> chalk.engine.v1.QueryFromPlanTable
	7,  // 3: chalk.engine.v1.QueryFromPlanResponse.errors:type_name -> chalk.common.v1.ChalkError
	0,  // 4: chalk.engine.v1.QueryService.Ping:input_type -> chalk.engine.v1.PingRequest
	8,  // 5: chalk.engine.v1.QueryService.OnlineQuery:input_type -> chalk.common.v1.OnlineQueryRequest
	9,  // 6: chalk.engine.v1.QueryService.OnlineQueryBulk:input_type -> chalk.common.v1.OnlineQueryBulkRequest
	10, // 7: chalk.engine.v1.QueryService.OnlineQueryMulti:input_type -> chalk.common.v1.OnlineQueryMultiRequest
	2,  // 8: chalk.engine.v1.QueryService.QueryFromPlan:input_type -> chalk.engine.v1.QueryFromPlanRequest
	1,  // 9: chalk.engine.v1.QueryService.Ping:output_type -> chalk.engine.v1.PingResponse
	11, // 10: chalk.engine.v1.QueryService.OnlineQuery:output_type -> chalk.common.v1.OnlineQueryResponse
	12, // 11: chalk.engine.v1.QueryService.OnlineQueryBulk:output_type -> chalk.common.v1.OnlineQueryBulkResponse
	13, // 12: chalk.engine.v1.QueryService.OnlineQueryMulti:output_type -> chalk.common.v1.OnlineQueryMultiResponse
	3,  // 13: chalk.engine.v1.QueryService.QueryFromPlan:output_type -> chalk.engine.v1.QueryFromPlanResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_chalk_engine_v1_query_server_proto_init() }
func file_chalk_engine_v1_query_server_proto_init() {
	if File_chalk_engine_v1_query_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_engine_v1_query_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_query_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_query_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFromPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_query_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFromPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_query_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFromPlanTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_engine_v1_query_server_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*QueryFromPlanTable_Feather)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_engine_v1_query_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_engine_v1_query_server_proto_goTypes,
		DependencyIndexes: file_chalk_engine_v1_query_server_proto_depIdxs,
		MessageInfos:      file_chalk_engine_v1_query_server_proto_msgTypes,
	}.Build()
	File_chalk_engine_v1_query_server_proto = out.File
	file_chalk_engine_v1_query_server_proto_rawDesc = nil
	file_chalk_engine_v1_query_server_proto_goTypes = nil
	file_chalk_engine_v1_query_server_proto_depIdxs = nil
}
