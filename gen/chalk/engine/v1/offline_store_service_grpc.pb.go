// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chalk/engine/v1/offline_store_service.proto

package enginev1

import (
	context "context"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OfflineStoreService_GetQueryLogEntries_FullMethodName = "/chalk.engine.v1.OfflineStoreService/GetQueryLogEntries"
	OfflineStoreService_GetQueryValues_FullMethodName     = "/chalk.engine.v1.OfflineStoreService/GetQueryValues"
)

// OfflineStoreServiceClient is the client API for OfflineStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service exposes endpoints for dealing with the offline store. It should never depend on the python graph.
type OfflineStoreServiceClient interface {
	GetQueryLogEntries(ctx context.Context, in *v1.GetQueryLogEntriesRequest, opts ...grpc.CallOption) (*v1.GetQueryLogEntriesResponse, error)
	GetQueryValues(ctx context.Context, in *v1.GetQueryValuesRequest, opts ...grpc.CallOption) (*v1.GetQueryValuesResponse, error)
}

type offlineStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineStoreServiceClient(cc grpc.ClientConnInterface) OfflineStoreServiceClient {
	return &offlineStoreServiceClient{cc}
}

func (c *offlineStoreServiceClient) GetQueryLogEntries(ctx context.Context, in *v1.GetQueryLogEntriesRequest, opts ...grpc.CallOption) (*v1.GetQueryLogEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetQueryLogEntriesResponse)
	err := c.cc.Invoke(ctx, OfflineStoreService_GetQueryLogEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineStoreServiceClient) GetQueryValues(ctx context.Context, in *v1.GetQueryValuesRequest, opts ...grpc.CallOption) (*v1.GetQueryValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetQueryValuesResponse)
	err := c.cc.Invoke(ctx, OfflineStoreService_GetQueryValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineStoreServiceServer is the server API for OfflineStoreService service.
// All implementations must embed UnimplementedOfflineStoreServiceServer
// for forward compatibility.
//
// This service exposes endpoints for dealing with the offline store. It should never depend on the python graph.
type OfflineStoreServiceServer interface {
	GetQueryLogEntries(context.Context, *v1.GetQueryLogEntriesRequest) (*v1.GetQueryLogEntriesResponse, error)
	GetQueryValues(context.Context, *v1.GetQueryValuesRequest) (*v1.GetQueryValuesResponse, error)
	mustEmbedUnimplementedOfflineStoreServiceServer()
}

// UnimplementedOfflineStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfflineStoreServiceServer struct{}

func (UnimplementedOfflineStoreServiceServer) GetQueryLogEntries(context.Context, *v1.GetQueryLogEntriesRequest) (*v1.GetQueryLogEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryLogEntries not implemented")
}
func (UnimplementedOfflineStoreServiceServer) GetQueryValues(context.Context, *v1.GetQueryValuesRequest) (*v1.GetQueryValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryValues not implemented")
}
func (UnimplementedOfflineStoreServiceServer) mustEmbedUnimplementedOfflineStoreServiceServer() {}
func (UnimplementedOfflineStoreServiceServer) testEmbeddedByValue()                             {}

// UnsafeOfflineStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfflineStoreServiceServer will
// result in compilation errors.
type UnsafeOfflineStoreServiceServer interface {
	mustEmbedUnimplementedOfflineStoreServiceServer()
}

func RegisterOfflineStoreServiceServer(s grpc.ServiceRegistrar, srv OfflineStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedOfflineStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OfflineStoreService_ServiceDesc, srv)
}

func _OfflineStoreService_GetQueryLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetQueryLogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineStoreServiceServer).GetQueryLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfflineStoreService_GetQueryLogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineStoreServiceServer).GetQueryLogEntries(ctx, req.(*v1.GetQueryLogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineStoreService_GetQueryValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetQueryValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineStoreServiceServer).GetQueryValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfflineStoreService_GetQueryValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineStoreServiceServer).GetQueryValues(ctx, req.(*v1.GetQueryValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfflineStoreService_ServiceDesc is the grpc.ServiceDesc for OfflineStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfflineStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chalk.engine.v1.OfflineStoreService",
	HandlerType: (*OfflineStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQueryLogEntries",
			Handler:    _OfflineStoreService_GetQueryLogEntries_Handler,
		},
		{
			MethodName: "GetQueryValues",
			Handler:    _OfflineStoreService_GetQueryValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chalk/engine/v1/offline_store_service.proto",
}
