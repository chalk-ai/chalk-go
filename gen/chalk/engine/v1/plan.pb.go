// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: chalk/engine/v1/plan.proto

package enginev1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Arbitrary computed column that does not correspond to a feature (e.g. for computing a sum(...) )
type RawColumnKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RawColumnKey) Reset() {
	*x = RawColumnKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawColumnKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawColumnKey) ProtoMessage() {}

func (x *RawColumnKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawColumnKey.ProtoReflect.Descriptor instead.
func (*RawColumnKey) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{0}
}

func (x *RawColumnKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents a feature in the graph that corresponds to a single column in a table, i.e. not a has-many or a dataframe.
// Basically a "scalar" but shouldn't be confused w/ ScalarFeatureType
type FeatureColumnKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootFqn string `protobuf:"bytes,1,opt,name=root_fqn,json=rootFqn,proto3" json:"root_fqn,omitempty"`
}

func (x *FeatureColumnKey) Reset() {
	*x = FeatureColumnKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureColumnKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureColumnKey) ProtoMessage() {}

func (x *FeatureColumnKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureColumnKey.ProtoReflect.Descriptor instead.
func (*FeatureColumnKey) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureColumnKey) GetRootFqn() string {
	if x != nil {
		return x.RootFqn
	}
	return ""
}

type HasManyFeatureKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootFqn string     `protobuf:"bytes,1,opt,name=root_fqn,json=rootFqn,proto3" json:"root_fqn,omitempty"`
	Df      *DataFrame `protobuf:"bytes,2,opt,name=df,proto3" json:"df,omitempty"`
}

func (x *HasManyFeatureKey) Reset() {
	*x = HasManyFeatureKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasManyFeatureKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasManyFeatureKey) ProtoMessage() {}

func (x *HasManyFeatureKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasManyFeatureKey.ProtoReflect.Descriptor instead.
func (*HasManyFeatureKey) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{2}
}

func (x *HasManyFeatureKey) GetRootFqn() string {
	if x != nil {
		return x.RootFqn
	}
	return ""
}

func (x *HasManyFeatureKey) GetDf() *DataFrame {
	if x != nil {
		return x.Df
	}
	return nil
}

type DataFrameFeatureKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootNamespace string     `protobuf:"bytes,1,opt,name=root_namespace,json=rootNamespace,proto3" json:"root_namespace,omitempty"`
	Df            *DataFrame `protobuf:"bytes,2,opt,name=df,proto3" json:"df,omitempty"`
}

func (x *DataFrameFeatureKey) Reset() {
	*x = DataFrameFeatureKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrameFeatureKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameFeatureKey) ProtoMessage() {}

func (x *DataFrameFeatureKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameFeatureKey.ProtoReflect.Descriptor instead.
func (*DataFrameFeatureKey) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{3}
}

func (x *DataFrameFeatureKey) GetRootNamespace() string {
	if x != nil {
		return x.RootNamespace
	}
	return ""
}

func (x *DataFrameFeatureKey) GetDf() *DataFrame {
	if x != nil {
		return x.Df
	}
	return nil
}

type DataFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionalColumns []*FeatureColumnKey `protobuf:"bytes,1,rep,name=optional_columns,json=optionalColumns,proto3" json:"optional_columns,omitempty"`
	RequiredColumns []*FeatureColumnKey `protobuf:"bytes,2,rep,name=required_columns,json=requiredColumns,proto3" json:"required_columns,omitempty"`
	Limit           *uint64             `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"` // optional Filter filter = 4; // TODO, represents filters on dfs/has-manys like (transaction.amount < 10)
}

func (x *DataFrame) Reset() {
	*x = DataFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrame) ProtoMessage() {}

func (x *DataFrame) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrame.ProtoReflect.Descriptor instead.
func (*DataFrame) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{4}
}

func (x *DataFrame) GetOptionalColumns() []*FeatureColumnKey {
	if x != nil {
		return x.OptionalColumns
	}
	return nil
}

func (x *DataFrame) GetRequiredColumns() []*FeatureColumnKey {
	if x != nil {
		return x.RequiredColumns
	}
	return nil
}

func (x *DataFrame) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ColumnKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*ColumnKey_Feature
	//	*ColumnKey_Raw
	Key isColumnKey_Key `protobuf_oneof:"key"`
}

func (x *ColumnKey) Reset() {
	*x = ColumnKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnKey) ProtoMessage() {}

func (x *ColumnKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnKey.ProtoReflect.Descriptor instead.
func (*ColumnKey) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{5}
}

func (m *ColumnKey) GetKey() isColumnKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *ColumnKey) GetFeature() *FeatureColumnKey {
	if x, ok := x.GetKey().(*ColumnKey_Feature); ok {
		return x.Feature
	}
	return nil
}

func (x *ColumnKey) GetRaw() *RawColumnKey {
	if x, ok := x.GetKey().(*ColumnKey_Raw); ok {
		return x.Raw
	}
	return nil
}

type isColumnKey_Key interface {
	isColumnKey_Key()
}

type ColumnKey_Feature struct {
	Feature *FeatureColumnKey `protobuf:"bytes,1,opt,name=feature,proto3,oneof"`
}

type ColumnKey_Raw struct {
	Raw *RawColumnKey `protobuf:"bytes,2,opt,name=raw,proto3,oneof"`
}

func (*ColumnKey_Feature) isColumnKey_Key() {}

func (*ColumnKey_Raw) isColumnKey_Key() {}

type TableKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*TableKey_HasMany
	//	*TableKey_DataFrame
	Key isTableKey_Key `protobuf_oneof:"key"`
}

func (x *TableKey) Reset() {
	*x = TableKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableKey) ProtoMessage() {}

func (x *TableKey) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableKey.ProtoReflect.Descriptor instead.
func (*TableKey) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{6}
}

func (m *TableKey) GetKey() isTableKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *TableKey) GetHasMany() *HasManyFeatureKey {
	if x, ok := x.GetKey().(*TableKey_HasMany); ok {
		return x.HasMany
	}
	return nil
}

func (x *TableKey) GetDataFrame() *DataFrameFeatureKey {
	if x, ok := x.GetKey().(*TableKey_DataFrame); ok {
		return x.DataFrame
	}
	return nil
}

type isTableKey_Key interface {
	isTableKey_Key()
}

type TableKey_HasMany struct {
	HasMany *HasManyFeatureKey `protobuf:"bytes,1,opt,name=has_many,json=hasMany,proto3,oneof"`
}

type TableKey_DataFrame struct {
	DataFrame *DataFrameFeatureKey `protobuf:"bytes,2,opt,name=data_frame,json=dataFrame,proto3,oneof"`
}

func (*TableKey_HasMany) isTableKey_Key() {}

func (*TableKey_DataFrame) isTableKey_Key() {}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*Key_RawColumn
	//	*Key_Scalar
	//	*Key_HasMany
	//	*Key_Dataframe
	Impl isKey_Impl `protobuf_oneof:"impl"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{7}
}

func (m *Key) GetImpl() isKey_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *Key) GetRawColumn() *RawColumnKey {
	if x, ok := x.GetImpl().(*Key_RawColumn); ok {
		return x.RawColumn
	}
	return nil
}

func (x *Key) GetScalar() *FeatureColumnKey {
	if x, ok := x.GetImpl().(*Key_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (x *Key) GetHasMany() *HasManyFeatureKey {
	if x, ok := x.GetImpl().(*Key_HasMany); ok {
		return x.HasMany
	}
	return nil
}

func (x *Key) GetDataframe() *DataFrameFeatureKey {
	if x, ok := x.GetImpl().(*Key_Dataframe); ok {
		return x.Dataframe
	}
	return nil
}

type isKey_Impl interface {
	isKey_Impl()
}

type Key_RawColumn struct {
	RawColumn *RawColumnKey `protobuf:"bytes,1,opt,name=raw_column,json=rawColumn,proto3,oneof"`
}

type Key_Scalar struct {
	Scalar *FeatureColumnKey `protobuf:"bytes,2,opt,name=scalar,proto3,oneof"`
}

type Key_HasMany struct {
	HasMany *HasManyFeatureKey `protobuf:"bytes,3,opt,name=has_many,json=hasMany,proto3,oneof"`
}

type Key_Dataframe struct {
	Dataframe *DataFrameFeatureKey `protobuf:"bytes,4,opt,name=dataframe,proto3,oneof"`
}

func (*Key_RawColumn) isKey_Impl() {}

func (*Key_Scalar) isKey_Impl() {}

func (*Key_HasMany) isKey_Impl() {}

func (*Key_Dataframe) isKey_Impl() {}

type PyArrowSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scalars []*PyArrowSchema_ColumnSchema `protobuf:"bytes,1,rep,name=scalars,proto3" json:"scalars,omitempty"`
	Groups  []*PyArrowSchema_TableSchema  `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *PyArrowSchema) Reset() {
	*x = PyArrowSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PyArrowSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyArrowSchema) ProtoMessage() {}

func (x *PyArrowSchema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PyArrowSchema.ProtoReflect.Descriptor instead.
func (*PyArrowSchema) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{8}
}

func (x *PyArrowSchema) GetScalars() []*PyArrowSchema_ColumnSchema {
	if x != nil {
		return x.Scalars
	}
	return nil
}

func (x *PyArrowSchema) GetGroups() []*PyArrowSchema_TableSchema {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes         []*Node        `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	RootNodeIdx   uint32         `protobuf:"varint,2,opt,name=root_node_idx,json=rootNodeIdx,proto3" json:"root_node_idx,omitempty"`
	PyarrowSchema *PyArrowSchema `protobuf:"bytes,3,opt,name=pyarrow_schema,json=pyarrowSchema,proto3" json:"pyarrow_schema,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{9}
}

func (x *Plan) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Plan) GetRootNodeIdx() uint32 {
	if x != nil {
		return x.RootNodeIdx
	}
	return 0
}

func (x *Plan) GetPyarrowSchema() *PyArrowSchema {
	if x != nil {
		return x.PyarrowSchema
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponds to indices in Plan.nodes
	ChildrenIndices []uint32  `protobuf:"varint,1,rep,packed,name=children_indices,json=childrenIndices,proto3" json:"children_indices,omitempty"`
	Impl            *NodeImpl `protobuf:"bytes,2,opt,name=impl,proto3" json:"impl,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{10}
}

func (x *Node) GetChildrenIndices() []uint32 {
	if x != nil {
		return x.ChildrenIndices
	}
	return nil
}

func (x *Node) GetImpl() *NodeImpl {
	if x != nil {
		return x.Impl
	}
	return nil
}

type NodeImpl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*NodeImpl_Unknown
	//	*NodeImpl_GivensScan
	//	*NodeImpl_Project
	//	*NodeImpl_ChalkProject
	//	*NodeImpl_DefaultInjector
	Impl isNodeImpl_Impl `protobuf_oneof:"impl"`
}

func (x *NodeImpl) Reset() {
	*x = NodeImpl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeImpl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeImpl) ProtoMessage() {}

func (x *NodeImpl) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeImpl.ProtoReflect.Descriptor instead.
func (*NodeImpl) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{11}
}

func (m *NodeImpl) GetImpl() isNodeImpl_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *NodeImpl) GetUnknown() *UnknownNode {
	if x, ok := x.GetImpl().(*NodeImpl_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *NodeImpl) GetGivensScan() *GivensScan {
	if x, ok := x.GetImpl().(*NodeImpl_GivensScan); ok {
		return x.GivensScan
	}
	return nil
}

func (x *NodeImpl) GetProject() *Project {
	if x, ok := x.GetImpl().(*NodeImpl_Project); ok {
		return x.Project
	}
	return nil
}

func (x *NodeImpl) GetChalkProject() *ChalkProject {
	if x, ok := x.GetImpl().(*NodeImpl_ChalkProject); ok {
		return x.ChalkProject
	}
	return nil
}

func (x *NodeImpl) GetDefaultInjector() *DefaultInjector {
	if x, ok := x.GetImpl().(*NodeImpl_DefaultInjector); ok {
		return x.DefaultInjector
	}
	return nil
}

type isNodeImpl_Impl interface {
	isNodeImpl_Impl()
}

type NodeImpl_Unknown struct {
	Unknown *UnknownNode `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type NodeImpl_GivensScan struct {
	GivensScan *GivensScan `protobuf:"bytes,2,opt,name=givens_scan,json=givensScan,proto3,oneof"`
}

type NodeImpl_Project struct {
	Project *Project `protobuf:"bytes,3,opt,name=project,proto3,oneof"`
}

type NodeImpl_ChalkProject struct {
	ChalkProject *ChalkProject `protobuf:"bytes,4,opt,name=chalk_project,json=chalkProject,proto3,oneof"`
}

type NodeImpl_DefaultInjector struct {
	DefaultInjector *DefaultInjector `protobuf:"bytes,5,opt,name=default_injector,json=defaultInjector,proto3,oneof"`
}

func (*NodeImpl_Unknown) isNodeImpl_Impl() {}

func (*NodeImpl_GivensScan) isNodeImpl_Impl() {}

func (*NodeImpl_Project) isNodeImpl_Impl() {}

func (*NodeImpl_ChalkProject) isNodeImpl_Impl() {}

func (*NodeImpl_DefaultInjector) isNodeImpl_Impl() {}

type UnknownNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
}

func (x *UnknownNode) Reset() {
	*x = UnknownNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownNode) ProtoMessage() {}

func (x *UnknownNode) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownNode.ProtoReflect.Descriptor instead.
func (*UnknownNode) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{12}
}

func (x *UnknownNode) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

type GivensScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / TODO I think there's some discussion as to how exactly Givens will be implemented
	// One option is basically a "project" where it lists expected fields, and caller passes in an actual PlanBatch during execution
	Fields []*Key `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GivensScan) Reset() {
	*x = GivensScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GivensScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GivensScan) ProtoMessage() {}

func (x *GivensScan) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GivensScan.ProtoReflect.Descriptor instead.
func (*GivensScan) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{13}
}

func (x *GivensScan) GetFields() []*Key {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ChalkProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields                 []*Key `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	PromoteTsToFeatureTime bool   `protobuf:"varint,2,opt,name=promote_ts_to_feature_time,json=promoteTsToFeatureTime,proto3" json:"promote_ts_to_feature_time,omitempty"`
}

func (x *ChalkProject) Reset() {
	*x = ChalkProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChalkProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChalkProject) ProtoMessage() {}

func (x *ChalkProject) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChalkProject.ProtoReflect.Descriptor instead.
func (*ChalkProject) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{14}
}

func (x *ChalkProject) GetFields() []*Key {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ChalkProject) GetPromoteTsToFeatureTime() bool {
	if x != nil {
		return x.PromoteTsToFeatureTime
	}
	return false
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Key `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{15}
}

func (x *Project) GetFields() []*Key {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DefaultInjector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultingFeatures []*Key `protobuf:"bytes,1,rep,name=defaulting_features,json=defaultingFeatures,proto3" json:"defaulting_features,omitempty"` // Note: actual default values should be pulled from the graph
}

func (x *DefaultInjector) Reset() {
	*x = DefaultInjector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultInjector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultInjector) ProtoMessage() {}

func (x *DefaultInjector) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultInjector.ProtoReflect.Descriptor instead.
func (*DefaultInjector) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{16}
}

func (x *DefaultInjector) GetDefaultingFeatures() []*Key {
	if x != nil {
		return x.DefaultingFeatures
	}
	return nil
}

type PyArrowSchema_TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *TableKey                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Schema map[string]*v1.ArrowType `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PyArrowSchema_TableSchema) Reset() {
	*x = PyArrowSchema_TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PyArrowSchema_TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyArrowSchema_TableSchema) ProtoMessage() {}

func (x *PyArrowSchema_TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PyArrowSchema_TableSchema.ProtoReflect.Descriptor instead.
func (*PyArrowSchema_TableSchema) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PyArrowSchema_TableSchema) GetKey() *TableKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PyArrowSchema_TableSchema) GetSchema() map[string]*v1.ArrowType {
	if x != nil {
		return x.Schema
	}
	return nil
}

type PyArrowSchema_ColumnSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *ColumnKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Schema *v1.ArrowType `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *PyArrowSchema_ColumnSchema) Reset() {
	*x = PyArrowSchema_ColumnSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_engine_v1_plan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PyArrowSchema_ColumnSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyArrowSchema_ColumnSchema) ProtoMessage() {}

func (x *PyArrowSchema_ColumnSchema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v1_plan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PyArrowSchema_ColumnSchema.ProtoReflect.Descriptor instead.
func (*PyArrowSchema_ColumnSchema) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v1_plan_proto_rawDescGZIP(), []int{8, 1}
}

func (x *PyArrowSchema_ColumnSchema) GetKey() *ColumnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PyArrowSchema_ColumnSchema) GetSchema() *v1.ArrowType {
	if x != nil {
		return x.Schema
	}
	return nil
}

var File_chalk_engine_v1_plan_proto protoreflect.FileDescriptor

var file_chalk_engine_v1_plan_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x61, 0x77,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a,
	0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x71, 0x6e, 0x22, 0x5a, 0x0a, 0x11,
	0x48, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x71, 0x6e, 0x12, 0x2a, 0x0a, 0x02,
	0x64, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x02, 0x64, 0x66, 0x22, 0x68, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x64, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x02,
	0x64, 0x66, 0x22, 0xcc, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x4c,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x6e,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x91, 0x02, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0a,
	0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61,
	0x73, 0x4d, 0x61, 0x6e, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x22, 0xee, 0x03, 0x0a, 0x0d, 0x50, 0x79, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x79,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x73, 0x12, 0x42, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x79, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x79, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x1a, 0x54, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x04, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x78, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x79, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x79,
	0x41, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0d, 0x70, 0x79, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x60, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x04, 0x69, 0x6d, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x52, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x22, 0xd7, 0x02, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x6e,
	0x73, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4d, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x22, 0x2a, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x73, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x78,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x73, 0x54, 0x6f, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x58, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0xb9, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x42, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x45,
	0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_engine_v1_plan_proto_rawDescOnce sync.Once
	file_chalk_engine_v1_plan_proto_rawDescData = file_chalk_engine_v1_plan_proto_rawDesc
)

func file_chalk_engine_v1_plan_proto_rawDescGZIP() []byte {
	file_chalk_engine_v1_plan_proto_rawDescOnce.Do(func() {
		file_chalk_engine_v1_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_engine_v1_plan_proto_rawDescData)
	})
	return file_chalk_engine_v1_plan_proto_rawDescData
}

var file_chalk_engine_v1_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_chalk_engine_v1_plan_proto_goTypes = []any{
	(*RawColumnKey)(nil),               // 0: chalk.engine.v1.RawColumnKey
	(*FeatureColumnKey)(nil),           // 1: chalk.engine.v1.FeatureColumnKey
	(*HasManyFeatureKey)(nil),          // 2: chalk.engine.v1.HasManyFeatureKey
	(*DataFrameFeatureKey)(nil),        // 3: chalk.engine.v1.DataFrameFeatureKey
	(*DataFrame)(nil),                  // 4: chalk.engine.v1.DataFrame
	(*ColumnKey)(nil),                  // 5: chalk.engine.v1.ColumnKey
	(*TableKey)(nil),                   // 6: chalk.engine.v1.TableKey
	(*Key)(nil),                        // 7: chalk.engine.v1.Key
	(*PyArrowSchema)(nil),              // 8: chalk.engine.v1.PyArrowSchema
	(*Plan)(nil),                       // 9: chalk.engine.v1.Plan
	(*Node)(nil),                       // 10: chalk.engine.v1.Node
	(*NodeImpl)(nil),                   // 11: chalk.engine.v1.NodeImpl
	(*UnknownNode)(nil),                // 12: chalk.engine.v1.UnknownNode
	(*GivensScan)(nil),                 // 13: chalk.engine.v1.GivensScan
	(*ChalkProject)(nil),               // 14: chalk.engine.v1.ChalkProject
	(*Project)(nil),                    // 15: chalk.engine.v1.Project
	(*DefaultInjector)(nil),            // 16: chalk.engine.v1.DefaultInjector
	(*PyArrowSchema_TableSchema)(nil),  // 17: chalk.engine.v1.PyArrowSchema.TableSchema
	(*PyArrowSchema_ColumnSchema)(nil), // 18: chalk.engine.v1.PyArrowSchema.ColumnSchema
	nil,                                // 19: chalk.engine.v1.PyArrowSchema.TableSchema.SchemaEntry
	(*v1.ArrowType)(nil),               // 20: chalk.arrow.v1.ArrowType
}
var file_chalk_engine_v1_plan_proto_depIdxs = []int32{
	4,  // 0: chalk.engine.v1.HasManyFeatureKey.df:type_name -> chalk.engine.v1.DataFrame
	4,  // 1: chalk.engine.v1.DataFrameFeatureKey.df:type_name -> chalk.engine.v1.DataFrame
	1,  // 2: chalk.engine.v1.DataFrame.optional_columns:type_name -> chalk.engine.v1.FeatureColumnKey
	1,  // 3: chalk.engine.v1.DataFrame.required_columns:type_name -> chalk.engine.v1.FeatureColumnKey
	1,  // 4: chalk.engine.v1.ColumnKey.feature:type_name -> chalk.engine.v1.FeatureColumnKey
	0,  // 5: chalk.engine.v1.ColumnKey.raw:type_name -> chalk.engine.v1.RawColumnKey
	2,  // 6: chalk.engine.v1.TableKey.has_many:type_name -> chalk.engine.v1.HasManyFeatureKey
	3,  // 7: chalk.engine.v1.TableKey.data_frame:type_name -> chalk.engine.v1.DataFrameFeatureKey
	0,  // 8: chalk.engine.v1.Key.raw_column:type_name -> chalk.engine.v1.RawColumnKey
	1,  // 9: chalk.engine.v1.Key.scalar:type_name -> chalk.engine.v1.FeatureColumnKey
	2,  // 10: chalk.engine.v1.Key.has_many:type_name -> chalk.engine.v1.HasManyFeatureKey
	3,  // 11: chalk.engine.v1.Key.dataframe:type_name -> chalk.engine.v1.DataFrameFeatureKey
	18, // 12: chalk.engine.v1.PyArrowSchema.scalars:type_name -> chalk.engine.v1.PyArrowSchema.ColumnSchema
	17, // 13: chalk.engine.v1.PyArrowSchema.groups:type_name -> chalk.engine.v1.PyArrowSchema.TableSchema
	10, // 14: chalk.engine.v1.Plan.nodes:type_name -> chalk.engine.v1.Node
	8,  // 15: chalk.engine.v1.Plan.pyarrow_schema:type_name -> chalk.engine.v1.PyArrowSchema
	11, // 16: chalk.engine.v1.Node.impl:type_name -> chalk.engine.v1.NodeImpl
	12, // 17: chalk.engine.v1.NodeImpl.unknown:type_name -> chalk.engine.v1.UnknownNode
	13, // 18: chalk.engine.v1.NodeImpl.givens_scan:type_name -> chalk.engine.v1.GivensScan
	15, // 19: chalk.engine.v1.NodeImpl.project:type_name -> chalk.engine.v1.Project
	14, // 20: chalk.engine.v1.NodeImpl.chalk_project:type_name -> chalk.engine.v1.ChalkProject
	16, // 21: chalk.engine.v1.NodeImpl.default_injector:type_name -> chalk.engine.v1.DefaultInjector
	7,  // 22: chalk.engine.v1.GivensScan.fields:type_name -> chalk.engine.v1.Key
	7,  // 23: chalk.engine.v1.ChalkProject.fields:type_name -> chalk.engine.v1.Key
	7,  // 24: chalk.engine.v1.Project.fields:type_name -> chalk.engine.v1.Key
	7,  // 25: chalk.engine.v1.DefaultInjector.defaulting_features:type_name -> chalk.engine.v1.Key
	6,  // 26: chalk.engine.v1.PyArrowSchema.TableSchema.key:type_name -> chalk.engine.v1.TableKey
	19, // 27: chalk.engine.v1.PyArrowSchema.TableSchema.schema:type_name -> chalk.engine.v1.PyArrowSchema.TableSchema.SchemaEntry
	5,  // 28: chalk.engine.v1.PyArrowSchema.ColumnSchema.key:type_name -> chalk.engine.v1.ColumnKey
	20, // 29: chalk.engine.v1.PyArrowSchema.ColumnSchema.schema:type_name -> chalk.arrow.v1.ArrowType
	20, // 30: chalk.engine.v1.PyArrowSchema.TableSchema.SchemaEntry.value:type_name -> chalk.arrow.v1.ArrowType
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_chalk_engine_v1_plan_proto_init() }
func file_chalk_engine_v1_plan_proto_init() {
	if File_chalk_engine_v1_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_engine_v1_plan_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RawColumnKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FeatureColumnKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HasManyFeatureKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DataFrameFeatureKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DataFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ColumnKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TableKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PyArrowSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NodeImpl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UnknownNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GivensScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ChalkProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DefaultInjector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PyArrowSchema_TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_engine_v1_plan_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*PyArrowSchema_ColumnSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_engine_v1_plan_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_engine_v1_plan_proto_msgTypes[5].OneofWrappers = []any{
		(*ColumnKey_Feature)(nil),
		(*ColumnKey_Raw)(nil),
	}
	file_chalk_engine_v1_plan_proto_msgTypes[6].OneofWrappers = []any{
		(*TableKey_HasMany)(nil),
		(*TableKey_DataFrame)(nil),
	}
	file_chalk_engine_v1_plan_proto_msgTypes[7].OneofWrappers = []any{
		(*Key_RawColumn)(nil),
		(*Key_Scalar)(nil),
		(*Key_HasMany)(nil),
		(*Key_Dataframe)(nil),
	}
	file_chalk_engine_v1_plan_proto_msgTypes[11].OneofWrappers = []any{
		(*NodeImpl_Unknown)(nil),
		(*NodeImpl_GivensScan)(nil),
		(*NodeImpl_Project)(nil),
		(*NodeImpl_ChalkProject)(nil),
		(*NodeImpl_DefaultInjector)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_engine_v1_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_engine_v1_plan_proto_goTypes,
		DependencyIndexes: file_chalk_engine_v1_plan_proto_depIdxs,
		MessageInfos:      file_chalk_engine_v1_plan_proto_msgTypes,
	}.Build()
	File_chalk_engine_v1_plan_proto = out.File
	file_chalk_engine_v1_plan_proto_rawDesc = nil
	file_chalk_engine_v1_plan_proto_goTypes = nil
	file_chalk_engine_v1_plan_proto_depIdxs = nil
}
