// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/engine/v2/feature_values_chart.proto

package enginev2

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/chart/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureValueBaseWindowFunction int32

const (
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED        FeatureValueBaseWindowFunction = 0
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES      FeatureValueBaseWindowFunction = 1
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS FeatureValueBaseWindowFunction = 2
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE    FeatureValueBaseWindowFunction = 3
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE          FeatureValueBaseWindowFunction = 4
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE          FeatureValueBaseWindowFunction = 5
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE            FeatureValueBaseWindowFunction = 6
	FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS       FeatureValueBaseWindowFunction = 7
)

// Enum value maps for FeatureValueBaseWindowFunction.
var (
	FeatureValueBaseWindowFunction_name = map[int32]string{
		0: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED",
		1: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES",
		2: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS",
		3: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE",
		4: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE",
		5: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE",
		6: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE",
		7: "FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS",
	}
	FeatureValueBaseWindowFunction_value = map[string]int32{
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED":        0,
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES":      1,
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS": 2,
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE":    3,
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE":          4,
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE":          5,
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE":            6,
		"FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS":       7,
	}
)

func (x FeatureValueBaseWindowFunction) Enum() *FeatureValueBaseWindowFunction {
	p := new(FeatureValueBaseWindowFunction)
	*p = x
	return p
}

func (x FeatureValueBaseWindowFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureValueBaseWindowFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_engine_v2_feature_values_chart_proto_enumTypes[0].Descriptor()
}

func (FeatureValueBaseWindowFunction) Type() protoreflect.EnumType {
	return &file_chalk_engine_v2_feature_values_chart_proto_enumTypes[0]
}

func (x FeatureValueBaseWindowFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureValueBaseWindowFunction.Descriptor instead.
func (FeatureValueBaseWindowFunction) EnumDescriptor() ([]byte, []int) {
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP(), []int{0}
}

type FeatureValueGroupBy int32

const (
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_UNSPECIFIED FeatureValueGroupBy = 0
	// Approximately ordered by cardinality / specificity
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE FeatureValueGroupBy = 1
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_PRIMARY_KEY       FeatureValueGroupBy = 2
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID     FeatureValueGroupBy = 3
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_RESOLVER          FeatureValueGroupBy = 4
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_OPERATION_KIND    FeatureValueGroupBy = 5
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_OPERATION_ID      FeatureValueGroupBy = 6
	FeatureValueGroupBy_FEATURE_VALUE_GROUP_BY_FEATURE_VERSION   FeatureValueGroupBy = 7
)

// Enum value maps for FeatureValueGroupBy.
var (
	FeatureValueGroupBy_name = map[int32]string{
		0: "FEATURE_VALUE_GROUP_BY_UNSPECIFIED",
		1: "FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE",
		2: "FEATURE_VALUE_GROUP_BY_PRIMARY_KEY",
		3: "FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID",
		4: "FEATURE_VALUE_GROUP_BY_RESOLVER",
		5: "FEATURE_VALUE_GROUP_BY_OPERATION_KIND",
		6: "FEATURE_VALUE_GROUP_BY_OPERATION_ID",
		7: "FEATURE_VALUE_GROUP_BY_FEATURE_VERSION",
	}
	FeatureValueGroupBy_value = map[string]int32{
		"FEATURE_VALUE_GROUP_BY_UNSPECIFIED":       0,
		"FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE": 1,
		"FEATURE_VALUE_GROUP_BY_PRIMARY_KEY":       2,
		"FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID":     3,
		"FEATURE_VALUE_GROUP_BY_RESOLVER":          4,
		"FEATURE_VALUE_GROUP_BY_OPERATION_KIND":    5,
		"FEATURE_VALUE_GROUP_BY_OPERATION_ID":      6,
		"FEATURE_VALUE_GROUP_BY_FEATURE_VERSION":   7,
	}
)

func (x FeatureValueGroupBy) Enum() *FeatureValueGroupBy {
	p := new(FeatureValueGroupBy)
	*p = x
	return p
}

func (x FeatureValueGroupBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureValueGroupBy) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_engine_v2_feature_values_chart_proto_enumTypes[1].Descriptor()
}

func (FeatureValueGroupBy) Type() protoreflect.EnumType {
	return &file_chalk_engine_v2_feature_values_chart_proto_enumTypes[1]
}

func (x FeatureValueGroupBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureValueGroupBy.Descriptor instead.
func (FeatureValueGroupBy) EnumDescriptor() ([]byte, []int) {
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP(), []int{1}
}

type FeatureValueTimeSeries int32

const (
	FeatureValueTimeSeries_FEATURE_VALUE_TIME_SERIES_UNSPECIFIED FeatureValueTimeSeries = 0
	FeatureValueTimeSeries_FEATURE_VALUE_TIME_SERIES_INSERTED_AT FeatureValueTimeSeries = 1
	FeatureValueTimeSeries_FEATURE_VALUE_TIME_SERIES_OBSERVED_AT FeatureValueTimeSeries = 2
)

// Enum value maps for FeatureValueTimeSeries.
var (
	FeatureValueTimeSeries_name = map[int32]string{
		0: "FEATURE_VALUE_TIME_SERIES_UNSPECIFIED",
		1: "FEATURE_VALUE_TIME_SERIES_INSERTED_AT",
		2: "FEATURE_VALUE_TIME_SERIES_OBSERVED_AT",
	}
	FeatureValueTimeSeries_value = map[string]int32{
		"FEATURE_VALUE_TIME_SERIES_UNSPECIFIED": 0,
		"FEATURE_VALUE_TIME_SERIES_INSERTED_AT": 1,
		"FEATURE_VALUE_TIME_SERIES_OBSERVED_AT": 2,
	}
)

func (x FeatureValueTimeSeries) Enum() *FeatureValueTimeSeries {
	p := new(FeatureValueTimeSeries)
	*p = x
	return p
}

func (x FeatureValueTimeSeries) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureValueTimeSeries) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_engine_v2_feature_values_chart_proto_enumTypes[2].Descriptor()
}

func (FeatureValueTimeSeries) Type() protoreflect.EnumType {
	return &file_chalk_engine_v2_feature_values_chart_proto_enumTypes[2]
}

func (x FeatureValueTimeSeries) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureValueTimeSeries.Descriptor instead.
func (FeatureValueTimeSeries) EnumDescriptor() ([]byte, []int) {
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP(), []int{2}
}

type FeatureValuePercentileWindowFunction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Must be a value between 0 and 100.
	Percentile    float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeatureValuePercentileWindowFunction) Reset() {
	*x = FeatureValuePercentileWindowFunction{}
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureValuePercentileWindowFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureValuePercentileWindowFunction) ProtoMessage() {}

func (x *FeatureValuePercentileWindowFunction) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureValuePercentileWindowFunction.ProtoReflect.Descriptor instead.
func (*FeatureValuePercentileWindowFunction) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureValuePercentileWindowFunction) GetPercentile() float64 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

type FeatureValueSeries struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	FeatureFqn string                 `protobuf:"bytes,1,opt,name=feature_fqn,json=featureFqn,proto3" json:"feature_fqn,omitempty"`
	// If the user passes in a series title, uses that. Otherwise, will compose a title based on the fqn and the function used
	SeriesTitle *string `protobuf:"bytes,2,opt,name=series_title,json=seriesTitle,proto3,oneof" json:"series_title,omitempty"`
	// Types that are valid to be assigned to WindowFunction:
	//
	//	*FeatureValueSeries_BaseWindowFunction
	//	*FeatureValueSeries_PercentileWindowFunction
	WindowFunction isFeatureValueSeries_WindowFunction `protobuf_oneof:"window_function"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FeatureValueSeries) Reset() {
	*x = FeatureValueSeries{}
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureValueSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureValueSeries) ProtoMessage() {}

func (x *FeatureValueSeries) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureValueSeries.ProtoReflect.Descriptor instead.
func (*FeatureValueSeries) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureValueSeries) GetFeatureFqn() string {
	if x != nil {
		return x.FeatureFqn
	}
	return ""
}

func (x *FeatureValueSeries) GetSeriesTitle() string {
	if x != nil && x.SeriesTitle != nil {
		return *x.SeriesTitle
	}
	return ""
}

func (x *FeatureValueSeries) GetWindowFunction() isFeatureValueSeries_WindowFunction {
	if x != nil {
		return x.WindowFunction
	}
	return nil
}

func (x *FeatureValueSeries) GetBaseWindowFunction() FeatureValueBaseWindowFunction {
	if x != nil {
		if x, ok := x.WindowFunction.(*FeatureValueSeries_BaseWindowFunction); ok {
			return x.BaseWindowFunction
		}
	}
	return FeatureValueBaseWindowFunction_FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED
}

func (x *FeatureValueSeries) GetPercentileWindowFunction() *FeatureValuePercentileWindowFunction {
	if x != nil {
		if x, ok := x.WindowFunction.(*FeatureValueSeries_PercentileWindowFunction); ok {
			return x.PercentileWindowFunction
		}
	}
	return nil
}

type isFeatureValueSeries_WindowFunction interface {
	isFeatureValueSeries_WindowFunction()
}

type FeatureValueSeries_BaseWindowFunction struct {
	BaseWindowFunction FeatureValueBaseWindowFunction `protobuf:"varint,3,opt,name=base_window_function,json=baseWindowFunction,proto3,enum=chalk.engine.v2.FeatureValueBaseWindowFunction,oneof"`
}

type FeatureValueSeries_PercentileWindowFunction struct {
	PercentileWindowFunction *FeatureValuePercentileWindowFunction `protobuf:"bytes,4,opt,name=percentile_window_function,json=percentileWindowFunction,proto3,oneof"`
}

func (*FeatureValueSeries_BaseWindowFunction) isFeatureValueSeries_WindowFunction() {}

func (*FeatureValueSeries_PercentileWindowFunction) isFeatureValueSeries_WindowFunction() {}

type GetFeatureValuesTimeSeriesChartRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Title  *string                `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Series []*FeatureValueSeries  `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
	// The size of each time bucket + how far apart time points are in the chart
	// Ideally a divisor of the total window between end and start ms
	// If not, the bucket aligned with end_timestamp_exclusive will be of size total_window % window_period
	// For JSON format, this is a string `${duration_in_seconds}s`
	WindowPeriod            *durationpb.Duration   `protobuf:"bytes,3,opt,name=window_period,json=windowPeriod,proto3" json:"window_period,omitempty"`
	StartTimestampInclusive *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp_inclusive,json=startTimestampInclusive,proto3" json:"start_timestamp_inclusive,omitempty"`
	// If not provided, will assume current time is the ending time
	EndTimestampExclusive *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_timestamp_exclusive,json=endTimestampExclusive,proto3,oneof" json:"end_timestamp_exclusive,omitempty"`
	// The dimension to use as the time series axis. Defaults to inserted_at if not specified
	TimeSeries *FeatureValueTimeSeries `protobuf:"varint,6,opt,name=time_series,json=timeSeries,proto3,enum=chalk.engine.v2.FeatureValueTimeSeries,oneof" json:"time_series,omitempty"`
	// The group bys to apply to this chart. Multiple group bys may produce high #'s of axes.
	GroupBy []FeatureValueGroupBy `protobuf:"varint,7,rep,packed,name=group_by,json=groupBy,proto3,enum=chalk.engine.v2.FeatureValueGroupBy" json:"group_by,omitempty"`
	// The maximum number of series produced by the group by.
	// Important because some group bys are high cardinality (ex. value)
	GroupBySeriesLimit *int32 `protobuf:"varint,8,opt,name=group_by_series_limit,json=groupBySeriesLimit,proto3,oneof" json:"group_by_series_limit,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetFeatureValuesTimeSeriesChartRequest) Reset() {
	*x = GetFeatureValuesTimeSeriesChartRequest{}
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesTimeSeriesChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartRequest) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartRequest) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP(), []int{2}
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetSeries() []*FeatureValueSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetWindowPeriod() *durationpb.Duration {
	if x != nil {
		return x.WindowPeriod
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetStartTimestampInclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestampInclusive
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetEndTimestampExclusive() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestampExclusive
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetTimeSeries() FeatureValueTimeSeries {
	if x != nil && x.TimeSeries != nil {
		return *x.TimeSeries
	}
	return FeatureValueTimeSeries_FEATURE_VALUE_TIME_SERIES_UNSPECIFIED
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetGroupBy() []FeatureValueGroupBy {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *GetFeatureValuesTimeSeriesChartRequest) GetGroupBySeriesLimit() int32 {
	if x != nil && x.GroupBySeriesLimit != nil {
		return *x.GroupBySeriesLimit
	}
	return 0
}

type GetFeatureValuesTimeSeriesChartResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Chart         *v1.DenseTimeSeriesChart `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeatureValuesTimeSeriesChartResponse) Reset() {
	*x = GetFeatureValuesTimeSeriesChartResponse{}
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureValuesTimeSeriesChartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureValuesTimeSeriesChartResponse) ProtoMessage() {}

func (x *GetFeatureValuesTimeSeriesChartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_engine_v2_feature_values_chart_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureValuesTimeSeriesChartResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureValuesTimeSeriesChartResponse) Descriptor() ([]byte, []int) {
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP(), []int{3}
}

func (x *GetFeatureValuesTimeSeriesChartResponse) GetChart() *v1.DenseTimeSeriesChart {
	if x != nil {
		return x.Chart
	}
	return nil
}

var File_chalk_engine_v2_feature_values_chart_proto protoreflect.FileDescriptor

const file_chalk_engine_v2_feature_values_chart_proto_rawDesc = "" +
	"\n" +
	"*chalk/engine/v2/feature_values_chart.proto\x12\x0fchalk.engine.v2\x1a)chalk/chart/v1/densetimeserieschart.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"F\n" +
	"$FeatureValuePercentileWindowFunction\x12\x1e\n" +
	"\n" +
	"percentile\x18\x01 \x01(\x01R\n" +
	"percentile\"\xdd\x02\n" +
	"\x12FeatureValueSeries\x12\x1f\n" +
	"\vfeature_fqn\x18\x01 \x01(\tR\n" +
	"featureFqn\x12&\n" +
	"\fseries_title\x18\x02 \x01(\tH\x01R\vseriesTitle\x88\x01\x01\x12c\n" +
	"\x14base_window_function\x18\x03 \x01(\x0e2/.chalk.engine.v2.FeatureValueBaseWindowFunctionH\x00R\x12baseWindowFunction\x12u\n" +
	"\x1apercentile_window_function\x18\x04 \x01(\v25.chalk.engine.v2.FeatureValuePercentileWindowFunctionH\x00R\x18percentileWindowFunctionB\x11\n" +
	"\x0fwindow_functionB\x0f\n" +
	"\r_series_title\"\x89\x05\n" +
	"&GetFeatureValuesTimeSeriesChartRequest\x12\x19\n" +
	"\x05title\x18\x01 \x01(\tH\x00R\x05title\x88\x01\x01\x12;\n" +
	"\x06series\x18\x02 \x03(\v2#.chalk.engine.v2.FeatureValueSeriesR\x06series\x12>\n" +
	"\rwindow_period\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\fwindowPeriod\x12V\n" +
	"\x19start_timestamp_inclusive\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x17startTimestampInclusive\x12W\n" +
	"\x17end_timestamp_exclusive\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampH\x01R\x15endTimestampExclusive\x88\x01\x01\x12M\n" +
	"\vtime_series\x18\x06 \x01(\x0e2'.chalk.engine.v2.FeatureValueTimeSeriesH\x02R\n" +
	"timeSeries\x88\x01\x01\x12?\n" +
	"\bgroup_by\x18\a \x03(\x0e2$.chalk.engine.v2.FeatureValueGroupByR\agroupBy\x126\n" +
	"\x15group_by_series_limit\x18\b \x01(\x05H\x03R\x12groupBySeriesLimit\x88\x01\x01B\b\n" +
	"\x06_titleB\x1a\n" +
	"\x18_end_timestamp_exclusiveB\x0e\n" +
	"\f_time_seriesB\x18\n" +
	"\x16_group_by_series_limit\"e\n" +
	"'GetFeatureValuesTimeSeriesChartResponse\x12:\n" +
	"\x05chart\x18\x01 \x01(\v2$.chalk.chart.v1.DenseTimeSeriesChartR\x05chart*\xc6\x03\n" +
	"\x1eFeatureValueBaseWindowFunction\x122\n" +
	".FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNSPECIFIED\x10\x00\x124\n" +
	"0FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_VALUES\x10\x01\x129\n" +
	"5FEATURE_VALUE_BASE_WINDOW_FUNCTION_TOTAL_OBSERVATIONS\x10\x02\x126\n" +
	"2FEATURE_VALUE_BASE_WINDOW_FUNCTION_NULL_PERCENTAGE\x10\x03\x120\n" +
	",FEATURE_VALUE_BASE_WINDOW_FUNCTION_MAX_VALUE\x10\x04\x120\n" +
	",FEATURE_VALUE_BASE_WINDOW_FUNCTION_MIN_VALUE\x10\x05\x12.\n" +
	"*FEATURE_VALUE_BASE_WINDOW_FUNCTION_AVERAGE\x10\x06\x123\n" +
	"/FEATURE_VALUE_BASE_WINDOW_FUNCTION_UNIQUE_PKEYS\x10\a*\xe2\x02\n" +
	"\x13FeatureValueGroupBy\x12&\n" +
	"\"FEATURE_VALUE_GROUP_BY_UNSPECIFIED\x10\x00\x12,\n" +
	"(FEATURE_VALUE_GROUP_BY_CATEGORICAL_VALUE\x10\x01\x12&\n" +
	"\"FEATURE_VALUE_GROUP_BY_PRIMARY_KEY\x10\x02\x12(\n" +
	"$FEATURE_VALUE_GROUP_BY_DEPLOYMENT_ID\x10\x03\x12#\n" +
	"\x1fFEATURE_VALUE_GROUP_BY_RESOLVER\x10\x04\x12)\n" +
	"%FEATURE_VALUE_GROUP_BY_OPERATION_KIND\x10\x05\x12'\n" +
	"#FEATURE_VALUE_GROUP_BY_OPERATION_ID\x10\x06\x12*\n" +
	"&FEATURE_VALUE_GROUP_BY_FEATURE_VERSION\x10\a*\x99\x01\n" +
	"\x16FeatureValueTimeSeries\x12)\n" +
	"%FEATURE_VALUE_TIME_SERIES_UNSPECIFIED\x10\x00\x12)\n" +
	"%FEATURE_VALUE_TIME_SERIES_INSERTED_AT\x10\x01\x12)\n" +
	"%FEATURE_VALUE_TIME_SERIES_OBSERVED_AT\x10\x02B\xc7\x01\n" +
	"\x13com.chalk.engine.v2B\x17FeatureValuesChartProtoP\x01Z9github.com/chalk-ai/chalk-go/gen/chalk/engine/v2;enginev2\xa2\x02\x03CEX\xaa\x02\x0fChalk.Engine.V2\xca\x02\x0fChalk\\Engine\\V2\xe2\x02\x1bChalk\\Engine\\V2\\GPBMetadata\xea\x02\x11Chalk::Engine::V2b\x06proto3"

var (
	file_chalk_engine_v2_feature_values_chart_proto_rawDescOnce sync.Once
	file_chalk_engine_v2_feature_values_chart_proto_rawDescData []byte
)

func file_chalk_engine_v2_feature_values_chart_proto_rawDescGZIP() []byte {
	file_chalk_engine_v2_feature_values_chart_proto_rawDescOnce.Do(func() {
		file_chalk_engine_v2_feature_values_chart_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_engine_v2_feature_values_chart_proto_rawDesc), len(file_chalk_engine_v2_feature_values_chart_proto_rawDesc)))
	})
	return file_chalk_engine_v2_feature_values_chart_proto_rawDescData
}

var file_chalk_engine_v2_feature_values_chart_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_chalk_engine_v2_feature_values_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chalk_engine_v2_feature_values_chart_proto_goTypes = []any{
	(FeatureValueBaseWindowFunction)(0),             // 0: chalk.engine.v2.FeatureValueBaseWindowFunction
	(FeatureValueGroupBy)(0),                        // 1: chalk.engine.v2.FeatureValueGroupBy
	(FeatureValueTimeSeries)(0),                     // 2: chalk.engine.v2.FeatureValueTimeSeries
	(*FeatureValuePercentileWindowFunction)(nil),    // 3: chalk.engine.v2.FeatureValuePercentileWindowFunction
	(*FeatureValueSeries)(nil),                      // 4: chalk.engine.v2.FeatureValueSeries
	(*GetFeatureValuesTimeSeriesChartRequest)(nil),  // 5: chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest
	(*GetFeatureValuesTimeSeriesChartResponse)(nil), // 6: chalk.engine.v2.GetFeatureValuesTimeSeriesChartResponse
	(*durationpb.Duration)(nil),                     // 7: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                   // 8: google.protobuf.Timestamp
	(*v1.DenseTimeSeriesChart)(nil),                 // 9: chalk.chart.v1.DenseTimeSeriesChart
}
var file_chalk_engine_v2_feature_values_chart_proto_depIdxs = []int32{
	0, // 0: chalk.engine.v2.FeatureValueSeries.base_window_function:type_name -> chalk.engine.v2.FeatureValueBaseWindowFunction
	3, // 1: chalk.engine.v2.FeatureValueSeries.percentile_window_function:type_name -> chalk.engine.v2.FeatureValuePercentileWindowFunction
	4, // 2: chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest.series:type_name -> chalk.engine.v2.FeatureValueSeries
	7, // 3: chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest.window_period:type_name -> google.protobuf.Duration
	8, // 4: chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest.start_timestamp_inclusive:type_name -> google.protobuf.Timestamp
	8, // 5: chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest.end_timestamp_exclusive:type_name -> google.protobuf.Timestamp
	2, // 6: chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest.time_series:type_name -> chalk.engine.v2.FeatureValueTimeSeries
	1, // 7: chalk.engine.v2.GetFeatureValuesTimeSeriesChartRequest.group_by:type_name -> chalk.engine.v2.FeatureValueGroupBy
	9, // 8: chalk.engine.v2.GetFeatureValuesTimeSeriesChartResponse.chart:type_name -> chalk.chart.v1.DenseTimeSeriesChart
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_chalk_engine_v2_feature_values_chart_proto_init() }
func file_chalk_engine_v2_feature_values_chart_proto_init() {
	if File_chalk_engine_v2_feature_values_chart_proto != nil {
		return
	}
	file_chalk_engine_v2_feature_values_chart_proto_msgTypes[1].OneofWrappers = []any{
		(*FeatureValueSeries_BaseWindowFunction)(nil),
		(*FeatureValueSeries_PercentileWindowFunction)(nil),
	}
	file_chalk_engine_v2_feature_values_chart_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_engine_v2_feature_values_chart_proto_rawDesc), len(file_chalk_engine_v2_feature_values_chart_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_engine_v2_feature_values_chart_proto_goTypes,
		DependencyIndexes: file_chalk_engine_v2_feature_values_chart_proto_depIdxs,
		EnumInfos:         file_chalk_engine_v2_feature_values_chart_proto_enumTypes,
		MessageInfos:      file_chalk_engine_v2_feature_values_chart_proto_msgTypes,
	}.Build()
	File_chalk_engine_v2_feature_values_chart_proto = out.File
	file_chalk_engine_v2_feature_values_chart_proto_goTypes = nil
	file_chalk_engine_v2_feature_values_chart_proto_depIdxs = nil
}
