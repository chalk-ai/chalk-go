// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/engine/v2/dataframe_service.proto

package enginev2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/chalk-ai/chalk-go/gen/chalk/common/v2"
	v21 "github.com/chalk-ai/chalk-go/gen/chalk/engine/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataFrameServiceName is the fully-qualified name of the DataFrameService service.
	DataFrameServiceName = "chalk.engine.v2.DataFrameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataFrameServiceExecutePlanProcedure is the fully-qualified name of the DataFrameService's
	// ExecutePlan RPC.
	DataFrameServiceExecutePlanProcedure = "/chalk.engine.v2.DataFrameService/ExecutePlan"
)

// DataFrameServiceClient is a client for the chalk.engine.v2.DataFrameService service.
type DataFrameServiceClient interface {
	// Execute a DataFrame plan.
	ExecutePlan(context.Context, *connect.Request[v2.ExecutePlanRequest]) (*connect.Response[v2.ExecutePlanResponse], error)
}

// NewDataFrameServiceClient constructs a client for the chalk.engine.v2.DataFrameService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataFrameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataFrameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataFrameServiceMethods := v21.File_chalk_engine_v2_dataframe_service_proto.Services().ByName("DataFrameService").Methods()
	return &dataFrameServiceClient{
		executePlan: connect.NewClient[v2.ExecutePlanRequest, v2.ExecutePlanResponse](
			httpClient,
			baseURL+DataFrameServiceExecutePlanProcedure,
			connect.WithSchema(dataFrameServiceMethods.ByName("ExecutePlan")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataFrameServiceClient implements DataFrameServiceClient.
type dataFrameServiceClient struct {
	executePlan *connect.Client[v2.ExecutePlanRequest, v2.ExecutePlanResponse]
}

// ExecutePlan calls chalk.engine.v2.DataFrameService.ExecutePlan.
func (c *dataFrameServiceClient) ExecutePlan(ctx context.Context, req *connect.Request[v2.ExecutePlanRequest]) (*connect.Response[v2.ExecutePlanResponse], error) {
	return c.executePlan.CallUnary(ctx, req)
}

// DataFrameServiceHandler is an implementation of the chalk.engine.v2.DataFrameService service.
type DataFrameServiceHandler interface {
	// Execute a DataFrame plan.
	ExecutePlan(context.Context, *connect.Request[v2.ExecutePlanRequest]) (*connect.Response[v2.ExecutePlanResponse], error)
}

// NewDataFrameServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataFrameServiceHandler(svc DataFrameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataFrameServiceMethods := v21.File_chalk_engine_v2_dataframe_service_proto.Services().ByName("DataFrameService").Methods()
	dataFrameServiceExecutePlanHandler := connect.NewUnaryHandler(
		DataFrameServiceExecutePlanProcedure,
		svc.ExecutePlan,
		connect.WithSchema(dataFrameServiceMethods.ByName("ExecutePlan")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.engine.v2.DataFrameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataFrameServiceExecutePlanProcedure:
			dataFrameServiceExecutePlanHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataFrameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataFrameServiceHandler struct{}

func (UnimplementedDataFrameServiceHandler) ExecutePlan(context.Context, *connect.Request[v2.ExecutePlanRequest]) (*connect.Response[v2.ExecutePlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.engine.v2.DataFrameService.ExecutePlan is not implemented"))
}
