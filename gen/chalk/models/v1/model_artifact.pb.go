// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/models/v1/model_artifact.proto

package modelsv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelType int32

const (
	ModelType_MODEL_TYPE_UNSPECIFIED ModelType = 0
	ModelType_MODEL_TYPE_PYTORCH     ModelType = 1
	ModelType_MODEL_TYPE_SKLEARN     ModelType = 2
	ModelType_MODEL_TYPE_TENSORFLOW  ModelType = 3
	ModelType_MODEL_TYPE_XGBOOST     ModelType = 4
	ModelType_MODEL_TYPE_LIGHTGBM    ModelType = 5
	ModelType_MODEL_TYPE_CATBOOST    ModelType = 6
	ModelType_MODEL_TYPE_ONNX        ModelType = 7
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "MODEL_TYPE_UNSPECIFIED",
		1: "MODEL_TYPE_PYTORCH",
		2: "MODEL_TYPE_SKLEARN",
		3: "MODEL_TYPE_TENSORFLOW",
		4: "MODEL_TYPE_XGBOOST",
		5: "MODEL_TYPE_LIGHTGBM",
		6: "MODEL_TYPE_CATBOOST",
		7: "MODEL_TYPE_ONNX",
	}
	ModelType_value = map[string]int32{
		"MODEL_TYPE_UNSPECIFIED": 0,
		"MODEL_TYPE_PYTORCH":     1,
		"MODEL_TYPE_SKLEARN":     2,
		"MODEL_TYPE_TENSORFLOW":  3,
		"MODEL_TYPE_XGBOOST":     4,
		"MODEL_TYPE_LIGHTGBM":    5,
		"MODEL_TYPE_CATBOOST":    6,
		"MODEL_TYPE_ONNX":        7,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_models_v1_model_artifact_proto_enumTypes[0].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_chalk_models_v1_model_artifact_proto_enumTypes[0]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{0}
}

type ModelEncoding int32

const (
	ModelEncoding_MODEL_ENCODING_UNSPECIFIED ModelEncoding = 0
	ModelEncoding_MODEL_ENCODING_PICKLE      ModelEncoding = 1 // .pkl, .pth
	ModelEncoding_MODEL_ENCODING_JOBLIB      ModelEncoding = 2 // Joblib pickle variant
	ModelEncoding_MODEL_ENCODING_JSON        ModelEncoding = 3 // JSON format
	ModelEncoding_MODEL_ENCODING_TEXT        ModelEncoding = 4 // Plain text format
	ModelEncoding_MODEL_ENCODING_HDF5        ModelEncoding = 5 // Cross-framework HDF5
	ModelEncoding_MODEL_ENCODING_PROTOBUF    ModelEncoding = 6 // Protocol Buffers (SavedModel, ONNX)
	ModelEncoding_MODEL_ENCODING_CBM         ModelEncoding = 7 // CatBoost-specific binary
	ModelEncoding_MODEL_ENCODING_SAFETENSORS ModelEncoding = 8 // Cross-framework tensor format
)

// Enum value maps for ModelEncoding.
var (
	ModelEncoding_name = map[int32]string{
		0: "MODEL_ENCODING_UNSPECIFIED",
		1: "MODEL_ENCODING_PICKLE",
		2: "MODEL_ENCODING_JOBLIB",
		3: "MODEL_ENCODING_JSON",
		4: "MODEL_ENCODING_TEXT",
		5: "MODEL_ENCODING_HDF5",
		6: "MODEL_ENCODING_PROTOBUF",
		7: "MODEL_ENCODING_CBM",
		8: "MODEL_ENCODING_SAFETENSORS",
	}
	ModelEncoding_value = map[string]int32{
		"MODEL_ENCODING_UNSPECIFIED": 0,
		"MODEL_ENCODING_PICKLE":      1,
		"MODEL_ENCODING_JOBLIB":      2,
		"MODEL_ENCODING_JSON":        3,
		"MODEL_ENCODING_TEXT":        4,
		"MODEL_ENCODING_HDF5":        5,
		"MODEL_ENCODING_PROTOBUF":    6,
		"MODEL_ENCODING_CBM":         7,
		"MODEL_ENCODING_SAFETENSORS": 8,
	}
)

func (x ModelEncoding) Enum() *ModelEncoding {
	p := new(ModelEncoding)
	*p = x
	return p
}

func (x ModelEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_chalk_models_v1_model_artifact_proto_enumTypes[1].Descriptor()
}

func (ModelEncoding) Type() protoreflect.EnumType {
	return &file_chalk_models_v1_model_artifact_proto_enumTypes[1]
}

func (x ModelEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelEncoding.Descriptor instead.
func (ModelEncoding) EnumDescriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{1}
}

type TensorSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dtype *v1.ArrowType `protobuf:"bytes,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Shape []int64       `protobuf:"varint,2,rep,packed,name=shape,proto3" json:"shape,omitempty"` // e.g., [batch, height, width, channels],
}

func (x *TensorSpec) Reset() {
	*x = TensorSpec{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TensorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorSpec) ProtoMessage() {}

func (x *TensorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorSpec.ProtoReflect.Descriptor instead.
func (*TensorSpec) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{0}
}

func (x *TensorSpec) GetDtype() *v1.ArrowType {
	if x != nil {
		return x.Dtype
	}
	return nil
}

func (x *TensorSpec) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

type TabularSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dtype *v1.ArrowType `protobuf:"bytes,1,opt,name=dtype,proto3" json:"dtype,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TabularSpec) Reset() {
	*x = TabularSpec{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularSpec) ProtoMessage() {}

func (x *TabularSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularSpec.ProtoReflect.Descriptor instead.
func (*TabularSpec) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{1}
}

func (x *TabularSpec) GetDtype() *v1.ArrowType {
	if x != nil {
		return x.Dtype
	}
	return nil
}

func (x *TabularSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TensorSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tensors []*TensorSpec `protobuf:"bytes,1,rep,name=tensors,proto3" json:"tensors,omitempty"`
}

func (x *TensorSchema) Reset() {
	*x = TensorSchema{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TensorSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorSchema) ProtoMessage() {}

func (x *TensorSchema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorSchema.ProtoReflect.Descriptor instead.
func (*TensorSchema) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{2}
}

func (x *TensorSchema) GetTensors() []*TensorSpec {
	if x != nil {
		return x.Tensors
	}
	return nil
}

type TabularSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*TabularSpec `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *TabularSchema) Reset() {
	*x = TabularSchema{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabularSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularSchema) ProtoMessage() {}

func (x *TabularSchema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularSchema.ProtoReflect.Descriptor instead.
func (*TabularSchema) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{3}
}

func (x *TabularSchema) GetColumns() []*TabularSpec {
	if x != nil {
		return x.Columns
	}
	return nil
}

type ModelSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SchemaType:
	//
	//	*ModelSchema_Tensor
	//	*ModelSchema_Tabular
	SchemaType isModelSchema_SchemaType `protobuf_oneof:"schema_type"`
}

func (x *ModelSchema) Reset() {
	*x = ModelSchema{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSchema) ProtoMessage() {}

func (x *ModelSchema) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSchema.ProtoReflect.Descriptor instead.
func (*ModelSchema) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{4}
}

func (m *ModelSchema) GetSchemaType() isModelSchema_SchemaType {
	if m != nil {
		return m.SchemaType
	}
	return nil
}

func (x *ModelSchema) GetTensor() *TensorSchema {
	if x, ok := x.GetSchemaType().(*ModelSchema_Tensor); ok {
		return x.Tensor
	}
	return nil
}

func (x *ModelSchema) GetTabular() *TabularSchema {
	if x, ok := x.GetSchemaType().(*ModelSchema_Tabular); ok {
		return x.Tabular
	}
	return nil
}

type isModelSchema_SchemaType interface {
	isModelSchema_SchemaType()
}

type ModelSchema_Tensor struct {
	Tensor *TensorSchema `protobuf:"bytes,1,opt,name=tensor,proto3,oneof"`
}

type ModelSchema_Tabular struct {
	Tabular *TabularSchema `protobuf:"bytes,2,opt,name=tabular,proto3,oneof"`
}

func (*ModelSchema_Tensor) isModelSchema_SchemaType() {}

func (*ModelSchema_Tabular) isModelSchema_SchemaType() {}

type ModelSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs  *ModelSchema `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs *ModelSchema `protobuf:"bytes,2,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ModelSignature) Reset() {
	*x = ModelSignature{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSignature) ProtoMessage() {}

func (x *ModelSignature) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSignature.ProtoReflect.Descriptor instead.
func (*ModelSignature) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{5}
}

func (x *ModelSignature) GetInputs() *ModelSchema {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ModelSignature) GetOutputs() *ModelSchema {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type ModelFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SizeKb   int64  `protobuf:"varint,2,opt,name=size_kb,json=sizeKb,proto3" json:"size_kb,omitempty"`
	FileHash []byte `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *ModelFile) Reset() {
	*x = ModelFile{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelFile) ProtoMessage() {}

func (x *ModelFile) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelFile.ProtoReflect.Descriptor instead.
func (*ModelFile) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{6}
}

func (x *ModelFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelFile) GetSizeKb() int64 {
	if x != nil {
		return x.SizeKb
	}
	return 0
}

func (x *ModelFile) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

type ModelArtifactSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelFiles      []*ModelFile `protobuf:"bytes,1,rep,name=model_files,json=modelFiles,proto3" json:"model_files,omitempty"`
	AdditionalFiles []*ModelFile `protobuf:"bytes,2,rep,name=additional_files,json=additionalFiles,proto3" json:"additional_files,omitempty"`
	// e.g. "sklearn", "xgboost", "pytorch", etc.
	ModelType ModelType `protobuf:"varint,3,opt,name=model_type,json=modelType,proto3,enum=chalk.models.v1.ModelType" json:"model_type,omitempty"`
	// e.g. "pickle", "joblib", etc.
	ModelEncoding  ModelEncoding   `protobuf:"varint,4,opt,name=model_encoding,json=modelEncoding,proto3,enum=chalk.models.v1.ModelEncoding" json:"model_encoding,omitempty"`
	ModelSignature *ModelSignature `protobuf:"bytes,5,opt,name=model_signature,json=modelSignature,proto3" json:"model_signature,omitempty"`
	InputFeatures  []string        `protobuf:"bytes,6,rep,name=input_features,json=inputFeatures,proto3" json:"input_features,omitempty"`
	OutputFeatures []string        `protobuf:"bytes,7,rep,name=output_features,json=outputFeatures,proto3" json:"output_features,omitempty"`
}

func (x *ModelArtifactSpec) Reset() {
	*x = ModelArtifactSpec{}
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelArtifactSpec) ProtoMessage() {}

func (x *ModelArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_models_v1_model_artifact_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelArtifactSpec.ProtoReflect.Descriptor instead.
func (*ModelArtifactSpec) Descriptor() ([]byte, []int) {
	return file_chalk_models_v1_model_artifact_proto_rawDescGZIP(), []int{7}
}

func (x *ModelArtifactSpec) GetModelFiles() []*ModelFile {
	if x != nil {
		return x.ModelFiles
	}
	return nil
}

func (x *ModelArtifactSpec) GetAdditionalFiles() []*ModelFile {
	if x != nil {
		return x.AdditionalFiles
	}
	return nil
}

func (x *ModelArtifactSpec) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_MODEL_TYPE_UNSPECIFIED
}

func (x *ModelArtifactSpec) GetModelEncoding() ModelEncoding {
	if x != nil {
		return x.ModelEncoding
	}
	return ModelEncoding_MODEL_ENCODING_UNSPECIFIED
}

func (x *ModelArtifactSpec) GetModelSignature() *ModelSignature {
	if x != nil {
		return x.ModelSignature
	}
	return nil
}

func (x *ModelArtifactSpec) GetInputFeatures() []string {
	if x != nil {
		return x.InputFeatures
	}
	return nil
}

func (x *ModelArtifactSpec) GetOutputFeatures() []string {
	if x != nil {
		return x.OutputFeatures
	}
	return nil
}

var File_chalk_models_v1_model_artifact_proto protoreflect.FileDescriptor

var file_chalk_models_v1_model_artifact_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x0c,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x07,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x37, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x7e, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x22, 0x55, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb3, 0x03, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2a, 0xd1, 0x01,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x59, 0x54, 0x4f, 0x52, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x58, 0x47, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x47, 0x42,
	0x4d, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4e, 0x58, 0x10,
	0x07, 0x2a, 0x85, 0x02, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x4a, 0x4f, 0x42, 0x4c, 0x49, 0x42, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x44,
	0x46, 0x35, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x42, 0x4d, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x41, 0x46, 0x45,
	0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x53, 0x10, 0x08, 0x42, 0xc2, 0x01, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x42, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x4d, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_models_v1_model_artifact_proto_rawDescOnce sync.Once
	file_chalk_models_v1_model_artifact_proto_rawDescData = file_chalk_models_v1_model_artifact_proto_rawDesc
)

func file_chalk_models_v1_model_artifact_proto_rawDescGZIP() []byte {
	file_chalk_models_v1_model_artifact_proto_rawDescOnce.Do(func() {
		file_chalk_models_v1_model_artifact_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_models_v1_model_artifact_proto_rawDescData)
	})
	return file_chalk_models_v1_model_artifact_proto_rawDescData
}

var file_chalk_models_v1_model_artifact_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chalk_models_v1_model_artifact_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chalk_models_v1_model_artifact_proto_goTypes = []any{
	(ModelType)(0),            // 0: chalk.models.v1.ModelType
	(ModelEncoding)(0),        // 1: chalk.models.v1.ModelEncoding
	(*TensorSpec)(nil),        // 2: chalk.models.v1.TensorSpec
	(*TabularSpec)(nil),       // 3: chalk.models.v1.TabularSpec
	(*TensorSchema)(nil),      // 4: chalk.models.v1.TensorSchema
	(*TabularSchema)(nil),     // 5: chalk.models.v1.TabularSchema
	(*ModelSchema)(nil),       // 6: chalk.models.v1.ModelSchema
	(*ModelSignature)(nil),    // 7: chalk.models.v1.ModelSignature
	(*ModelFile)(nil),         // 8: chalk.models.v1.ModelFile
	(*ModelArtifactSpec)(nil), // 9: chalk.models.v1.ModelArtifactSpec
	(*v1.ArrowType)(nil),      // 10: chalk.arrow.v1.ArrowType
}
var file_chalk_models_v1_model_artifact_proto_depIdxs = []int32{
	10, // 0: chalk.models.v1.TensorSpec.dtype:type_name -> chalk.arrow.v1.ArrowType
	10, // 1: chalk.models.v1.TabularSpec.dtype:type_name -> chalk.arrow.v1.ArrowType
	2,  // 2: chalk.models.v1.TensorSchema.tensors:type_name -> chalk.models.v1.TensorSpec
	3,  // 3: chalk.models.v1.TabularSchema.columns:type_name -> chalk.models.v1.TabularSpec
	4,  // 4: chalk.models.v1.ModelSchema.tensor:type_name -> chalk.models.v1.TensorSchema
	5,  // 5: chalk.models.v1.ModelSchema.tabular:type_name -> chalk.models.v1.TabularSchema
	6,  // 6: chalk.models.v1.ModelSignature.inputs:type_name -> chalk.models.v1.ModelSchema
	6,  // 7: chalk.models.v1.ModelSignature.outputs:type_name -> chalk.models.v1.ModelSchema
	8,  // 8: chalk.models.v1.ModelArtifactSpec.model_files:type_name -> chalk.models.v1.ModelFile
	8,  // 9: chalk.models.v1.ModelArtifactSpec.additional_files:type_name -> chalk.models.v1.ModelFile
	0,  // 10: chalk.models.v1.ModelArtifactSpec.model_type:type_name -> chalk.models.v1.ModelType
	1,  // 11: chalk.models.v1.ModelArtifactSpec.model_encoding:type_name -> chalk.models.v1.ModelEncoding
	7,  // 12: chalk.models.v1.ModelArtifactSpec.model_signature:type_name -> chalk.models.v1.ModelSignature
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_chalk_models_v1_model_artifact_proto_init() }
func file_chalk_models_v1_model_artifact_proto_init() {
	if File_chalk_models_v1_model_artifact_proto != nil {
		return
	}
	file_chalk_models_v1_model_artifact_proto_msgTypes[4].OneofWrappers = []any{
		(*ModelSchema_Tensor)(nil),
		(*ModelSchema_Tabular)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_models_v1_model_artifact_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_models_v1_model_artifact_proto_goTypes,
		DependencyIndexes: file_chalk_models_v1_model_artifact_proto_depIdxs,
		EnumInfos:         file_chalk_models_v1_model_artifact_proto_enumTypes,
		MessageInfos:      file_chalk_models_v1_model_artifact_proto_msgTypes,
	}.Build()
	File_chalk_models_v1_model_artifact_proto = out.File
	file_chalk_models_v1_model_artifact_proto_rawDesc = nil
	file_chalk_models_v1_model_artifact_proto_goTypes = nil
	file_chalk_models_v1_model_artifact_proto_depIdxs = nil
}
