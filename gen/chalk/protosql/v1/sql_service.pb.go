// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/protosql/v1/sql_service.proto

package protosqlv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecuteSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ExecuteSqlQueryRequest) Reset() {
	*x = ExecuteSqlQueryRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlQueryRequest) ProtoMessage() {}

func (x *ExecuteSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteSqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ExecuteSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ExecuteSqlQueryResponse_Parquet
	Payload isExecuteSqlQueryResponse_Payload `protobuf_oneof:"payload"`
	Errors  []*v1.ChalkError                  `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ExecuteSqlQueryResponse) Reset() {
	*x = ExecuteSqlQueryResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlQueryResponse) ProtoMessage() {}

func (x *ExecuteSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteSqlQueryResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (m *ExecuteSqlQueryResponse) GetPayload() isExecuteSqlQueryResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ExecuteSqlQueryResponse) GetParquet() []byte {
	if x, ok := x.GetPayload().(*ExecuteSqlQueryResponse_Parquet); ok {
		return x.Parquet
	}
	return nil
}

func (x *ExecuteSqlQueryResponse) GetErrors() []*v1.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type isExecuteSqlQueryResponse_Payload interface {
	isExecuteSqlQueryResponse_Payload()
}

type ExecuteSqlQueryResponse_Parquet struct {
	Parquet []byte `protobuf:"bytes,2,opt,name=parquet,proto3,oneof"`
}

func (*ExecuteSqlQueryResponse_Parquet) isExecuteSqlQueryResponse_Payload() {}

type PlanSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *PlanSqlQueryRequest) Reset() {
	*x = PlanSqlQueryRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanSqlQueryRequest) ProtoMessage() {}

func (x *PlanSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*PlanSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{2}
}

func (x *PlanSqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type PlanSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicalPlan string           `protobuf:"bytes,1,opt,name=logical_plan,json=logicalPlan,proto3" json:"logical_plan,omitempty"`
	Errors      []*v1.ChalkError `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PlanSqlQueryResponse) Reset() {
	*x = PlanSqlQueryResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanSqlQueryResponse) ProtoMessage() {}

func (x *PlanSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*PlanSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{3}
}

func (x *PlanSqlQueryResponse) GetLogicalPlan() string {
	if x != nil {
		return x.LogicalPlan
	}
	return ""
}

func (x *PlanSqlQueryResponse) GetErrors() []*v1.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetDbCatalogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDbCatalogsRequest) Reset() {
	*x = GetDbCatalogsRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDbCatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDbCatalogsRequest) ProtoMessage() {}

func (x *GetDbCatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDbCatalogsRequest.ProtoReflect.Descriptor instead.
func (*GetDbCatalogsRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{4}
}

type GetDbCatalogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogNames []string         `protobuf:"bytes,1,rep,name=catalog_names,json=catalogNames,proto3" json:"catalog_names,omitempty"`
	Errors       []*v1.ChalkError `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetDbCatalogsResponse) Reset() {
	*x = GetDbCatalogsResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDbCatalogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDbCatalogsResponse) ProtoMessage() {}

func (x *GetDbCatalogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDbCatalogsResponse.ProtoReflect.Descriptor instead.
func (*GetDbCatalogsResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetDbCatalogsResponse) GetCatalogNames() []string {
	if x != nil {
		return x.CatalogNames
	}
	return nil
}

func (x *GetDbCatalogsResponse) GetErrors() []*v1.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetDbSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog               *string          `protobuf:"bytes,1,opt,name=catalog,proto3,oneof" json:"catalog,omitempty"`
	DbSchemaFilterPattern *string          `protobuf:"bytes,2,opt,name=db_schema_filter_pattern,json=dbSchemaFilterPattern,proto3,oneof" json:"db_schema_filter_pattern,omitempty"`
	Errors                []*v1.ChalkError `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetDbSchemasRequest) Reset() {
	*x = GetDbSchemasRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDbSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDbSchemasRequest) ProtoMessage() {}

func (x *GetDbSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDbSchemasRequest.ProtoReflect.Descriptor instead.
func (*GetDbSchemasRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetDbSchemasRequest) GetCatalog() string {
	if x != nil && x.Catalog != nil {
		return *x.Catalog
	}
	return ""
}

func (x *GetDbSchemasRequest) GetDbSchemaFilterPattern() string {
	if x != nil && x.DbSchemaFilterPattern != nil {
		return *x.DbSchemaFilterPattern
	}
	return ""
}

func (x *GetDbSchemasRequest) GetErrors() []*v1.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type DbSchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName  string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	DbSchemaName string `protobuf:"bytes,2,opt,name=db_schema_name,json=dbSchemaName,proto3" json:"db_schema_name,omitempty"`
}

func (x *DbSchemaInfo) Reset() {
	*x = DbSchemaInfo{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSchemaInfo) ProtoMessage() {}

func (x *DbSchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSchemaInfo.ProtoReflect.Descriptor instead.
func (*DbSchemaInfo) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{7}
}

func (x *DbSchemaInfo) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *DbSchemaInfo) GetDbSchemaName() string {
	if x != nil {
		return x.DbSchemaName
	}
	return ""
}

type GetDbSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas []*DbSchemaInfo  `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	Errors  []*v1.ChalkError `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetDbSchemasResponse) Reset() {
	*x = GetDbSchemasResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDbSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDbSchemasResponse) ProtoMessage() {}

func (x *GetDbSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDbSchemasResponse.ProtoReflect.Descriptor instead.
func (*GetDbSchemasResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetDbSchemasResponse) GetSchemas() []*DbSchemaInfo {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *GetDbSchemasResponse) GetErrors() []*v1.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalog                *string `protobuf:"bytes,1,opt,name=catalog,proto3,oneof" json:"catalog,omitempty"`
	DbSchemaFilterPattern  *string `protobuf:"bytes,2,opt,name=db_schema_filter_pattern,json=dbSchemaFilterPattern,proto3,oneof" json:"db_schema_filter_pattern,omitempty"`
	TableNameFilterPattern *string `protobuf:"bytes,3,opt,name=table_name_filter_pattern,json=tableNameFilterPattern,proto3,oneof" json:"table_name_filter_pattern,omitempty"`
}

func (x *GetTablesRequest) Reset() {
	*x = GetTablesRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesRequest) ProtoMessage() {}

func (x *GetTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesRequest.ProtoReflect.Descriptor instead.
func (*GetTablesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTablesRequest) GetCatalog() string {
	if x != nil && x.Catalog != nil {
		return *x.Catalog
	}
	return ""
}

func (x *GetTablesRequest) GetDbSchemaFilterPattern() string {
	if x != nil && x.DbSchemaFilterPattern != nil {
		return *x.DbSchemaFilterPattern
	}
	return ""
}

func (x *GetTablesRequest) GetTableNameFilterPattern() string {
	if x != nil && x.TableNameFilterPattern != nil {
		return *x.TableNameFilterPattern
	}
	return ""
}

type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogName  string `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	DbSchemaName string `protobuf:"bytes,2,opt,name=db_schema_name,json=dbSchemaName,proto3" json:"db_schema_name,omitempty"`
	TableName    string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{10}
}

func (x *TableInfo) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *TableInfo) GetDbSchemaName() string {
	if x != nil {
		return x.DbSchemaName
	}
	return ""
}

func (x *TableInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type GetTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableInfo     `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	Errors []*v1.ChalkError `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetTablesResponse) Reset() {
	*x = GetTablesResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesResponse) ProtoMessage() {}

func (x *GetTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesResponse.ProtoReflect.Descriptor instead.
func (*GetTablesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetTablesResponse) GetTables() []*TableInfo {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *GetTablesResponse) GetErrors() []*v1.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_chalk_protosql_v1_sql_service_proto protoreflect.FileDescriptor

var file_chalk_protosql_v1_sql_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x16,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x90, 0x01, 0x0a,
	0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x2b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6e, 0x0a, 0x14,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x16, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x62, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x62, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x18, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x15, 0x64, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x57, 0x0a, 0x0c, 0x44, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xf6, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x18, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x15, 0x64, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64,
	0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x73, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0x8d, 0x04, 0x0a, 0x0a, 0x53,
	0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x0f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x03, 0x12, 0x64, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x03, 0x12, 0x67,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x62, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x62, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x62, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x64, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x62,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x12, 0x5b, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x0b, 0x42, 0xcd, 0x01, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x71, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x50, 0x58, 0xaa, 0x02, 0x11, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71,
	0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x71, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chalk_protosql_v1_sql_service_proto_rawDescOnce sync.Once
	file_chalk_protosql_v1_sql_service_proto_rawDescData = file_chalk_protosql_v1_sql_service_proto_rawDesc
)

func file_chalk_protosql_v1_sql_service_proto_rawDescGZIP() []byte {
	file_chalk_protosql_v1_sql_service_proto_rawDescOnce.Do(func() {
		file_chalk_protosql_v1_sql_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_protosql_v1_sql_service_proto_rawDescData)
	})
	return file_chalk_protosql_v1_sql_service_proto_rawDescData
}

var file_chalk_protosql_v1_sql_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_chalk_protosql_v1_sql_service_proto_goTypes = []any{
	(*ExecuteSqlQueryRequest)(nil),  // 0: chalk.protosql.v1.ExecuteSqlQueryRequest
	(*ExecuteSqlQueryResponse)(nil), // 1: chalk.protosql.v1.ExecuteSqlQueryResponse
	(*PlanSqlQueryRequest)(nil),     // 2: chalk.protosql.v1.PlanSqlQueryRequest
	(*PlanSqlQueryResponse)(nil),    // 3: chalk.protosql.v1.PlanSqlQueryResponse
	(*GetDbCatalogsRequest)(nil),    // 4: chalk.protosql.v1.GetDbCatalogsRequest
	(*GetDbCatalogsResponse)(nil),   // 5: chalk.protosql.v1.GetDbCatalogsResponse
	(*GetDbSchemasRequest)(nil),     // 6: chalk.protosql.v1.GetDbSchemasRequest
	(*DbSchemaInfo)(nil),            // 7: chalk.protosql.v1.DbSchemaInfo
	(*GetDbSchemasResponse)(nil),    // 8: chalk.protosql.v1.GetDbSchemasResponse
	(*GetTablesRequest)(nil),        // 9: chalk.protosql.v1.GetTablesRequest
	(*TableInfo)(nil),               // 10: chalk.protosql.v1.TableInfo
	(*GetTablesResponse)(nil),       // 11: chalk.protosql.v1.GetTablesResponse
	(*v1.ChalkError)(nil),           // 12: chalk.common.v1.ChalkError
}
var file_chalk_protosql_v1_sql_service_proto_depIdxs = []int32{
	12, // 0: chalk.protosql.v1.ExecuteSqlQueryResponse.errors:type_name -> chalk.common.v1.ChalkError
	12, // 1: chalk.protosql.v1.PlanSqlQueryResponse.errors:type_name -> chalk.common.v1.ChalkError
	12, // 2: chalk.protosql.v1.GetDbCatalogsResponse.errors:type_name -> chalk.common.v1.ChalkError
	12, // 3: chalk.protosql.v1.GetDbSchemasRequest.errors:type_name -> chalk.common.v1.ChalkError
	7,  // 4: chalk.protosql.v1.GetDbSchemasResponse.schemas:type_name -> chalk.protosql.v1.DbSchemaInfo
	12, // 5: chalk.protosql.v1.GetDbSchemasResponse.errors:type_name -> chalk.common.v1.ChalkError
	10, // 6: chalk.protosql.v1.GetTablesResponse.tables:type_name -> chalk.protosql.v1.TableInfo
	12, // 7: chalk.protosql.v1.GetTablesResponse.errors:type_name -> chalk.common.v1.ChalkError
	0,  // 8: chalk.protosql.v1.SqlService.ExecuteSqlQuery:input_type -> chalk.protosql.v1.ExecuteSqlQueryRequest
	2,  // 9: chalk.protosql.v1.SqlService.PlanSqlQuery:input_type -> chalk.protosql.v1.PlanSqlQueryRequest
	4,  // 10: chalk.protosql.v1.SqlService.GetDbCatalogs:input_type -> chalk.protosql.v1.GetDbCatalogsRequest
	6,  // 11: chalk.protosql.v1.SqlService.GetDbSchemas:input_type -> chalk.protosql.v1.GetDbSchemasRequest
	9,  // 12: chalk.protosql.v1.SqlService.GetTables:input_type -> chalk.protosql.v1.GetTablesRequest
	1,  // 13: chalk.protosql.v1.SqlService.ExecuteSqlQuery:output_type -> chalk.protosql.v1.ExecuteSqlQueryResponse
	3,  // 14: chalk.protosql.v1.SqlService.PlanSqlQuery:output_type -> chalk.protosql.v1.PlanSqlQueryResponse
	5,  // 15: chalk.protosql.v1.SqlService.GetDbCatalogs:output_type -> chalk.protosql.v1.GetDbCatalogsResponse
	8,  // 16: chalk.protosql.v1.SqlService.GetDbSchemas:output_type -> chalk.protosql.v1.GetDbSchemasResponse
	11, // 17: chalk.protosql.v1.SqlService.GetTables:output_type -> chalk.protosql.v1.GetTablesResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_chalk_protosql_v1_sql_service_proto_init() }
func file_chalk_protosql_v1_sql_service_proto_init() {
	if File_chalk_protosql_v1_sql_service_proto != nil {
		return
	}
	file_chalk_protosql_v1_sql_service_proto_msgTypes[1].OneofWrappers = []any{
		(*ExecuteSqlQueryResponse_Parquet)(nil),
	}
	file_chalk_protosql_v1_sql_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_chalk_protosql_v1_sql_service_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_protosql_v1_sql_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_protosql_v1_sql_service_proto_goTypes,
		DependencyIndexes: file_chalk_protosql_v1_sql_service_proto_depIdxs,
		MessageInfos:      file_chalk_protosql_v1_sql_service_proto_msgTypes,
	}.Build()
	File_chalk_protosql_v1_sql_service_proto = out.File
	file_chalk_protosql_v1_sql_service_proto_rawDesc = nil
	file_chalk_protosql_v1_sql_service_proto_goTypes = nil
	file_chalk_protosql_v1_sql_service_proto_depIdxs = nil
}
