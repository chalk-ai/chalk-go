// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/protosql/v1/sql_service.proto

package protosqlv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecuteSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ExecuteSqlQueryRequest) Reset() {
	*x = ExecuteSqlQueryRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlQueryRequest) ProtoMessage() {}

func (x *ExecuteSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteSqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ExecuteSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ExecuteSqlQueryResponse_Parquet
	Payload isExecuteSqlQueryResponse_Payload `protobuf_oneof:"payload"`
}

func (x *ExecuteSqlQueryResponse) Reset() {
	*x = ExecuteSqlQueryResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlQueryResponse) ProtoMessage() {}

func (x *ExecuteSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteSqlQueryResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (m *ExecuteSqlQueryResponse) GetPayload() isExecuteSqlQueryResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ExecuteSqlQueryResponse) GetParquet() []byte {
	if x, ok := x.GetPayload().(*ExecuteSqlQueryResponse_Parquet); ok {
		return x.Parquet
	}
	return nil
}

type isExecuteSqlQueryResponse_Payload interface {
	isExecuteSqlQueryResponse_Payload()
}

type ExecuteSqlQueryResponse_Parquet struct {
	Parquet []byte `protobuf:"bytes,2,opt,name=parquet,proto3,oneof"`
}

func (*ExecuteSqlQueryResponse_Parquet) isExecuteSqlQueryResponse_Payload() {}

type PlanSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *PlanSqlQueryRequest) Reset() {
	*x = PlanSqlQueryRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanSqlQueryRequest) ProtoMessage() {}

func (x *PlanSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*PlanSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{2}
}

func (x *PlanSqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type PlanSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicalPlan string `protobuf:"bytes,1,opt,name=logical_plan,json=logicalPlan,proto3" json:"logical_plan,omitempty"`
}

func (x *PlanSqlQueryResponse) Reset() {
	*x = PlanSqlQueryResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanSqlQueryResponse) ProtoMessage() {}

func (x *PlanSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*PlanSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{3}
}

func (x *PlanSqlQueryResponse) GetLogicalPlan() string {
	if x != nil {
		return x.LogicalPlan
	}
	return ""
}

var File_chalk_protosql_v1_sql_service_proto protoreflect.FileDescriptor

var file_chalk_protosql_v1_sql_service_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x5b, 0x0a, 0x17, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x39, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x32, 0xe1,
	0x01, 0x0a, 0x0a, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a,
	0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80, 0x7d, 0x03, 0x12, 0x64, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x80,
	0x7d, 0x03, 0x42, 0xcd, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x53, 0x71,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x50, 0x58, 0xaa, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x71, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x43,
	0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_protosql_v1_sql_service_proto_rawDescOnce sync.Once
	file_chalk_protosql_v1_sql_service_proto_rawDescData = file_chalk_protosql_v1_sql_service_proto_rawDesc
)

func file_chalk_protosql_v1_sql_service_proto_rawDescGZIP() []byte {
	file_chalk_protosql_v1_sql_service_proto_rawDescOnce.Do(func() {
		file_chalk_protosql_v1_sql_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_protosql_v1_sql_service_proto_rawDescData)
	})
	return file_chalk_protosql_v1_sql_service_proto_rawDescData
}

var file_chalk_protosql_v1_sql_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chalk_protosql_v1_sql_service_proto_goTypes = []any{
	(*ExecuteSqlQueryRequest)(nil),  // 0: chalk.protosql.v1.ExecuteSqlQueryRequest
	(*ExecuteSqlQueryResponse)(nil), // 1: chalk.protosql.v1.ExecuteSqlQueryResponse
	(*PlanSqlQueryRequest)(nil),     // 2: chalk.protosql.v1.PlanSqlQueryRequest
	(*PlanSqlQueryResponse)(nil),    // 3: chalk.protosql.v1.PlanSqlQueryResponse
}
var file_chalk_protosql_v1_sql_service_proto_depIdxs = []int32{
	0, // 0: chalk.protosql.v1.SqlService.ExecuteSqlQuery:input_type -> chalk.protosql.v1.ExecuteSqlQueryRequest
	2, // 1: chalk.protosql.v1.SqlService.PlanSqlQuery:input_type -> chalk.protosql.v1.PlanSqlQueryRequest
	1, // 2: chalk.protosql.v1.SqlService.ExecuteSqlQuery:output_type -> chalk.protosql.v1.ExecuteSqlQueryResponse
	3, // 3: chalk.protosql.v1.SqlService.PlanSqlQuery:output_type -> chalk.protosql.v1.PlanSqlQueryResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chalk_protosql_v1_sql_service_proto_init() }
func file_chalk_protosql_v1_sql_service_proto_init() {
	if File_chalk_protosql_v1_sql_service_proto != nil {
		return
	}
	file_chalk_protosql_v1_sql_service_proto_msgTypes[1].OneofWrappers = []any{
		(*ExecuteSqlQueryResponse_Parquet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_protosql_v1_sql_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_protosql_v1_sql_service_proto_goTypes,
		DependencyIndexes: file_chalk_protosql_v1_sql_service_proto_depIdxs,
		MessageInfos:      file_chalk_protosql_v1_sql_service_proto_msgTypes,
	}.Build()
	File_chalk_protosql_v1_sql_service_proto = out.File
	file_chalk_protosql_v1_sql_service_proto_rawDesc = nil
	file_chalk_protosql_v1_sql_service_proto_goTypes = nil
	file_chalk_protosql_v1_sql_service_proto_depIdxs = nil
}
