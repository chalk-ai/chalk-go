// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/protosql/v1/sql_service.proto

package protosqlv1

import (
	_ "github.com/chalk-ai/chalk-go/gen/chalk/auth/v1"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecuteSqlQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteSqlQueryRequest) Reset() {
	*x = ExecuteSqlQueryRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlQueryRequest) ProtoMessage() {}

func (x *ExecuteSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{0}
}

func (x *ExecuteSqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ExecuteSqlQueryResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	QueryId string                 `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ExecuteSqlQueryResponse_Parquet
	Payload       isExecuteSqlQueryResponse_Payload `protobuf_oneof:"payload"`
	Errors        []*v1.ChalkError                  `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteSqlQueryResponse) Reset() {
	*x = ExecuteSqlQueryResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlQueryResponse) ProtoMessage() {}

func (x *ExecuteSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteSqlQueryResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *ExecuteSqlQueryResponse) GetPayload() isExecuteSqlQueryResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ExecuteSqlQueryResponse) GetParquet() []byte {
	if x != nil {
		if x, ok := x.Payload.(*ExecuteSqlQueryResponse_Parquet); ok {
			return x.Parquet
		}
	}
	return nil
}

func (x *ExecuteSqlQueryResponse) GetErrors() []*v1.ChalkError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type isExecuteSqlQueryResponse_Payload interface {
	isExecuteSqlQueryResponse_Payload()
}

type ExecuteSqlQueryResponse_Parquet struct {
	Parquet []byte `protobuf:"bytes,2,opt,name=parquet,proto3,oneof"`
}

func (*ExecuteSqlQueryResponse_Parquet) isExecuteSqlQueryResponse_Payload() {}

type PlanSqlQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanSqlQueryRequest) Reset() {
	*x = PlanSqlQueryRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanSqlQueryRequest) ProtoMessage() {}

func (x *PlanSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*PlanSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{2}
}

func (x *PlanSqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type PlanSqlQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogicalPlan   string                 `protobuf:"bytes,1,opt,name=logical_plan,json=logicalPlan,proto3" json:"logical_plan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanSqlQueryResponse) Reset() {
	*x = PlanSqlQueryResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanSqlQueryResponse) ProtoMessage() {}

func (x *PlanSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*PlanSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{3}
}

func (x *PlanSqlQueryResponse) GetLogicalPlan() string {
	if x != nil {
		return x.LogicalPlan
	}
	return ""
}

type GetDbSchemasRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Catalog               *string                `protobuf:"bytes,1,opt,name=catalog,proto3,oneof" json:"catalog,omitempty"`
	DbSchemaFilterPattern *string                `protobuf:"bytes,2,opt,name=db_schema_filter_pattern,json=dbSchemaFilterPattern,proto3,oneof" json:"db_schema_filter_pattern,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetDbSchemasRequest) Reset() {
	*x = GetDbSchemasRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDbSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDbSchemasRequest) ProtoMessage() {}

func (x *GetDbSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDbSchemasRequest.ProtoReflect.Descriptor instead.
func (*GetDbSchemasRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetDbSchemasRequest) GetCatalog() string {
	if x != nil && x.Catalog != nil {
		return *x.Catalog
	}
	return ""
}

func (x *GetDbSchemasRequest) GetDbSchemaFilterPattern() string {
	if x != nil && x.DbSchemaFilterPattern != nil {
		return *x.DbSchemaFilterPattern
	}
	return ""
}

type DbSchemaInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CatalogName   string                 `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	DbSchemaName  string                 `protobuf:"bytes,2,opt,name=db_schema_name,json=dbSchemaName,proto3" json:"db_schema_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbSchemaInfo) Reset() {
	*x = DbSchemaInfo{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSchemaInfo) ProtoMessage() {}

func (x *DbSchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSchemaInfo.ProtoReflect.Descriptor instead.
func (*DbSchemaInfo) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{5}
}

func (x *DbSchemaInfo) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *DbSchemaInfo) GetDbSchemaName() string {
	if x != nil {
		return x.DbSchemaName
	}
	return ""
}

type GetDbSchemasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schemas       []*DbSchemaInfo        `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDbSchemasResponse) Reset() {
	*x = GetDbSchemasResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDbSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDbSchemasResponse) ProtoMessage() {}

func (x *GetDbSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDbSchemasResponse.ProtoReflect.Descriptor instead.
func (*GetDbSchemasResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetDbSchemasResponse) GetSchemas() []*DbSchemaInfo {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type GetTablesRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Catalog                *string                `protobuf:"bytes,1,opt,name=catalog,proto3,oneof" json:"catalog,omitempty"`
	DbSchemaFilterPattern  *string                `protobuf:"bytes,2,opt,name=db_schema_filter_pattern,json=dbSchemaFilterPattern,proto3,oneof" json:"db_schema_filter_pattern,omitempty"`
	TableNameFilterPattern *string                `protobuf:"bytes,3,opt,name=table_name_filter_pattern,json=tableNameFilterPattern,proto3,oneof" json:"table_name_filter_pattern,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetTablesRequest) Reset() {
	*x = GetTablesRequest{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesRequest) ProtoMessage() {}

func (x *GetTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesRequest.ProtoReflect.Descriptor instead.
func (*GetTablesRequest) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetTablesRequest) GetCatalog() string {
	if x != nil && x.Catalog != nil {
		return *x.Catalog
	}
	return ""
}

func (x *GetTablesRequest) GetDbSchemaFilterPattern() string {
	if x != nil && x.DbSchemaFilterPattern != nil {
		return *x.DbSchemaFilterPattern
	}
	return ""
}

func (x *GetTablesRequest) GetTableNameFilterPattern() string {
	if x != nil && x.TableNameFilterPattern != nil {
		return *x.TableNameFilterPattern
	}
	return ""
}

type TableInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CatalogName   string                 `protobuf:"bytes,1,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	DbSchemaName  string                 `protobuf:"bytes,2,opt,name=db_schema_name,json=dbSchemaName,proto3" json:"db_schema_name,omitempty"`
	TableName     string                 `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{8}
}

func (x *TableInfo) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *TableInfo) GetDbSchemaName() string {
	if x != nil {
		return x.DbSchemaName
	}
	return ""
}

func (x *TableInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type GetTablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        []*TableInfo           `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTablesResponse) Reset() {
	*x = GetTablesResponse{}
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablesResponse) ProtoMessage() {}

func (x *GetTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_protosql_v1_sql_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablesResponse.ProtoReflect.Descriptor instead.
func (*GetTablesResponse) Descriptor() ([]byte, []int) {
	return file_chalk_protosql_v1_sql_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTablesResponse) GetTables() []*TableInfo {
	if x != nil {
		return x.Tables
	}
	return nil
}

var File_chalk_protosql_v1_sql_service_proto protoreflect.FileDescriptor

const file_chalk_protosql_v1_sql_service_proto_rawDesc = "" +
	"\n" +
	"#chalk/protosql/v1/sql_service.proto\x12\x11chalk.protosql.v1\x1a\x1fchalk/auth/v1/permissions.proto\x1a!chalk/common/v1/chalk_error.proto\".\n" +
	"\x16ExecuteSqlQueryRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\"\x90\x01\n" +
	"\x17ExecuteSqlQueryResponse\x12\x19\n" +
	"\bquery_id\x18\x01 \x01(\tR\aqueryId\x12\x1a\n" +
	"\aparquet\x18\x02 \x01(\fH\x00R\aparquet\x123\n" +
	"\x06errors\x18\x03 \x03(\v2\x1b.chalk.common.v1.ChalkErrorR\x06errorsB\t\n" +
	"\apayload\"+\n" +
	"\x13PlanSqlQueryRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\"9\n" +
	"\x14PlanSqlQueryResponse\x12!\n" +
	"\flogical_plan\x18\x01 \x01(\tR\vlogicalPlan\"\x9b\x01\n" +
	"\x13GetDbSchemasRequest\x12\x1d\n" +
	"\acatalog\x18\x01 \x01(\tH\x00R\acatalog\x88\x01\x01\x12<\n" +
	"\x18db_schema_filter_pattern\x18\x02 \x01(\tH\x01R\x15dbSchemaFilterPattern\x88\x01\x01B\n" +
	"\n" +
	"\b_catalogB\x1b\n" +
	"\x19_db_schema_filter_pattern\"W\n" +
	"\fDbSchemaInfo\x12!\n" +
	"\fcatalog_name\x18\x01 \x01(\tR\vcatalogName\x12$\n" +
	"\x0edb_schema_name\x18\x02 \x01(\tR\fdbSchemaName\"Q\n" +
	"\x14GetDbSchemasResponse\x129\n" +
	"\aschemas\x18\x01 \x03(\v2\x1f.chalk.protosql.v1.DbSchemaInfoR\aschemas\"\xf6\x01\n" +
	"\x10GetTablesRequest\x12\x1d\n" +
	"\acatalog\x18\x01 \x01(\tH\x00R\acatalog\x88\x01\x01\x12<\n" +
	"\x18db_schema_filter_pattern\x18\x02 \x01(\tH\x01R\x15dbSchemaFilterPattern\x88\x01\x01\x12>\n" +
	"\x19table_name_filter_pattern\x18\x03 \x01(\tH\x02R\x16tableNameFilterPattern\x88\x01\x01B\n" +
	"\n" +
	"\b_catalogB\x1b\n" +
	"\x19_db_schema_filter_patternB\x1c\n" +
	"\x1a_table_name_filter_pattern\"s\n" +
	"\tTableInfo\x12!\n" +
	"\fcatalog_name\x18\x01 \x01(\tR\vcatalogName\x12$\n" +
	"\x0edb_schema_name\x18\x02 \x01(\tR\fdbSchemaName\x12\x1d\n" +
	"\n" +
	"table_name\x18\x03 \x01(\tR\ttableName\"I\n" +
	"\x11GetTablesResponse\x124\n" +
	"\x06tables\x18\x01 \x03(\v2\x1c.chalk.protosql.v1.TableInfoR\x06tables2\xa4\x03\n" +
	"\n" +
	"SqlService\x12m\n" +
	"\x0fExecuteSqlQuery\x12).chalk.protosql.v1.ExecuteSqlQueryRequest\x1a*.chalk.protosql.v1.ExecuteSqlQueryResponse\"\x03\x80}\x03\x12d\n" +
	"\fPlanSqlQuery\x12&.chalk.protosql.v1.PlanSqlQueryRequest\x1a'.chalk.protosql.v1.PlanSqlQueryResponse\"\x03\x80}\x03\x12d\n" +
	"\fGetDbSchemas\x12&.chalk.protosql.v1.GetDbSchemasRequest\x1a'.chalk.protosql.v1.GetDbSchemasResponse\"\x03\x80}\v\x12[\n" +
	"\tGetTables\x12#.chalk.protosql.v1.GetTablesRequest\x1a$.chalk.protosql.v1.GetTablesResponse\"\x03\x80}\vB\xcd\x01\n" +
	"\x15com.chalk.protosql.v1B\x0fSqlServiceProtoP\x01Z=github.com/chalk-ai/chalk-go/gen/chalk/protosql/v1;protosqlv1\xa2\x02\x03CPX\xaa\x02\x11Chalk.Protosql.V1\xca\x02\x11Chalk\\Protosql\\V1\xe2\x02\x1dChalk\\Protosql\\V1\\GPBMetadata\xea\x02\x13Chalk::Protosql::V1b\x06proto3"

var (
	file_chalk_protosql_v1_sql_service_proto_rawDescOnce sync.Once
	file_chalk_protosql_v1_sql_service_proto_rawDescData []byte
)

func file_chalk_protosql_v1_sql_service_proto_rawDescGZIP() []byte {
	file_chalk_protosql_v1_sql_service_proto_rawDescOnce.Do(func() {
		file_chalk_protosql_v1_sql_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_protosql_v1_sql_service_proto_rawDesc), len(file_chalk_protosql_v1_sql_service_proto_rawDesc)))
	})
	return file_chalk_protosql_v1_sql_service_proto_rawDescData
}

var file_chalk_protosql_v1_sql_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chalk_protosql_v1_sql_service_proto_goTypes = []any{
	(*ExecuteSqlQueryRequest)(nil),  // 0: chalk.protosql.v1.ExecuteSqlQueryRequest
	(*ExecuteSqlQueryResponse)(nil), // 1: chalk.protosql.v1.ExecuteSqlQueryResponse
	(*PlanSqlQueryRequest)(nil),     // 2: chalk.protosql.v1.PlanSqlQueryRequest
	(*PlanSqlQueryResponse)(nil),    // 3: chalk.protosql.v1.PlanSqlQueryResponse
	(*GetDbSchemasRequest)(nil),     // 4: chalk.protosql.v1.GetDbSchemasRequest
	(*DbSchemaInfo)(nil),            // 5: chalk.protosql.v1.DbSchemaInfo
	(*GetDbSchemasResponse)(nil),    // 6: chalk.protosql.v1.GetDbSchemasResponse
	(*GetTablesRequest)(nil),        // 7: chalk.protosql.v1.GetTablesRequest
	(*TableInfo)(nil),               // 8: chalk.protosql.v1.TableInfo
	(*GetTablesResponse)(nil),       // 9: chalk.protosql.v1.GetTablesResponse
	(*v1.ChalkError)(nil),           // 10: chalk.common.v1.ChalkError
}
var file_chalk_protosql_v1_sql_service_proto_depIdxs = []int32{
	10, // 0: chalk.protosql.v1.ExecuteSqlQueryResponse.errors:type_name -> chalk.common.v1.ChalkError
	5,  // 1: chalk.protosql.v1.GetDbSchemasResponse.schemas:type_name -> chalk.protosql.v1.DbSchemaInfo
	8,  // 2: chalk.protosql.v1.GetTablesResponse.tables:type_name -> chalk.protosql.v1.TableInfo
	0,  // 3: chalk.protosql.v1.SqlService.ExecuteSqlQuery:input_type -> chalk.protosql.v1.ExecuteSqlQueryRequest
	2,  // 4: chalk.protosql.v1.SqlService.PlanSqlQuery:input_type -> chalk.protosql.v1.PlanSqlQueryRequest
	4,  // 5: chalk.protosql.v1.SqlService.GetDbSchemas:input_type -> chalk.protosql.v1.GetDbSchemasRequest
	7,  // 6: chalk.protosql.v1.SqlService.GetTables:input_type -> chalk.protosql.v1.GetTablesRequest
	1,  // 7: chalk.protosql.v1.SqlService.ExecuteSqlQuery:output_type -> chalk.protosql.v1.ExecuteSqlQueryResponse
	3,  // 8: chalk.protosql.v1.SqlService.PlanSqlQuery:output_type -> chalk.protosql.v1.PlanSqlQueryResponse
	6,  // 9: chalk.protosql.v1.SqlService.GetDbSchemas:output_type -> chalk.protosql.v1.GetDbSchemasResponse
	9,  // 10: chalk.protosql.v1.SqlService.GetTables:output_type -> chalk.protosql.v1.GetTablesResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_chalk_protosql_v1_sql_service_proto_init() }
func file_chalk_protosql_v1_sql_service_proto_init() {
	if File_chalk_protosql_v1_sql_service_proto != nil {
		return
	}
	file_chalk_protosql_v1_sql_service_proto_msgTypes[1].OneofWrappers = []any{
		(*ExecuteSqlQueryResponse_Parquet)(nil),
	}
	file_chalk_protosql_v1_sql_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_protosql_v1_sql_service_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_protosql_v1_sql_service_proto_rawDesc), len(file_chalk_protosql_v1_sql_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chalk_protosql_v1_sql_service_proto_goTypes,
		DependencyIndexes: file_chalk_protosql_v1_sql_service_proto_depIdxs,
		MessageInfos:      file_chalk_protosql_v1_sql_service_proto_msgTypes,
	}.Build()
	File_chalk_protosql_v1_sql_service_proto = out.File
	file_chalk_protosql_v1_sql_service_proto_goTypes = nil
	file_chalk_protosql_v1_sql_service_proto_depIdxs = nil
}
