// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chalk/protosql/v1/sql_service.proto

package protosqlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/protosql/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SqlServiceName is the fully-qualified name of the SqlService service.
	SqlServiceName = "chalk.protosql.v1.SqlService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SqlServiceExecuteSqlQueryProcedure is the fully-qualified name of the SqlService's
	// ExecuteSqlQuery RPC.
	SqlServiceExecuteSqlQueryProcedure = "/chalk.protosql.v1.SqlService/ExecuteSqlQuery"
	// SqlServicePlanSqlQueryProcedure is the fully-qualified name of the SqlService's PlanSqlQuery RPC.
	SqlServicePlanSqlQueryProcedure = "/chalk.protosql.v1.SqlService/PlanSqlQuery"
)

// SqlServiceClient is a client for the chalk.protosql.v1.SqlService service.
type SqlServiceClient interface {
	ExecuteSqlQuery(context.Context, *connect.Request[v1.ExecuteSqlQueryRequest]) (*connect.Response[v1.ExecuteSqlQueryResponse], error)
	PlanSqlQuery(context.Context, *connect.Request[v1.PlanSqlQueryRequest]) (*connect.Response[v1.PlanSqlQueryResponse], error)
}

// NewSqlServiceClient constructs a client for the chalk.protosql.v1.SqlService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSqlServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SqlServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sqlServiceMethods := v1.File_chalk_protosql_v1_sql_service_proto.Services().ByName("SqlService").Methods()
	return &sqlServiceClient{
		executeSqlQuery: connect.NewClient[v1.ExecuteSqlQueryRequest, v1.ExecuteSqlQueryResponse](
			httpClient,
			baseURL+SqlServiceExecuteSqlQueryProcedure,
			connect.WithSchema(sqlServiceMethods.ByName("ExecuteSqlQuery")),
			connect.WithClientOptions(opts...),
		),
		planSqlQuery: connect.NewClient[v1.PlanSqlQueryRequest, v1.PlanSqlQueryResponse](
			httpClient,
			baseURL+SqlServicePlanSqlQueryProcedure,
			connect.WithSchema(sqlServiceMethods.ByName("PlanSqlQuery")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sqlServiceClient implements SqlServiceClient.
type sqlServiceClient struct {
	executeSqlQuery *connect.Client[v1.ExecuteSqlQueryRequest, v1.ExecuteSqlQueryResponse]
	planSqlQuery    *connect.Client[v1.PlanSqlQueryRequest, v1.PlanSqlQueryResponse]
}

// ExecuteSqlQuery calls chalk.protosql.v1.SqlService.ExecuteSqlQuery.
func (c *sqlServiceClient) ExecuteSqlQuery(ctx context.Context, req *connect.Request[v1.ExecuteSqlQueryRequest]) (*connect.Response[v1.ExecuteSqlQueryResponse], error) {
	return c.executeSqlQuery.CallUnary(ctx, req)
}

// PlanSqlQuery calls chalk.protosql.v1.SqlService.PlanSqlQuery.
func (c *sqlServiceClient) PlanSqlQuery(ctx context.Context, req *connect.Request[v1.PlanSqlQueryRequest]) (*connect.Response[v1.PlanSqlQueryResponse], error) {
	return c.planSqlQuery.CallUnary(ctx, req)
}

// SqlServiceHandler is an implementation of the chalk.protosql.v1.SqlService service.
type SqlServiceHandler interface {
	ExecuteSqlQuery(context.Context, *connect.Request[v1.ExecuteSqlQueryRequest]) (*connect.Response[v1.ExecuteSqlQueryResponse], error)
	PlanSqlQuery(context.Context, *connect.Request[v1.PlanSqlQueryRequest]) (*connect.Response[v1.PlanSqlQueryResponse], error)
}

// NewSqlServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSqlServiceHandler(svc SqlServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sqlServiceMethods := v1.File_chalk_protosql_v1_sql_service_proto.Services().ByName("SqlService").Methods()
	sqlServiceExecuteSqlQueryHandler := connect.NewUnaryHandler(
		SqlServiceExecuteSqlQueryProcedure,
		svc.ExecuteSqlQuery,
		connect.WithSchema(sqlServiceMethods.ByName("ExecuteSqlQuery")),
		connect.WithHandlerOptions(opts...),
	)
	sqlServicePlanSqlQueryHandler := connect.NewUnaryHandler(
		SqlServicePlanSqlQueryProcedure,
		svc.PlanSqlQuery,
		connect.WithSchema(sqlServiceMethods.ByName("PlanSqlQuery")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chalk.protosql.v1.SqlService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SqlServiceExecuteSqlQueryProcedure:
			sqlServiceExecuteSqlQueryHandler.ServeHTTP(w, r)
		case SqlServicePlanSqlQueryProcedure:
			sqlServicePlanSqlQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSqlServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSqlServiceHandler struct{}

func (UnimplementedSqlServiceHandler) ExecuteSqlQuery(context.Context, *connect.Request[v1.ExecuteSqlQueryRequest]) (*connect.Response[v1.ExecuteSqlQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.protosql.v1.SqlService.ExecuteSqlQuery is not implemented"))
}

func (UnimplementedSqlServiceHandler) PlanSqlQuery(context.Context, *connect.Request[v1.PlanSqlQueryRequest]) (*connect.Response[v1.PlanSqlQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chalk.protosql.v1.SqlService.PlanSqlQuery is not implemented"))
}
