// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: chalk/nodepools/v1/karpenter.proto

package nodepoolsv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/kubernetes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KarpenterNodepoolDisruptionBudget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         string                 `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Schedule      *string                `protobuf:"bytes,2,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	Duration      *durationpb.Duration   `protobuf:"bytes,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodepoolDisruptionBudget) Reset() {
	*x = KarpenterNodepoolDisruptionBudget{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolDisruptionBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolDisruptionBudget) ProtoMessage() {}

func (x *KarpenterNodepoolDisruptionBudget) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolDisruptionBudget.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolDisruptionBudget) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{0}
}

func (x *KarpenterNodepoolDisruptionBudget) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *KarpenterNodepoolDisruptionBudget) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *KarpenterNodepoolDisruptionBudget) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type KarpenterNodepoolDisruption struct {
	state               protoimpl.MessageState               `protogen:"open.v1"`
	ConsolidateAfter    *durationpb.Duration                 `protobuf:"bytes,1,opt,name=consolidate_after,json=consolidateAfter,proto3,oneof" json:"consolidate_after,omitempty"`
	ConsolidationPolicy *string                              `protobuf:"bytes,2,opt,name=consolidation_policy,json=consolidationPolicy,proto3,oneof" json:"consolidation_policy,omitempty"`
	Budgets             []*KarpenterNodepoolDisruptionBudget `protobuf:"bytes,3,rep,name=budgets,proto3" json:"budgets,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *KarpenterNodepoolDisruption) Reset() {
	*x = KarpenterNodepoolDisruption{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolDisruption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolDisruption) ProtoMessage() {}

func (x *KarpenterNodepoolDisruption) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolDisruption.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolDisruption) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{1}
}

func (x *KarpenterNodepoolDisruption) GetConsolidateAfter() *durationpb.Duration {
	if x != nil {
		return x.ConsolidateAfter
	}
	return nil
}

func (x *KarpenterNodepoolDisruption) GetConsolidationPolicy() string {
	if x != nil && x.ConsolidationPolicy != nil {
		return *x.ConsolidationPolicy
	}
	return ""
}

func (x *KarpenterNodepoolDisruption) GetBudgets() []*KarpenterNodepoolDisruptionBudget {
	if x != nil {
		return x.Budgets
	}
	return nil
}

type KarpenterNodeClassRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind          *string                `protobuf:"bytes,2,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	Group         *string                `protobuf:"bytes,3,opt,name=group,proto3,oneof" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodeClassRef) Reset() {
	*x = KarpenterNodeClassRef{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodeClassRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodeClassRef) ProtoMessage() {}

func (x *KarpenterNodeClassRef) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodeClassRef.ProtoReflect.Descriptor instead.
func (*KarpenterNodeClassRef) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{2}
}

func (x *KarpenterNodeClassRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KarpenterNodeClassRef) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *KarpenterNodeClassRef) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

type KarpenterNodeSelectorRequirement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Values        []string               `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodeSelectorRequirement) Reset() {
	*x = KarpenterNodeSelectorRequirement{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodeSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodeSelectorRequirement) ProtoMessage() {}

func (x *KarpenterNodeSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodeSelectorRequirement.ProtoReflect.Descriptor instead.
func (*KarpenterNodeSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{3}
}

func (x *KarpenterNodeSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KarpenterNodeSelectorRequirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *KarpenterNodeSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type KarpenterNodepoolTemplateSpec struct {
	state                  protoimpl.MessageState              `protogen:"open.v1"`
	Taints                 []*v1.KubernetesNodeTaint           `protobuf:"bytes,1,rep,name=taints,proto3" json:"taints,omitempty"`
	StartupTaints          []*v1.KubernetesNodeTaint           `protobuf:"bytes,2,rep,name=startup_taints,json=startupTaints,proto3" json:"startup_taints,omitempty"`
	Requirements           []*KarpenterNodeSelectorRequirement `protobuf:"bytes,3,rep,name=requirements,proto3" json:"requirements,omitempty"`
	NodeClassRef           *KarpenterNodeClassRef              `protobuf:"bytes,4,opt,name=node_class_ref,json=nodeClassRef,proto3" json:"node_class_ref,omitempty"`
	ExpireAfter            *durationpb.Duration                `protobuf:"bytes,5,opt,name=expire_after,json=expireAfter,proto3,oneof" json:"expire_after,omitempty"`
	TerminationGracePeriod *durationpb.Duration                `protobuf:"bytes,6,opt,name=termination_grace_period,json=terminationGracePeriod,proto3,oneof" json:"termination_grace_period,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *KarpenterNodepoolTemplateSpec) Reset() {
	*x = KarpenterNodepoolTemplateSpec{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolTemplateSpec) ProtoMessage() {}

func (x *KarpenterNodepoolTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolTemplateSpec.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolTemplateSpec) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{4}
}

func (x *KarpenterNodepoolTemplateSpec) GetTaints() []*v1.KubernetesNodeTaint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetStartupTaints() []*v1.KubernetesNodeTaint {
	if x != nil {
		return x.StartupTaints
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetRequirements() []*KarpenterNodeSelectorRequirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetNodeClassRef() *KarpenterNodeClassRef {
	if x != nil {
		return x.NodeClassRef
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetExpireAfter() *durationpb.Duration {
	if x != nil {
		return x.ExpireAfter
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetTerminationGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.TerminationGracePeriod
	}
	return nil
}

type KarpenterNodepoolTemplateMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Labels        map[string]string      `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations   map[string]string      `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodepoolTemplateMetadata) Reset() {
	*x = KarpenterNodepoolTemplateMetadata{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolTemplateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolTemplateMetadata) ProtoMessage() {}

func (x *KarpenterNodepoolTemplateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolTemplateMetadata.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolTemplateMetadata) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{5}
}

func (x *KarpenterNodepoolTemplateMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KarpenterNodepoolTemplateMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type KarpenterNodepoolTemplate struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Metadata      *KarpenterNodepoolTemplateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *KarpenterNodepoolTemplateSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodepoolTemplate) Reset() {
	*x = KarpenterNodepoolTemplate{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolTemplate) ProtoMessage() {}

func (x *KarpenterNodepoolTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolTemplate.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolTemplate) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{6}
}

func (x *KarpenterNodepoolTemplate) GetMetadata() *KarpenterNodepoolTemplateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KarpenterNodepoolTemplate) GetSpec() *KarpenterNodepoolTemplateSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type KarpenterNodepoolSpec struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Disruption    *KarpenterNodepoolDisruption `protobuf:"bytes,1,opt,name=disruption,proto3" json:"disruption,omitempty"`
	Template      *KarpenterNodepoolTemplate   `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Limits        map[string]string            `protobuf:"bytes,3,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Weight        *int32                       `protobuf:"varint,4,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodepoolSpec) Reset() {
	*x = KarpenterNodepoolSpec{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolSpec) ProtoMessage() {}

func (x *KarpenterNodepoolSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolSpec.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolSpec) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{7}
}

func (x *KarpenterNodepoolSpec) GetDisruption() *KarpenterNodepoolDisruption {
	if x != nil {
		return x.Disruption
	}
	return nil
}

func (x *KarpenterNodepoolSpec) GetTemplate() *KarpenterNodepoolTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *KarpenterNodepoolSpec) GetLimits() map[string]string {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *KarpenterNodepoolSpec) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type KarpenterNodepoolMetadata struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Annotations       map[string]string      `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	Generation        int64                  `protobuf:"varint,3,opt,name=generation,proto3" json:"generation,omitempty"`
	Name              string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ResourceVersion   string                 `protobuf:"bytes,5,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Uid               string                 `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	Labels            map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KarpenterNodepoolMetadata) Reset() {
	*x = KarpenterNodepoolMetadata{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolMetadata) ProtoMessage() {}

func (x *KarpenterNodepoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolMetadata.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolMetadata) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{8}
}

func (x *KarpenterNodepoolMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *KarpenterNodepoolMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *KarpenterNodepoolMetadata) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *KarpenterNodepoolMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KarpenterNodepoolMetadata) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *KarpenterNodepoolMetadata) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *KarpenterNodepoolMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type KarpenterNodepoolCondition struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Type               string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	LastTransitionTime int64                  `protobuf:"varint,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	Reason             *string                `protobuf:"bytes,5,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	Message            *string                `protobuf:"bytes,6,opt,name=message,proto3,oneof" json:"message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KarpenterNodepoolCondition) Reset() {
	*x = KarpenterNodepoolCondition{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolCondition) ProtoMessage() {}

func (x *KarpenterNodepoolCondition) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolCondition.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolCondition) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{9}
}

func (x *KarpenterNodepoolCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KarpenterNodepoolCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KarpenterNodepoolCondition) GetLastTransitionTime() int64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *KarpenterNodepoolCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *KarpenterNodepoolCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type KarpenterNodepoolStatus struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Resources     map[string]string             `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Conditions    []*KarpenterNodepoolCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodepoolStatus) Reset() {
	*x = KarpenterNodepoolStatus{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolStatus) ProtoMessage() {}

func (x *KarpenterNodepoolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolStatus.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolStatus) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{10}
}

func (x *KarpenterNodepoolStatus) GetResources() map[string]string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *KarpenterNodepoolStatus) GetConditions() []*KarpenterNodepoolCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type KarpenterNodepool struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	ApiVersion    string                     `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Kind          string                     `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata      *KarpenterNodepoolMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *KarpenterNodepoolSpec     `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *KarpenterNodepoolStatus   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KarpenterNodepool) Reset() {
	*x = KarpenterNodepool{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepool) ProtoMessage() {}

func (x *KarpenterNodepool) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepool.ProtoReflect.Descriptor instead.
func (*KarpenterNodepool) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{11}
}

func (x *KarpenterNodepool) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *KarpenterNodepool) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KarpenterNodepool) GetMetadata() *KarpenterNodepoolMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KarpenterNodepool) GetSpec() *KarpenterNodepoolSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *KarpenterNodepool) GetStatus() *KarpenterNodepoolStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_chalk_nodepools_v1_karpenter_proto protoreflect.FileDescriptor

const file_chalk_nodepools_v1_karpenter_proto_rawDesc = "" +
	"\n" +
	"\"chalk/nodepools/v1/karpenter.proto\x12\x12chalk.nodepools.v1\x1a\x1fchalk/kubernetes/v1/nodes.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb0\x01\n" +
	"!KarpenterNodepoolDisruptionBudget\x12\x14\n" +
	"\x05nodes\x18\x01 \x01(\tR\x05nodes\x12\x1f\n" +
	"\bschedule\x18\x02 \x01(\tH\x00R\bschedule\x88\x01\x01\x12:\n" +
	"\bduration\x18\x03 \x01(\v2\x19.google.protobuf.DurationH\x01R\bduration\x88\x01\x01B\v\n" +
	"\t_scheduleB\v\n" +
	"\t_duration\"\xa2\x02\n" +
	"\x1bKarpenterNodepoolDisruption\x12K\n" +
	"\x11consolidate_after\x18\x01 \x01(\v2\x19.google.protobuf.DurationH\x00R\x10consolidateAfter\x88\x01\x01\x126\n" +
	"\x14consolidation_policy\x18\x02 \x01(\tH\x01R\x13consolidationPolicy\x88\x01\x01\x12O\n" +
	"\abudgets\x18\x03 \x03(\v25.chalk.nodepools.v1.KarpenterNodepoolDisruptionBudgetR\abudgetsB\x14\n" +
	"\x12_consolidate_afterB\x17\n" +
	"\x15_consolidation_policy\"r\n" +
	"\x15KarpenterNodeClassRef\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x17\n" +
	"\x04kind\x18\x02 \x01(\tH\x00R\x04kind\x88\x01\x01\x12\x19\n" +
	"\x05group\x18\x03 \x01(\tH\x01R\x05group\x88\x01\x01B\a\n" +
	"\x05_kindB\b\n" +
	"\x06_group\"h\n" +
	" KarpenterNodeSelectorRequirement\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x1a\n" +
	"\boperator\x18\x02 \x01(\tR\boperator\x12\x16\n" +
	"\x06values\x18\x03 \x03(\tR\x06values\"\xa8\x04\n" +
	"\x1dKarpenterNodepoolTemplateSpec\x12@\n" +
	"\x06taints\x18\x01 \x03(\v2(.chalk.kubernetes.v1.KubernetesNodeTaintR\x06taints\x12O\n" +
	"\x0estartup_taints\x18\x02 \x03(\v2(.chalk.kubernetes.v1.KubernetesNodeTaintR\rstartupTaints\x12X\n" +
	"\frequirements\x18\x03 \x03(\v24.chalk.nodepools.v1.KarpenterNodeSelectorRequirementR\frequirements\x12O\n" +
	"\x0enode_class_ref\x18\x04 \x01(\v2).chalk.nodepools.v1.KarpenterNodeClassRefR\fnodeClassRef\x12A\n" +
	"\fexpire_after\x18\x05 \x01(\v2\x19.google.protobuf.DurationH\x00R\vexpireAfter\x88\x01\x01\x12X\n" +
	"\x18termination_grace_period\x18\x06 \x01(\v2\x19.google.protobuf.DurationH\x01R\x16terminationGracePeriod\x88\x01\x01B\x0f\n" +
	"\r_expire_afterB\x1b\n" +
	"\x19_termination_grace_period\"\xe3\x02\n" +
	"!KarpenterNodepoolTemplateMetadata\x12Y\n" +
	"\x06labels\x18\x01 \x03(\v2A.chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.LabelsEntryR\x06labels\x12h\n" +
	"\vannotations\x18\x02 \x03(\v2F.chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.AnnotationsEntryR\vannotations\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb5\x01\n" +
	"\x19KarpenterNodepoolTemplate\x12Q\n" +
	"\bmetadata\x18\x01 \x01(\v25.chalk.nodepools.v1.KarpenterNodepoolTemplateMetadataR\bmetadata\x12E\n" +
	"\x04spec\x18\x02 \x01(\v21.chalk.nodepools.v1.KarpenterNodepoolTemplateSpecR\x04spec\"\xe5\x02\n" +
	"\x15KarpenterNodepoolSpec\x12O\n" +
	"\n" +
	"disruption\x18\x01 \x01(\v2/.chalk.nodepools.v1.KarpenterNodepoolDisruptionR\n" +
	"disruption\x12I\n" +
	"\btemplate\x18\x02 \x01(\v2-.chalk.nodepools.v1.KarpenterNodepoolTemplateR\btemplate\x12M\n" +
	"\x06limits\x18\x03 \x03(\v25.chalk.nodepools.v1.KarpenterNodepoolSpec.LimitsEntryR\x06limits\x12\x1b\n" +
	"\x06weight\x18\x04 \x01(\x05H\x00R\x06weight\x88\x01\x01\x1a9\n" +
	"\vLimitsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\t\n" +
	"\a_weight\"\x87\x04\n" +
	"\x19KarpenterNodepoolMetadata\x12`\n" +
	"\vannotations\x18\x01 \x03(\v2>.chalk.nodepools.v1.KarpenterNodepoolMetadata.AnnotationsEntryR\vannotations\x12I\n" +
	"\x12creation_timestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x11creationTimestamp\x12\x1e\n" +
	"\n" +
	"generation\x18\x03 \x01(\x03R\n" +
	"generation\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12)\n" +
	"\x10resource_version\x18\x05 \x01(\tR\x0fresourceVersion\x12\x10\n" +
	"\x03uid\x18\x06 \x01(\tR\x03uid\x12Q\n" +
	"\x06labels\x18\a \x03(\v29.chalk.nodepools.v1.KarpenterNodepoolMetadata.LabelsEntryR\x06labels\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcd\x01\n" +
	"\x1aKarpenterNodepoolCondition\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x120\n" +
	"\x14last_transition_time\x18\x04 \x01(\x03R\x12lastTransitionTime\x12\x1b\n" +
	"\x06reason\x18\x05 \x01(\tH\x00R\x06reason\x88\x01\x01\x12\x1d\n" +
	"\amessage\x18\x06 \x01(\tH\x01R\amessage\x88\x01\x01B\t\n" +
	"\a_reasonB\n" +
	"\n" +
	"\b_message\"\x81\x02\n" +
	"\x17KarpenterNodepoolStatus\x12X\n" +
	"\tresources\x18\x01 \x03(\v2:.chalk.nodepools.v1.KarpenterNodepoolStatus.ResourcesEntryR\tresources\x12N\n" +
	"\n" +
	"conditions\x18\x02 \x03(\v2..chalk.nodepools.v1.KarpenterNodepoolConditionR\n" +
	"conditions\x1a<\n" +
	"\x0eResourcesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x97\x02\n" +
	"\x11KarpenterNodepool\x12\x1f\n" +
	"\vapi_version\x18\x01 \x01(\tR\n" +
	"apiVersion\x12\x12\n" +
	"\x04kind\x18\x02 \x01(\tR\x04kind\x12I\n" +
	"\bmetadata\x18\x03 \x01(\v2-.chalk.nodepools.v1.KarpenterNodepoolMetadataR\bmetadata\x12=\n" +
	"\x04spec\x18\x04 \x01(\v2).chalk.nodepools.v1.KarpenterNodepoolSpecR\x04spec\x12C\n" +
	"\x06status\x18\x05 \x01(\v2+.chalk.nodepools.v1.KarpenterNodepoolStatusR\x06statusB\xd3\x01\n" +
	"\x16com.chalk.nodepools.v1B\x0eKarpenterProtoP\x01Z?github.com/chalk-ai/chalk-go/gen/chalk/nodepools/v1;nodepoolsv1\xa2\x02\x03CNX\xaa\x02\x12Chalk.Nodepools.V1\xca\x02\x12Chalk\\Nodepools\\V1\xe2\x02\x1eChalk\\Nodepools\\V1\\GPBMetadata\xea\x02\x14Chalk::Nodepools::V1b\x06proto3"

var (
	file_chalk_nodepools_v1_karpenter_proto_rawDescOnce sync.Once
	file_chalk_nodepools_v1_karpenter_proto_rawDescData []byte
)

func file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP() []byte {
	file_chalk_nodepools_v1_karpenter_proto_rawDescOnce.Do(func() {
		file_chalk_nodepools_v1_karpenter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chalk_nodepools_v1_karpenter_proto_rawDesc), len(file_chalk_nodepools_v1_karpenter_proto_rawDesc)))
	})
	return file_chalk_nodepools_v1_karpenter_proto_rawDescData
}

var file_chalk_nodepools_v1_karpenter_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_chalk_nodepools_v1_karpenter_proto_goTypes = []any{
	(*KarpenterNodepoolDisruptionBudget)(nil), // 0: chalk.nodepools.v1.KarpenterNodepoolDisruptionBudget
	(*KarpenterNodepoolDisruption)(nil),       // 1: chalk.nodepools.v1.KarpenterNodepoolDisruption
	(*KarpenterNodeClassRef)(nil),             // 2: chalk.nodepools.v1.KarpenterNodeClassRef
	(*KarpenterNodeSelectorRequirement)(nil),  // 3: chalk.nodepools.v1.KarpenterNodeSelectorRequirement
	(*KarpenterNodepoolTemplateSpec)(nil),     // 4: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec
	(*KarpenterNodepoolTemplateMetadata)(nil), // 5: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata
	(*KarpenterNodepoolTemplate)(nil),         // 6: chalk.nodepools.v1.KarpenterNodepoolTemplate
	(*KarpenterNodepoolSpec)(nil),             // 7: chalk.nodepools.v1.KarpenterNodepoolSpec
	(*KarpenterNodepoolMetadata)(nil),         // 8: chalk.nodepools.v1.KarpenterNodepoolMetadata
	(*KarpenterNodepoolCondition)(nil),        // 9: chalk.nodepools.v1.KarpenterNodepoolCondition
	(*KarpenterNodepoolStatus)(nil),           // 10: chalk.nodepools.v1.KarpenterNodepoolStatus
	(*KarpenterNodepool)(nil),                 // 11: chalk.nodepools.v1.KarpenterNodepool
	nil,                                       // 12: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.LabelsEntry
	nil,                                       // 13: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.AnnotationsEntry
	nil,                                       // 14: chalk.nodepools.v1.KarpenterNodepoolSpec.LimitsEntry
	nil,                                       // 15: chalk.nodepools.v1.KarpenterNodepoolMetadata.AnnotationsEntry
	nil,                                       // 16: chalk.nodepools.v1.KarpenterNodepoolMetadata.LabelsEntry
	nil,                                       // 17: chalk.nodepools.v1.KarpenterNodepoolStatus.ResourcesEntry
	(*durationpb.Duration)(nil),               // 18: google.protobuf.Duration
	(*v1.KubernetesNodeTaint)(nil),            // 19: chalk.kubernetes.v1.KubernetesNodeTaint
	(*timestamppb.Timestamp)(nil),             // 20: google.protobuf.Timestamp
}
var file_chalk_nodepools_v1_karpenter_proto_depIdxs = []int32{
	18, // 0: chalk.nodepools.v1.KarpenterNodepoolDisruptionBudget.duration:type_name -> google.protobuf.Duration
	18, // 1: chalk.nodepools.v1.KarpenterNodepoolDisruption.consolidate_after:type_name -> google.protobuf.Duration
	0,  // 2: chalk.nodepools.v1.KarpenterNodepoolDisruption.budgets:type_name -> chalk.nodepools.v1.KarpenterNodepoolDisruptionBudget
	19, // 3: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.taints:type_name -> chalk.kubernetes.v1.KubernetesNodeTaint
	19, // 4: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.startup_taints:type_name -> chalk.kubernetes.v1.KubernetesNodeTaint
	3,  // 5: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.requirements:type_name -> chalk.nodepools.v1.KarpenterNodeSelectorRequirement
	2,  // 6: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.node_class_ref:type_name -> chalk.nodepools.v1.KarpenterNodeClassRef
	18, // 7: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.expire_after:type_name -> google.protobuf.Duration
	18, // 8: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.termination_grace_period:type_name -> google.protobuf.Duration
	12, // 9: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.labels:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.LabelsEntry
	13, // 10: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.annotations:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.AnnotationsEntry
	5,  // 11: chalk.nodepools.v1.KarpenterNodepoolTemplate.metadata:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata
	4,  // 12: chalk.nodepools.v1.KarpenterNodepoolTemplate.spec:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateSpec
	1,  // 13: chalk.nodepools.v1.KarpenterNodepoolSpec.disruption:type_name -> chalk.nodepools.v1.KarpenterNodepoolDisruption
	6,  // 14: chalk.nodepools.v1.KarpenterNodepoolSpec.template:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplate
	14, // 15: chalk.nodepools.v1.KarpenterNodepoolSpec.limits:type_name -> chalk.nodepools.v1.KarpenterNodepoolSpec.LimitsEntry
	15, // 16: chalk.nodepools.v1.KarpenterNodepoolMetadata.annotations:type_name -> chalk.nodepools.v1.KarpenterNodepoolMetadata.AnnotationsEntry
	20, // 17: chalk.nodepools.v1.KarpenterNodepoolMetadata.creation_timestamp:type_name -> google.protobuf.Timestamp
	16, // 18: chalk.nodepools.v1.KarpenterNodepoolMetadata.labels:type_name -> chalk.nodepools.v1.KarpenterNodepoolMetadata.LabelsEntry
	17, // 19: chalk.nodepools.v1.KarpenterNodepoolStatus.resources:type_name -> chalk.nodepools.v1.KarpenterNodepoolStatus.ResourcesEntry
	9,  // 20: chalk.nodepools.v1.KarpenterNodepoolStatus.conditions:type_name -> chalk.nodepools.v1.KarpenterNodepoolCondition
	8,  // 21: chalk.nodepools.v1.KarpenterNodepool.metadata:type_name -> chalk.nodepools.v1.KarpenterNodepoolMetadata
	7,  // 22: chalk.nodepools.v1.KarpenterNodepool.spec:type_name -> chalk.nodepools.v1.KarpenterNodepoolSpec
	10, // 23: chalk.nodepools.v1.KarpenterNodepool.status:type_name -> chalk.nodepools.v1.KarpenterNodepoolStatus
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_chalk_nodepools_v1_karpenter_proto_init() }
func file_chalk_nodepools_v1_karpenter_proto_init() {
	if File_chalk_nodepools_v1_karpenter_proto != nil {
		return
	}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[7].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chalk_nodepools_v1_karpenter_proto_rawDesc), len(file_chalk_nodepools_v1_karpenter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_nodepools_v1_karpenter_proto_goTypes,
		DependencyIndexes: file_chalk_nodepools_v1_karpenter_proto_depIdxs,
		MessageInfos:      file_chalk_nodepools_v1_karpenter_proto_msgTypes,
	}.Build()
	File_chalk_nodepools_v1_karpenter_proto = out.File
	file_chalk_nodepools_v1_karpenter_proto_goTypes = nil
	file_chalk_nodepools_v1_karpenter_proto_depIdxs = nil
}
