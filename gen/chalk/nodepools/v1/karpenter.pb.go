// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: chalk/nodepools/v1/karpenter.proto

package nodepoolsv1

import (
	v1 "github.com/chalk-ai/chalk-go/gen/chalk/kubernetes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KarpenterNodepoolDisruptionBudget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes    string               `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Schedule *string              `protobuf:"bytes,2,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *KarpenterNodepoolDisruptionBudget) Reset() {
	*x = KarpenterNodepoolDisruptionBudget{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolDisruptionBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolDisruptionBudget) ProtoMessage() {}

func (x *KarpenterNodepoolDisruptionBudget) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolDisruptionBudget.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolDisruptionBudget) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{0}
}

func (x *KarpenterNodepoolDisruptionBudget) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *KarpenterNodepoolDisruptionBudget) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *KarpenterNodepoolDisruptionBudget) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type KarpenterNodepoolDisruption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsolidateAfter    *durationpb.Duration                 `protobuf:"bytes,1,opt,name=consolidate_after,json=consolidateAfter,proto3,oneof" json:"consolidate_after,omitempty"`
	ConsolidationPolicy *string                              `protobuf:"bytes,2,opt,name=consolidation_policy,json=consolidationPolicy,proto3,oneof" json:"consolidation_policy,omitempty"`
	Budgets             []*KarpenterNodepoolDisruptionBudget `protobuf:"bytes,3,rep,name=budgets,proto3" json:"budgets,omitempty"`
}

func (x *KarpenterNodepoolDisruption) Reset() {
	*x = KarpenterNodepoolDisruption{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolDisruption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolDisruption) ProtoMessage() {}

func (x *KarpenterNodepoolDisruption) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolDisruption.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolDisruption) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{1}
}

func (x *KarpenterNodepoolDisruption) GetConsolidateAfter() *durationpb.Duration {
	if x != nil {
		return x.ConsolidateAfter
	}
	return nil
}

func (x *KarpenterNodepoolDisruption) GetConsolidationPolicy() string {
	if x != nil && x.ConsolidationPolicy != nil {
		return *x.ConsolidationPolicy
	}
	return ""
}

func (x *KarpenterNodepoolDisruption) GetBudgets() []*KarpenterNodepoolDisruptionBudget {
	if x != nil {
		return x.Budgets
	}
	return nil
}

type KarpenterNodeClassRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind  *string `protobuf:"bytes,2,opt,name=kind,proto3,oneof" json:"kind,omitempty"`
	Group *string `protobuf:"bytes,3,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (x *KarpenterNodeClassRef) Reset() {
	*x = KarpenterNodeClassRef{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodeClassRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodeClassRef) ProtoMessage() {}

func (x *KarpenterNodeClassRef) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodeClassRef.ProtoReflect.Descriptor instead.
func (*KarpenterNodeClassRef) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{2}
}

func (x *KarpenterNodeClassRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KarpenterNodeClassRef) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *KarpenterNodeClassRef) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

type KarpenterNodeSelectorRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator string   `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Values   []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *KarpenterNodeSelectorRequirement) Reset() {
	*x = KarpenterNodeSelectorRequirement{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodeSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodeSelectorRequirement) ProtoMessage() {}

func (x *KarpenterNodeSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodeSelectorRequirement.ProtoReflect.Descriptor instead.
func (*KarpenterNodeSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{3}
}

func (x *KarpenterNodeSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KarpenterNodeSelectorRequirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *KarpenterNodeSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type KarpenterNodepoolTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Taints        []*v1.KubernetesNodeTaint           `protobuf:"bytes,1,rep,name=taints,proto3" json:"taints,omitempty"`
	StartupTaints []*v1.KubernetesNodeTaint           `protobuf:"bytes,2,rep,name=startup_taints,json=startupTaints,proto3" json:"startup_taints,omitempty"`
	Requirements  []*KarpenterNodeSelectorRequirement `protobuf:"bytes,3,rep,name=requirements,proto3" json:"requirements,omitempty"`
	NodeClassRef  *KarpenterNodeClassRef              `protobuf:"bytes,4,opt,name=node_class_ref,json=nodeClassRef,proto3" json:"node_class_ref,omitempty"`
	ExpireAfter   *durationpb.Duration                `protobuf:"bytes,5,opt,name=expire_after,json=expireAfter,proto3,oneof" json:"expire_after,omitempty"`
}

func (x *KarpenterNodepoolTemplateSpec) Reset() {
	*x = KarpenterNodepoolTemplateSpec{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolTemplateSpec) ProtoMessage() {}

func (x *KarpenterNodepoolTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolTemplateSpec.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolTemplateSpec) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{4}
}

func (x *KarpenterNodepoolTemplateSpec) GetTaints() []*v1.KubernetesNodeTaint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetStartupTaints() []*v1.KubernetesNodeTaint {
	if x != nil {
		return x.StartupTaints
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetRequirements() []*KarpenterNodeSelectorRequirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetNodeClassRef() *KarpenterNodeClassRef {
	if x != nil {
		return x.NodeClassRef
	}
	return nil
}

func (x *KarpenterNodepoolTemplateSpec) GetExpireAfter() *durationpb.Duration {
	if x != nil {
		return x.ExpireAfter
	}
	return nil
}

type KarpenterNodepoolTemplateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels      map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KarpenterNodepoolTemplateMetadata) Reset() {
	*x = KarpenterNodepoolTemplateMetadata{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolTemplateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolTemplateMetadata) ProtoMessage() {}

func (x *KarpenterNodepoolTemplateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolTemplateMetadata.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolTemplateMetadata) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{5}
}

func (x *KarpenterNodepoolTemplateMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KarpenterNodepoolTemplateMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type KarpenterNodepoolTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *KarpenterNodepoolTemplateMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *KarpenterNodepoolTemplateSpec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *KarpenterNodepoolTemplate) Reset() {
	*x = KarpenterNodepoolTemplate{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolTemplate) ProtoMessage() {}

func (x *KarpenterNodepoolTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolTemplate.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolTemplate) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{6}
}

func (x *KarpenterNodepoolTemplate) GetMetadata() *KarpenterNodepoolTemplateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KarpenterNodepoolTemplate) GetSpec() *KarpenterNodepoolTemplateSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type KarpenterNodepoolSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disruption *KarpenterNodepoolDisruption `protobuf:"bytes,1,opt,name=disruption,proto3" json:"disruption,omitempty"`
	Template   *KarpenterNodepoolTemplate   `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Limits     map[string]string            `protobuf:"bytes,3,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Weight     *int32                       `protobuf:"varint,4,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
}

func (x *KarpenterNodepoolSpec) Reset() {
	*x = KarpenterNodepoolSpec{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolSpec) ProtoMessage() {}

func (x *KarpenterNodepoolSpec) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolSpec.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolSpec) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{7}
}

func (x *KarpenterNodepoolSpec) GetDisruption() *KarpenterNodepoolDisruption {
	if x != nil {
		return x.Disruption
	}
	return nil
}

func (x *KarpenterNodepoolSpec) GetTemplate() *KarpenterNodepoolTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *KarpenterNodepoolSpec) GetLimits() map[string]string {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *KarpenterNodepoolSpec) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type KarpenterNodepoolMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations       map[string]string      `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	Generation        int64                  `protobuf:"varint,3,opt,name=generation,proto3" json:"generation,omitempty"`
	Name              string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ResourceVersion   string                 `protobuf:"bytes,5,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	Uid               string                 `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	Labels            map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KarpenterNodepoolMetadata) Reset() {
	*x = KarpenterNodepoolMetadata{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolMetadata) ProtoMessage() {}

func (x *KarpenterNodepoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolMetadata.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolMetadata) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{8}
}

func (x *KarpenterNodepoolMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *KarpenterNodepoolMetadata) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *KarpenterNodepoolMetadata) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *KarpenterNodepoolMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KarpenterNodepoolMetadata) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *KarpenterNodepoolMetadata) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *KarpenterNodepoolMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type KarpenterNodepoolStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources map[string]string `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KarpenterNodepoolStatus) Reset() {
	*x = KarpenterNodepoolStatus{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepoolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepoolStatus) ProtoMessage() {}

func (x *KarpenterNodepoolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepoolStatus.ProtoReflect.Descriptor instead.
func (*KarpenterNodepoolStatus) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{9}
}

func (x *KarpenterNodepoolStatus) GetResources() map[string]string {
	if x != nil {
		return x.Resources
	}
	return nil
}

type KarpenterNodepool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string                     `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Kind       string                     `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata   *KarpenterNodepoolMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec       *KarpenterNodepoolSpec     `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status     *KarpenterNodepoolStatus   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KarpenterNodepool) Reset() {
	*x = KarpenterNodepool{}
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KarpenterNodepool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarpenterNodepool) ProtoMessage() {}

func (x *KarpenterNodepool) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_nodepools_v1_karpenter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarpenterNodepool.ProtoReflect.Descriptor instead.
func (*KarpenterNodepool) Descriptor() ([]byte, []int) {
	return file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP(), []int{10}
}

func (x *KarpenterNodepool) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *KarpenterNodepool) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KarpenterNodepool) GetMetadata() *KarpenterNodepoolMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KarpenterNodepool) GetSpec() *KarpenterNodepoolSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *KarpenterNodepool) GetStatus() *KarpenterNodepoolStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_chalk_nodepools_v1_karpenter_proto protoreflect.FileDescriptor

var file_chalk_nodepools_v1_karpenter_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x21, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x02,
	0x0a, 0x1b, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x07, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x72, 0x0a, 0x15, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x68, 0x0a, 0x20, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xb1, 0x03, 0x0a, 0x1d, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x66, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x12, 0x41, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x22, 0xe3, 0x02, 0x0a, 0x21, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x68, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4f, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61,
	0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x87, 0x04, 0x0a, 0x19, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x58, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x02, 0x0a, 0x11, 0x4b, 0x61, 0x72,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0xd3, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x4b,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2d, 0x61, 0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x43, 0x4e, 0x58, 0xaa, 0x02, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x43, 0x68,
	0x61, 0x6c, 0x6b, 0x5c, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x1e, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x5c, 0x4e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x14, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x3a, 0x3a, 0x4e, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_nodepools_v1_karpenter_proto_rawDescOnce sync.Once
	file_chalk_nodepools_v1_karpenter_proto_rawDescData = file_chalk_nodepools_v1_karpenter_proto_rawDesc
)

func file_chalk_nodepools_v1_karpenter_proto_rawDescGZIP() []byte {
	file_chalk_nodepools_v1_karpenter_proto_rawDescOnce.Do(func() {
		file_chalk_nodepools_v1_karpenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_nodepools_v1_karpenter_proto_rawDescData)
	})
	return file_chalk_nodepools_v1_karpenter_proto_rawDescData
}

var file_chalk_nodepools_v1_karpenter_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_chalk_nodepools_v1_karpenter_proto_goTypes = []any{
	(*KarpenterNodepoolDisruptionBudget)(nil), // 0: chalk.nodepools.v1.KarpenterNodepoolDisruptionBudget
	(*KarpenterNodepoolDisruption)(nil),       // 1: chalk.nodepools.v1.KarpenterNodepoolDisruption
	(*KarpenterNodeClassRef)(nil),             // 2: chalk.nodepools.v1.KarpenterNodeClassRef
	(*KarpenterNodeSelectorRequirement)(nil),  // 3: chalk.nodepools.v1.KarpenterNodeSelectorRequirement
	(*KarpenterNodepoolTemplateSpec)(nil),     // 4: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec
	(*KarpenterNodepoolTemplateMetadata)(nil), // 5: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata
	(*KarpenterNodepoolTemplate)(nil),         // 6: chalk.nodepools.v1.KarpenterNodepoolTemplate
	(*KarpenterNodepoolSpec)(nil),             // 7: chalk.nodepools.v1.KarpenterNodepoolSpec
	(*KarpenterNodepoolMetadata)(nil),         // 8: chalk.nodepools.v1.KarpenterNodepoolMetadata
	(*KarpenterNodepoolStatus)(nil),           // 9: chalk.nodepools.v1.KarpenterNodepoolStatus
	(*KarpenterNodepool)(nil),                 // 10: chalk.nodepools.v1.KarpenterNodepool
	nil,                                       // 11: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.LabelsEntry
	nil,                                       // 12: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.AnnotationsEntry
	nil,                                       // 13: chalk.nodepools.v1.KarpenterNodepoolSpec.LimitsEntry
	nil,                                       // 14: chalk.nodepools.v1.KarpenterNodepoolMetadata.AnnotationsEntry
	nil,                                       // 15: chalk.nodepools.v1.KarpenterNodepoolMetadata.LabelsEntry
	nil,                                       // 16: chalk.nodepools.v1.KarpenterNodepoolStatus.ResourcesEntry
	(*durationpb.Duration)(nil),               // 17: google.protobuf.Duration
	(*v1.KubernetesNodeTaint)(nil),            // 18: chalk.kubernetes.v1.KubernetesNodeTaint
	(*timestamppb.Timestamp)(nil),             // 19: google.protobuf.Timestamp
}
var file_chalk_nodepools_v1_karpenter_proto_depIdxs = []int32{
	17, // 0: chalk.nodepools.v1.KarpenterNodepoolDisruptionBudget.duration:type_name -> google.protobuf.Duration
	17, // 1: chalk.nodepools.v1.KarpenterNodepoolDisruption.consolidate_after:type_name -> google.protobuf.Duration
	0,  // 2: chalk.nodepools.v1.KarpenterNodepoolDisruption.budgets:type_name -> chalk.nodepools.v1.KarpenterNodepoolDisruptionBudget
	18, // 3: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.taints:type_name -> chalk.kubernetes.v1.KubernetesNodeTaint
	18, // 4: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.startup_taints:type_name -> chalk.kubernetes.v1.KubernetesNodeTaint
	3,  // 5: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.requirements:type_name -> chalk.nodepools.v1.KarpenterNodeSelectorRequirement
	2,  // 6: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.node_class_ref:type_name -> chalk.nodepools.v1.KarpenterNodeClassRef
	17, // 7: chalk.nodepools.v1.KarpenterNodepoolTemplateSpec.expire_after:type_name -> google.protobuf.Duration
	11, // 8: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.labels:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.LabelsEntry
	12, // 9: chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.annotations:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata.AnnotationsEntry
	5,  // 10: chalk.nodepools.v1.KarpenterNodepoolTemplate.metadata:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateMetadata
	4,  // 11: chalk.nodepools.v1.KarpenterNodepoolTemplate.spec:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplateSpec
	1,  // 12: chalk.nodepools.v1.KarpenterNodepoolSpec.disruption:type_name -> chalk.nodepools.v1.KarpenterNodepoolDisruption
	6,  // 13: chalk.nodepools.v1.KarpenterNodepoolSpec.template:type_name -> chalk.nodepools.v1.KarpenterNodepoolTemplate
	13, // 14: chalk.nodepools.v1.KarpenterNodepoolSpec.limits:type_name -> chalk.nodepools.v1.KarpenterNodepoolSpec.LimitsEntry
	14, // 15: chalk.nodepools.v1.KarpenterNodepoolMetadata.annotations:type_name -> chalk.nodepools.v1.KarpenterNodepoolMetadata.AnnotationsEntry
	19, // 16: chalk.nodepools.v1.KarpenterNodepoolMetadata.creation_timestamp:type_name -> google.protobuf.Timestamp
	15, // 17: chalk.nodepools.v1.KarpenterNodepoolMetadata.labels:type_name -> chalk.nodepools.v1.KarpenterNodepoolMetadata.LabelsEntry
	16, // 18: chalk.nodepools.v1.KarpenterNodepoolStatus.resources:type_name -> chalk.nodepools.v1.KarpenterNodepoolStatus.ResourcesEntry
	8,  // 19: chalk.nodepools.v1.KarpenterNodepool.metadata:type_name -> chalk.nodepools.v1.KarpenterNodepoolMetadata
	7,  // 20: chalk.nodepools.v1.KarpenterNodepool.spec:type_name -> chalk.nodepools.v1.KarpenterNodepoolSpec
	9,  // 21: chalk.nodepools.v1.KarpenterNodepool.status:type_name -> chalk.nodepools.v1.KarpenterNodepoolStatus
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_chalk_nodepools_v1_karpenter_proto_init() }
func file_chalk_nodepools_v1_karpenter_proto_init() {
	if File_chalk_nodepools_v1_karpenter_proto != nil {
		return
	}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[0].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[1].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[2].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[4].OneofWrappers = []any{}
	file_chalk_nodepools_v1_karpenter_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_nodepools_v1_karpenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_nodepools_v1_karpenter_proto_goTypes,
		DependencyIndexes: file_chalk_nodepools_v1_karpenter_proto_depIdxs,
		MessageInfos:      file_chalk_nodepools_v1_karpenter_proto_msgTypes,
	}.Build()
	File_chalk_nodepools_v1_karpenter_proto = out.File
	file_chalk_nodepools_v1_karpenter_proto_rawDesc = nil
	file_chalk_nodepools_v1_karpenter_proto_goTypes = nil
	file_chalk_nodepools_v1_karpenter_proto_depIdxs = nil
}
