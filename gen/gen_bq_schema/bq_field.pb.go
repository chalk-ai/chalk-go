// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: gen_bq_schema/bq_field.proto

package gen_bq_schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message containing options related to BigQuery schema generation
// and management via Protobuf.
type BigQueryFieldOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flag to specify that a field should be marked as 'REQUIRED' when
	// used to generate schema for BigQuery.
	Require bool `protobuf:"varint,1,opt,name=require,proto3" json:"require,omitempty"`
	// Optionally override whatever type is resolved by the schema
	// generator. This is useful, for example, to store epoch timestamps
	// with the underlying 'TIMESTAMP' type, when normally, they would
	// be structured as 'INTEGER' fields.
	TypeOverride string `protobuf:"bytes,2,opt,name=type_override,json=typeOverride,proto3" json:"type_override,omitempty"`
	// Optionally omit a field from BigQuery schema.
	Ignore bool `protobuf:"varint,3,opt,name=ignore,proto3" json:"ignore,omitempty"`
	// Set the description for a field in BigQuery schema.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Customize the name of the field in the BigQuery schema.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Optionally add PolicyTag for a field in BigQuery schema.
	PolicyTags    string `protobuf:"bytes,6,opt,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigQueryFieldOptions) Reset() {
	*x = BigQueryFieldOptions{}
	mi := &file_gen_bq_schema_bq_field_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryFieldOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryFieldOptions) ProtoMessage() {}

func (x *BigQueryFieldOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gen_bq_schema_bq_field_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryFieldOptions.ProtoReflect.Descriptor instead.
func (*BigQueryFieldOptions) Descriptor() ([]byte, []int) {
	return file_gen_bq_schema_bq_field_proto_rawDescGZIP(), []int{0}
}

func (x *BigQueryFieldOptions) GetRequire() bool {
	if x != nil {
		return x.Require
	}
	return false
}

func (x *BigQueryFieldOptions) GetTypeOverride() string {
	if x != nil {
		return x.TypeOverride
	}
	return ""
}

func (x *BigQueryFieldOptions) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

func (x *BigQueryFieldOptions) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BigQueryFieldOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BigQueryFieldOptions) GetPolicyTags() string {
	if x != nil {
		return x.PolicyTags
	}
	return ""
}

var file_gen_bq_schema_bq_field_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*BigQueryFieldOptions)(nil),
		Field:         1021,
		Name:          "gen_bq_schema.bigquery",
		Tag:           "bytes,1021,opt,name=bigquery",
		Filename:      "gen_bq_schema/bq_field.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// BigQuery field schema generation options.
	//
	// optional gen_bq_schema.BigQueryFieldOptions bigquery = 1021;
	E_Bigquery = &file_gen_bq_schema_bq_field_proto_extTypes[0]
)

var File_gen_bq_schema_bq_field_proto protoreflect.FileDescriptor

const file_gen_bq_schema_bq_field_proto_rawDesc = "" +
	"\n" +
	"\x1cgen_bq_schema/bq_field.proto\x12\rgen_bq_schema\x1a google/protobuf/descriptor.proto\"\xc4\x01\n" +
	"\x14BigQueryFieldOptions\x12\x18\n" +
	"\arequire\x18\x01 \x01(\bR\arequire\x12#\n" +
	"\rtype_override\x18\x02 \x01(\tR\ftypeOverride\x12\x16\n" +
	"\x06ignore\x18\x03 \x01(\bR\x06ignore\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x1f\n" +
	"\vpolicy_tags\x18\x06 \x01(\tR\n" +
	"policyTags:_\n" +
	"\bbigquery\x12\x1d.google.protobuf.FieldOptions\x18\xfd\a \x01(\v2#.gen_bq_schema.BigQueryFieldOptionsR\bbigqueryB\x9d\x01\n" +
	"\x11com.gen_bq_schemaB\fBqFieldProtoP\x01Z.github.com/chalk-ai/chalk-go/gen/gen_bq_schema\xa2\x02\x03GXX\xaa\x02\vGenBqSchema\xca\x02\vGenBqSchema\xe2\x02\x17GenBqSchema\\GPBMetadata\xea\x02\vGenBqSchemab\x06proto3"

var (
	file_gen_bq_schema_bq_field_proto_rawDescOnce sync.Once
	file_gen_bq_schema_bq_field_proto_rawDescData []byte
)

func file_gen_bq_schema_bq_field_proto_rawDescGZIP() []byte {
	file_gen_bq_schema_bq_field_proto_rawDescOnce.Do(func() {
		file_gen_bq_schema_bq_field_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gen_bq_schema_bq_field_proto_rawDesc), len(file_gen_bq_schema_bq_field_proto_rawDesc)))
	})
	return file_gen_bq_schema_bq_field_proto_rawDescData
}

var file_gen_bq_schema_bq_field_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gen_bq_schema_bq_field_proto_goTypes = []any{
	(*BigQueryFieldOptions)(nil),      // 0: gen_bq_schema.BigQueryFieldOptions
	(*descriptorpb.FieldOptions)(nil), // 1: google.protobuf.FieldOptions
}
var file_gen_bq_schema_bq_field_proto_depIdxs = []int32{
	1, // 0: gen_bq_schema.bigquery:extendee -> google.protobuf.FieldOptions
	0, // 1: gen_bq_schema.bigquery:type_name -> gen_bq_schema.BigQueryFieldOptions
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	1, // [1:2] is the sub-list for extension type_name
	0, // [0:1] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gen_bq_schema_bq_field_proto_init() }
func file_gen_bq_schema_bq_field_proto_init() {
	if File_gen_bq_schema_bq_field_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gen_bq_schema_bq_field_proto_rawDesc), len(file_gen_bq_schema_bq_field_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_gen_bq_schema_bq_field_proto_goTypes,
		DependencyIndexes: file_gen_bq_schema_bq_field_proto_depIdxs,
		MessageInfos:      file_gen_bq_schema_bq_field_proto_msgTypes,
		ExtensionInfos:    file_gen_bq_schema_bq_field_proto_extTypes,
	}.Build()
	File_gen_bq_schema_bq_field_proto = out.File
	file_gen_bq_schema_bq_field_proto_goTypes = nil
	file_gen_bq_schema_bq_field_proto_depIdxs = nil
}
