// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: chalk/common/v1/online_query.proto

package commonv1

import (
	v1 "github.com/chalk-ai/chalk-go/internal/gen/chalk/arrow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenResolverFqn string `protobuf:"bytes,1,opt,name=chosen_resolver_fqn,json=chosenResolverFqn,proto3" json:"chosen_resolver_fqn,omitempty"`
	CacheHit          bool   `protobuf:"varint,2,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	PrimitiveType     string `protobuf:"bytes,3,opt,name=primitive_type,json=primitiveType,proto3" json:"primitive_type,omitempty"`
	Version           int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *FeatureMeta) Reset() {
	*x = FeatureMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureMeta) ProtoMessage() {}

func (x *FeatureMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureMeta.ProtoReflect.Descriptor instead.
func (*FeatureMeta) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureMeta) GetChosenResolverFqn() string {
	if x != nil {
		return x.ChosenResolverFqn
	}
	return ""
}

func (x *FeatureMeta) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

func (x *FeatureMeta) GetPrimitiveType() string {
	if x != nil {
		return x.PrimitiveType
	}
	return ""
}

func (x *FeatureMeta) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Metadata needed for reading/writing feather data
type FeatherMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCompression v1.FeatherCompression `protobuf:"varint,1,opt,name=response_compression,json=responseCompression,proto3,enum=chalk.arrow.v1.FeatherCompression" json:"response_compression,omitempty"` // Do we need to distinguish Tables from Record Batches?
}

func (x *FeatherMeta) Reset() {
	*x = FeatherMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatherMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatherMeta) ProtoMessage() {}

func (x *FeatherMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatherMeta.ProtoReflect.Descriptor instead.
func (*FeatherMeta) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{1}
}

func (x *FeatherMeta) GetResponseCompression() v1.FeatherCompression {
	if x != nil {
		return x.ResponseCompression
	}
	return v1.FeatherCompression(0)
}

type FeatherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatherBytes []byte       `protobuf:"bytes,1,opt,name=feather_bytes,json=featherBytes,proto3" json:"feather_bytes,omitempty"`
	Meta         *FeatherMeta `protobuf:"bytes,2,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (x *FeatherData) Reset() {
	*x = FeatherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatherData) ProtoMessage() {}

func (x *FeatherData) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatherData.ProtoReflect.Descriptor instead.
func (*FeatherData) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{2}
}

func (x *FeatherData) GetFeatherBytes() []byte {
	if x != nil {
		return x.FeatherBytes
	}
	return nil
}

func (x *FeatherData) GetMeta() *FeatherMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type OnlineQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*OnlineQueryResult_Rows
	//	*OnlineQueryResult_Feather
	Impl isOnlineQueryResult_Impl `protobuf_oneof:"impl"`
}

func (x *OnlineQueryResult) Reset() {
	*x = OnlineQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryResult) ProtoMessage() {}

func (x *OnlineQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryResult.ProtoReflect.Descriptor instead.
func (*OnlineQueryResult) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{3}
}

func (m *OnlineQueryResult) GetImpl() isOnlineQueryResult_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *OnlineQueryResult) GetRows() *FeatureResultList {
	if x, ok := x.GetImpl().(*OnlineQueryResult_Rows); ok {
		return x.Rows
	}
	return nil
}

func (x *OnlineQueryResult) GetFeather() *FeatherData {
	if x, ok := x.GetImpl().(*OnlineQueryResult_Feather); ok {
		return x.Feather
	}
	return nil
}

type isOnlineQueryResult_Impl interface {
	isOnlineQueryResult_Impl()
}

type OnlineQueryResult_Rows struct {
	Rows *FeatureResultList `protobuf:"bytes,1,opt,name=rows,proto3,oneof"`
}

type OnlineQueryResult_Feather struct {
	Feather *FeatherData `protobuf:"bytes,2,opt,name=feather,proto3,oneof"`
}

func (*OnlineQueryResult_Rows) isOnlineQueryResult_Impl() {}

func (*OnlineQueryResult_Feather) isOnlineQueryResult_Impl() {}

type FeatureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Error *string                `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Ts    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3,oneof" json:"ts,omitempty"`
	Meta  *FeatureMeta           `protobuf:"bytes,5,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (x *FeatureResult) Reset() {
	*x = FeatureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureResult) ProtoMessage() {}

func (x *FeatureResult) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureResult.ProtoReflect.Descriptor instead.
func (*FeatureResult) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{4}
}

func (x *FeatureResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FeatureResult) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FeatureResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *FeatureResult) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *FeatureResult) GetMeta() *FeatureMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type FeatureResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FeatureResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FeatureResultList) Reset() {
	*x = FeatureResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureResultList) ProtoMessage() {}

func (x *FeatureResultList) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureResultList.ProtoReflect.Descriptor instead.
func (*FeatureResultList) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureResultList) GetResults() []*FeatureResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type OnlineQueryContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment   string   `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	Tags          []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	DeploymentId  *string  `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3,oneof" json:"deployment_id,omitempty"`
	BranchId      *string  `protobuf:"bytes,4,opt,name=branch_id,json=branchId,proto3,oneof" json:"branch_id,omitempty"`
	CorrelationId *string  `protobuf:"bytes,8,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	QueryName     *string  `protobuf:"bytes,9,opt,name=query_name,json=queryName,proto3,oneof" json:"query_name,omitempty"`
}

func (x *OnlineQueryContext) Reset() {
	*x = OnlineQueryContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryContext) ProtoMessage() {}

func (x *OnlineQueryContext) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryContext.ProtoReflect.Descriptor instead.
func (*OnlineQueryContext) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{6}
}

func (x *OnlineQueryContext) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *OnlineQueryContext) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OnlineQueryContext) GetDeploymentId() string {
	if x != nil && x.DeploymentId != nil {
		return *x.DeploymentId
	}
	return ""
}

func (x *OnlineQueryContext) GetBranchId() string {
	if x != nil && x.BranchId != nil {
		return *x.BranchId
	}
	return ""
}

func (x *OnlineQueryContext) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *OnlineQueryContext) GetQueryName() string {
	if x != nil && x.QueryName != nil {
		return *x.QueryName
	}
	return ""
}

type OnlineQueryError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO add more structured info here
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *OnlineQueryError) Reset() {
	*x = OnlineQueryError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryError) ProtoMessage() {}

func (x *OnlineQueryError) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryError.ProtoReflect.Descriptor instead.
func (*OnlineQueryError) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{7}
}

func (x *OnlineQueryError) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type OnlineQueryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionDuration *durationpb.Duration                  `protobuf:"bytes,1,opt,name=execution_duration,json=executionDuration,proto3" json:"execution_duration,omitempty"`
	DeploymentId      string                                `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	EnvironmentId     string                                `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	EnvironmentName   string                                `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	QueryId           string                                `protobuf:"bytes,5,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	QueryTimestamp    *timestamppb.Timestamp                `protobuf:"bytes,6,opt,name=query_timestamp,json=queryTimestamp,proto3" json:"query_timestamp,omitempty"`
	QueryHash         string                                `protobuf:"bytes,7,opt,name=query_hash,json=queryHash,proto3" json:"query_hash,omitempty"`
	ExplainOutput     *OnlineQueryMetadata_QueryExplainInfo `protobuf:"bytes,8,opt,name=explain_output,json=explainOutput,proto3" json:"explain_output,omitempty"`
}

func (x *OnlineQueryMetadata) Reset() {
	*x = OnlineQueryMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryMetadata) ProtoMessage() {}

func (x *OnlineQueryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryMetadata.ProtoReflect.Descriptor instead.
func (*OnlineQueryMetadata) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{8}
}

func (x *OnlineQueryMetadata) GetExecutionDuration() *durationpb.Duration {
	if x != nil {
		return x.ExecutionDuration
	}
	return nil
}

func (x *OnlineQueryMetadata) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *OnlineQueryMetadata) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *OnlineQueryMetadata) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *OnlineQueryMetadata) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *OnlineQueryMetadata) GetQueryTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryTimestamp
	}
	return nil
}

func (x *OnlineQueryMetadata) GetQueryHash() string {
	if x != nil {
		return x.QueryHash
	}
	return ""
}

func (x *OnlineQueryMetadata) GetExplainOutput() *OnlineQueryMetadata_QueryExplainInfo {
	if x != nil {
		return x.ExplainOutput
	}
	return nil
}

type OnlineQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         *OnlineQueryResult   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Errors       []*OnlineQueryError  `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ResponseMeta *OnlineQueryMetadata `protobuf:"bytes,3,opt,name=response_meta,json=responseMeta,proto3" json:"response_meta,omitempty"`
}

func (x *OnlineQueryResponse) Reset() {
	*x = OnlineQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryResponse) ProtoMessage() {}

func (x *OnlineQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryResponse.ProtoReflect.Descriptor instead.
func (*OnlineQueryResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{9}
}

func (x *OnlineQueryResponse) GetData() *OnlineQueryResult {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *OnlineQueryResponse) GetErrors() []*OnlineQueryError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *OnlineQueryResponse) GetResponseMeta() *OnlineQueryMetadata {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type OnlineQueryResponseOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeMeta        bool `protobuf:"varint,1,opt,name=include_meta,json=includeMeta,proto3" json:"include_meta,omitempty"`
	Explain            bool `protobuf:"varint,2,opt,name=explain,proto3" json:"explain,omitempty"`
	SkipOnlineStorage  bool `protobuf:"varint,3,opt,name=skip_online_storage,json=skipOnlineStorage,proto3" json:"skip_online_storage,omitempty"`
	SkipOfflineStorage bool `protobuf:"varint,4,opt,name=skip_offline_storage,json=skipOfflineStorage,proto3" json:"skip_offline_storage,omitempty"`
	SkipMetricsStorage bool `protobuf:"varint,5,opt,name=skip_metrics_storage,json=skipMetricsStorage,proto3" json:"skip_metrics_storage,omitempty"`
	SkipCacheLookups   bool `protobuf:"varint,6,opt,name=skip_cache_lookups,json=skipCacheLookups,proto3" json:"skip_cache_lookups,omitempty"`
	StorePlanStages    bool `protobuf:"varint,7,opt,name=store_plan_stages,json=storePlanStages,proto3" json:"store_plan_stages,omitempty"`
}

func (x *OnlineQueryResponseOptions) Reset() {
	*x = OnlineQueryResponseOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryResponseOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryResponseOptions) ProtoMessage() {}

func (x *OnlineQueryResponseOptions) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryResponseOptions.ProtoReflect.Descriptor instead.
func (*OnlineQueryResponseOptions) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{10}
}

func (x *OnlineQueryResponseOptions) GetIncludeMeta() bool {
	if x != nil {
		return x.IncludeMeta
	}
	return false
}

func (x *OnlineQueryResponseOptions) GetExplain() bool {
	if x != nil {
		return x.Explain
	}
	return false
}

func (x *OnlineQueryResponseOptions) GetSkipOnlineStorage() bool {
	if x != nil {
		return x.SkipOnlineStorage
	}
	return false
}

func (x *OnlineQueryResponseOptions) GetSkipOfflineStorage() bool {
	if x != nil {
		return x.SkipOfflineStorage
	}
	return false
}

func (x *OnlineQueryResponseOptions) GetSkipMetricsStorage() bool {
	if x != nil {
		return x.SkipMetricsStorage
	}
	return false
}

func (x *OnlineQueryResponseOptions) GetSkipCacheLookups() bool {
	if x != nil {
		return x.SkipCacheLookups
	}
	return false
}

func (x *OnlineQueryResponseOptions) GetStorePlanStages() bool {
	if x != nil {
		return x.StorePlanStages
	}
	return false
}

type OnlineQueryInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*OnlineQueryInputs_ScalarInputs_
	//	*OnlineQueryInputs_ListInputs_
	//	*OnlineQueryInputs_FeatherInputs
	Impl isOnlineQueryInputs_Impl `protobuf_oneof:"impl"`
}

func (x *OnlineQueryInputs) Reset() {
	*x = OnlineQueryInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryInputs) ProtoMessage() {}

func (x *OnlineQueryInputs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryInputs.ProtoReflect.Descriptor instead.
func (*OnlineQueryInputs) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{11}
}

func (m *OnlineQueryInputs) GetImpl() isOnlineQueryInputs_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *OnlineQueryInputs) GetScalarInputs() *OnlineQueryInputs_ScalarInputs {
	if x, ok := x.GetImpl().(*OnlineQueryInputs_ScalarInputs_); ok {
		return x.ScalarInputs
	}
	return nil
}

func (x *OnlineQueryInputs) GetListInputs() *OnlineQueryInputs_ListInputs {
	if x, ok := x.GetImpl().(*OnlineQueryInputs_ListInputs_); ok {
		return x.ListInputs
	}
	return nil
}

func (x *OnlineQueryInputs) GetFeatherInputs() *FeatherData {
	if x, ok := x.GetImpl().(*OnlineQueryInputs_FeatherInputs); ok {
		return x.FeatherInputs
	}
	return nil
}

type isOnlineQueryInputs_Impl interface {
	isOnlineQueryInputs_Impl()
}

type OnlineQueryInputs_ScalarInputs_ struct {
	ScalarInputs *OnlineQueryInputs_ScalarInputs `protobuf:"bytes,1,opt,name=scalar_inputs,json=scalarInputs,proto3,oneof"`
}

type OnlineQueryInputs_ListInputs_ struct {
	ListInputs *OnlineQueryInputs_ListInputs `protobuf:"bytes,2,opt,name=list_inputs,json=listInputs,proto3,oneof"` // for query_many
}

type OnlineQueryInputs_FeatherInputs struct {
	FeatherInputs *FeatherData `protobuf:"bytes,3,opt,name=feather_inputs,json=featherInputs,proto3,oneof"` // for query_bulk
}

func (*OnlineQueryInputs_ScalarInputs_) isOnlineQueryInputs_Impl() {}

func (*OnlineQueryInputs_ListInputs_) isOnlineQueryInputs_Impl() {}

func (*OnlineQueryInputs_FeatherInputs) isOnlineQueryInputs_Impl() {}

type OnlineQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs          *OnlineQueryInputs          `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs         []string                    `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Now             *timestamppb.Timestamp      `protobuf:"bytes,3,opt,name=now,proto3,oneof" json:"now,omitempty"`
	Staleness       map[string]string           `protobuf:"bytes,4,rep,name=staleness,proto3" json:"staleness,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context         *OnlineQueryContext         `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	ResponseOptions *OnlineQueryResponseOptions `protobuf:"bytes,6,opt,name=response_options,json=responseOptions,proto3" json:"response_options,omitempty"`
}

func (x *OnlineQueryRequest) Reset() {
	*x = OnlineQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryRequest) ProtoMessage() {}

func (x *OnlineQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryRequest.ProtoReflect.Descriptor instead.
func (*OnlineQueryRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{12}
}

func (x *OnlineQueryRequest) GetInputs() *OnlineQueryInputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *OnlineQueryRequest) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *OnlineQueryRequest) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *OnlineQueryRequest) GetStaleness() map[string]string {
	if x != nil {
		return x.Staleness
	}
	return nil
}

func (x *OnlineQueryRequest) GetContext() *OnlineQueryContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *OnlineQueryRequest) GetResponseOptions() *OnlineQueryResponseOptions {
	if x != nil {
		return x.ResponseOptions
	}
	return nil
}

type OnlineQueryFeatherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputsFeather   []byte                      `protobuf:"bytes,1,opt,name=inputs_feather,json=inputsFeather,proto3" json:"inputs_feather,omitempty"`
	Outputs         []string                    `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Now             *timestamppb.Timestamp      `protobuf:"bytes,3,opt,name=now,proto3,oneof" json:"now,omitempty"`
	Staleness       map[string]string           `protobuf:"bytes,4,rep,name=staleness,proto3" json:"staleness,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context         *OnlineQueryContext         `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	ResponseOptions *OnlineQueryResponseOptions `protobuf:"bytes,6,opt,name=response_options,json=responseOptions,proto3" json:"response_options,omitempty"`
}

func (x *OnlineQueryFeatherRequest) Reset() {
	*x = OnlineQueryFeatherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryFeatherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryFeatherRequest) ProtoMessage() {}

func (x *OnlineQueryFeatherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryFeatherRequest.ProtoReflect.Descriptor instead.
func (*OnlineQueryFeatherRequest) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{13}
}

func (x *OnlineQueryFeatherRequest) GetInputsFeather() []byte {
	if x != nil {
		return x.InputsFeather
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetStaleness() map[string]string {
	if x != nil {
		return x.Staleness
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetContext() *OnlineQueryContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *OnlineQueryFeatherRequest) GetResponseOptions() *OnlineQueryResponseOptions {
	if x != nil {
		return x.ResponseOptions
	}
	return nil
}

type OnlineQueryFeatherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         []*FeatherData       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Errors       []*OnlineQueryError  `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	ResponseMeta *OnlineQueryMetadata `protobuf:"bytes,3,opt,name=response_meta,json=responseMeta,proto3" json:"response_meta,omitempty"`
}

func (x *OnlineQueryFeatherResponse) Reset() {
	*x = OnlineQueryFeatherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryFeatherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryFeatherResponse) ProtoMessage() {}

func (x *OnlineQueryFeatherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryFeatherResponse.ProtoReflect.Descriptor instead.
func (*OnlineQueryFeatherResponse) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{14}
}

func (x *OnlineQueryFeatherResponse) GetData() []*FeatherData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *OnlineQueryFeatherResponse) GetErrors() []*OnlineQueryError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *OnlineQueryFeatherResponse) GetResponseMeta() *OnlineQueryMetadata {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type OnlineQueryMetadata_QueryExplainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnlineQueryMetadata_QueryExplainInfo) Reset() {
	*x = OnlineQueryMetadata_QueryExplainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryMetadata_QueryExplainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryMetadata_QueryExplainInfo) ProtoMessage() {}

func (x *OnlineQueryMetadata_QueryExplainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryMetadata_QueryExplainInfo.ProtoReflect.Descriptor instead.
func (*OnlineQueryMetadata_QueryExplainInfo) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{8, 0}
}

type OnlineQueryInputs_ScalarInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScalarInputs map[string]*structpb.Value `protobuf:"bytes,1,rep,name=scalar_inputs,json=scalarInputs,proto3" json:"scalar_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OnlineQueryInputs_ScalarInputs) Reset() {
	*x = OnlineQueryInputs_ScalarInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryInputs_ScalarInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryInputs_ScalarInputs) ProtoMessage() {}

func (x *OnlineQueryInputs_ScalarInputs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryInputs_ScalarInputs.ProtoReflect.Descriptor instead.
func (*OnlineQueryInputs_ScalarInputs) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{11, 0}
}

func (x *OnlineQueryInputs_ScalarInputs) GetScalarInputs() map[string]*structpb.Value {
	if x != nil {
		return x.ScalarInputs
	}
	return nil
}

type OnlineQueryInputs_ListInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListInputs map[string]*structpb.ListValue `protobuf:"bytes,1,rep,name=list_inputs,json=listInputs,proto3" json:"list_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OnlineQueryInputs_ListInputs) Reset() {
	*x = OnlineQueryInputs_ListInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chalk_common_v1_online_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineQueryInputs_ListInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineQueryInputs_ListInputs) ProtoMessage() {}

func (x *OnlineQueryInputs_ListInputs) ProtoReflect() protoreflect.Message {
	mi := &file_chalk_common_v1_online_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineQueryInputs_ListInputs.ProtoReflect.Descriptor instead.
func (*OnlineQueryInputs_ListInputs) Descriptor() ([]byte, []int) {
	return file_chalk_common_v1_online_query_proto_rawDescGZIP(), []int{11, 1}
}

func (x *OnlineQueryInputs_ListInputs) GetListInputs() map[string]*structpb.ListValue {
	if x != nil {
		return x.ListInputs
	}
	return nil
}

var File_chalk_common_v1_online_query_proto protoreflect.FileDescriptor

var file_chalk_common_v1_online_query_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x61, 0x72, 0x72,
	0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x5f, 0x66, 0x71, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x46, 0x71, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64,
	0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x55, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x6c, 0x6b, 0x2e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x4d, 0x0a,
	0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa8, 0x02, 0x0a,
	0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc7, 0x03,
	0x0a, 0x13, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5c, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x1a, 0x12, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x13, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xc7, 0x02,
	0x0a, 0x1a, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa8, 0x05, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x56, 0x0a,
	0x0d, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0d, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0xcf,
	0x01, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x66, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x57, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xc7, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x5e, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a,
	0x59, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6d,
	0x70, 0x6c, 0x22, 0xcc, 0x03, 0x0a, 0x12, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x6c,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x6f,
	0x77, 0x22, 0xc5, 0x03, 0x0a, 0x19, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x46,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x31, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x6f, 0x77, 0x22, 0xd4, 0x01, 0x0a, 0x1a, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61,
	0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0xc9, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x61,
	0x69, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6b, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68, 0x61,
	0x6c, 0x6b, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6b,
	0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chalk_common_v1_online_query_proto_rawDescOnce sync.Once
	file_chalk_common_v1_online_query_proto_rawDescData = file_chalk_common_v1_online_query_proto_rawDesc
)

func file_chalk_common_v1_online_query_proto_rawDescGZIP() []byte {
	file_chalk_common_v1_online_query_proto_rawDescOnce.Do(func() {
		file_chalk_common_v1_online_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_chalk_common_v1_online_query_proto_rawDescData)
	})
	return file_chalk_common_v1_online_query_proto_rawDescData
}

var file_chalk_common_v1_online_query_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_chalk_common_v1_online_query_proto_goTypes = []interface{}{
	(*FeatureMeta)(nil),                          // 0: chalk.common.v1.FeatureMeta
	(*FeatherMeta)(nil),                          // 1: chalk.common.v1.FeatherMeta
	(*FeatherData)(nil),                          // 2: chalk.common.v1.FeatherData
	(*OnlineQueryResult)(nil),                    // 3: chalk.common.v1.OnlineQueryResult
	(*FeatureResult)(nil),                        // 4: chalk.common.v1.FeatureResult
	(*FeatureResultList)(nil),                    // 5: chalk.common.v1.FeatureResultList
	(*OnlineQueryContext)(nil),                   // 6: chalk.common.v1.OnlineQueryContext
	(*OnlineQueryError)(nil),                     // 7: chalk.common.v1.OnlineQueryError
	(*OnlineQueryMetadata)(nil),                  // 8: chalk.common.v1.OnlineQueryMetadata
	(*OnlineQueryResponse)(nil),                  // 9: chalk.common.v1.OnlineQueryResponse
	(*OnlineQueryResponseOptions)(nil),           // 10: chalk.common.v1.OnlineQueryResponseOptions
	(*OnlineQueryInputs)(nil),                    // 11: chalk.common.v1.OnlineQueryInputs
	(*OnlineQueryRequest)(nil),                   // 12: chalk.common.v1.OnlineQueryRequest
	(*OnlineQueryFeatherRequest)(nil),            // 13: chalk.common.v1.OnlineQueryFeatherRequest
	(*OnlineQueryFeatherResponse)(nil),           // 14: chalk.common.v1.OnlineQueryFeatherResponse
	(*OnlineQueryMetadata_QueryExplainInfo)(nil), // 15: chalk.common.v1.OnlineQueryMetadata.QueryExplainInfo
	(*OnlineQueryInputs_ScalarInputs)(nil),       // 16: chalk.common.v1.OnlineQueryInputs.ScalarInputs
	(*OnlineQueryInputs_ListInputs)(nil),         // 17: chalk.common.v1.OnlineQueryInputs.ListInputs
	nil,                                          // 18: chalk.common.v1.OnlineQueryInputs.ScalarInputs.ScalarInputsEntry
	nil,                                          // 19: chalk.common.v1.OnlineQueryInputs.ListInputs.ListInputsEntry
	nil,                                          // 20: chalk.common.v1.OnlineQueryRequest.StalenessEntry
	nil,                                          // 21: chalk.common.v1.OnlineQueryFeatherRequest.StalenessEntry
	(v1.FeatherCompression)(0),                   // 22: chalk.arrow.v1.FeatherCompression
	(*structpb.Value)(nil),                       // 23: google.protobuf.Value
	(*timestamppb.Timestamp)(nil),                // 24: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                  // 25: google.protobuf.Duration
	(*structpb.ListValue)(nil),                   // 26: google.protobuf.ListValue
}
var file_chalk_common_v1_online_query_proto_depIdxs = []int32{
	22, // 0: chalk.common.v1.FeatherMeta.response_compression:type_name -> chalk.arrow.v1.FeatherCompression
	1,  // 1: chalk.common.v1.FeatherData.meta:type_name -> chalk.common.v1.FeatherMeta
	5,  // 2: chalk.common.v1.OnlineQueryResult.rows:type_name -> chalk.common.v1.FeatureResultList
	2,  // 3: chalk.common.v1.OnlineQueryResult.feather:type_name -> chalk.common.v1.FeatherData
	23, // 4: chalk.common.v1.FeatureResult.value:type_name -> google.protobuf.Value
	24, // 5: chalk.common.v1.FeatureResult.ts:type_name -> google.protobuf.Timestamp
	0,  // 6: chalk.common.v1.FeatureResult.meta:type_name -> chalk.common.v1.FeatureMeta
	4,  // 7: chalk.common.v1.FeatureResultList.results:type_name -> chalk.common.v1.FeatureResult
	25, // 8: chalk.common.v1.OnlineQueryMetadata.execution_duration:type_name -> google.protobuf.Duration
	24, // 9: chalk.common.v1.OnlineQueryMetadata.query_timestamp:type_name -> google.protobuf.Timestamp
	15, // 10: chalk.common.v1.OnlineQueryMetadata.explain_output:type_name -> chalk.common.v1.OnlineQueryMetadata.QueryExplainInfo
	3,  // 11: chalk.common.v1.OnlineQueryResponse.data:type_name -> chalk.common.v1.OnlineQueryResult
	7,  // 12: chalk.common.v1.OnlineQueryResponse.errors:type_name -> chalk.common.v1.OnlineQueryError
	8,  // 13: chalk.common.v1.OnlineQueryResponse.response_meta:type_name -> chalk.common.v1.OnlineQueryMetadata
	16, // 14: chalk.common.v1.OnlineQueryInputs.scalar_inputs:type_name -> chalk.common.v1.OnlineQueryInputs.ScalarInputs
	17, // 15: chalk.common.v1.OnlineQueryInputs.list_inputs:type_name -> chalk.common.v1.OnlineQueryInputs.ListInputs
	2,  // 16: chalk.common.v1.OnlineQueryInputs.feather_inputs:type_name -> chalk.common.v1.FeatherData
	11, // 17: chalk.common.v1.OnlineQueryRequest.inputs:type_name -> chalk.common.v1.OnlineQueryInputs
	24, // 18: chalk.common.v1.OnlineQueryRequest.now:type_name -> google.protobuf.Timestamp
	20, // 19: chalk.common.v1.OnlineQueryRequest.staleness:type_name -> chalk.common.v1.OnlineQueryRequest.StalenessEntry
	6,  // 20: chalk.common.v1.OnlineQueryRequest.context:type_name -> chalk.common.v1.OnlineQueryContext
	10, // 21: chalk.common.v1.OnlineQueryRequest.response_options:type_name -> chalk.common.v1.OnlineQueryResponseOptions
	24, // 22: chalk.common.v1.OnlineQueryFeatherRequest.now:type_name -> google.protobuf.Timestamp
	21, // 23: chalk.common.v1.OnlineQueryFeatherRequest.staleness:type_name -> chalk.common.v1.OnlineQueryFeatherRequest.StalenessEntry
	6,  // 24: chalk.common.v1.OnlineQueryFeatherRequest.context:type_name -> chalk.common.v1.OnlineQueryContext
	10, // 25: chalk.common.v1.OnlineQueryFeatherRequest.response_options:type_name -> chalk.common.v1.OnlineQueryResponseOptions
	2,  // 26: chalk.common.v1.OnlineQueryFeatherResponse.data:type_name -> chalk.common.v1.FeatherData
	7,  // 27: chalk.common.v1.OnlineQueryFeatherResponse.errors:type_name -> chalk.common.v1.OnlineQueryError
	8,  // 28: chalk.common.v1.OnlineQueryFeatherResponse.response_meta:type_name -> chalk.common.v1.OnlineQueryMetadata
	18, // 29: chalk.common.v1.OnlineQueryInputs.ScalarInputs.scalar_inputs:type_name -> chalk.common.v1.OnlineQueryInputs.ScalarInputs.ScalarInputsEntry
	19, // 30: chalk.common.v1.OnlineQueryInputs.ListInputs.list_inputs:type_name -> chalk.common.v1.OnlineQueryInputs.ListInputs.ListInputsEntry
	23, // 31: chalk.common.v1.OnlineQueryInputs.ScalarInputs.ScalarInputsEntry.value:type_name -> google.protobuf.Value
	26, // 32: chalk.common.v1.OnlineQueryInputs.ListInputs.ListInputsEntry.value:type_name -> google.protobuf.ListValue
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_chalk_common_v1_online_query_proto_init() }
func file_chalk_common_v1_online_query_proto_init() {
	if File_chalk_common_v1_online_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chalk_common_v1_online_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatherMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryResponseOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryFeatherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryFeatherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryMetadata_QueryExplainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryInputs_ScalarInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chalk_common_v1_online_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineQueryInputs_ListInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chalk_common_v1_online_query_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_chalk_common_v1_online_query_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OnlineQueryResult_Rows)(nil),
		(*OnlineQueryResult_Feather)(nil),
	}
	file_chalk_common_v1_online_query_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_chalk_common_v1_online_query_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_chalk_common_v1_online_query_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*OnlineQueryInputs_ScalarInputs_)(nil),
		(*OnlineQueryInputs_ListInputs_)(nil),
		(*OnlineQueryInputs_FeatherInputs)(nil),
	}
	file_chalk_common_v1_online_query_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_chalk_common_v1_online_query_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chalk_common_v1_online_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chalk_common_v1_online_query_proto_goTypes,
		DependencyIndexes: file_chalk_common_v1_online_query_proto_depIdxs,
		MessageInfos:      file_chalk_common_v1_online_query_proto_msgTypes,
	}.Build()
	File_chalk_common_v1_online_query_proto = out.File
	file_chalk_common_v1_online_query_proto_rawDesc = nil
	file_chalk_common_v1_online_query_proto_goTypes = nil
	file_chalk_common_v1_online_query_proto_depIdxs = nil
}
